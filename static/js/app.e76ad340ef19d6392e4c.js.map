{"version":3,"sources":["webpack:///./src/components/layerData/layerData.json","webpack:///./src/App.vue?dfac","webpack:///./src/App.vue","webpack:///src/App.vue","webpack:///src/components/Tree.vue","webpack:///./src/components/Tree.vue?2180","webpack:///./src/components/Tree.vue","webpack:///src/components/Mountain.vue","webpack:///./src/components/Mountain.vue?fbfa","webpack:///./src/components/Mountain.vue","webpack:///src/components/Seismic.vue","webpack:///./src/components/Seismic.vue?0728","webpack:///./src/components/three.module.js","webpack:///./src/components/Seismic.vue","webpack:///src/components/Intersection.vue","webpack:///./src/components/Intersection.vue?ce60","webpack:///./src/components/Intersection.vue","webpack:///src/components/Layer.vue","webpack:///./src/components/Layer.vue?7465","webpack:///./src/components/Layer.vue","webpack:///./src/router/index.js","webpack:///./src/main.js"],"names":["module","exports","faces","grid","positions","branch","crossPoint","selectortype_template_index_0_src_App","render","_h","this","$createElement","_c","_self","attrs","id","staticRenderFns","src_App","__webpack_require__","normalizeComponent","name","ssrContext","Tree","data","scene","group","camera","pointLight","ambient","renderer","controls","width","height","options","nodesNumber","edgesNumber","nodesDistance","nodesRadius","imgSize","randomSize","color","background","isLightFollowCamera","divisions","nodes","edges","methods","init","initThree","initScene","initCamera","initLight","initObject","initGUI","addListener","window","innerWidth","innerHeight","devicePixelRatio","three_module","antialias","setPixelRatio","setSize","setClearColor","$refs","container","appendChild","domElement","position","set","up","x","y","z","lookAt","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","maxPolarAngle","Math","PI","add","length","source","floor","random","target","push","drawLine","drawNodes","initAxis","console","log","folderGeometry","dat_gui_module","addFolder","_this","onChange","updateScene","addColor","children","material","onBgChange","open","e","bgcolor","forEach","g","m","randomizeMatrix","matrix","rotation","quaternion","scale","setFromEuler","compose","nodesData","geometry","mesh","i","setMatrixAt","arr","node","edge","vertices","line","clear","lightFollowCamera","update","axisUpdate","requestAnimationFrame","axisHelper","groupAxis","groupxz","groupxy","groupyz","groupTextX","groupTextY","groupTextZ","strX","strY","strZ","geometryXZ","linex","liney","geometryXY","_i","str","geometryYZ","_i2","_i3","textx","makeTextSprite","ceil","fontsize","fontface","texty","textz","center","coverx","coverLine","covery","clone","coverz","message","parameters","undefined","hasOwnProperty","canvas","document","createElement","context","getContext","font","measureText","fillStyle","fillText","texture","needsUpdate","spriteMaterial","map","sizeAttenuation","sprite","copy","meshs","traverse","obj","type","dispose","remove","planeXZ","planeXY","planeYZ","textX","textY","textZ","_z","getSelectObj","mouse","raycaster","clientX","clientWidth","clientY","clientHeight","setFromCamera","intersectObjects","addEventListener","onDocumentMouseMove","onWindowResize","aspect","updateProjectionMatrix","intersectsObjArr","description","descriptionText","d_text","startx","starty","startz","object","instanceId","style","top","pageY","left","pageX","cursor","display","innerHTML","mounted","components_Tree","staticClass","ref","staticStyle","_v","src_components_Tree","Tree_normalizeComponent","Mountain_scene","Mountain","level","limit","loadFile","xhr","XMLHttpRequest","okStatus","location","protocol","overrideMimeType","send","status","responseText","getNumIslands","n","res","a","JSON","parse","stringify_default","b","j","count","row","col","shift","k","v","replace","split","parseFloat","trace","_i4","_j","vBuff","vBuff2","colors","_i5","trace1","trace2","_j2","p1","p2","p3","p4","attribue","Float32Array","attributes","computeVertexNormals","side","vertexColors","geometry2","vertices2","computeFaceNormals","shading","mesh2","lut","Lut","setColorMap","setMax","setMin","colorValue","newcolor","getColor","setXYZ","r","components_Mountain","src_components_Mountain","Mountain_normalizeComponent","Seismic","orbitControls","transformControls","stats","initControls","stats_module","dom","createCube","cubeG","path","urls","maps","load","groupImgPlane","xViewPlaneG","xViewPlaneT","xViewPlaneM","xViewPlane","yViewPlaneG","yViewPlaneT","yViewPlaneM","yViewPlane","rotateX","zViewPlaneG","zViewPlaneT","zViewPlaneM","zViewPlane","rotateY","groupxz_up","groupxy_up","groupyz_up","planeXZ_up","planeXY_up","planeYZ_up","components_Seismic","src_components_Seismic","Seismic_normalizeComponent","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","listener","_listeners","listeners","indexOf","listenerArray","index","splice","event","array","slice","l","call","DEG2RAD","RAD2DEG","_lut","toString","hasRandomUUID","crypto","generateUUID","randomUUID","toUpperCase","d0","d1","d2","d3","clamp","value","min","max","euclideanModulo","lerp","t","isPowerOfTwo","ceilPowerOfTwo","pow","LN2","floorPowerOfTwo","Vector2","arguments","classCallCheck_default","scalar","Error","constructor","w","warn","addVectors","s","subVectors","multiplyScalar","elements","minVal","maxVal","divideScalar","round","sqrt","abs","angle","atan2","distanceToSquared","dx","dy","normalize","alpha","v1","v2","offset","attribute","getX","getY","c","cos","sin","prototype","isVector2","Matrix3","error","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","me","xAxis","yAxis","zAxis","setFromMatrix3Column","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","d","f","h","t11","t12","t13","det","detInv","tmp","matrix4","setFromMatrix4","invert","transpose","tx","ty","sx","sy","cx","cy","theta","fromArray","arrayMax","Infinity","isMatrix3","TYPED_ARRAYS","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float64Array","getTypedArray","buffer","createElementNS","hashString","ch","seed","h1","h2","charCodeAt","imul_default","_canvas","ImageUtils","image","test","src","HTMLCanvasElement","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","_this2","possibleConstructorReturn_default","__proto__","get_prototype_of_default","Object","defineProperty","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","version","onUpdate","isRenderTargetTexture","setUvTransform","meta","isRootObject","textures","output","metadata","generator","wrap","images","url","Array","isArray","isDataTexture","serializeImage","dispatchEvent","uv","applyMatrix3","HTMLImageElement","ImageBitmap","getDataURL","isTexture","Vector4","q","acos","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","_this3","depth","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","extends_default","isWebGLRenderTarget","WebGLMultipleRenderTargets","_this4","il","isWebGLMultipleRenderTargets","WebGLMultisampleRenderTarget","_this5","samples","get_default","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_w","_onChangeCallback","euler","isEuler","order","_order","c1","c2","c3","s1","s2","s3","axis","halfAngle","vFrom","vTo","dot","step","angleTo","slerp","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","u1","sqrt1u1","sqrtu1","u2","u3","callback","qm","slerpQuaternions","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","isQuaternion","Vector3","multiplyVectors","applyQuaternion","_quaternion$4","setFromAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","applyMatrix4","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","matrixWorld","crossVectors","ax","ay","az","bx","by","bz","denominator","lengthSq","planeNormal","_vector$c","projectOnVector","sub","normal","dz","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindricalCoords","setFromMatrixColumn","sz","u","isVector3","Box3","minX","minY","minZ","maxX","maxY","maxZ","points","makeEmpty","expandByPoint","size","halfSize","_vector$b","expandByObject","box","isEmpty","point","vector","addScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box$3","union","sphere","clampPoint","plane","constant","triangle","getCenter","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","getSize","_points","setFromPoints","equals","isBox3","_testAxis","v0","extents","p0","_box$2","_v1$6","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","distanceTo","radiusSum","intersectsSphere","distanceToPoint","deltaLengthSq","expandByScalar","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","directionDistance","distanceSqToPoint","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","b1","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","cross","QdN","transformDirection","Matrix4","n14","n24","n34","n41","n42","n43","n44","scaleX","_v1$5","scaleY","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","_zero","_one","eye","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","yx","zx","zy","x2","y2","z2","wx","wy","wz","determinant","_m1$2","invSX","invSY","invSZ","setFromRotationMatrix","right","bottom","near","far","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","makeRotationFromQuaternion","newOrder","setFromQuaternion","optionalResult","RotationOrders","Layers","mask","channel","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","_this6","parent","DefaultUp","_onChange","define_properties_default","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","updateMatrix","premultiply","decompose","multiply","rotateOnAxis","distance","translateOnAxis","setFromMatrixPosition","isCamera","isLight","extractRotation","isObject3D","getObjectByProperty","traverseVisible","traverseAncestors","force","updateMatrixWorld","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","element","toJSON","toArray","isInstancedMesh","instanceMatrix","instanceColor","isScene","isColor","environment","isMesh","isLine","isPoints","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","animation","extractFromCache","cache","values","key","recursive","child","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","i0","i1","i2","fromBufferAttribute","getNormal","setFromCoplanarPoints","getBarycoord","uv1","uv2","uv3","getUV","containsPoint","isFrontFacing","intersectsTriangle","d4","vc","addScaledVector","d5","d6","vb","va","denom","targetLengthSq","dot00","dot01","dot02","dot11","dot12","invDenom","materialId","Material","_this7","fog","blending","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","toneMapped","_alphaTest","onBeforeCompile","newValue","currentValue","flatShading","isRoot","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","linewidth","dashSize","gapSize","alphaTest","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","srcPlanes","dstPlanes","isMaterial","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","handleAlpha","string","exec","components","parseInt","setHSL","charAt","setColorName","toLowerCase","gammaFactor","safeInverse","copyGammaToLinear","copyLinearToGamma","copySRGBToLinear","copyLinearToSRGB","hue","saturation","lightness","delta","getHSL","color1","color2","normalized","NAMES","MeshBasicMaterial","_this8","setValues","isMeshBasicMaterial","_vector$9","_vector2$1","BufferAttribute","itemSize","TypeError","usage","updateRange","index1","index2","vectors","setXY","applyNormalMatrix","onUploadCallback","isBufferAttribute","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Uint16BufferAttribute","Uint32BufferAttribute","Int32BufferAttribute","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","_id","Float64BufferAttribute","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","BufferGeometry","_this19","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","start","materialIndex","getNormalMatrix","tangent","computeBoundingSphere","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","negate","translate","setAttribute","morphAttributesPosition","isGLBufferAttribute","setFromBufferAttribute","morphAttribute","isNaN","jl","indices","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","tmp2","n2","handleVertex","isFinite","positionAttribute","getAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","isBufferGeometry","attributeArray1","attribute2","attributeArray2","attributeOffset","convertBufferAttribute","array2","isInterleavedBufferAttribute","stride","newAttribute","morphArray","addGroup","keys_default","hasMorphAttributes","attributeArray","setIndex","assign_default","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","Mesh","_this20","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","keys","ml","String","morphTargets","intersects","intersectsBox","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","intersectTriangle","checkIntersection","BoxGeometry","widthSegments","heightSegments","depthSegments","_this21","scope","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","merge","default_vertex","default_fragment","ShaderMaterial","_this22","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","isShaderMaterial","Camera","_this23","PerspectiveCamera","fov","_this24","zoom","focus","view","filmGauge","filmOffset","focalLength","vExtentSlope","getFilmHeight","atan","fullWidth","fullHeight","enabled","offsetX","offsetY","skew","getFilmWidth","makePerspective","isPerspectiveCamera","CubeCamera","renderTarget","_this25","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","_children","slicedToArray_default","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_this26","isCubeTexture","WebGLCubeRenderTarget","dummy","is_integer_default","_this27","_needsFlipEnvMap","shader","tEquirect","currentMinFilter","stencil","_vector1","_vector2","_normalMatrix","Plane","setFromNormalAndCoplanarPoint","inverseNormalLength","startSign","endSign","end","intersectsPlane","optionalNormalMatrix","referencePoint","coplanarPoint","isPlane","_sphere$2","_vector$7","Frustum","p5","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","stop","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","weak_map_default","get","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","_this28","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","output_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_vert","background_frag","cube_vert","cube_frag","depth_vert","depth_frag","distanceRGBA_vert","distanceRGBA_frag","equirect_vert","equirect_frag","linedashed_vert","linedashed_frag","meshbasic_vert","meshbasic_frag","meshlambert_vert","meshlambert_frag","meshmatcap_vert","meshmatcap_frag","meshnormal_vert","meshnormal_frag","meshphong_vert","meshphong_frag","meshphysical_vert","meshphysical_frag","meshtoon_vert","meshtoon_frag","points_vert","points_frag","shadow_vert","shadow_frag","sprite_vert","sprite_frag","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","ior","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBindingStates","maxVertexAttributes","getParameter","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","vertexAttribIPointer","reset","resetDefaultState","setup","updateBuffers","state","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","locationSize","_maxInstanceCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","physical","sheenColorMap","sheenRoughnessMap","transmissionSamplerSize","transmissionSamplerMap","OrthographicCamera","_this29","scaleW","scaleH","makeOrthographic","isOrthographicCamera","RawShaderMaterial","_this30","isRawShaderMaterial","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","defineProperty_default","_ENCODINGS","_flatCamera","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","maxSamples","weights","poleAxis","_renderer","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","outputEncoding","_equirectShader","_cubemapShader","_compileMaterial","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","cubemap","_getCubemapShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","params","_isLDR","_createRenderTarget","tmpMesh","compile","cubeCamera","upSign","forwardSign","originalAutoClear","autoClear","toneMapping","getClearColor","backgroundMaterial","backgroundBox","useSolidColor","uniform","_setEncoding","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","sum","weight","exp","outputSize","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","onTextureDispose","removeEventListener","cubemapUV","isEquirectMap","isCubeMap","has","isCubeTextureComplete","fromEquirectangular","fromCubemap","DataTexture2DArray","_this31","wrapR","numericalSort","absNumericalSort","denormalize","morph","isDataTexture2DArray","DataTexture3D","_this32","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","copyArray","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","unit","safeSetTexture2D","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","uniformObject","parseUniform","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","getShaderParameter","errors","getShaderInfoLog","trim","lines","join","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","logarithmicDepthBuffer","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","morphNormals","morphTargetsCount","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMappingName","getToneMappingFunction","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","specularColorMapEncoding","sheenColorMapEncoding","lightMapEncoding","depthPacking","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","cachedUniforms","getUniforms","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","cubemaps","cubeuvmaps","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","bones","nVertexUniforms","nVertexMatrices","getMaxBones","getMaxPrecision","useAlphaTest","useClearcoat","isFogExp2","directional","spot","rectArea","hemi","numPlanes","numIntersection","shadowMap","customProgramCacheKey","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","getNextRenderItem","renderItem","materialProperties","unshift","finish","sort","customOpaqueSort","customTransparentSort","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","shadowCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","scaleFactor","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","viewMatrix","identity","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","_this33","isMeshDepthMaterial","_this34","isMeshDistanceMaterial","vertex","fragment","WebGLShadowMap","_objects","_capabilities","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterial","_distanceMaterial","_materialCache","_maxTextureSize","maxTextureSize","0","1","2","shadowMaterialVertical","VSM_SAMPLES","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","blurSamples","mapPass","renderBufferDirect","getDepthMaterial","result","customMaterial","customDistanceMaterial","customDepthMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","intersectsObject","kl","depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","maxTextures","maxCubemapSize","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","isPowerOfTwo$1","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2_default","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","uploadCubeTexture","wrappingToGL","filterToGL","textureType","texParameteri","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","unbindTexture","glTextureType","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","ArrayCamera","_this35","cameras","isArrayCamera","Group","_this36","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","joints","inputState","pinching","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","session","visibilityState","getPose","targetRaySpace","transform","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","done","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","return","indexTip","thumbTip","distanceToPinch","handedness","gripSpace","WebXRManager","_this37","framebufferScaleFactor","referenceSpaceType","pose","glBinding","glFramebuffer","glProjLayer","glBaseLayer","glMultisampledFramebuffer","glColorRenderbuffer","glDepthRenderbuffer","xrFrame","depthStyle","clearStyle","controllers","inputSourcesMap","map_default","cameraL","enable","cameraR","cameraVR","_ref","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","onSessionEnd","disconnect","bindXRFramebuffer","isPresenting","onInputSourcesChange","inputSources","removed","added","cameraAutoUpdate","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getBaseLayer","getBinding","getFrame","getSession","setSession","asyncToGenerator_default","regenerator_default","mark","_callee","layerInit","_layerInit","depthFormat","projectionlayerInit","_context5","prev","getContextAttributes","xrCompatible","makeXRCompatible","renderState","XRWebGLLayer","updateRenderState","baseLayer","WebGLRenderingContext","colorFormat","XRWebGLBinding","createProjectionLayer","textureWidth","textureHeight","requestReferenceSpace","sent","_x121","apply","cameraLPos","cameraRPos","updateCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","translateX","translateZ","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","getCamera","getFoveation","fixedFoveation","setFoveation","foveation","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","glSubImage","getViewSubImage","depthStencilTexture","colorTexture","invalidateFramebuffer","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","getShaderPrecisionFormat","rangeMin","rangeMax","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","currentDepthMask","currentDepthFunc","currentDepthClear","disable","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","scissorParam","viewportParam","currentScissor","currentViewport","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","calls","triangles","autoReset","mode","instanceCount","mapTextureMapping","fromEquirectangularTexture","wireframeAttributes","onGeometryDispose","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","hasEventListener","influencesList","morphTextures","workInfluences","objectInfluences","numberOfMorphTargets","entry","hasMorphNormals","numberOfVertexData","vertexDataStride","morphTarget","morphNormal","morphInfluencesSum","morphBaseInfluence","influences","max_safe_integer_default","hasAttribute","deleteAttribute","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","useCache","nGlobal","lGlobal","clippingState","lists","renderCallDepth","list","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","getClearAlpha","setClearAlpha","renderList","forceClear","environmentBlendMode","onBeforeRender","copyPosition","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","releaseMaterialProgramReferences","deallocateMaterial","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","needsProgramChange","needsLights","lightsStateVersion","getProgram","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","boneTexture","computeBoneTexture","boneTextureSize","uniformsList","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","renderScene","opaqueObjects","transmissiveObjects","transparentObjects","needsAntialias","renderTargetType","currentToneMapping","renderObjects","renderTransmissionPass","onAfterRender","programCacheKey","updateCommonMaterialProperties","onBuild","materialNeedsLights","progUniforms","setFromProjectionMatrix","projectObject","isLOD","intersectsSprite","camera2","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","checkFramebufferStatus","readPixels","copyFramebufferToTexture","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","texSubImage3D","compressedTexSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","isWebGLRenderer","FogExp2","Fog","Scene","_this39","InterleavedBuffer","arrayBuffers","_uuid","ib","setUsage","isInterleavedBuffer","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_this40","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","_this41","float32Array","setFromMatrixScale","transformVertex","intersect","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","_this42","_currentLevel","levels","addLevel","getObjectForDistance","raycast","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","SkinnedMesh","_this43","bindMatrixInverse","calculateInverses","skinWeight","manhattanLength","setXYZW","skinIndex","getComponent","boneIndex","boneInverses","Bone","_this44","isBone","DataTexture","_this45","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","inverse","bone","json","boneInverse","InstancedBufferAttribute","_this46","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","_this47","raycastTimes","getMatrixAt","_this48","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","Line","_this49","lineDistances","threshold","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distanceSqToSegment","_start","_end","LineSegments","_this50","LineLoop","_this51","_this52","_inverseMatrix","_ray","_sphere","_position$2","Points","_this53","testPoint","rayPointDistanceSq","intersectPoint","closestPointToPoint","distanceToRay","VideoTexture","video","_this54","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","_this55","CanvasTexture","_this56","isCanvasTexture","DepthTexture","_this57","CircleGeometry","segments","thetaStart","thetaLength","_this58","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","_this59","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","_this60","PolyhedronGeometry","_this61","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","details","DodecahedronGeometry","_this62","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","_this63","thresholdDot","indexAttr","getIndex","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Curve","arcLengthDivisions","optionalTarget","getUtoTmapping","getPoint","getPointAt","lengths","getLengths","cacheArcLengths","current","last","arcLengths","targetArcLength","low","high","comparison","lengthBefore","t2","pt1","pt2","getTangent","closed","binormals","vec","mat","getTangentAt","Number","MAX_VALUE","tz","epsilon_default","makeRotationAxis","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","_this64","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","aRadius","_this65","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","px","py","pz","CatmullRomCurve3","curveType","_this66","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","_this67","isCubicBezierCurve","CubicBezierCurve3","_this68","isCubicBezierCurve3","LineCurve","_this69","isLineCurve","LineCurve3","_this70","isLineCurve3","QuadraticBezierCurve","_this71","isQuadraticBezierCurve","QuadraticBezierCurve3","_this72","isQuadraticBezierCurve3","SplineCurve","_this73","isSplineCurve","Curves","freeze_default","Path","_this75","currentPoint","moveTo","lineTo","curve","curves","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","pts","npts","concat","absarc","absellipse","firstPoint","lastPoint","CurvePath","_this74","autoClose","startPoint","endPoint","getLength","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","getPoints","fromJSON","Shape","_this76","holes","holesPts","getPointsHoles","hole","Earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","invSize","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","a2","Node","b2","an","bp","ShapeUtils","contour","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","_this77","verticesArray","uvArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","isClockWise","reverse","hl","ahole","triangulateShape","scalePt2","pt","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","sign_default","contourMovements","holesMovements","oneHoleMovements","verticesMovements","bs","vert","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","_this78","LatheGeometry","phiStart","phiLength","_this79","inverseSegments","base","n1","OctahedronGeometry","_this80","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","_this81","radiusStep","thetaSegmentLevel","ShapeGeometry","_this82","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","_this83","thetaEnd","verticesRow","uOffset","TetrahedronGeometry","_this84","TorusGeometry","tube","tubularSegments","arc","_this85","TorusKnotGeometry","_this86","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","_this87","frames","P","generateSegment","generateIndices","generateBufferData","WireframeGeometry","_this88","set_default","o","ol","isUniqueEdge","hash1","hash2","Geometries","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","_this89","_this90","STANDARD","_this91","PHYSICAL","_sheen","_clearcoat","_transmission","_this92","_this93","TOON","_this94","_this95","_this96","MATCAP","_this97","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","numTimes","valueStart","multiplyQuaternionsFlat","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","copySampleValue_","CubicInterpolant","_this98","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","getSettings_","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","factoryMethod","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","timeOffset","timeScale","startTime","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","getInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","trackType","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","slerpFlat","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","validate","optimize","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","morphTargetSequence","noLoop","numMorphTargets","objectOrClipArray","clipArray","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","CreateFromMorphTargetSequence","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","promise_default","resolve","reject","loading","FileLoader","_this109","setTimeout","req","Request","headers","Headers","credentials","fetch","then","response","callbacks","reader","body","getReader","contentLength","total","lengthComputable","loaded","ReadableStream","readData","read","_ref2","close","byteLength","ProgressEvent","enqueue","statusText","stream","Response","responseType","arrayBuffer","blob","text","DOMParser","parseFromString","mimeType","catch","ImageLoader","AnimationLoader","setPath","setRequestHeader","setWithCredentials","CompressedTextureLoader","setResponseType","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","removeEventListeners","onImageError","substr","CubeTextureLoader","setCrossOrigin","TextureLoader","DataTextureLoader","texData","Light","_this116","HemisphereLight","_this117","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","_this118","isSpotLightShadow","SpotLight","_this119","power","_lightPositionWorld","_lookTarget","PointLightShadow","_this120","_cubeDirections","_cubeUps","PointLight","_this121","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","_this123","AmbientLight","_this124","RectAreaLight","_this125","SphericalHarmonics3","coeff","shBasis","isSphericalHarmonics3","LightProbe","_this126","MaterialLoader","_this127","getTexture","LoaderUtils","TextDecoder","decode","fromCharCode","decodeURIComponent","escape","lastIndexOf","InstancedBufferGeometry","_this128","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","drawcalls","offsets","TEXTURE_MAPPING","ObjectLoader","extractUrlBase","loadAsync","parseAsync","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","parseImagesAsync","bufferGeometryLoader","setTextures","deserializeImage","loadImage","deserializedImage","_callee4","_context8","abrupt","currentUrl","parseConstant","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","bind","setResourcePath","UVMapping","ImageBitmapLoader","_this131","createImageBitmap","fetchOptions","colorSpaceConversion","imageBitmap","isImageBitmapLoader","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","_this133","sky","ground","isHemisphereLightProbe","AmbientLightProbe","_this134","isAmbientLightProbe","_eyeRight","_eyeLeft","Clock","StereoCamera","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","Date","_position$1","_quaternion$1","_scale$1","_orientation$1","Audio","AudioListener","_this135","gain","createGain","connect","destination","timeDelta","_clock","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","_this136","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","audioNode","mediaElement","createMediaElementSource","mediaStream","createMediaStreamSource","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getOutput","getFilters","setFilters","_position","_quaternion","_scale","_orientation","AudioAnalyser","PositionalAudio","_this137","panner","createPanner","panningModel","refDistance","rolloffFactor","distanceModel","maxDistance","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getByteFrequencyData","getFrequencyData","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accuIndex","currentWeight","mix","weightAdditive","originalValueOffset","getValue","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","findNode","nodeName","_getValue_unbound","_setValue_unbound","targetObject","resolvedProperty","propertyIndex","dest","targetArray","sourceArray","objectName","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","root","isAnimationObjectGroup","matches","results","lastDot","substring","getBoneByName","subTreeNode","searchNodeSubtree","childNode","_getValue_direct","_getValue_array","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","inUse","bindingsPerObject","indicesByUUID","paths","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","lastObject","indicesByPath","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","_isActiveAction","_scheduleFading","fadeOutAction","warp","fadeOut","fadeIn","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","fadeInAction","crossFadeFrom","weightInterpolant","_takeBackControlInterpolant","action","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","_root","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_this138","_initMemoryManager","_accuIndex","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","create","clipUuid","actionsForClip","_actionsByClip","_bindAction","knownActions","_addInactiveAction","_lendBinding","saveOriginalState","_lendAction","restoreOriginalState","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","optionalRoot","clipObject","findByName","existingAction","newAction","nActions","_update","timeInSeconds","actionsToRemove","_removeInactiveAction","Uniform","InstancedInterleavedBuffer","_this139","GLBufferAttribute","Raycaster","coords","unproject","intersectObject","ascSort","Spherical","other","setFromCartesianCoords","Cylindrical","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","clampToLine","startEnd2","closestPointToPointParameter","_vector$3","_vector$2","SpotLightHelper","_this140","cone","coneLength","coneWidth","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","_this141","isSkeletonHelper","PointLightHelper","sphereSize","_this142","_vector$1","_color1","_color2","GridHelper","HemisphereLightHelper","_this143","_this144","_v1","PolarGridHelper","radials","circles","_this145","_v2","_v3","_vector","DirectionalLightHelper","_this146","lightPlane","targetLine","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","_this147","setPoint","_box","_axis","BoxHelper","_this148","setFromObject","Box3Helper","_this149","PlaneHelper","_this150","_lineGeometry","_coneGeometry","AxesHelper","ArrowHelper","headLength","headWidth","_this151","setDirection","setLength","radians","_this152","xAxisColor","yAxisColor","zAxisColor","_floatView","ShapePath","subPaths","currentPath","quadraticCurveTo","bezierCurveTo","splineThru","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","_int32View","val","construct","create_default","fromPoints","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","setRotationFromQuaternion","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateZ","rotateByAxis","makeFrustum","isIntersectionLine","intersectsLine","isIntersectionPlane","getArea","barycoordFromPoint","midpoint","getMidpoint","prototypenormal","getPlane","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","manhattanDistanceTo","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","getObjectByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","setFocalLength","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","clearGroups","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","setBuffer","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","revision","__THREE__","Intersection","layerFile","faultFile","layerData","faultData","line1Data","line2Data","layerName","faultName","line1Name","line2Name","layerMesh","faultMesh","line1Mesh","line2Mesh","gui","layerColor","faultColor","line1Color","line2Color","edgesColor","fault","crossLine1","crossLine2","lookView","cameraType","frontView","verticalView","sideView","activeNode","quit","pywebview","api","showCrossLines","data1","data2","_node","alert","three_module_Vector3","getCrossLines","querySelector","three_module_Vector2","three_module_Raycaster","three_module_Scene","three_module_OrthographicCamera","three_module_PerspectiveCamera","three_module_PointLight","three_module_AmbientLight","three_module_Group","three_module_SphereGeometry","three_module_MeshPhongMaterial","three_module_InstancedMesh","three_module_Matrix4","three_module_Euler","three_module_Quaternion","setColorAt","three_module_Color","three_module_BufferGeometry","three_module_BufferAttribute","three_module_MeshLambertMaterial","three_module_WireframeGeometry","three_module_LineSegments","three_module_Mesh","viewFolder","modeFolder","getColorAt","offsetLeft","three_module_AxesHelper","onBtnLoadData","getObjectURL","ldata","fdata","_node2","createObjcectURL","createOjcectURL","URL","createObjectURL","webkitURL","components_Intersection","_vm","_m","float","on","click","for","src_components_Intersection","Intersection_normalizeComponent","Layer","gridPosition","crossPosition","components_Layer","src_components_Layer","Layer_normalizeComponent","Vue","use","Router","router","routes","component","config","productionTip","el","App","template"],"mappings":"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","file":"static/js/app.e76ad340ef19d6392e4c.js","sourcesContent":["module.exports = {\"faces\":[[0,1,102],[0,101,102],[1,2,103],[1,102,103],[2,3,104],[2,103,104],[3,4,105],[3,104,105],[4,5,106],[4,105,106],[5,6,107],[5,106,107],[6,7,108],[6,107,108],[7,8,109],[7,108,109],[8,9,110],[8,109,110],[9,10,111],[9,110,111],[10,11,112],[10,111,112],[11,12,113],[11,112,113],[14,15,116],[14,115,116],[15,16,117],[15,116,117],[16,17,118],[16,117,118],[17,18,119],[17,118,119],[18,19,120],[18,119,120],[19,20,121],[19,120,121],[20,21,122],[20,121,122],[21,22,123],[21,122,123],[22,23,124],[22,123,124],[23,24,125],[23,124,125],[24,25,126],[24,125,126],[25,26,127],[25,126,127],[26,27,128],[26,127,128],[27,28,129],[27,128,129],[28,29,130],[28,129,130],[29,30,131],[29,130,131],[30,31,132],[30,131,132],[31,32,133],[31,132,133],[32,33,134],[32,133,134],[33,34,135],[33,134,135],[34,35,136],[34,135,136],[35,36,137],[35,136,137],[36,37,138],[36,137,138],[37,38,139],[37,138,139],[38,39,140],[38,139,140],[39,40,141],[39,140,141],[40,41,142],[40,141,142],[41,42,143],[41,142,143],[42,43,144],[42,143,144],[43,44,145],[43,144,145],[57,58,159],[57,158,159],[58,59,160],[58,159,160],[59,60,161],[59,160,161],[60,61,162],[60,161,162],[61,62,163],[61,162,163],[62,63,164],[62,163,164],[63,64,165],[63,164,165],[64,65,166],[64,165,166],[65,66,167],[65,166,167],[66,67,168],[66,167,168],[67,68,169],[67,168,169],[68,69,170],[68,169,170],[69,70,171],[69,170,171],[70,71,172],[70,171,172],[71,72,173],[71,172,173],[72,73,174],[72,173,174],[73,74,175],[73,174,175],[74,75,176],[74,175,176],[75,76,177],[75,176,177],[76,77,178],[76,177,178],[77,78,179],[77,178,179],[78,79,180],[78,179,180],[79,80,181],[79,180,181],[80,81,182],[80,181,182],[83,84,185],[83,184,185],[84,85,186],[84,185,186],[85,86,187],[85,186,187],[86,87,188],[86,187,188],[101,102,203],[101,202,203],[102,103,204],[102,203,204],[103,104,205],[103,204,205],[104,105,206],[104,205,206],[105,106,207],[105,206,207],[106,107,208],[106,207,208],[107,108,209],[107,208,209],[108,109,210],[108,209,210],[109,110,211],[109,210,211],[110,111,212],[110,211,212],[111,112,213],[111,212,213],[112,113,214],[112,213,214],[115,116,217],[115,216,217],[116,117,218],[116,217,218],[117,118,219],[117,218,219],[118,119,220],[118,219,220],[119,120,221],[119,220,221],[120,121,222],[120,221,222],[121,122,223],[121,222,223],[122,123,224],[122,223,224],[123,124,225],[123,224,225],[124,125,226],[124,225,226],[125,126,227],[125,226,227],[126,127,228],[126,227,228],[127,128,229],[127,228,229],[128,129,230],[128,229,230],[129,130,231],[129,230,231],[130,131,232],[130,231,232],[131,132,233],[131,232,233],[132,133,234],[132,233,234],[133,134,235],[133,234,235],[134,135,236],[134,235,236],[135,136,237],[135,236,237],[136,137,238],[136,237,238],[137,138,239],[137,238,239],[138,139,240],[138,239,240],[139,140,241],[139,240,241],[140,141,242],[140,241,242],[141,142,243],[141,242,243],[142,143,244],[142,243,244],[143,144,245],[143,244,245],[144,145,246],[144,245,246],[157,158,259],[157,258,259],[158,159,260],[158,259,260],[159,160,261],[159,260,261],[160,161,262],[160,261,262],[161,162,263],[161,262,263],[162,163,264],[162,263,264],[163,164,265],[163,264,265],[164,165,266],[164,265,266],[165,166,267],[165,266,267],[166,167,268],[166,267,268],[167,168,269],[167,268,269],[168,169,270],[168,269,270],[169,170,271],[169,270,271],[170,171,272],[170,271,272],[171,172,273],[171,272,273],[172,173,274],[172,273,274],[173,174,275],[173,274,275],[174,175,276],[174,275,276],[175,176,277],[175,276,277],[176,177,278],[176,277,278],[177,178,279],[177,278,279],[178,179,280],[178,279,280],[179,180,281],[179,280,281],[180,181,282],[180,281,282],[181,182,283],[181,282,283],[184,185,286],[184,285,286],[185,186,287],[185,286,287],[186,187,288],[186,287,288],[187,188,289],[187,288,289],[188,189,290],[188,289,290],[202,203,304],[202,303,304],[203,204,305],[203,304,305],[204,205,306],[204,305,306],[205,206,307],[205,306,307],[206,207,308],[206,307,308],[207,208,309],[207,308,309],[208,209,310],[208,309,310],[209,210,311],[209,310,311],[210,211,312],[210,311,312],[211,212,313],[211,312,313],[212,213,314],[212,313,314],[213,214,315],[213,314,315],[216,217,318],[216,317,318],[217,218,319],[217,318,319],[218,219,320],[218,319,320],[219,220,321],[219,320,321],[220,221,322],[220,321,322],[221,222,323],[221,322,323],[222,223,324],[222,323,324],[223,224,325],[223,324,325],[224,225,326],[224,325,326],[225,226,327],[225,326,327],[226,227,328],[226,327,328],[227,228,329],[227,328,329],[228,229,330],[228,329,330],[229,230,331],[229,330,331],[230,231,332],[230,331,332],[231,232,333],[231,332,333],[232,233,334],[232,333,334],[233,234,335],[233,334,335],[234,235,336],[234,335,336],[235,236,337],[235,336,337],[236,237,338],[236,337,338],[237,238,339],[237,338,339],[238,239,340],[238,339,340],[239,240,341],[239,340,341],[240,241,342],[240,341,342],[241,242,343],[241,342,343],[242,243,344],[242,343,344],[243,244,345],[243,344,345],[244,245,346],[244,345,346],[245,246,347],[245,346,347],[257,258,359],[257,358,359],[258,259,360],[258,359,360],[259,260,361],[259,360,361],[260,261,362],[260,361,362],[261,262,363],[261,362,363],[262,263,364],[262,363,364],[263,264,365],[263,364,365],[264,265,366],[264,365,366],[265,266,367],[265,366,367],[266,267,368],[266,367,368],[267,268,369],[267,368,369],[268,269,370],[268,369,370],[269,270,371],[269,370,371],[270,271,372],[270,371,372],[271,272,373],[271,372,373],[272,273,374],[272,373,374],[273,274,375],[273,374,375],[274,275,376],[274,375,376],[275,276,377],[275,376,377],[276,277,378],[276,377,378],[277,278,379],[277,378,379],[278,279,380],[278,379,380],[279,280,381],[279,380,381],[280,281,382],[280,381,382],[281,282,383],[281,382,383],[282,283,384],[282,383,384],[285,286,387],[286,287,388],[286,387,388],[287,288,389],[287,388,389],[288,289,390],[288,389,390],[289,290,391],[289,390,391],[303,304,405],[303,404,405],[304,305,406],[304,405,406],[305,306,407],[305,406,407],[306,307,408],[306,407,408],[307,308,409],[307,408,409],[308,309,410],[308,409,410],[309,310,411],[309,410,411],[310,311,412],[310,411,412],[311,312,413],[311,412,413],[312,313,414],[312,413,414],[313,314,415],[313,414,415],[314,315,416],[314,415,416],[317,318,419],[317,418,419],[318,319,420],[318,419,420],[319,320,421],[319,420,421],[320,321,422],[320,421,422],[321,322,423],[321,422,423],[322,323,424],[322,423,424],[323,324,425],[323,424,425],[324,325,426],[324,425,426],[325,326,427],[325,426,427],[326,327,428],[326,427,428],[327,328,429],[327,428,429],[328,329,430],[328,429,430],[329,330,431],[329,430,431],[330,331,432],[330,431,432],[331,332,433],[331,432,433],[332,333,434],[332,433,434],[333,334,435],[333,434,435],[334,335,436],[334,435,436],[335,336,437],[335,436,437],[336,337,438],[336,437,438],[337,338,439],[337,438,439],[338,339,440],[338,439,440],[339,340,441],[339,440,441],[340,341,442],[340,441,442],[341,342,443],[341,442,443],[342,343,444],[342,443,444],[343,344,445],[343,444,445],[344,345,446],[344,445,446],[345,346,447],[345,446,447],[346,347,448],[346,447,448],[358,359,460],[358,459,460],[359,360,461],[359,460,461],[360,361,462],[360,461,462],[361,362,463],[361,462,463],[362,363,464],[362,463,464],[363,364,465],[363,464,465],[364,365,466],[364,465,466],[365,366,467],[365,466,467],[366,367,468],[366,467,468],[367,368,469],[367,468,469],[368,369,470],[368,469,470],[369,370,471],[369,470,471],[370,371,472],[370,471,472],[371,372,473],[371,472,473],[372,373,474],[372,473,474],[373,374,475],[373,474,475],[374,375,476],[374,475,476],[375,376,477],[375,476,477],[376,377,478],[376,477,478],[377,378,479],[377,478,479],[378,379,480],[378,479,480],[379,380,481],[379,480,481],[380,381,482],[380,481,482],[381,382,483],[381,482,483],[382,383,484],[382,483,484],[383,384,485],[383,484,485],[387,388,489],[387,488,489],[388,389,490],[388,489,490],[389,390,491],[389,490,491],[390,391,492],[390,491,492],[404,405,506],[404,505,506],[405,406,507],[405,506,507],[406,407,508],[406,507,508],[407,408,509],[407,508,509],[408,409,510],[408,509,510],[409,410,511],[409,510,511],[410,411,512],[410,511,512],[411,412,513],[411,512,513],[412,413,514],[412,513,514],[413,414,515],[413,514,515],[414,415,516],[414,515,516],[418,419,520],[418,519,520],[419,420,521],[419,520,521],[420,421,522],[420,521,522],[421,422,523],[421,522,523],[422,423,524],[422,523,524],[423,424,525],[423,524,525],[424,425,526],[424,525,526],[425,426,527],[425,526,527],[426,427,528],[426,527,528],[427,428,529],[427,528,529],[428,429,530],[428,529,530],[429,430,531],[429,530,531],[430,431,532],[430,531,532],[431,432,533],[431,532,533],[432,433,534],[432,533,534],[433,434,535],[433,534,535],[434,435,536],[434,535,536],[435,436,537],[435,536,537],[436,437,538],[436,537,538],[437,438,539],[437,538,539],[438,439,540],[438,539,540],[439,440,541],[439,540,541],[440,441,542],[440,541,542],[441,442,543],[441,542,543],[442,443,544],[442,543,544],[443,444,545],[443,544,545],[444,445,546],[444,545,546],[445,446,547],[445,546,547],[446,447,548],[446,547,548],[447,448,549],[447,548,549],[458,459,560],[458,559,560],[459,460,561],[459,560,561],[460,461,562],[460,561,562],[461,462,563],[461,562,563],[462,463,564],[462,563,564],[463,464,565],[463,564,565],[464,465,566],[464,565,566],[465,466,567],[465,566,567],[466,467,568],[466,567,568],[467,468,569],[467,568,569],[468,469,570],[468,569,570],[469,470,571],[469,570,571],[470,471,572],[470,571,572],[471,472,573],[471,572,573],[472,473,574],[472,573,574],[473,474,575],[473,574,575],[474,475,576],[474,575,576],[475,476,577],[475,576,577],[476,477,578],[476,577,578],[477,478,579],[477,578,579],[478,479,580],[478,579,580],[479,480,581],[479,580,581],[480,481,582],[480,581,582],[481,482,583],[481,582,583],[482,483,584],[482,583,584],[483,484,585],[483,584,585],[484,485,586],[484,585,586],[488,489,590],[488,589,590],[489,490,591],[489,590,591],[490,491,592],[490,591,592],[491,492,593],[491,592,593],[492,493,594],[492,593,594],[505,506,607],[505,606,607],[506,507,608],[506,607,608],[507,508,609],[507,608,609],[508,509,610],[508,609,610],[509,510,611],[509,610,611],[510,511,612],[510,611,612],[511,512,613],[511,612,613],[512,513,614],[512,613,614],[513,514,615],[513,614,615],[514,515,616],[514,615,616],[515,516,617],[515,616,617],[518,519,620],[518,619,620],[519,520,621],[519,620,621],[520,521,622],[520,621,622],[521,522,623],[521,622,623],[522,523,624],[522,623,624],[523,524,625],[523,624,625],[524,525,626],[524,625,626],[525,526,627],[525,626,627],[526,527,628],[526,627,628],[527,528,629],[527,628,629],[528,529,630],[528,629,630],[529,530,631],[529,630,631],[530,531,632],[530,631,632],[531,532,633],[531,632,633],[532,533,634],[532,633,634],[533,534,635],[533,634,635],[534,535,636],[534,635,636],[535,536,637],[535,636,637],[536,537,638],[536,637,638],[537,538,639],[537,638,639],[538,539,640],[538,639,640],[539,540,641],[539,640,641],[540,541,642],[540,641,642],[541,542,643],[541,642,643],[542,543,644],[542,643,644],[543,544,645],[543,644,645],[544,545,646],[544,645,646],[545,546,647],[545,646,647],[546,547,648],[546,647,648],[547,548,649],[547,648,649],[548,549,650],[548,649,650],[559,560,661],[559,660,661],[560,561,662],[560,661,662],[561,562,663],[561,662,663],[562,563,664],[562,663,664],[563,564,665],[563,664,665],[564,565,666],[564,665,666],[565,566,667],[565,666,667],[566,567,668],[566,667,668],[567,568,669],[567,668,669],[568,569,670],[568,669,670],[569,570,671],[569,670,671],[570,571,672],[570,671,672],[571,572,673],[571,672,673],[572,573,674],[572,673,674],[573,574,675],[573,674,675],[574,575,676],[574,675,676],[575,576,677],[575,676,677],[576,577,678],[576,677,678],[577,578,679],[577,678,679],[578,579,680],[578,679,680],[579,580,681],[579,680,681],[580,581,682],[580,681,682],[581,582,683],[581,682,683],[582,583,684],[582,683,684],[583,584,685],[583,684,685],[584,585,686],[584,685,686],[585,586,687],[585,686,687],[586,587,688],[586,687,688],[589,590,691],[589,690,691],[590,591,692],[590,691,692],[591,592,693],[591,692,693],[592,593,694],[592,693,694],[593,594,695],[593,694,695],[606,607,708],[606,707,708],[607,608,709],[607,708,709],[608,609,710],[608,709,710],[609,610,711],[609,710,711],[610,611,712],[610,711,712],[611,612,713],[611,712,713],[612,613,714],[612,713,714],[613,614,715],[613,714,715],[614,615,716],[614,715,716],[615,616,717],[615,716,717],[616,617,718],[616,717,718],[619,620,721],[619,720,721],[620,621,722],[620,721,722],[621,622,723],[621,722,723],[622,623,724],[622,723,724],[623,624,725],[623,724,725],[624,625,726],[624,725,726],[625,626,727],[625,726,727],[626,627,728],[626,727,728],[627,628,729],[627,728,729],[628,629,730],[628,729,730],[629,630,731],[629,730,731],[630,631,732],[630,731,732],[631,632,733],[631,732,733],[632,633,734],[632,733,734],[633,634,735],[633,734,735],[634,635,736],[634,735,736],[635,636,737],[635,736,737],[636,637,738],[636,737,738],[637,638,739],[637,738,739],[638,639,740],[638,739,740],[639,640,741],[639,740,741],[640,641,742],[640,741,742],[641,642,743],[641,742,743],[642,643,744],[642,743,744],[643,644,745],[643,744,745],[644,645,746],[644,745,746],[645,646,747],[645,746,747],[646,647,748],[646,747,748],[647,648,749],[647,748,749],[648,649,750],[648,749,750],[649,650,751],[649,750,751],[659,660,761],[659,760,761],[660,661,762],[660,761,762],[661,662,763],[661,762,763],[662,663,764],[662,763,764],[663,664,765],[663,764,765],[664,665,766],[664,765,766],[665,666,767],[665,766,767],[666,667,768],[666,767,768],[667,668,769],[667,768,769],[668,669,770],[668,769,770],[669,670,771],[669,770,771],[670,671,772],[670,771,772],[671,672,773],[671,772,773],[672,673,774],[672,773,774],[673,674,775],[673,774,775],[674,675,776],[674,775,776],[675,676,777],[675,776,777],[676,677,778],[676,777,778],[677,678,779],[677,778,779],[678,679,780],[678,779,780],[679,680,781],[679,780,781],[680,681,782],[680,781,782],[681,682,783],[681,782,783],[682,683,784],[682,783,784],[683,684,785],[683,784,785],[684,685,786],[684,785,786],[685,686,787],[685,786,787],[686,687,788],[686,787,788],[687,688,789],[687,788,789],[690,691,792],[690,791,792],[691,692,793],[691,792,793],[692,693,794],[692,793,794],[693,694,795],[693,794,795],[694,695,796],[694,795,796],[707,708,809],[707,808,809],[708,709,810],[708,809,810],[709,710,811],[709,810,811],[710,711,812],[710,811,812],[711,712,813],[711,812,813],[712,713,814],[712,813,814],[713,714,815],[713,814,815],[714,715,816],[714,815,816],[715,716,817],[715,816,817],[716,717,818],[716,817,818],[717,718,819],[717,818,819],[720,721,822],[720,821,822],[721,722,823],[721,822,823],[722,723,824],[722,823,824],[723,724,825],[723,824,825],[724,725,826],[724,825,826],[725,726,827],[725,826,827],[726,727,828],[726,827,828],[727,728,829],[727,828,829],[728,729,830],[728,829,830],[729,730,831],[729,830,831],[730,731,832],[730,831,832],[731,732,833],[731,832,833],[732,733,834],[732,833,834],[733,734,835],[733,834,835],[734,735,836],[734,835,836],[735,736,837],[735,836,837],[736,737,838],[736,837,838],[737,738,839],[737,838,839],[738,739,840],[738,839,840],[739,740,841],[739,840,841],[740,741,842],[740,841,842],[741,742,843],[741,842,843],[742,743,844],[742,843,844],[743,744,845],[743,844,845],[744,745,846],[744,845,846],[745,746,847],[745,846,847],[746,747,848],[746,847,848],[747,748,849],[747,848,849],[748,749,850],[748,849,850],[749,750,851],[749,850,851],[750,751,852],[750,851,852],[760,761,862],[760,861,862],[761,762,863],[761,862,863],[762,763,864],[762,863,864],[763,764,865],[763,864,865],[764,765,866],[764,865,866],[765,766,867],[765,866,867],[766,767,868],[766,867,868],[767,768,869],[767,868,869],[768,769,870],[768,869,870],[769,770,871],[769,870,871],[770,771,872],[770,871,872],[771,772,873],[771,872,873],[772,773,874],[772,873,874],[773,774,875],[773,874,875],[774,775,876],[774,875,876],[775,776,877],[775,876,877],[776,777,878],[776,877,878],[777,778,879],[777,878,879],[778,779,880],[778,879,880],[779,780,881],[779,880,881],[780,781,882],[780,881,882],[781,782,883],[781,882,883],[782,783,884],[782,883,884],[783,784,885],[783,884,885],[784,785,886],[784,885,886],[785,786,887],[785,886,887],[786,787,888],[786,887,888],[787,788,889],[787,888,889],[788,789,890],[788,889,890],[791,792,893],[791,892,893],[792,793,894],[792,893,894],[793,794,895],[793,894,895],[794,795,896],[794,895,896],[795,796,897],[795,896,897],[796,797,898],[796,897,898],[808,809,910],[808,909,910],[809,810,911],[809,910,911],[810,811,912],[810,911,912],[811,812,913],[811,912,913],[812,813,914],[812,913,914],[813,814,915],[813,914,915],[814,815,916],[814,915,916],[815,816,917],[815,916,917],[816,817,918],[816,917,918],[817,818,919],[817,918,919],[818,819,920],[818,919,920],[821,822,923],[821,922,923],[822,823,924],[822,923,924],[823,824,925],[823,924,925],[824,825,926],[824,925,926],[825,826,927],[825,926,927],[826,827,928],[826,927,928],[827,828,929],[827,928,929],[828,829,930],[828,929,930],[829,830,931],[829,930,931],[830,831,932],[830,931,932],[831,832,933],[831,932,933],[832,833,934],[832,933,934],[833,834,935],[833,934,935],[834,835,936],[834,935,936],[835,836,937],[835,936,937],[836,837,938],[836,937,938],[837,838,939],[837,938,939],[838,839,940],[838,939,940],[839,840,941],[839,940,941],[840,841,942],[840,941,942],[841,842,943],[841,942,943],[842,843,944],[842,943,944],[843,844,945],[843,944,945],[844,845,946],[844,945,946],[845,846,947],[845,946,947],[846,847,948],[846,947,948],[847,848,949],[847,948,949],[848,849,950],[848,949,950],[849,850,951],[849,950,951],[850,851,952],[850,951,952],[851,852,953],[851,952,953],[860,861,962],[860,961,962],[861,862,963],[861,962,963],[862,863,964],[862,963,964],[863,864,965],[863,964,965],[864,865,966],[864,965,966],[865,866,967],[865,966,967],[866,867,968],[866,967,968],[867,868,969],[867,968,969],[868,869,970],[868,969,970],[869,870,971],[869,970,971],[870,871,972],[870,971,972],[871,872,973],[871,972,973],[872,873,974],[872,973,974],[873,874,975],[873,974,975],[874,875,976],[874,975,976],[875,876,977],[875,976,977],[876,877,978],[876,977,978],[877,878,979],[877,978,979],[878,879,980],[878,979,980],[879,880,981],[879,980,981],[880,881,982],[880,981,982],[881,882,983],[881,982,983],[882,883,984],[882,983,984],[883,884,985],[883,984,985],[884,885,986],[884,985,986],[885,886,987],[885,986,987],[886,887,988],[886,987,988],[887,888,989],[887,988,989],[888,889,990],[888,989,990],[889,890,991],[889,990,991],[892,893,994],[893,894,995],[893,994,995],[894,895,996],[894,995,996],[895,896,997],[895,996,997],[896,897,998],[896,997,998],[897,898,999],[897,998,999],[909,910,1011],[909,1010,1011],[910,911,1012],[910,1011,1012],[911,912,1013],[911,1012,1013],[912,913,1014],[912,1013,1014],[913,914,1015],[913,1014,1015],[914,915,1016],[914,1015,1016],[915,916,1017],[915,1016,1017],[916,917,1018],[916,1017,1018],[917,918,1019],[917,1018,1019],[918,919,1020],[918,1019,1020],[919,920,1021],[919,1020,1021],[922,923,1024],[922,1023,1024],[923,924,1025],[923,1024,1025],[924,925,1026],[924,1025,1026],[925,926,1027],[925,1026,1027],[926,927,1028],[926,1027,1028],[927,928,1029],[927,1028,1029],[928,929,1030],[928,1029,1030],[929,930,1031],[929,1030,1031],[930,931,1032],[930,1031,1032],[931,932,1033],[931,1032,1033],[932,933,1034],[932,1033,1034],[933,934,1035],[933,1034,1035],[934,935,1036],[934,1035,1036],[935,936,1037],[935,1036,1037],[936,937,1038],[936,1037,1038],[937,938,1039],[937,1038,1039],[938,939,1040],[938,1039,1040],[939,940,1041],[939,1040,1041],[940,941,1042],[940,1041,1042],[941,942,1043],[941,1042,1043],[942,943,1044],[942,1043,1044],[943,944,1045],[943,1044,1045],[944,945,1046],[944,1045,1046],[945,946,1047],[945,1046,1047],[946,947,1048],[946,1047,1048],[947,948,1049],[947,1048,1049],[948,949,1050],[948,1049,1050],[949,950,1051],[949,1050,1051],[950,951,1052],[950,1051,1052],[951,952,1053],[951,1052,1053],[961,962,1063],[961,1062,1063],[962,963,1064],[962,1063,1064],[963,964,1065],[963,1064,1065],[964,965,1066],[964,1065,1066],[965,966,1067],[965,1066,1067],[966,967,1068],[966,1067,1068],[967,968,1069],[967,1068,1069],[968,969,1070],[968,1069,1070],[969,970,1071],[969,1070,1071],[970,971,1072],[970,1071,1072],[971,972,1073],[971,1072,1073],[972,973,1074],[972,1073,1074],[973,974,1075],[973,1074,1075],[974,975,1076],[974,1075,1076],[975,976,1077],[975,1076,1077],[976,977,1078],[976,1077,1078],[977,978,1079],[977,1078,1079],[978,979,1080],[978,1079,1080],[979,980,1081],[979,1080,1081],[980,981,1082],[980,1081,1082],[981,982,1083],[981,1082,1083],[982,983,1084],[982,1083,1084],[983,984,1085],[983,1084,1085],[984,985,1086],[984,1085,1086],[985,986,1087],[985,1086,1087],[986,987,1088],[986,1087,1088],[987,988,1089],[987,1088,1089],[988,989,1090],[988,1089,1090],[989,990,1091],[989,1090,1091],[990,991,1092],[990,1091,1092],[994,995,1096],[994,1095,1096],[995,996,1097],[995,1096,1097],[996,997,1098],[996,1097,1098],[997,998,1099],[997,1098,1099],[998,999,1100],[998,1099,1100],[1010,1011,1112],[1010,1111,1112],[1011,1012,1113],[1011,1112,1113],[1012,1013,1114],[1012,1113,1114],[1013,1014,1115],[1013,1114,1115],[1014,1015,1116],[1014,1115,1116],[1015,1016,1117],[1015,1116,1117],[1016,1017,1118],[1016,1117,1118],[1017,1018,1119],[1017,1118,1119],[1018,1019,1120],[1018,1119,1120],[1019,1020,1121],[1019,1120,1121],[1020,1021,1122],[1020,1121,1122],[1023,1024,1125],[1023,1124,1125],[1024,1025,1126],[1024,1125,1126],[1025,1026,1127],[1025,1126,1127],[1026,1027,1128],[1026,1127,1128],[1027,1028,1129],[1027,1128,1129],[1028,1029,1130],[1028,1129,1130],[1029,1030,1131],[1029,1130,1131],[1030,1031,1132],[1030,1131,1132],[1031,1032,1133],[1031,1132,1133],[1032,1033,1134],[1032,1133,1134],[1033,1034,1135],[1033,1134,1135],[1034,1035,1136],[1034,1135,1136],[1035,1036,1137],[1035,1136,1137],[1036,1037,1138],[1036,1137,1138],[1037,1038,1139],[1037,1138,1139],[1038,1039,1140],[1038,1139,1140],[1039,1040,1141],[1039,1140,1141],[1040,1041,1142],[1040,1141,1142],[1041,1042,1143],[1041,1142,1143],[1042,1043,1144],[1042,1143,1144],[1043,1044,1145],[1043,1144,1145],[1044,1045,1146],[1044,1145,1146],[1045,1046,1147],[1045,1146,1147],[1046,1047,1148],[1046,1147,1148],[1047,1048,1149],[1047,1148,1149],[1048,1049,1150],[1048,1149,1150],[1049,1050,1151],[1049,1150,1151],[1050,1051,1152],[1050,1151,1152],[1051,1052,1153],[1051,1152,1153],[1052,1053,1154],[1052,1153,1154],[1061,1062,1163],[1061,1162,1163],[1062,1063,1164],[1062,1163,1164],[1063,1064,1165],[1063,1164,1165],[1064,1065,1166],[1064,1165,1166],[1065,1066,1167],[1065,1166,1167],[1066,1067,1168],[1066,1167,1168],[1067,1068,1169],[1067,1168,1169],[1068,1069,1170],[1068,1169,1170],[1069,1070,1171],[1069,1170,1171],[1070,1071,1172],[1070,1171,1172],[1071,1072,1173],[1071,1172,1173],[1072,1073,1174],[1072,1173,1174],[1073,1074,1175],[1073,1174,1175],[1074,1075,1176],[1074,1175,1176],[1075,1076,1177],[1075,1176,1177],[1076,1077,1178],[1076,1177,1178],[1077,1078,1179],[1077,1178,1179],[1078,1079,1180],[1078,1179,1180],[1079,1080,1181],[1079,1180,1181],[1080,1081,1182],[1080,1181,1182],[1081,1082,1183],[1081,1182,1183],[1082,1083,1184],[1082,1183,1184],[1083,1084,1185],[1083,1184,1185],[1084,1085,1186],[1084,1185,1186],[1085,1086,1187],[1085,1186,1187],[1086,1087,1188],[1086,1187,1188],[1087,1088,1189],[1087,1188,1189],[1088,1089,1190],[1088,1189,1190],[1089,1090,1191],[1089,1190,1191],[1090,1091,1192],[1090,1191,1192],[1091,1092,1193],[1091,1192,1193],[1095,1096,1197],[1095,1196,1197],[1096,1097,1198],[1096,1197,1198],[1097,1098,1199],[1097,1198,1199],[1098,1099,1200],[1098,1199,1200],[1099,1100,1201],[1099,1200,1201],[1100,1101,1202],[1100,1201,1202],[1111,1112,1213],[1111,1212,1213],[1112,1113,1214],[1112,1213,1214],[1113,1114,1215],[1113,1214,1215],[1114,1115,1216],[1114,1215,1216],[1115,1116,1217],[1115,1216,1217],[1116,1117,1218],[1116,1217,1218],[1117,1118,1219],[1117,1218,1219],[1118,1119,1220],[1118,1219,1220],[1119,1120,1221],[1119,1220,1221],[1120,1121,1222],[1120,1221,1222],[1121,1122,1223],[1121,1222,1223],[1124,1125,1226],[1124,1225,1226],[1125,1126,1227],[1125,1226,1227],[1126,1127,1228],[1126,1227,1228],[1127,1128,1229],[1127,1228,1229],[1128,1129,1230],[1128,1229,1230],[1129,1130,1231],[1129,1230,1231],[1130,1131,1232],[1130,1231,1232],[1131,1132,1233],[1131,1232,1233],[1132,1133,1234],[1132,1233,1234],[1133,1134,1235],[1133,1234,1235],[1134,1135,1236],[1134,1235,1236],[1135,1136,1237],[1135,1236,1237],[1136,1137,1238],[1136,1237,1238],[1137,1138,1239],[1137,1238,1239],[1138,1139,1240],[1138,1239,1240],[1139,1140,1241],[1139,1240,1241],[1140,1141,1242],[1140,1241,1242],[1141,1142,1243],[1141,1242,1243],[1142,1143,1244],[1142,1243,1244],[1143,1144,1245],[1143,1244,1245],[1144,1145,1246],[1144,1245,1246],[1145,1146,1247],[1145,1246,1247],[1146,1147,1248],[1146,1247,1248],[1147,1148,1249],[1147,1248,1249],[1148,1149,1250],[1148,1249,1250],[1149,1150,1251],[1149,1250,1251],[1150,1151,1252],[1150,1251,1252],[1151,1152,1253],[1151,1252,1253],[1152,1153,1254],[1152,1253,1254],[1153,1154,1255],[1153,1254,1255],[1162,1163,1264],[1162,1263,1264],[1163,1164,1265],[1163,1264,1265],[1164,1165,1266],[1164,1265,1266],[1165,1166,1267],[1165,1266,1267],[1166,1167,1268],[1166,1267,1268],[1167,1168,1269],[1167,1268,1269],[1168,1169,1270],[1168,1269,1270],[1169,1170,1271],[1169,1270,1271],[1170,1171,1272],[1170,1271,1272],[1171,1172,1273],[1171,1272,1273],[1172,1173,1274],[1172,1273,1274],[1173,1174,1275],[1173,1274,1275],[1174,1175,1276],[1174,1275,1276],[1175,1176,1277],[1175,1276,1277],[1176,1177,1278],[1176,1277,1278],[1177,1178,1279],[1177,1278,1279],[1178,1179,1280],[1178,1279,1280],[1179,1180,1281],[1179,1280,1281],[1180,1181,1282],[1180,1281,1282],[1181,1182,1283],[1181,1282,1283],[1182,1183,1284],[1182,1283,1284],[1183,1184,1285],[1183,1284,1285],[1184,1185,1286],[1184,1285,1286],[1185,1186,1287],[1185,1286,1287],[1186,1187,1288],[1186,1287,1288],[1187,1188,1289],[1187,1288,1289],[1188,1189,1290],[1188,1289,1290],[1189,1190,1291],[1189,1290,1291],[1190,1191,1292],[1190,1291,1292],[1191,1192,1293],[1191,1292,1293],[1192,1193,1294],[1192,1293,1294],[1196,1197,1298],[1196,1297,1298],[1197,1198,1299],[1197,1298,1299],[1198,1199,1300],[1198,1299,1300],[1199,1200,1301],[1199,1300,1301],[1200,1201,1302],[1200,1301,1302],[1201,1202,1303],[1201,1302,1303],[1212,1213,1314],[1212,1313,1314],[1213,1214,1315],[1213,1314,1315],[1214,1215,1316],[1214,1315,1316],[1215,1216,1317],[1215,1316,1317],[1216,1217,1318],[1216,1317,1318],[1217,1218,1319],[1217,1318,1319],[1218,1219,1320],[1218,1319,1320],[1219,1220,1321],[1219,1320,1321],[1220,1221,1322],[1220,1321,1322],[1221,1222,1323],[1221,1322,1323],[1222,1223,1324],[1222,1323,1324],[1225,1226,1327],[1225,1326,1327],[1226,1227,1328],[1226,1327,1328],[1227,1228,1329],[1227,1328,1329],[1228,1229,1330],[1228,1329,1330],[1229,1230,1331],[1229,1330,1331],[1230,1231,1332],[1230,1331,1332],[1231,1232,1333],[1231,1332,1333],[1232,1233,1334],[1232,1333,1334],[1233,1234,1335],[1233,1334,1335],[1234,1235,1336],[1234,1335,1336],[1235,1236,1337],[1235,1336,1337],[1236,1237,1338],[1236,1337,1338],[1237,1238,1339],[1237,1338,1339],[1238,1239,1340],[1238,1339,1340],[1239,1240,1341],[1239,1340,1341],[1240,1241,1342],[1240,1341,1342],[1241,1242,1343],[1241,1342,1343],[1242,1243,1344],[1242,1343,1344],[1243,1244,1345],[1243,1344,1345],[1244,1245,1346],[1244,1345,1346],[1245,1246,1347],[1245,1346,1347],[1246,1247,1348],[1246,1347,1348],[1247,1248,1349],[1247,1348,1349],[1248,1249,1350],[1248,1349,1350],[1249,1250,1351],[1249,1350,1351],[1250,1251,1352],[1250,1351,1352],[1251,1252,1353],[1251,1352,1353],[1252,1253,1354],[1252,1353,1354],[1253,1254,1355],[1253,1354,1355],[1262,1263,1364],[1262,1363,1364],[1263,1264,1365],[1263,1364,1365],[1264,1265,1366],[1264,1365,1366],[1265,1266,1367],[1265,1366,1367],[1266,1267,1368],[1266,1367,1368],[1267,1268,1369],[1267,1368,1369],[1268,1269,1370],[1268,1369,1370],[1269,1270,1371],[1269,1370,1371],[1270,1271,1372],[1270,1371,1372],[1271,1272,1373],[1271,1372,1373],[1272,1273,1374],[1272,1373,1374],[1273,1274,1375],[1273,1374,1375],[1274,1275,1376],[1274,1375,1376],[1275,1276,1377],[1275,1376,1377],[1276,1277,1378],[1276,1377,1378],[1277,1278,1379],[1277,1378,1379],[1278,1279,1380],[1278,1379,1380],[1279,1280,1381],[1279,1380,1381],[1280,1281,1382],[1280,1381,1382],[1281,1282,1383],[1281,1382,1383],[1282,1283,1384],[1282,1383,1384],[1283,1284,1385],[1283,1384,1385],[1284,1285,1386],[1284,1385,1386],[1285,1286,1387],[1285,1386,1387],[1286,1287,1388],[1286,1387,1388],[1287,1288,1389],[1287,1388,1389],[1288,1289,1390],[1288,1389,1390],[1289,1290,1391],[1289,1390,1391],[1290,1291,1392],[1290,1391,1392],[1291,1292,1393],[1291,1392,1393],[1292,1293,1394],[1292,1393,1394],[1293,1294,1395],[1293,1394,1395],[1297,1298,1399],[1297,1398,1399],[1298,1299,1400],[1298,1399,1400],[1299,1300,1401],[1299,1400,1401],[1300,1301,1402],[1300,1401,1402],[1301,1302,1403],[1301,1402,1403],[1302,1303,1404],[1302,1403,1404],[1313,1314,1415],[1313,1414,1415],[1314,1315,1416],[1314,1415,1416],[1315,1316,1417],[1315,1416,1417],[1316,1317,1418],[1316,1417,1418],[1317,1318,1419],[1317,1418,1419],[1318,1319,1420],[1318,1419,1420],[1319,1320,1421],[1319,1420,1421],[1320,1321,1422],[1320,1421,1422],[1321,1322,1423],[1321,1422,1423],[1322,1323,1424],[1322,1423,1424],[1323,1324,1425],[1323,1424,1425],[1326,1327,1428],[1326,1427,1428],[1327,1328,1429],[1327,1428,1429],[1328,1329,1430],[1328,1429,1430],[1329,1330,1431],[1329,1430,1431],[1330,1331,1432],[1330,1431,1432],[1331,1332,1433],[1331,1432,1433],[1332,1333,1434],[1332,1433,1434],[1333,1334,1435],[1333,1434,1435],[1334,1335,1436],[1334,1435,1436],[1335,1336,1437],[1335,1436,1437],[1336,1337,1438],[1336,1437,1438],[1337,1338,1439],[1337,1438,1439],[1338,1339,1440],[1338,1439,1440],[1339,1340,1441],[1339,1440,1441],[1340,1341,1442],[1340,1441,1442],[1341,1342,1443],[1341,1442,1443],[1342,1343,1444],[1342,1443,1444],[1343,1344,1445],[1343,1444,1445],[1344,1345,1446],[1344,1445,1446],[1345,1346,1447],[1345,1446,1447],[1346,1347,1448],[1346,1447,1448],[1347,1348,1449],[1347,1448,1449],[1348,1349,1450],[1348,1449,1450],[1349,1350,1451],[1349,1450,1451],[1350,1351,1452],[1350,1451,1452],[1351,1352,1453],[1351,1452,1453],[1352,1353,1454],[1352,1453,1454],[1353,1354,1455],[1353,1454,1455],[1354,1355,1456],[1354,1455,1456],[1363,1364,1465],[1363,1464,1465],[1364,1365,1466],[1364,1465,1466],[1365,1366,1467],[1365,1466,1467],[1366,1367,1468],[1366,1467,1468],[1367,1368,1469],[1367,1468,1469],[1368,1369,1470],[1368,1469,1470],[1369,1370,1471],[1369,1470,1471],[1370,1371,1472],[1370,1471,1472],[1371,1372,1473],[1371,1472,1473],[1372,1373,1474],[1372,1473,1474],[1373,1374,1475],[1373,1474,1475],[1374,1375,1476],[1374,1475,1476],[1375,1376,1477],[1375,1476,1477],[1376,1377,1478],[1376,1477,1478],[1377,1378,1479],[1377,1478,1479],[1378,1379,1480],[1378,1479,1480],[1379,1380,1481],[1379,1480,1481],[1380,1381,1482],[1380,1481,1482],[1381,1382,1483],[1381,1482,1483],[1382,1383,1484],[1382,1483,1484],[1383,1384,1485],[1383,1484,1485],[1384,1385,1486],[1384,1485,1486],[1385,1386,1487],[1385,1486,1487],[1386,1387,1488],[1386,1487,1488],[1387,1388,1489],[1387,1488,1489],[1388,1389,1490],[1388,1489,1490],[1389,1390,1491],[1389,1490,1491],[1390,1391,1492],[1390,1491,1492],[1391,1392,1493],[1391,1492,1493],[1392,1393,1494],[1392,1493,1494],[1393,1394,1495],[1393,1494,1495],[1394,1395,1496],[1394,1495,1496],[1398,1399,1500],[1398,1499,1500],[1399,1400,1501],[1399,1500,1501],[1400,1401,1502],[1400,1501,1502],[1401,1402,1503],[1401,1502,1503],[1402,1403,1504],[1402,1503,1504],[1403,1404,1505],[1403,1504,1505],[1414,1415,1516],[1414,1515,1516],[1415,1416,1517],[1415,1516,1517],[1416,1417,1518],[1416,1517,1518],[1417,1418,1519],[1417,1518,1519],[1418,1419,1520],[1418,1519,1520],[1419,1420,1521],[1419,1520,1521],[1420,1421,1522],[1420,1521,1522],[1421,1422,1523],[1421,1522,1523],[1422,1423,1524],[1422,1523,1524],[1423,1424,1525],[1423,1524,1525],[1424,1425,1526],[1424,1525,1526],[1427,1428,1529],[1427,1528,1529],[1428,1429,1530],[1428,1529,1530],[1429,1430,1531],[1429,1530,1531],[1430,1431,1532],[1430,1531,1532],[1431,1432,1533],[1431,1532,1533],[1432,1433,1534],[1432,1533,1534],[1433,1434,1535],[1433,1534,1535],[1434,1435,1536],[1434,1535,1536],[1435,1436,1537],[1435,1536,1537],[1436,1437,1538],[1436,1537,1538],[1437,1438,1539],[1437,1538,1539],[1438,1439,1540],[1438,1539,1540],[1439,1440,1541],[1439,1540,1541],[1440,1441,1542],[1440,1541,1542],[1441,1442,1543],[1441,1542,1543],[1442,1443,1544],[1442,1543,1544],[1443,1444,1545],[1443,1544,1545],[1444,1445,1546],[1444,1545,1546],[1445,1446,1547],[1445,1546,1547],[1446,1447,1548],[1446,1547,1548],[1447,1448,1549],[1447,1548,1549],[1448,1449,1550],[1448,1549,1550],[1449,1450,1551],[1449,1550,1551],[1450,1451,1552],[1450,1551,1552],[1451,1452,1553],[1451,1552,1553],[1452,1453,1554],[1452,1553,1554],[1453,1454,1555],[1453,1554,1555],[1454,1455,1556],[1454,1555,1556],[1455,1456,1557],[1455,1556,1557],[1463,1464,1565],[1463,1564,1565],[1464,1465,1566],[1464,1565,1566],[1465,1466,1567],[1465,1566,1567],[1466,1467,1568],[1466,1567,1568],[1467,1468,1569],[1467,1568,1569],[1468,1469,1570],[1468,1569,1570],[1469,1470,1571],[1469,1570,1571],[1470,1471,1572],[1470,1571,1572],[1471,1472,1573],[1471,1572,1573],[1472,1473,1574],[1472,1573,1574],[1473,1474,1575],[1473,1574,1575],[1474,1475,1576],[1474,1575,1576],[1475,1476,1577],[1475,1576,1577],[1476,1477,1578],[1476,1577,1578],[1477,1478,1579],[1477,1578,1579],[1478,1479,1580],[1478,1579,1580],[1479,1480,1581],[1479,1580,1581],[1480,1481,1582],[1480,1581,1582],[1481,1482,1583],[1481,1582,1583],[1482,1483,1584],[1482,1583,1584],[1483,1484,1585],[1483,1584,1585],[1484,1485,1586],[1484,1585,1586],[1485,1486,1587],[1485,1586,1587],[1486,1487,1588],[1486,1587,1588],[1487,1488,1589],[1487,1588,1589],[1488,1489,1590],[1488,1589,1590],[1489,1490,1591],[1489,1590,1591],[1490,1491,1592],[1490,1591,1592],[1491,1492,1593],[1491,1592,1593],[1492,1493,1594],[1492,1593,1594],[1493,1494,1595],[1493,1594,1595],[1494,1495,1596],[1494,1595,1596],[1495,1496,1597],[1495,1596,1597],[1496,1497,1598],[1496,1597,1598],[1499,1500,1601],[1499,1600,1601],[1500,1501,1602],[1500,1601,1602],[1501,1502,1603],[1501,1602,1603],[1502,1503,1604],[1502,1603,1604],[1503,1504,1605],[1503,1604,1605],[1504,1505,1606],[1504,1605,1606],[1505,1506,1607],[1505,1606,1607],[1515,1516,1617],[1515,1616,1617],[1516,1517,1618],[1516,1617,1618],[1517,1518,1619],[1517,1618,1619],[1518,1519,1620],[1518,1619,1620],[1519,1520,1621],[1519,1620,1621],[1520,1521,1622],[1520,1621,1622],[1521,1522,1623],[1521,1622,1623],[1522,1523,1624],[1522,1623,1624],[1523,1524,1625],[1523,1624,1625],[1524,1525,1626],[1524,1625,1626],[1525,1526,1627],[1525,1626,1627],[1528,1529,1630],[1528,1629,1630],[1529,1530,1631],[1529,1630,1631],[1530,1531,1632],[1530,1631,1632],[1531,1532,1633],[1531,1632,1633],[1532,1533,1634],[1532,1633,1634],[1533,1534,1635],[1533,1634,1635],[1534,1535,1636],[1534,1635,1636],[1535,1536,1637],[1535,1636,1637],[1536,1537,1638],[1536,1637,1638],[1537,1538,1639],[1537,1638,1639],[1538,1539,1640],[1538,1639,1640],[1539,1540,1641],[1539,1640,1641],[1540,1541,1642],[1540,1641,1642],[1541,1542,1643],[1541,1642,1643],[1542,1543,1644],[1542,1643,1644],[1543,1544,1645],[1543,1644,1645],[1544,1545,1646],[1544,1645,1646],[1545,1546,1647],[1545,1646,1647],[1546,1547,1648],[1546,1647,1648],[1547,1548,1649],[1547,1648,1649],[1548,1549,1650],[1548,1649,1650],[1549,1550,1651],[1549,1650,1651],[1550,1551,1652],[1550,1651,1652],[1551,1552,1653],[1551,1652,1653],[1552,1553,1654],[1552,1653,1654],[1553,1554,1655],[1553,1654,1655],[1554,1555,1656],[1554,1655,1656],[1555,1556,1657],[1555,1656,1657],[1564,1565,1666],[1564,1665,1666],[1565,1566,1667],[1565,1666,1667],[1566,1567,1668],[1566,1667,1668],[1567,1568,1669],[1567,1668,1669],[1568,1569,1670],[1568,1669,1670],[1569,1570,1671],[1569,1670,1671],[1570,1571,1672],[1570,1671,1672],[1571,1572,1673],[1571,1672,1673],[1572,1573,1674],[1572,1673,1674],[1573,1574,1675],[1573,1674,1675],[1574,1575,1676],[1574,1675,1676],[1575,1576,1677],[1575,1676,1677],[1576,1577,1678],[1576,1677,1678],[1577,1578,1679],[1577,1678,1679],[1578,1579,1680],[1578,1679,1680],[1579,1580,1681],[1579,1680,1681],[1580,1581,1682],[1580,1681,1682],[1581,1582,1683],[1581,1682,1683],[1582,1583,1684],[1582,1683,1684],[1583,1584,1685],[1583,1684,1685],[1584,1585,1686],[1584,1685,1686],[1585,1586,1687],[1585,1686,1687],[1586,1587,1688],[1586,1687,1688],[1587,1588,1689],[1587,1688,1689],[1588,1589,1690],[1588,1689,1690],[1589,1590,1691],[1589,1690,1691],[1590,1591,1692],[1590,1691,1692],[1591,1592,1693],[1591,1692,1693],[1592,1593,1694],[1592,1693,1694],[1593,1594,1695],[1593,1694,1695],[1594,1595,1696],[1594,1695,1696],[1595,1596,1697],[1595,1696,1697],[1596,1597,1698],[1596,1697,1698],[1597,1598,1699],[1597,1698,1699],[1600,1601,1702],[1601,1602,1703],[1601,1702,1703],[1602,1603,1704],[1602,1703,1704],[1603,1604,1705],[1603,1704,1705],[1604,1605,1706],[1604,1705,1706],[1605,1606,1707],[1605,1706,1707],[1606,1607,1708],[1606,1707,1708],[1616,1617,1718],[1616,1717,1718],[1617,1618,1719],[1617,1718,1719],[1618,1619,1720],[1618,1719,1720],[1619,1620,1721],[1619,1720,1721],[1620,1621,1722],[1620,1721,1722],[1621,1622,1723],[1621,1722,1723],[1622,1623,1724],[1622,1723,1724],[1623,1624,1725],[1623,1724,1725],[1624,1625,1726],[1624,1725,1726],[1625,1626,1727],[1625,1726,1727],[1626,1627,1728],[1626,1727,1728],[1629,1630,1731],[1629,1730,1731],[1630,1631,1732],[1630,1731,1732],[1631,1632,1733],[1631,1732,1733],[1632,1633,1734],[1632,1733,1734],[1633,1634,1735],[1633,1734,1735],[1634,1635,1736],[1634,1735,1736],[1635,1636,1737],[1635,1736,1737],[1636,1637,1738],[1636,1737,1738],[1637,1638,1739],[1637,1738,1739],[1638,1639,1740],[1638,1739,1740],[1639,1640,1741],[1639,1740,1741],[1640,1641,1742],[1640,1741,1742],[1641,1642,1743],[1641,1742,1743],[1642,1643,1744],[1642,1743,1744],[1643,1644,1745],[1643,1744,1745],[1644,1645,1746],[1644,1745,1746],[1645,1646,1747],[1645,1746,1747],[1646,1647,1748],[1646,1747,1748],[1647,1648,1749],[1647,1748,1749],[1648,1649,1750],[1648,1749,1750],[1649,1650,1751],[1649,1750,1751],[1650,1651,1752],[1650,1751,1752],[1651,1652,1753],[1651,1752,1753],[1652,1653,1754],[1652,1753,1754],[1653,1654,1755],[1653,1754,1755],[1654,1655,1756],[1654,1755,1756],[1655,1656,1757],[1655,1756,1757],[1656,1657,1758],[1656,1757,1758],[1665,1666,1767],[1665,1766,1767],[1666,1667,1768],[1666,1767,1768],[1667,1668,1769],[1667,1768,1769],[1668,1669,1770],[1668,1769,1770],[1669,1670,1771],[1669,1770,1771],[1670,1671,1772],[1670,1771,1772],[1671,1672,1773],[1671,1772,1773],[1672,1673,1774],[1672,1773,1774],[1673,1674,1775],[1673,1774,1775],[1674,1675,1776],[1674,1775,1776],[1675,1676,1777],[1675,1776,1777],[1676,1677,1778],[1676,1777,1778],[1677,1678,1779],[1677,1778,1779],[1678,1679,1780],[1678,1779,1780],[1679,1680,1781],[1679,1780,1781],[1680,1681,1782],[1680,1781,1782],[1681,1682,1783],[1681,1782,1783],[1682,1683,1784],[1682,1783,1784],[1683,1684,1785],[1683,1784,1785],[1684,1685,1786],[1684,1785,1786],[1685,1686,1787],[1685,1786,1787],[1686,1687,1788],[1686,1787,1788],[1687,1688,1789],[1687,1788,1789],[1688,1689,1790],[1688,1789,1790],[1689,1690,1791],[1689,1790,1791],[1690,1691,1792],[1690,1791,1792],[1691,1692,1793],[1691,1792,1793],[1692,1693,1794],[1692,1793,1794],[1693,1694,1795],[1693,1794,1795],[1694,1695,1796],[1694,1795,1796],[1695,1696,1797],[1695,1796,1797],[1696,1697,1798],[1696,1797,1798],[1697,1698,1799],[1697,1798,1799],[1698,1699,1800],[1698,1799,1800],[1702,1703,1804],[1702,1803,1804],[1703,1704,1805],[1703,1804,1805],[1704,1705,1806],[1704,1805,1806],[1705,1706,1807],[1705,1806,1807],[1706,1707,1808],[1706,1807,1808],[1707,1708,1809],[1707,1808,1809],[1717,1718,1819],[1717,1818,1819],[1718,1719,1820],[1718,1819,1820],[1719,1720,1821],[1719,1820,1821],[1720,1721,1822],[1720,1821,1822],[1721,1722,1823],[1721,1822,1823],[1722,1723,1824],[1722,1823,1824],[1723,1724,1825],[1723,1824,1825],[1724,1725,1826],[1724,1825,1826],[1725,1726,1827],[1725,1826,1827],[1726,1727,1828],[1726,1827,1828],[1727,1728,1829],[1727,1828,1829],[1730,1731,1832],[1730,1831,1832],[1731,1732,1833],[1731,1832,1833],[1732,1733,1834],[1732,1833,1834],[1733,1734,1835],[1733,1834,1835],[1734,1735,1836],[1734,1835,1836],[1735,1736,1837],[1735,1836,1837],[1736,1737,1838],[1736,1837,1838],[1737,1738,1839],[1737,1838,1839],[1738,1739,1840],[1738,1839,1840],[1739,1740,1841],[1739,1840,1841],[1740,1741,1842],[1740,1841,1842],[1741,1742,1843],[1741,1842,1843],[1742,1743,1844],[1742,1843,1844],[1743,1744,1845],[1743,1844,1845],[1744,1745,1846],[1744,1845,1846],[1745,1746,1847],[1745,1846,1847],[1746,1747,1848],[1746,1847,1848],[1747,1748,1849],[1747,1848,1849],[1748,1749,1850],[1748,1849,1850],[1749,1750,1851],[1749,1850,1851],[1750,1751,1852],[1750,1851,1852],[1751,1752,1853],[1751,1852,1853],[1752,1753,1854],[1752,1853,1854],[1753,1754,1855],[1753,1854,1855],[1754,1755,1856],[1754,1855,1856],[1755,1756,1857],[1755,1856,1857],[1756,1757,1858],[1756,1857,1858],[1757,1758,1859],[1757,1858,1859],[1765,1766,1867],[1765,1866,1867],[1766,1767,1868],[1766,1867,1868],[1767,1768,1869],[1767,1868,1869],[1768,1769,1870],[1768,1869,1870],[1769,1770,1871],[1769,1870,1871],[1770,1771,1872],[1770,1871,1872],[1771,1772,1873],[1771,1872,1873],[1772,1773,1874],[1772,1873,1874],[1773,1774,1875],[1773,1874,1875],[1774,1775,1876],[1774,1875,1876],[1775,1776,1877],[1775,1876,1877],[1776,1777,1878],[1776,1877,1878],[1777,1778,1879],[1777,1878,1879],[1778,1779,1880],[1778,1879,1880],[1779,1780,1881],[1779,1880,1881],[1780,1781,1882],[1780,1881,1882],[1781,1782,1883],[1781,1882,1883],[1782,1783,1884],[1782,1883,1884],[1783,1784,1885],[1783,1884,1885],[1784,1785,1886],[1784,1885,1886],[1785,1786,1887],[1785,1886,1887],[1786,1787,1888],[1786,1887,1888],[1787,1788,1889],[1787,1888,1889],[1788,1789,1890],[1788,1889,1890],[1789,1790,1891],[1789,1890,1891],[1790,1791,1892],[1790,1891,1892],[1791,1792,1893],[1791,1892,1893],[1792,1793,1894],[1792,1893,1894],[1793,1794,1895],[1793,1894,1895],[1794,1795,1896],[1794,1895,1896],[1795,1796,1897],[1795,1896,1897],[1796,1797,1898],[1796,1897,1898],[1797,1798,1899],[1797,1898,1899],[1798,1799,1900],[1798,1899,1900],[1799,1800,1901],[1799,1900,1901],[1803,1804,1905],[1803,1904,1905],[1804,1805,1906],[1804,1905,1906],[1805,1806,1907],[1805,1906,1907],[1806,1807,1908],[1806,1907,1908],[1807,1808,1909],[1807,1908,1909],[1808,1809,1910],[1808,1909,1910],[1809,1810,1911],[1809,1910,1911],[1818,1819,1920],[1818,1919,1920],[1819,1820,1921],[1819,1920,1921],[1820,1821,1922],[1820,1921,1922],[1821,1822,1923],[1821,1922,1923],[1822,1823,1924],[1822,1923,1924],[1823,1824,1925],[1823,1924,1925],[1824,1825,1926],[1824,1925,1926],[1825,1826,1927],[1825,1926,1927],[1826,1827,1928],[1826,1927,1928],[1827,1828,1929],[1827,1928,1929],[1828,1829,1930],[1828,1929,1930],[1831,1832,1933],[1831,1932,1933],[1832,1833,1934],[1832,1933,1934],[1833,1834,1935],[1833,1934,1935],[1834,1835,1936],[1834,1935,1936],[1835,1836,1937],[1835,1936,1937],[1836,1837,1938],[1836,1937,1938],[1837,1838,1939],[1837,1938,1939],[1838,1839,1940],[1838,1939,1940],[1839,1840,1941],[1839,1940,1941],[1840,1841,1942],[1840,1941,1942],[1841,1842,1943],[1841,1942,1943],[1842,1843,1944],[1842,1943,1944],[1843,1844,1945],[1843,1944,1945],[1844,1845,1946],[1844,1945,1946],[1845,1846,1947],[1845,1946,1947],[1846,1847,1948],[1846,1947,1948],[1847,1848,1949],[1847,1948,1949],[1848,1849,1950],[1848,1949,1950],[1849,1850,1951],[1849,1950,1951],[1850,1851,1952],[1850,1951,1952],[1851,1852,1953],[1851,1952,1953],[1852,1853,1954],[1852,1953,1954],[1853,1854,1955],[1853,1954,1955],[1854,1855,1956],[1854,1955,1956],[1855,1856,1957],[1855,1956,1957],[1856,1857,1958],[1856,1957,1958],[1857,1858,1959],[1857,1958,1959],[1858,1859,1960],[1858,1959,1960],[1866,1867,1968],[1866,1967,1968],[1867,1868,1969],[1867,1968,1969],[1868,1869,1970],[1868,1969,1970],[1869,1870,1971],[1869,1970,1971],[1870,1871,1972],[1870,1971,1972],[1871,1872,1973],[1871,1972,1973],[1872,1873,1974],[1872,1973,1974],[1873,1874,1975],[1873,1974,1975],[1874,1875,1976],[1874,1975,1976],[1875,1876,1977],[1875,1976,1977],[1876,1877,1978],[1876,1977,1978],[1877,1878,1979],[1877,1978,1979],[1878,1879,1980],[1878,1979,1980],[1879,1880,1981],[1879,1980,1981],[1880,1881,1982],[1880,1981,1982],[1881,1882,1983],[1881,1982,1983],[1882,1883,1984],[1882,1983,1984],[1883,1884,1985],[1883,1984,1985],[1884,1885,1986],[1884,1985,1986],[1885,1886,1987],[1885,1986,1987],[1886,1887,1988],[1886,1987,1988],[1887,1888,1989],[1887,1988,1989],[1888,1889,1990],[1888,1989,1990],[1889,1890,1991],[1889,1990,1991],[1890,1891,1992],[1890,1991,1992],[1891,1892,1993],[1891,1992,1993],[1892,1893,1994],[1892,1993,1994],[1893,1894,1995],[1893,1994,1995],[1894,1895,1996],[1894,1995,1996],[1895,1896,1997],[1895,1996,1997],[1896,1897,1998],[1896,1997,1998],[1897,1898,1999],[1897,1998,1999],[1898,1899,2000],[1898,1999,2000],[1899,1900,2001],[1899,2000,2001],[1900,1901,2002],[1900,2001,2002],[1904,1905,2006],[1904,2005,2006],[1905,1906,2007],[1905,2006,2007],[1906,1907,2008],[1906,2007,2008],[1907,1908,2009],[1907,2008,2009],[1908,1909,2010],[1908,2009,2010],[1909,1910,2011],[1909,2010,2011],[1910,1911,2012],[1910,2011,2012],[1919,1920,2021],[1919,2020,2021],[1920,1921,2022],[1920,2021,2022],[1921,1922,2023],[1921,2022,2023],[1922,1923,2024],[1922,2023,2024],[1923,1924,2025],[1923,2024,2025],[1924,1925,2026],[1924,2025,2026],[1925,1926,2027],[1925,2026,2027],[1926,1927,2028],[1926,2027,2028],[1927,1928,2029],[1927,2028,2029],[1928,1929,2030],[1928,2029,2030],[1932,1933,2034],[1932,2033,2034],[1933,1934,2035],[1933,2034,2035],[1934,1935,2036],[1934,2035,2036],[1935,1936,2037],[1935,2036,2037],[1936,1937,2038],[1936,2037,2038],[1937,1938,2039],[1937,2038,2039],[1938,1939,2040],[1938,2039,2040],[1939,1940,2041],[1939,2040,2041],[1940,1941,2042],[1940,2041,2042],[1941,1942,2043],[1941,2042,2043],[1942,1943,2044],[1942,2043,2044],[1943,1944,2045],[1943,2044,2045],[1944,1945,2046],[1944,2045,2046],[1945,1946,2047],[1945,2046,2047],[1946,1947,2048],[1946,2047,2048],[1947,1948,2049],[1947,2048,2049],[1948,1949,2050],[1948,2049,2050],[1949,1950,2051],[1949,2050,2051],[1950,1951,2052],[1950,2051,2052],[1951,1952,2053],[1951,2052,2053],[1952,1953,2054],[1952,2053,2054],[1953,1954,2055],[1953,2054,2055],[1954,1955,2056],[1954,2055,2056],[1955,1956,2057],[1955,2056,2057],[1956,1957,2058],[1956,2057,2058],[1957,1958,2059],[1957,2058,2059],[1958,1959,2060],[1958,2059,2060],[1967,1968,2069],[1967,2068,2069],[1968,1969,2070],[1968,2069,2070],[1969,1970,2071],[1969,2070,2071],[1970,1971,2072],[1970,2071,2072],[1971,1972,2073],[1971,2072,2073],[1972,1973,2074],[1972,2073,2074],[1973,1974,2075],[1973,2074,2075],[1974,1975,2076],[1974,2075,2076],[1975,1976,2077],[1975,2076,2077],[1976,1977,2078],[1976,2077,2078],[1977,1978,2079],[1977,2078,2079],[1978,1979,2080],[1978,2079,2080],[1979,1980,2081],[1979,2080,2081],[1980,1981,2082],[1980,2081,2082],[1981,1982,2083],[1981,2082,2083],[1982,1983,2084],[1982,2083,2084],[1983,1984,2085],[1983,2084,2085],[1984,1985,2086],[1984,2085,2086],[1985,1986,2087],[1985,2086,2087],[1986,1987,2088],[1986,2087,2088],[1987,1988,2089],[1987,2088,2089],[1988,1989,2090],[1988,2089,2090],[1989,1990,2091],[1989,2090,2091],[1990,1991,2092],[1990,2091,2092],[1991,1992,2093],[1991,2092,2093],[1992,1993,2094],[1992,2093,2094],[1993,1994,2095],[1993,2094,2095],[1994,1995,2096],[1994,2095,2096],[1995,1996,2097],[1995,2096,2097],[1996,1997,2098],[1996,2097,2098],[1997,1998,2099],[1997,2098,2099],[1998,1999,2100],[1998,2099,2100],[1999,2000,2101],[1999,2100,2101],[2000,2001,2102],[2000,2101,2102],[2001,2002,2103],[2001,2102,2103],[2005,2006,2107],[2005,2106,2107],[2006,2007,2108],[2006,2107,2108],[2007,2008,2109],[2007,2108,2109],[2008,2009,2110],[2008,2109,2110],[2009,2010,2111],[2009,2110,2111],[2010,2011,2112],[2010,2111,2112],[2011,2012,2113],[2011,2112,2113],[2020,2021,2122],[2020,2121,2122],[2021,2022,2123],[2021,2122,2123],[2022,2023,2124],[2022,2123,2124],[2023,2024,2125],[2023,2124,2125],[2024,2025,2126],[2024,2125,2126],[2025,2026,2127],[2025,2126,2127],[2026,2027,2128],[2026,2127,2128],[2027,2028,2129],[2027,2128,2129],[2028,2029,2130],[2028,2129,2130],[2029,2030,2131],[2029,2130,2131],[2032,2033,2134],[2032,2133,2134],[2033,2034,2135],[2033,2134,2135],[2034,2035,2136],[2034,2135,2136],[2035,2036,2137],[2035,2136,2137],[2036,2037,2138],[2036,2137,2138],[2037,2038,2139],[2037,2138,2139],[2038,2039,2140],[2038,2139,2140],[2039,2040,2141],[2039,2140,2141],[2040,2041,2142],[2040,2141,2142],[2041,2042,2143],[2041,2142,2143],[2042,2043,2144],[2042,2143,2144],[2043,2044,2145],[2043,2144,2145],[2044,2045,2146],[2044,2145,2146],[2045,2046,2147],[2045,2146,2147],[2046,2047,2148],[2046,2147,2148],[2047,2048,2149],[2047,2148,2149],[2048,2049,2150],[2048,2149,2150],[2049,2050,2151],[2049,2150,2151],[2050,2051,2152],[2050,2151,2152],[2051,2052,2153],[2051,2152,2153],[2052,2053,2154],[2052,2153,2154],[2053,2054,2155],[2053,2154,2155],[2054,2055,2156],[2054,2155,2156],[2055,2056,2157],[2055,2156,2157],[2056,2057,2158],[2056,2157,2158],[2057,2058,2159],[2057,2158,2159],[2058,2059,2160],[2058,2159,2160],[2059,2060,2161],[2059,2160,2161],[2067,2068,2169],[2067,2168,2169],[2068,2069,2170],[2068,2169,2170],[2069,2070,2171],[2069,2170,2171],[2070,2071,2172],[2070,2171,2172],[2071,2072,2173],[2071,2172,2173],[2072,2073,2174],[2072,2173,2174],[2073,2074,2175],[2073,2174,2175],[2074,2075,2176],[2074,2175,2176],[2075,2076,2177],[2075,2176,2177],[2076,2077,2178],[2076,2177,2178],[2077,2078,2179],[2077,2178,2179],[2078,2079,2180],[2078,2179,2180],[2079,2080,2181],[2079,2180,2181],[2080,2081,2182],[2080,2181,2182],[2081,2082,2183],[2081,2182,2183],[2082,2083,2184],[2082,2183,2184],[2083,2084,2185],[2083,2184,2185],[2084,2085,2186],[2084,2185,2186],[2085,2086,2187],[2085,2186,2187],[2086,2087,2188],[2086,2187,2188],[2087,2088,2189],[2087,2188,2189],[2088,2089,2190],[2088,2189,2190],[2089,2090,2191],[2089,2190,2191],[2090,2091,2192],[2090,2191,2192],[2091,2092,2193],[2091,2192,2193],[2092,2093,2194],[2092,2193,2194],[2093,2094,2195],[2093,2194,2195],[2094,2095,2196],[2094,2195,2196],[2095,2096,2197],[2095,2196,2197],[2096,2097,2198],[2096,2197,2198],[2097,2098,2199],[2097,2198,2199],[2098,2099,2200],[2098,2199,2200],[2099,2100,2201],[2099,2200,2201],[2100,2101,2202],[2100,2201,2202],[2101,2102,2203],[2101,2202,2203],[2102,2103,2204],[2102,2203,2204],[2106,2107,2208],[2106,2207,2208],[2107,2108,2209],[2107,2208,2209],[2108,2109,2210],[2108,2209,2210],[2109,2110,2211],[2109,2210,2211],[2110,2111,2212],[2110,2211,2212],[2111,2112,2213],[2111,2212,2213],[2112,2113,2214],[2112,2213,2214],[2121,2122,2223],[2121,2222,2223],[2122,2123,2224],[2122,2223,2224],[2123,2124,2225],[2123,2224,2225],[2124,2125,2226],[2124,2225,2226],[2125,2126,2227],[2125,2226,2227],[2126,2127,2228],[2126,2227,2228],[2127,2128,2229],[2127,2228,2229],[2128,2129,2230],[2128,2229,2230],[2129,2130,2231],[2129,2230,2231],[2130,2131,2232],[2130,2231,2232],[2133,2134,2235],[2133,2234,2235],[2134,2135,2236],[2134,2235,2236],[2135,2136,2237],[2135,2236,2237],[2136,2137,2238],[2136,2237,2238],[2137,2138,2239],[2137,2238,2239],[2138,2139,2240],[2138,2239,2240],[2139,2140,2241],[2139,2240,2241],[2140,2141,2242],[2140,2241,2242],[2141,2142,2243],[2141,2242,2243],[2142,2143,2244],[2142,2243,2244],[2143,2144,2245],[2143,2244,2245],[2144,2145,2246],[2144,2245,2246],[2145,2146,2247],[2145,2246,2247],[2146,2147,2248],[2146,2247,2248],[2147,2148,2249],[2147,2248,2249],[2148,2149,2250],[2148,2249,2250],[2149,2150,2251],[2149,2250,2251],[2150,2151,2252],[2150,2251,2252],[2151,2152,2253],[2151,2252,2253],[2152,2153,2254],[2152,2253,2254],[2153,2154,2255],[2153,2254,2255],[2154,2155,2256],[2154,2255,2256],[2155,2156,2257],[2155,2256,2257],[2156,2157,2258],[2156,2257,2258],[2157,2158,2259],[2157,2258,2259],[2158,2159,2260],[2158,2259,2260],[2159,2160,2261],[2159,2260,2261],[2160,2161,2262],[2160,2261,2262],[2168,2169,2270],[2168,2269,2270],[2169,2170,2271],[2169,2270,2271],[2170,2171,2272],[2170,2271,2272],[2171,2172,2273],[2171,2272,2273],[2172,2173,2274],[2172,2273,2274],[2173,2174,2275],[2173,2274,2275],[2174,2175,2276],[2174,2275,2276],[2175,2176,2277],[2175,2276,2277],[2176,2177,2278],[2176,2277,2278],[2177,2178,2279],[2177,2278,2279],[2178,2179,2280],[2178,2279,2280],[2179,2180,2281],[2179,2280,2281],[2180,2181,2282],[2180,2281,2282],[2181,2182,2283],[2181,2282,2283],[2182,2183,2284],[2182,2283,2284],[2183,2184,2285],[2183,2284,2285],[2184,2185,2286],[2184,2285,2286],[2185,2186,2287],[2185,2286,2287],[2186,2187,2288],[2186,2287,2288],[2187,2188,2289],[2187,2288,2289],[2188,2189,2290],[2188,2289,2290],[2189,2190,2291],[2189,2290,2291],[2190,2191,2292],[2190,2291,2292],[2191,2192,2293],[2191,2292,2293],[2192,2193,2294],[2192,2293,2294],[2193,2194,2295],[2193,2294,2295],[2194,2195,2296],[2194,2295,2296],[2195,2196,2297],[2195,2296,2297],[2196,2197,2298],[2196,2297,2298],[2197,2198,2299],[2197,2298,2299],[2198,2199,2300],[2198,2299,2300],[2199,2200,2301],[2199,2300,2301],[2200,2201,2302],[2200,2301,2302],[2201,2202,2303],[2201,2302,2303],[2202,2203,2304],[2202,2303,2304],[2203,2204,2305],[2203,2304,2305],[2207,2208,2309],[2207,2308,2309],[2208,2209,2310],[2208,2309,2310],[2209,2210,2311],[2209,2310,2311],[2210,2211,2312],[2210,2311,2312],[2211,2212,2313],[2211,2312,2313],[2212,2213,2314],[2212,2313,2314],[2213,2214,2315],[2213,2314,2315],[2222,2223,2324],[2222,2323,2324],[2223,2224,2325],[2223,2324,2325],[2224,2225,2326],[2224,2325,2326],[2225,2226,2327],[2225,2326,2327],[2226,2227,2328],[2226,2327,2328],[2227,2228,2329],[2227,2328,2329],[2228,2229,2330],[2228,2329,2330],[2229,2230,2331],[2229,2330,2331],[2230,2231,2332],[2230,2331,2332],[2231,2232,2333],[2231,2332,2333],[2234,2235,2336],[2234,2335,2336],[2235,2236,2337],[2235,2336,2337],[2236,2237,2338],[2236,2337,2338],[2237,2238,2339],[2237,2338,2339],[2238,2239,2340],[2238,2339,2340],[2239,2240,2341],[2239,2340,2341],[2240,2241,2342],[2240,2341,2342],[2241,2242,2343],[2241,2342,2343],[2242,2243,2344],[2242,2343,2344],[2243,2244,2345],[2243,2344,2345],[2244,2245,2346],[2244,2345,2346],[2245,2246,2347],[2245,2346,2347],[2246,2247,2348],[2246,2347,2348],[2247,2248,2349],[2247,2348,2349],[2248,2249,2350],[2248,2349,2350],[2249,2250,2351],[2249,2350,2351],[2250,2251,2352],[2250,2351,2352],[2251,2252,2353],[2251,2352,2353],[2252,2253,2354],[2252,2353,2354],[2253,2254,2355],[2253,2354,2355],[2254,2255,2356],[2254,2355,2356],[2255,2256,2357],[2255,2356,2357],[2256,2257,2358],[2256,2357,2358],[2257,2258,2359],[2257,2358,2359],[2258,2259,2360],[2258,2359,2360],[2259,2260,2361],[2259,2360,2361],[2260,2261,2362],[2260,2361,2362],[2261,2262,2363],[2261,2362,2363],[2269,2270,2371],[2269,2370,2371],[2270,2271,2372],[2270,2371,2372],[2271,2272,2373],[2271,2372,2373],[2272,2273,2374],[2272,2373,2374],[2273,2274,2375],[2273,2374,2375],[2274,2275,2376],[2274,2375,2376],[2275,2276,2377],[2275,2376,2377],[2276,2277,2378],[2276,2377,2378],[2277,2278,2379],[2277,2378,2379],[2278,2279,2380],[2278,2379,2380],[2279,2280,2381],[2279,2380,2381],[2280,2281,2382],[2280,2381,2382],[2281,2282,2383],[2281,2382,2383],[2282,2283,2384],[2282,2383,2384],[2283,2284,2385],[2283,2384,2385],[2284,2285,2386],[2284,2385,2386],[2285,2286,2387],[2285,2386,2387],[2286,2287,2388],[2286,2387,2388],[2287,2288,2389],[2287,2388,2389],[2288,2289,2390],[2288,2389,2390],[2289,2290,2391],[2289,2390,2391],[2290,2291,2392],[2290,2391,2392],[2291,2292,2393],[2291,2392,2393],[2292,2293,2394],[2292,2393,2394],[2293,2294,2395],[2293,2394,2395],[2294,2295,2396],[2294,2395,2396],[2295,2296,2397],[2295,2396,2397],[2296,2297,2398],[2296,2397,2398],[2297,2298,2399],[2297,2398,2399],[2298,2299,2400],[2298,2399,2400],[2299,2300,2401],[2299,2400,2401],[2300,2301,2402],[2300,2401,2402],[2301,2302,2403],[2301,2402,2403],[2302,2303,2404],[2302,2403,2404],[2303,2304,2405],[2303,2404,2405],[2304,2305,2406],[2304,2405,2406],[2308,2309,2410],[2309,2310,2411],[2309,2410,2411],[2310,2311,2412],[2310,2411,2412],[2311,2312,2413],[2311,2412,2413],[2312,2313,2414],[2312,2413,2414],[2313,2314,2415],[2313,2414,2415],[2314,2315,2416],[2314,2415,2416],[2315,2316,2417],[2315,2416,2417],[2323,2324,2425],[2323,2424,2425],[2324,2325,2426],[2324,2425,2426],[2325,2326,2427],[2325,2426,2427],[2326,2327,2428],[2326,2427,2428],[2327,2328,2429],[2327,2428,2429],[2328,2329,2430],[2328,2429,2430],[2329,2330,2431],[2329,2430,2431],[2330,2331,2432],[2330,2431,2432],[2331,2332,2433],[2331,2432,2433],[2332,2333,2434],[2332,2433,2434],[2335,2336,2437],[2335,2436,2437],[2336,2337,2438],[2336,2437,2438],[2337,2338,2439],[2337,2438,2439],[2338,2339,2440],[2338,2439,2440],[2339,2340,2441],[2339,2440,2441],[2340,2341,2442],[2340,2441,2442],[2341,2342,2443],[2341,2442,2443],[2342,2343,2444],[2342,2443,2444],[2343,2344,2445],[2343,2444,2445],[2344,2345,2446],[2344,2445,2446],[2345,2346,2447],[2345,2446,2447],[2346,2347,2448],[2346,2447,2448],[2347,2348,2449],[2347,2448,2449],[2348,2349,2450],[2348,2449,2450],[2349,2350,2451],[2349,2450,2451],[2350,2351,2452],[2350,2451,2452],[2351,2352,2453],[2351,2452,2453],[2352,2353,2454],[2352,2453,2454],[2353,2354,2455],[2353,2454,2455],[2354,2355,2456],[2354,2455,2456],[2355,2356,2457],[2355,2456,2457],[2356,2357,2458],[2356,2457,2458],[2357,2358,2459],[2357,2458,2459],[2358,2359,2460],[2358,2459,2460],[2359,2360,2461],[2359,2460,2461],[2360,2361,2462],[2360,2461,2462],[2361,2362,2463],[2361,2462,2463],[2362,2363,2464],[2362,2463,2464],[2369,2370,2471],[2369,2470,2471],[2370,2371,2472],[2370,2471,2472],[2371,2372,2473],[2371,2472,2473],[2372,2373,2474],[2372,2473,2474],[2373,2374,2475],[2373,2474,2475],[2374,2375,2476],[2374,2475,2476],[2375,2376,2477],[2375,2476,2477],[2376,2377,2478],[2376,2477,2478],[2377,2378,2479],[2377,2478,2479],[2378,2379,2480],[2378,2479,2480],[2379,2380,2481],[2379,2480,2481],[2380,2381,2482],[2380,2481,2482],[2381,2382,2483],[2381,2482,2483],[2382,2383,2484],[2382,2483,2484],[2383,2384,2485],[2383,2484,2485],[2384,2385,2486],[2384,2485,2486],[2385,2386,2487],[2385,2486,2487],[2386,2387,2488],[2386,2487,2488],[2387,2388,2489],[2387,2488,2489],[2388,2389,2490],[2388,2489,2490],[2389,2390,2491],[2389,2490,2491],[2390,2391,2492],[2390,2491,2492],[2391,2392,2493],[2391,2492,2493],[2392,2393,2494],[2392,2493,2494],[2393,2394,2495],[2393,2494,2495],[2394,2395,2496],[2394,2495,2496],[2395,2396,2497],[2395,2496,2497],[2396,2397,2498],[2396,2497,2498],[2397,2398,2499],[2397,2498,2499],[2398,2399,2500],[2398,2499,2500],[2399,2400,2501],[2399,2500,2501],[2400,2401,2502],[2400,2501,2502],[2401,2402,2503],[2401,2502,2503],[2402,2403,2504],[2402,2503,2504],[2403,2404,2505],[2403,2504,2505],[2404,2405,2506],[2404,2505,2506],[2405,2406,2507],[2405,2506,2507],[2406,2407,2508],[2406,2507,2508],[2410,2411,2512],[2410,2511,2512],[2411,2412,2513],[2411,2512,2513],[2412,2413,2514],[2412,2513,2514],[2413,2414,2515],[2413,2514,2515],[2414,2415,2516],[2414,2515,2516],[2415,2416,2517],[2415,2516,2517],[2416,2417,2518],[2416,2517,2518],[2424,2425,2526],[2424,2525,2526],[2425,2426,2527],[2425,2526,2527],[2426,2427,2528],[2426,2527,2528],[2427,2428,2529],[2427,2528,2529],[2428,2429,2530],[2428,2529,2530],[2429,2430,2531],[2429,2530,2531],[2430,2431,2532],[2430,2531,2532],[2431,2432,2533],[2431,2532,2533],[2432,2433,2534],[2432,2533,2534],[2433,2434,2535],[2433,2534,2535],[2436,2437,2538],[2436,2537,2538],[2437,2438,2539],[2437,2538,2539],[2438,2439,2540],[2438,2539,2540],[2439,2440,2541],[2439,2540,2541],[2440,2441,2542],[2440,2541,2542],[2442,2443,2544],[2442,2543,2544],[2443,2444,2545],[2443,2544,2545],[2444,2445,2546],[2444,2545,2546],[2445,2446,2547],[2445,2546,2547],[2446,2447,2548],[2446,2547,2548],[2447,2448,2549],[2447,2548,2549],[2448,2449,2550],[2448,2549,2550],[2449,2450,2551],[2449,2550,2551],[2450,2451,2552],[2450,2551,2552],[2451,2452,2553],[2451,2552,2553],[2452,2453,2554],[2452,2553,2554],[2453,2454,2555],[2453,2554,2555],[2454,2455,2556],[2454,2555,2556],[2455,2456,2557],[2455,2556,2557],[2456,2457,2558],[2456,2557,2558],[2457,2458,2559],[2457,2558,2559],[2458,2459,2560],[2458,2559,2560],[2459,2460,2561],[2459,2560,2561],[2460,2461,2562],[2460,2561,2562],[2461,2462,2563],[2461,2562,2563],[2462,2463,2564],[2462,2563,2564],[2463,2464,2565],[2463,2564,2565],[2470,2471,2572],[2470,2571,2572],[2471,2472,2573],[2471,2572,2573],[2472,2473,2574],[2472,2573,2574],[2473,2474,2575],[2473,2574,2575],[2474,2475,2576],[2474,2575,2576],[2475,2476,2577],[2475,2576,2577],[2476,2477,2578],[2476,2577,2578],[2477,2478,2579],[2477,2578,2579],[2478,2479,2580],[2478,2579,2580],[2479,2480,2581],[2479,2580,2581],[2480,2481,2582],[2480,2581,2582],[2481,2482,2583],[2481,2582,2583],[2482,2483,2584],[2482,2583,2584],[2483,2484,2585],[2483,2584,2585],[2484,2485,2586],[2484,2585,2586],[2485,2486,2587],[2485,2586,2587],[2486,2487,2588],[2486,2587,2588],[2487,2488,2589],[2487,2588,2589],[2488,2489,2590],[2488,2589,2590],[2489,2490,2591],[2489,2590,2591],[2490,2491,2592],[2490,2591,2592],[2491,2492,2593],[2491,2592,2593],[2492,2493,2594],[2492,2593,2594],[2493,2494,2595],[2493,2594,2595],[2494,2495,2596],[2494,2595,2596],[2495,2496,2597],[2495,2596,2597],[2496,2497,2598],[2496,2597,2598],[2497,2498,2599],[2497,2598,2599],[2498,2499,2600],[2498,2599,2600],[2499,2500,2601],[2499,2600,2601],[2500,2501,2602],[2500,2601,2602],[2501,2502,2603],[2501,2602,2603],[2502,2503,2604],[2502,2603,2604],[2503,2504,2605],[2503,2604,2605],[2504,2505,2606],[2504,2605,2606],[2505,2506,2607],[2505,2606,2607],[2506,2507,2608],[2506,2607,2608],[2507,2508,2609],[2507,2608,2609],[2511,2512,2613],[2511,2612,2613],[2512,2513,2614],[2512,2613,2614],[2513,2514,2615],[2513,2614,2615],[2514,2515,2616],[2514,2615,2616],[2515,2516,2617],[2515,2616,2617],[2516,2517,2618],[2516,2617,2618],[2517,2518,2619],[2517,2618,2619],[2525,2526,2627],[2525,2626,2627],[2526,2527,2628],[2526,2627,2628],[2527,2528,2629],[2527,2628,2629],[2528,2529,2630],[2528,2629,2630],[2529,2530,2631],[2529,2630,2631],[2530,2531,2632],[2530,2631,2632],[2531,2532,2633],[2531,2632,2633],[2532,2533,2634],[2532,2633,2634],[2533,2534,2635],[2533,2634,2635],[2534,2535,2636],[2534,2635,2636],[2537,2538,2639],[2537,2638,2639],[2538,2539,2640],[2538,2639,2640],[2539,2540,2641],[2539,2640,2641],[2540,2541,2642],[2540,2641,2642],[2541,2542,2643],[2541,2642,2643],[2543,2544,2645],[2543,2644,2645],[2544,2545,2646],[2544,2645,2646],[2545,2546,2647],[2545,2646,2647],[2546,2547,2648],[2546,2647,2648],[2547,2548,2649],[2547,2648,2649],[2548,2549,2650],[2548,2649,2650],[2549,2550,2651],[2549,2650,2651],[2550,2551,2652],[2550,2651,2652],[2551,2552,2653],[2551,2652,2653],[2552,2553,2654],[2552,2653,2654],[2553,2554,2655],[2553,2654,2655],[2554,2555,2656],[2554,2655,2656],[2555,2556,2657],[2555,2656,2657],[2556,2557,2658],[2556,2657,2658],[2557,2558,2659],[2557,2658,2659],[2558,2559,2660],[2558,2659,2660],[2559,2560,2661],[2559,2660,2661],[2560,2561,2662],[2560,2661,2662],[2561,2562,2663],[2561,2662,2663],[2562,2563,2664],[2562,2663,2664],[2563,2564,2665],[2563,2664,2665],[2564,2565,2666],[2564,2665,2666],[2571,2572,2673],[2571,2672,2673],[2572,2573,2674],[2572,2673,2674],[2573,2574,2675],[2573,2674,2675],[2574,2575,2676],[2574,2675,2676],[2575,2576,2677],[2575,2676,2677],[2576,2577,2678],[2576,2677,2678],[2577,2578,2679],[2577,2678,2679],[2578,2579,2680],[2578,2679,2680],[2579,2580,2681],[2579,2680,2681],[2580,2581,2682],[2580,2681,2682],[2581,2582,2683],[2581,2682,2683],[2582,2583,2684],[2582,2683,2684],[2583,2584,2685],[2583,2684,2685],[2584,2585,2686],[2584,2685,2686],[2585,2586,2687],[2585,2686,2687],[2586,2587,2688],[2586,2687,2688],[2587,2588,2689],[2587,2688,2689],[2588,2589,2690],[2588,2689,2690],[2589,2590,2691],[2589,2690,2691],[2590,2591,2692],[2590,2691,2692],[2591,2592,2693],[2591,2692,2693],[2592,2593,2694],[2592,2693,2694],[2593,2594,2695],[2593,2694,2695],[2594,2595,2696],[2594,2695,2696],[2595,2596,2697],[2595,2696,2697],[2596,2597,2698],[2596,2697,2698],[2597,2598,2699],[2597,2698,2699],[2598,2599,2700],[2598,2699,2700],[2599,2600,2701],[2599,2700,2701],[2600,2601,2702],[2600,2701,2702],[2601,2602,2703],[2601,2702,2703],[2602,2603,2704],[2602,2703,2704],[2603,2604,2705],[2603,2704,2705],[2604,2605,2706],[2604,2705,2706],[2605,2606,2707],[2605,2706,2707],[2606,2607,2708],[2606,2707,2708],[2607,2608,2709],[2607,2708,2709],[2608,2609,2710],[2608,2709,2710],[2612,2613,2714],[2612,2713,2714],[2613,2614,2715],[2613,2714,2715],[2614,2615,2716],[2614,2715,2716],[2615,2616,2717],[2615,2716,2717],[2616,2617,2718],[2616,2717,2718],[2617,2618,2719],[2617,2718,2719],[2618,2619,2720],[2618,2719,2720],[2626,2627,2728],[2626,2727,2728],[2627,2628,2729],[2627,2728,2729],[2628,2629,2730],[2628,2729,2730],[2629,2630,2731],[2629,2730,2731],[2630,2631,2732],[2630,2731,2732],[2631,2632,2733],[2631,2732,2733],[2632,2633,2734],[2632,2733,2734],[2633,2634,2735],[2633,2734,2735],[2634,2635,2736],[2634,2735,2736],[2635,2636,2737],[2635,2736,2737],[2638,2639,2740],[2638,2739,2740],[2639,2640,2741],[2639,2740,2741],[2640,2641,2742],[2640,2741,2742],[2641,2642,2743],[2641,2742,2743],[2642,2643,2744],[2642,2743,2744],[2644,2645,2746],[2644,2745,2746],[2645,2646,2747],[2645,2746,2747],[2646,2647,2748],[2646,2747,2748],[2647,2648,2749],[2647,2748,2749],[2648,2649,2750],[2648,2749,2750],[2649,2650,2751],[2649,2750,2751],[2650,2651,2752],[2650,2751,2752],[2651,2652,2753],[2651,2752,2753],[2652,2653,2754],[2652,2753,2754],[2653,2654,2755],[2653,2754,2755],[2654,2655,2756],[2654,2755,2756],[2655,2656,2757],[2655,2756,2757],[2656,2657,2758],[2656,2757,2758],[2657,2658,2759],[2657,2758,2759],[2658,2659,2760],[2658,2759,2760],[2659,2660,2761],[2659,2760,2761],[2660,2661,2762],[2660,2761,2762],[2661,2662,2763],[2661,2762,2763],[2662,2663,2764],[2662,2763,2764],[2663,2664,2765],[2663,2764,2765],[2664,2665,2766],[2664,2765,2766],[2665,2666,2767],[2665,2766,2767],[2672,2673,2774],[2672,2773,2774],[2673,2674,2775],[2673,2774,2775],[2674,2675,2776],[2674,2775,2776],[2675,2676,2777],[2675,2776,2777],[2676,2677,2778],[2676,2777,2778],[2677,2678,2779],[2677,2778,2779],[2678,2679,2780],[2678,2779,2780],[2679,2680,2781],[2679,2780,2781],[2680,2681,2782],[2680,2781,2782],[2681,2682,2783],[2681,2782,2783],[2682,2683,2784],[2682,2783,2784],[2683,2684,2785],[2683,2784,2785],[2684,2685,2786],[2684,2785,2786],[2685,2686,2787],[2685,2786,2787],[2686,2687,2788],[2686,2787,2788],[2687,2688,2789],[2687,2788,2789],[2688,2689,2790],[2688,2789,2790],[2689,2690,2791],[2689,2790,2791],[2690,2691,2792],[2690,2791,2792],[2691,2692,2793],[2691,2792,2793],[2692,2693,2794],[2692,2793,2794],[2693,2694,2795],[2693,2794,2795],[2694,2695,2796],[2694,2795,2796],[2695,2696,2797],[2695,2796,2797],[2696,2697,2798],[2696,2797,2798],[2697,2698,2799],[2697,2798,2799],[2698,2699,2800],[2698,2799,2800],[2699,2700,2801],[2699,2800,2801],[2700,2701,2802],[2700,2801,2802],[2701,2702,2803],[2701,2802,2803],[2702,2703,2804],[2702,2803,2804],[2703,2704,2805],[2703,2804,2805],[2704,2705,2806],[2704,2805,2806],[2705,2706,2807],[2705,2806,2807],[2706,2707,2808],[2706,2807,2808],[2707,2708,2809],[2707,2808,2809],[2708,2709,2810],[2708,2809,2810],[2709,2710,2811],[2709,2810,2811],[2713,2714,2815],[2713,2814,2815],[2714,2715,2816],[2714,2815,2816],[2715,2716,2817],[2715,2816,2817],[2716,2717,2818],[2716,2817,2818],[2717,2718,2819],[2717,2818,2819],[2718,2719,2820],[2718,2819,2820],[2719,2720,2821],[2719,2820,2821],[2727,2728,2829],[2727,2828,2829],[2728,2729,2830],[2728,2829,2830],[2729,2730,2831],[2729,2830,2831],[2730,2731,2832],[2730,2831,2832],[2731,2732,2833],[2731,2832,2833],[2732,2733,2834],[2732,2833,2834],[2733,2734,2835],[2733,2834,2835],[2734,2735,2836],[2734,2835,2836],[2735,2736,2837],[2735,2836,2837],[2736,2737,2838],[2736,2837,2838],[2739,2740,2841],[2739,2840,2841],[2740,2741,2842],[2740,2841,2842],[2741,2742,2843],[2741,2842,2843],[2742,2743,2844],[2742,2843,2844],[2743,2744,2845],[2743,2844,2845],[2745,2746,2847],[2746,2747,2848],[2746,2847,2848],[2747,2748,2849],[2747,2848,2849],[2748,2749,2850],[2748,2849,2850],[2749,2750,2851],[2749,2850,2851],[2750,2751,2852],[2750,2851,2852],[2751,2752,2853],[2751,2852,2853],[2752,2753,2854],[2752,2853,2854],[2753,2754,2855],[2753,2854,2855],[2754,2755,2856],[2754,2855,2856],[2755,2756,2857],[2755,2856,2857],[2756,2757,2858],[2756,2857,2858],[2757,2758,2859],[2757,2858,2859],[2758,2759,2860],[2758,2859,2860],[2759,2760,2861],[2759,2860,2861],[2760,2761,2862],[2760,2861,2862],[2761,2762,2863],[2761,2862,2863],[2762,2763,2864],[2762,2863,2864],[2763,2764,2865],[2763,2864,2865],[2764,2765,2866],[2764,2865,2866],[2765,2766,2867],[2765,2866,2867],[2766,2767,2868],[2766,2867,2868],[2772,2773,2874],[2772,2873,2874],[2773,2774,2875],[2773,2874,2875],[2774,2775,2876],[2774,2875,2876],[2775,2776,2877],[2775,2876,2877],[2776,2777,2878],[2776,2877,2878],[2777,2778,2879],[2777,2878,2879],[2778,2779,2880],[2778,2879,2880],[2779,2780,2881],[2779,2880,2881],[2780,2781,2882],[2780,2881,2882],[2781,2782,2883],[2781,2882,2883],[2782,2783,2884],[2782,2883,2884],[2783,2784,2885],[2783,2884,2885],[2784,2785,2886],[2784,2885,2886],[2785,2786,2887],[2785,2886,2887],[2786,2787,2888],[2786,2887,2888],[2787,2788,2889],[2787,2888,2889],[2788,2789,2890],[2788,2889,2890],[2789,2790,2891],[2789,2890,2891],[2790,2791,2892],[2790,2891,2892],[2791,2792,2893],[2791,2892,2893],[2792,2793,2894],[2792,2893,2894],[2793,2794,2895],[2793,2894,2895],[2794,2795,2896],[2794,2895,2896],[2795,2796,2897],[2795,2896,2897],[2796,2797,2898],[2796,2897,2898],[2797,2798,2899],[2797,2898,2899],[2798,2799,2900],[2798,2899,2900],[2799,2800,2901],[2799,2900,2901],[2800,2801,2902],[2800,2901,2902],[2801,2802,2903],[2801,2902,2903],[2802,2803,2904],[2802,2903,2904],[2803,2804,2905],[2803,2904,2905],[2804,2805,2906],[2804,2905,2906],[2805,2806,2907],[2805,2906,2907],[2806,2807,2908],[2806,2907,2908],[2807,2808,2909],[2807,2908,2909],[2808,2809,2910],[2808,2909,2910],[2809,2810,2911],[2809,2910,2911],[2810,2811,2912],[2810,2911,2912],[2814,2815,2916],[2814,2915,2916],[2815,2816,2917],[2815,2916,2917],[2816,2817,2918],[2816,2917,2918],[2817,2818,2919],[2817,2918,2919],[2818,2819,2920],[2818,2919,2920],[2819,2820,2921],[2819,2920,2921],[2820,2821,2922],[2820,2921,2922],[2828,2829,2930],[2828,2929,2930],[2829,2830,2931],[2829,2930,2931],[2830,2831,2932],[2830,2931,2932],[2831,2832,2933],[2831,2932,2933],[2832,2833,2934],[2832,2933,2934],[2833,2834,2935],[2833,2934,2935],[2834,2835,2936],[2834,2935,2936],[2835,2836,2937],[2835,2936,2937],[2836,2837,2938],[2836,2937,2938],[2837,2838,2939],[2837,2938,2939],[2839,2840,2941],[2839,2940,2941],[2840,2841,2942],[2840,2941,2942],[2841,2842,2943],[2841,2942,2943],[2842,2843,2944],[2842,2943,2944],[2843,2844,2945],[2843,2944,2945],[2844,2845,2946],[2844,2945,2946],[2847,2848,2949],[2847,2948,2949],[2848,2849,2950],[2848,2949,2950],[2849,2850,2951],[2849,2950,2951],[2850,2851,2952],[2850,2951,2952],[2851,2852,2953],[2851,2952,2953],[2852,2853,2954],[2852,2953,2954],[2853,2854,2955],[2853,2954,2955],[2854,2855,2956],[2854,2955,2956],[2855,2856,2957],[2855,2956,2957],[2856,2857,2958],[2856,2957,2958],[2857,2858,2959],[2857,2958,2959],[2858,2859,2960],[2858,2959,2960],[2859,2860,2961],[2859,2960,2961],[2860,2861,2962],[2860,2961,2962],[2861,2862,2963],[2861,2962,2963],[2862,2863,2964],[2862,2963,2964],[2863,2864,2965],[2863,2964,2965],[2864,2865,2966],[2864,2965,2966],[2865,2866,2967],[2865,2966,2967],[2866,2867,2968],[2866,2967,2968],[2867,2868,2969],[2867,2968,2969],[2873,2874,2975],[2873,2974,2975],[2874,2875,2976],[2874,2975,2976],[2875,2876,2977],[2875,2976,2977],[2876,2877,2978],[2876,2977,2978],[2877,2878,2979],[2877,2978,2979],[2878,2879,2980],[2878,2979,2980],[2879,2880,2981],[2879,2980,2981],[2880,2881,2982],[2880,2981,2982],[2881,2882,2983],[2881,2982,2983],[2882,2883,2984],[2882,2983,2984],[2883,2884,2985],[2883,2984,2985],[2884,2885,2986],[2884,2985,2986],[2885,2886,2987],[2885,2986,2987],[2886,2887,2988],[2886,2987,2988],[2887,2888,2989],[2887,2988,2989],[2888,2889,2990],[2888,2989,2990],[2889,2890,2991],[2889,2990,2991],[2890,2891,2992],[2890,2991,2992],[2891,2892,2993],[2891,2992,2993],[2892,2893,2994],[2892,2993,2994],[2893,2894,2995],[2893,2994,2995],[2894,2895,2996],[2894,2995,2996],[2895,2896,2997],[2895,2996,2997],[2896,2897,2998],[2896,2997,2998],[2897,2898,2999],[2897,2998,2999],[2898,2899,3000],[2898,2999,3000],[2899,2900,3001],[2899,3000,3001],[2900,2901,3002],[2900,3001,3002],[2901,2902,3003],[2901,3002,3003],[2902,2903,3004],[2902,3003,3004],[2903,2904,3005],[2903,3004,3005],[2904,2905,3006],[2904,3005,3006],[2905,2906,3007],[2905,3006,3007],[2906,2907,3008],[2906,3007,3008],[2907,2908,3009],[2907,3008,3009],[2908,2909,3010],[2908,3009,3010],[2909,2910,3011],[2909,3010,3011],[2910,2911,3012],[2910,3011,3012],[2911,2912,3013],[2911,3012,3013],[2915,2916,3017],[2915,3016,3017],[2916,2917,3018],[2916,3017,3018],[2917,2918,3019],[2917,3018,3019],[2918,2919,3020],[2918,3019,3020],[2919,2920,3021],[2919,3020,3021],[2920,2921,3022],[2920,3021,3022],[2921,2922,3023],[2921,3022,3023],[2929,2930,3031],[2929,3030,3031],[2930,2931,3032],[2930,3031,3032],[2931,2932,3033],[2931,3032,3033],[2932,2933,3034],[2932,3033,3034],[2933,2934,3035],[2933,3034,3035],[2934,2935,3036],[2934,3035,3036],[2935,2936,3037],[2935,3036,3037],[2936,2937,3038],[2936,3037,3038],[2937,2938,3039],[2937,3038,3039],[2938,2939,3040],[2938,3039,3040],[2939,2940,3041],[2939,3040,3041],[2940,2941,3042],[2940,3041,3042],[2941,2942,3043],[2941,3042,3043],[2942,2943,3044],[2942,3043,3044],[2943,2944,3045],[2943,3044,3045],[2944,2945,3046],[2944,3045,3046],[2945,2946,3047],[2945,3046,3047],[2948,2949,3050],[2949,2950,3051],[2949,3050,3051],[2950,2951,3052],[2950,3051,3052],[2951,2952,3053],[2951,3052,3053],[2952,2953,3054],[2952,3053,3054],[2953,2954,3055],[2953,3054,3055],[2954,2955,3056],[2954,3055,3056],[2955,2956,3057],[2955,3056,3057],[2956,2957,3058],[2956,3057,3058],[2957,2958,3059],[2957,3058,3059],[2958,2959,3060],[2958,3059,3060],[2959,2960,3061],[2959,3060,3061],[2960,2961,3062],[2960,3061,3062],[2961,2962,3063],[2961,3062,3063],[2962,2963,3064],[2962,3063,3064],[2963,2964,3065],[2963,3064,3065],[2964,2965,3066],[2964,3065,3066],[2965,2966,3067],[2965,3066,3067],[2966,2967,3068],[2966,3067,3068],[2967,2968,3069],[2967,3068,3069],[2968,2969,3070],[2968,3069,3070],[2974,2975,3076],[2974,3075,3076],[2975,2976,3077],[2975,3076,3077],[2976,2977,3078],[2976,3077,3078],[2977,2978,3079],[2977,3078,3079],[2978,2979,3080],[2978,3079,3080],[2979,2980,3081],[2979,3080,3081],[2980,2981,3082],[2980,3081,3082],[2981,2982,3083],[2981,3082,3083],[2982,2983,3084],[2982,3083,3084],[2983,2984,3085],[2983,3084,3085],[2984,2985,3086],[2984,3085,3086],[2985,2986,3087],[2985,3086,3087],[2986,2987,3088],[2986,3087,3088],[2987,2988,3089],[2987,3088,3089],[2988,2989,3090],[2988,3089,3090],[2989,2990,3091],[2989,3090,3091],[2990,2991,3092],[2990,3091,3092],[2991,2992,3093],[2991,3092,3093],[2992,2993,3094],[2992,3093,3094],[2993,2994,3095],[2993,3094,3095],[2994,2995,3096],[2994,3095,3096],[2995,2996,3097],[2995,3096,3097],[2996,2997,3098],[2996,3097,3098],[2997,2998,3099],[2997,3098,3099],[2998,2999,3100],[2998,3099,3100],[2999,3000,3101],[2999,3100,3101],[3000,3001,3102],[3000,3101,3102],[3001,3002,3103],[3001,3102,3103],[3002,3003,3104],[3002,3103,3104],[3003,3004,3105],[3003,3104,3105],[3004,3005,3106],[3004,3105,3106],[3005,3006,3107],[3005,3106,3107],[3006,3007,3108],[3006,3107,3108],[3007,3008,3109],[3007,3108,3109],[3008,3009,3110],[3008,3109,3110],[3009,3010,3111],[3009,3110,3111],[3010,3011,3112],[3010,3111,3112],[3011,3012,3113],[3011,3112,3113],[3012,3013,3114],[3012,3113,3114],[3016,3017,3118],[3016,3117,3118],[3017,3018,3119],[3017,3118,3119],[3018,3019,3120],[3018,3119,3120],[3019,3020,3121],[3019,3120,3121],[3020,3021,3122],[3020,3121,3122],[3021,3022,3123],[3021,3122,3123],[3022,3023,3124],[3022,3123,3124],[3030,3031,3132],[3030,3131,3132],[3031,3032,3133],[3031,3132,3133],[3032,3033,3134],[3032,3133,3134],[3033,3034,3135],[3033,3134,3135],[3034,3035,3136],[3034,3135,3136],[3035,3036,3137],[3035,3136,3137],[3036,3037,3138],[3036,3137,3138],[3037,3038,3139],[3037,3138,3139],[3038,3039,3140],[3038,3139,3140],[3039,3040,3141],[3039,3140,3141],[3040,3041,3142],[3040,3141,3142],[3041,3042,3143],[3041,3142,3143],[3042,3043,3144],[3042,3143,3144],[3043,3044,3145],[3043,3144,3145],[3044,3045,3146],[3044,3145,3146],[3045,3046,3147],[3045,3146,3147],[3046,3047,3148],[3046,3147,3148],[3050,3051,3152],[3050,3151,3152],[3051,3052,3153],[3051,3152,3153],[3052,3053,3154],[3052,3153,3154],[3053,3054,3155],[3053,3154,3155],[3054,3055,3156],[3054,3155,3156],[3055,3056,3157],[3055,3156,3157],[3056,3057,3158],[3056,3157,3158],[3057,3058,3159],[3057,3158,3159],[3058,3059,3160],[3058,3159,3160],[3059,3060,3161],[3059,3160,3161],[3060,3061,3162],[3060,3161,3162],[3061,3062,3163],[3061,3162,3163],[3062,3063,3164],[3062,3163,3164],[3063,3064,3165],[3063,3164,3165],[3064,3065,3166],[3064,3165,3166],[3065,3066,3167],[3065,3166,3167],[3066,3067,3168],[3066,3167,3168],[3067,3068,3169],[3067,3168,3169],[3068,3069,3170],[3068,3169,3170],[3069,3070,3171],[3069,3170,3171],[3075,3076,3177],[3075,3176,3177],[3076,3077,3178],[3076,3177,3178],[3077,3078,3179],[3077,3178,3179],[3078,3079,3180],[3078,3179,3180],[3079,3080,3181],[3079,3180,3181],[3080,3081,3182],[3080,3181,3182],[3081,3082,3183],[3081,3182,3183],[3082,3083,3184],[3082,3183,3184],[3083,3084,3185],[3083,3184,3185],[3084,3085,3186],[3084,3185,3186],[3085,3086,3187],[3085,3186,3187],[3086,3087,3188],[3086,3187,3188],[3087,3088,3189],[3087,3188,3189],[3088,3089,3190],[3088,3189,3190],[3089,3090,3191],[3089,3190,3191],[3090,3091,3192],[3090,3191,3192],[3091,3092,3193],[3091,3192,3193],[3092,3093,3194],[3092,3193,3194],[3093,3094,3195],[3093,3194,3195],[3094,3095,3196],[3094,3195,3196],[3095,3096,3197],[3095,3196,3197],[3096,3097,3198],[3096,3197,3198],[3097,3098,3199],[3097,3198,3199],[3098,3099,3200],[3098,3199,3200],[3099,3100,3201],[3099,3200,3201],[3100,3101,3202],[3100,3201,3202],[3101,3102,3203],[3101,3202,3203],[3102,3103,3204],[3102,3203,3204],[3103,3104,3205],[3103,3204,3205],[3104,3105,3206],[3104,3205,3206],[3105,3106,3207],[3105,3206,3207],[3106,3107,3208],[3106,3207,3208],[3107,3108,3209],[3107,3208,3209],[3108,3109,3210],[3108,3209,3210],[3109,3110,3211],[3109,3210,3211],[3110,3111,3212],[3110,3211,3212],[3111,3112,3213],[3111,3212,3213],[3112,3113,3214],[3112,3213,3214],[3113,3114,3215],[3113,3214,3215],[3117,3118,3219],[3117,3218,3219],[3118,3119,3220],[3118,3219,3220],[3119,3120,3221],[3119,3220,3221],[3120,3121,3222],[3120,3221,3222],[3121,3122,3223],[3121,3222,3223],[3122,3123,3224],[3122,3223,3224],[3123,3124,3225],[3123,3224,3225],[3131,3132,3233],[3131,3232,3233],[3132,3133,3234],[3132,3233,3234],[3133,3134,3235],[3133,3234,3235],[3134,3135,3236],[3134,3235,3236],[3135,3136,3237],[3135,3236,3237],[3136,3137,3238],[3136,3237,3238],[3137,3138,3239],[3137,3238,3239],[3138,3139,3240],[3138,3239,3240],[3139,3140,3241],[3139,3240,3241],[3140,3141,3242],[3140,3241,3242],[3141,3142,3243],[3141,3242,3243],[3142,3143,3244],[3142,3243,3244],[3143,3144,3245],[3143,3244,3245],[3144,3145,3246],[3144,3245,3246],[3145,3146,3247],[3145,3246,3247],[3146,3147,3248],[3146,3247,3248],[3147,3148,3249],[3147,3248,3249],[3151,3152,3253],[3151,3252,3253],[3152,3153,3254],[3152,3253,3254],[3153,3154,3255],[3153,3254,3255],[3154,3155,3256],[3154,3255,3256],[3155,3156,3257],[3155,3256,3257],[3156,3157,3258],[3156,3257,3258],[3157,3158,3259],[3157,3258,3259],[3158,3159,3260],[3158,3259,3260],[3159,3160,3261],[3159,3260,3261],[3160,3161,3262],[3160,3261,3262],[3161,3162,3263],[3161,3262,3263],[3162,3163,3264],[3162,3263,3264],[3163,3164,3265],[3163,3264,3265],[3164,3165,3266],[3164,3265,3266],[3165,3166,3267],[3165,3266,3267],[3166,3167,3268],[3166,3267,3268],[3167,3168,3269],[3167,3268,3269],[3168,3169,3270],[3168,3269,3270],[3169,3170,3271],[3169,3270,3271],[3170,3171,3272],[3170,3271,3272],[3176,3177,3278],[3176,3277,3278],[3177,3178,3279],[3177,3278,3279],[3178,3179,3280],[3178,3279,3280],[3179,3180,3281],[3179,3280,3281],[3180,3181,3282],[3180,3281,3282],[3181,3182,3283],[3181,3282,3283],[3182,3183,3284],[3182,3283,3284],[3183,3184,3285],[3183,3284,3285],[3184,3185,3286],[3184,3285,3286],[3185,3186,3287],[3185,3286,3287],[3186,3187,3288],[3186,3287,3288],[3187,3188,3289],[3187,3288,3289],[3188,3189,3290],[3188,3289,3290],[3189,3190,3291],[3189,3290,3291],[3190,3191,3292],[3190,3291,3292],[3191,3192,3293],[3191,3292,3293],[3192,3193,3294],[3192,3293,3294],[3193,3194,3295],[3193,3294,3295],[3194,3195,3296],[3194,3295,3296],[3195,3196,3297],[3195,3296,3297],[3196,3197,3298],[3196,3297,3298],[3197,3198,3299],[3197,3298,3299],[3198,3199,3300],[3198,3299,3300],[3199,3200,3301],[3199,3300,3301],[3200,3201,3302],[3200,3301,3302],[3201,3202,3303],[3201,3302,3303],[3202,3203,3304],[3202,3303,3304],[3203,3204,3305],[3203,3304,3305],[3204,3205,3306],[3204,3305,3306],[3205,3206,3307],[3205,3306,3307],[3206,3207,3308],[3206,3307,3308],[3207,3208,3309],[3207,3308,3309],[3208,3209,3310],[3208,3309,3310],[3209,3210,3311],[3209,3310,3311],[3210,3211,3312],[3210,3311,3312],[3211,3212,3313],[3211,3312,3313],[3212,3213,3314],[3212,3313,3314],[3213,3214,3315],[3213,3314,3315],[3214,3215,3316],[3214,3315,3316],[3215,3216,3317],[3215,3316,3317],[3218,3219,3320],[3219,3220,3321],[3219,3320,3321],[3220,3221,3322],[3220,3321,3322],[3221,3222,3323],[3221,3322,3323],[3222,3223,3324],[3222,3323,3324],[3223,3224,3325],[3223,3324,3325],[3224,3225,3326],[3224,3325,3326],[3232,3233,3334],[3232,3333,3334],[3233,3234,3335],[3233,3334,3335],[3234,3235,3336],[3234,3335,3336],[3235,3236,3337],[3235,3336,3337],[3236,3237,3338],[3236,3337,3338],[3237,3238,3339],[3237,3338,3339],[3238,3239,3340],[3238,3339,3340],[3239,3240,3341],[3239,3340,3341],[3240,3241,3342],[3240,3341,3342],[3241,3242,3343],[3241,3342,3343],[3242,3243,3344],[3242,3343,3344],[3243,3244,3345],[3243,3344,3345],[3244,3245,3346],[3244,3345,3346],[3245,3246,3347],[3245,3346,3347],[3246,3247,3348],[3246,3347,3348],[3247,3248,3349],[3247,3348,3349],[3248,3249,3350],[3248,3349,3350],[3252,3253,3354],[3252,3353,3354],[3253,3254,3355],[3253,3354,3355],[3254,3255,3356],[3254,3355,3356],[3255,3256,3357],[3255,3356,3357],[3256,3257,3358],[3256,3357,3358],[3257,3258,3359],[3257,3358,3359],[3258,3259,3360],[3258,3359,3360],[3259,3260,3361],[3259,3360,3361],[3260,3261,3362],[3260,3361,3362],[3261,3262,3363],[3261,3362,3363],[3262,3263,3364],[3262,3363,3364],[3263,3264,3365],[3263,3364,3365],[3264,3265,3366],[3264,3365,3366],[3265,3266,3367],[3265,3366,3367],[3266,3267,3368],[3266,3367,3368],[3267,3268,3369],[3267,3368,3369],[3268,3269,3370],[3268,3369,3370],[3269,3270,3371],[3269,3370,3371],[3270,3271,3372],[3270,3371,3372],[3271,3272,3373],[3271,3372,3373],[3276,3277,3378],[3276,3377,3378],[3277,3278,3379],[3277,3378,3379],[3278,3279,3380],[3278,3379,3380],[3279,3280,3381],[3279,3380,3381],[3280,3281,3382],[3280,3381,3382],[3281,3282,3383],[3281,3382,3383],[3282,3283,3384],[3282,3383,3384],[3283,3284,3385],[3283,3384,3385],[3284,3285,3386],[3284,3385,3386],[3285,3286,3387],[3285,3386,3387],[3286,3287,3388],[3286,3387,3388],[3287,3288,3389],[3287,3388,3389],[3288,3289,3390],[3288,3389,3390],[3289,3290,3391],[3289,3390,3391],[3290,3291,3392],[3290,3391,3392],[3291,3292,3393],[3291,3392,3393],[3292,3293,3394],[3292,3393,3394],[3293,3294,3395],[3293,3394,3395],[3294,3295,3396],[3294,3395,3396],[3295,3296,3397],[3295,3396,3397],[3296,3297,3398],[3296,3397,3398],[3297,3298,3399],[3297,3398,3399],[3298,3299,3400],[3298,3399,3400],[3299,3300,3401],[3299,3400,3401],[3300,3301,3402],[3300,3401,3402],[3301,3302,3403],[3301,3402,3403],[3302,3303,3404],[3302,3403,3404],[3303,3304,3405],[3303,3404,3405],[3304,3305,3406],[3304,3405,3406],[3305,3306,3407],[3305,3406,3407],[3306,3307,3408],[3306,3407,3408],[3307,3308,3409],[3307,3408,3409],[3308,3309,3410],[3308,3409,3410],[3309,3310,3411],[3309,3410,3411],[3310,3311,3412],[3310,3411,3412],[3311,3312,3413],[3311,3412,3413],[3312,3313,3414],[3312,3413,3414],[3313,3314,3415],[3313,3414,3415],[3314,3315,3416],[3314,3415,3416],[3315,3316,3417],[3315,3416,3417],[3316,3317,3418],[3316,3417,3418],[3320,3321,3422],[3320,3421,3422],[3321,3322,3423],[3321,3422,3423],[3322,3323,3424],[3322,3423,3424],[3323,3324,3425],[3323,3424,3425],[3324,3325,3426],[3324,3425,3426],[3325,3326,3427],[3325,3426,3427],[3333,3334,3435],[3333,3434,3435],[3334,3335,3436],[3334,3435,3436],[3335,3336,3437],[3335,3436,3437],[3336,3337,3438],[3336,3437,3438],[3337,3338,3439],[3337,3438,3439],[3338,3339,3440],[3338,3439,3440],[3339,3340,3441],[3339,3440,3441],[3340,3341,3442],[3340,3441,3442],[3341,3342,3443],[3341,3442,3443],[3342,3343,3444],[3342,3443,3444],[3343,3344,3445],[3343,3444,3445],[3344,3345,3446],[3344,3445,3446],[3345,3346,3447],[3345,3446,3447],[3346,3347,3448],[3346,3447,3448],[3347,3348,3449],[3347,3448,3449],[3348,3349,3450],[3348,3449,3450],[3353,3354,3455],[3353,3454,3455],[3354,3355,3456],[3354,3455,3456],[3355,3356,3457],[3355,3456,3457],[3356,3357,3458],[3356,3457,3458],[3357,3358,3459],[3357,3458,3459],[3358,3359,3460],[3358,3459,3460],[3359,3360,3461],[3359,3460,3461],[3360,3361,3462],[3360,3461,3462],[3361,3362,3463],[3361,3462,3463],[3362,3363,3464],[3362,3463,3464],[3363,3364,3465],[3363,3464,3465],[3364,3365,3466],[3364,3465,3466],[3365,3366,3467],[3365,3466,3467],[3366,3367,3468],[3366,3467,3468],[3367,3368,3469],[3367,3468,3469],[3368,3369,3470],[3368,3469,3470],[3369,3370,3471],[3369,3470,3471],[3370,3371,3472],[3370,3471,3472],[3371,3372,3473],[3371,3472,3473],[3372,3373,3474],[3372,3473,3474],[3377,3378,3479],[3377,3478,3479],[3378,3379,3480],[3378,3479,3480],[3379,3380,3481],[3379,3480,3481],[3380,3381,3482],[3380,3481,3482],[3381,3382,3483],[3381,3482,3483],[3382,3383,3484],[3382,3483,3484],[3383,3384,3485],[3383,3484,3485],[3384,3385,3486],[3384,3485,3486],[3385,3386,3487],[3385,3486,3487],[3386,3387,3488],[3386,3487,3488],[3387,3388,3489],[3387,3488,3489],[3388,3389,3490],[3388,3489,3490],[3389,3390,3491],[3389,3490,3491],[3390,3391,3492],[3390,3491,3492],[3391,3392,3493],[3391,3492,3493],[3392,3393,3494],[3392,3493,3494],[3393,3394,3495],[3393,3494,3495],[3394,3395,3496],[3394,3495,3496],[3395,3396,3497],[3395,3496,3497],[3396,3397,3498],[3396,3497,3498],[3397,3398,3499],[3397,3498,3499],[3398,3399,3500],[3398,3499,3500],[3399,3400,3501],[3399,3500,3501],[3400,3401,3502],[3400,3501,3502],[3401,3402,3503],[3401,3502,3503],[3402,3403,3504],[3402,3503,3504],[3403,3404,3505],[3403,3504,3505],[3404,3405,3506],[3404,3505,3506],[3405,3406,3507],[3405,3506,3507],[3406,3407,3508],[3406,3507,3508],[3407,3408,3509],[3407,3508,3509],[3408,3409,3510],[3408,3509,3510],[3409,3410,3511],[3409,3510,3511],[3410,3411,3512],[3410,3511,3512],[3411,3412,3513],[3411,3512,3513],[3412,3413,3514],[3412,3513,3514],[3413,3414,3515],[3413,3514,3515],[3414,3415,3516],[3414,3515,3516],[3415,3416,3517],[3415,3516,3517],[3416,3417,3518],[3416,3517,3518],[3417,3418,3519],[3417,3518,3519],[3421,3422,3523],[3421,3522,3523],[3422,3423,3524],[3422,3523,3524],[3423,3424,3525],[3423,3524,3525],[3424,3425,3526],[3424,3525,3526],[3425,3426,3527],[3425,3526,3527],[3426,3427,3528],[3426,3527,3528],[3434,3435,3536],[3434,3535,3536],[3435,3436,3537],[3435,3536,3537],[3436,3437,3538],[3436,3537,3538],[3437,3438,3539],[3437,3538,3539],[3438,3439,3540],[3438,3539,3540],[3439,3440,3541],[3439,3540,3541],[3440,3441,3542],[3440,3541,3542],[3441,3442,3543],[3441,3542,3543],[3442,3443,3544],[3442,3543,3544],[3443,3444,3545],[3443,3544,3545],[3444,3445,3546],[3444,3545,3546],[3445,3446,3547],[3445,3546,3547],[3446,3447,3548],[3446,3547,3548],[3447,3448,3549],[3447,3548,3549],[3448,3449,3550],[3448,3549,3550],[3449,3450,3551],[3449,3550,3551],[3454,3455,3556],[3455,3456,3557],[3455,3556,3557],[3456,3457,3558],[3456,3557,3558],[3457,3458,3559],[3457,3558,3559],[3458,3459,3560],[3458,3559,3560],[3459,3460,3561],[3459,3560,3561],[3460,3461,3562],[3460,3561,3562],[3461,3462,3563],[3461,3562,3563],[3462,3463,3564],[3462,3563,3564],[3463,3464,3565],[3463,3564,3565],[3464,3465,3566],[3464,3565,3566],[3465,3466,3567],[3465,3566,3567],[3466,3467,3568],[3466,3567,3568],[3467,3468,3569],[3467,3568,3569],[3468,3469,3570],[3468,3569,3570],[3469,3470,3571],[3469,3570,3571],[3470,3471,3572],[3470,3571,3572],[3471,3472,3573],[3471,3572,3573],[3472,3473,3574],[3472,3573,3574],[3473,3474,3575],[3473,3574,3575],[3478,3479,3580],[3478,3579,3580],[3479,3480,3581],[3479,3580,3581],[3480,3481,3582],[3480,3581,3582],[3481,3482,3583],[3481,3582,3583],[3482,3483,3584],[3482,3583,3584],[3483,3484,3585],[3483,3584,3585],[3484,3485,3586],[3484,3585,3586],[3485,3486,3587],[3485,3586,3587],[3486,3487,3588],[3486,3587,3588],[3487,3488,3589],[3487,3588,3589],[3488,3489,3590],[3488,3589,3590],[3489,3490,3591],[3489,3590,3591],[3490,3491,3592],[3490,3591,3592],[3491,3492,3593],[3491,3592,3593],[3492,3493,3594],[3492,3593,3594],[3493,3494,3595],[3493,3594,3595],[3494,3495,3596],[3494,3595,3596],[3495,3496,3597],[3495,3596,3597],[3496,3497,3598],[3496,3597,3598],[3497,3498,3599],[3497,3598,3599],[3498,3499,3600],[3498,3599,3600],[3499,3500,3601],[3499,3600,3601],[3500,3501,3602],[3500,3601,3602],[3501,3502,3603],[3501,3602,3603],[3502,3503,3604],[3502,3603,3604],[3503,3504,3605],[3503,3604,3605],[3504,3505,3606],[3504,3605,3606],[3505,3506,3607],[3505,3606,3607],[3506,3507,3608],[3506,3607,3608],[3507,3508,3609],[3507,3608,3609],[3508,3509,3610],[3508,3609,3610],[3509,3510,3611],[3509,3610,3611],[3510,3511,3612],[3510,3611,3612],[3511,3512,3613],[3511,3612,3613],[3512,3513,3614],[3512,3613,3614],[3513,3514,3615],[3513,3614,3615],[3514,3515,3616],[3514,3615,3616],[3515,3516,3617],[3515,3616,3617],[3516,3517,3618],[3516,3617,3618],[3517,3518,3619],[3517,3618,3619],[3518,3519,3620],[3518,3619,3620],[3522,3523,3624],[3522,3623,3624],[3523,3524,3625],[3523,3624,3625],[3524,3525,3626],[3524,3625,3626],[3525,3526,3627],[3525,3626,3627],[3526,3527,3628],[3526,3627,3628],[3527,3528,3629],[3527,3628,3629],[3535,3536,3637],[3535,3636,3637],[3536,3537,3638],[3536,3637,3638],[3537,3538,3639],[3537,3638,3639],[3538,3539,3640],[3538,3639,3640],[3539,3540,3641],[3539,3640,3641],[3540,3541,3642],[3540,3641,3642],[3541,3542,3643],[3541,3642,3643],[3542,3543,3644],[3542,3643,3644],[3543,3544,3645],[3543,3644,3645],[3544,3545,3646],[3544,3645,3646],[3545,3546,3647],[3545,3646,3647],[3546,3547,3648],[3546,3647,3648],[3547,3548,3649],[3547,3648,3649],[3548,3549,3650],[3548,3649,3650],[3549,3550,3651],[3549,3650,3651],[3550,3551,3652],[3550,3651,3652],[3556,3557,3658],[3556,3657,3658],[3557,3558,3659],[3557,3658,3659],[3558,3559,3660],[3558,3659,3660],[3559,3560,3661],[3559,3660,3661],[3560,3561,3662],[3560,3661,3662],[3561,3562,3663],[3561,3662,3663],[3562,3563,3664],[3562,3663,3664],[3563,3564,3665],[3563,3664,3665],[3564,3565,3666],[3564,3665,3666],[3565,3566,3667],[3565,3666,3667],[3566,3567,3668],[3566,3667,3668],[3567,3568,3669],[3567,3668,3669],[3568,3569,3670],[3568,3669,3670],[3569,3570,3671],[3569,3670,3671],[3570,3571,3672],[3570,3671,3672],[3571,3572,3673],[3571,3672,3673],[3572,3573,3674],[3572,3673,3674],[3573,3574,3675],[3573,3674,3675],[3574,3575,3676],[3574,3675,3676],[3579,3580,3681],[3579,3680,3681],[3580,3581,3682],[3580,3681,3682],[3581,3582,3683],[3581,3682,3683],[3582,3583,3684],[3582,3683,3684],[3583,3584,3685],[3583,3684,3685],[3584,3585,3686],[3584,3685,3686],[3585,3586,3687],[3585,3686,3687],[3586,3587,3688],[3586,3687,3688],[3587,3588,3689],[3587,3688,3689],[3588,3589,3690],[3588,3689,3690],[3589,3590,3691],[3589,3690,3691],[3590,3591,3692],[3590,3691,3692],[3591,3592,3693],[3591,3692,3693],[3592,3593,3694],[3592,3693,3694],[3593,3594,3695],[3593,3694,3695],[3594,3595,3696],[3594,3695,3696],[3595,3596,3697],[3595,3696,3697],[3596,3597,3698],[3596,3697,3698],[3597,3598,3699],[3597,3698,3699],[3598,3599,3700],[3598,3699,3700],[3599,3600,3701],[3599,3700,3701],[3600,3601,3702],[3600,3701,3702],[3601,3602,3703],[3601,3702,3703],[3602,3603,3704],[3602,3703,3704],[3603,3604,3705],[3603,3704,3705],[3604,3605,3706],[3604,3705,3706],[3605,3606,3707],[3605,3706,3707],[3606,3607,3708],[3606,3707,3708],[3607,3608,3709],[3607,3708,3709],[3608,3609,3710],[3608,3709,3710],[3609,3610,3711],[3609,3710,3711],[3610,3611,3712],[3610,3711,3712],[3611,3612,3713],[3611,3712,3713],[3612,3613,3714],[3612,3713,3714],[3613,3614,3715],[3613,3714,3715],[3614,3615,3716],[3614,3715,3716],[3615,3616,3717],[3615,3716,3717],[3616,3617,3718],[3616,3717,3718],[3617,3618,3719],[3617,3718,3719],[3618,3619,3720],[3618,3719,3720],[3619,3620,3721],[3619,3720,3721],[3623,3624,3725],[3623,3724,3725],[3624,3625,3726],[3624,3725,3726],[3625,3626,3727],[3625,3726,3727],[3626,3627,3728],[3626,3727,3728],[3627,3628,3729],[3627,3728,3729],[3628,3629,3730],[3628,3729,3730],[3636,3637,3738],[3636,3737,3738],[3637,3638,3739],[3637,3738,3739],[3638,3639,3740],[3638,3739,3740],[3639,3640,3741],[3639,3740,3741],[3640,3641,3742],[3640,3741,3742],[3641,3642,3743],[3641,3742,3743],[3642,3643,3744],[3642,3743,3744],[3643,3644,3745],[3643,3744,3745],[3644,3645,3746],[3644,3745,3746],[3645,3646,3747],[3645,3746,3747],[3646,3647,3748],[3646,3747,3748],[3647,3648,3749],[3647,3748,3749],[3648,3649,3750],[3648,3749,3750],[3649,3650,3751],[3649,3750,3751],[3650,3651,3752],[3650,3751,3752],[3651,3652,3753],[3651,3752,3753],[3657,3658,3759],[3657,3758,3759],[3658,3659,3760],[3658,3759,3760],[3659,3660,3761],[3659,3760,3761],[3660,3661,3762],[3660,3761,3762],[3661,3662,3763],[3661,3762,3763],[3662,3663,3764],[3662,3763,3764],[3663,3664,3765],[3663,3764,3765],[3664,3665,3766],[3664,3765,3766],[3665,3666,3767],[3665,3766,3767],[3666,3667,3768],[3666,3767,3768],[3667,3668,3769],[3667,3768,3769],[3668,3669,3770],[3668,3769,3770],[3669,3670,3771],[3669,3770,3771],[3670,3671,3772],[3670,3771,3772],[3671,3672,3773],[3671,3772,3773],[3674,3675,3776],[3674,3775,3776],[3675,3676,3777],[3675,3776,3777],[3680,3681,3782],[3680,3781,3782],[3681,3682,3783],[3681,3782,3783],[3682,3683,3784],[3682,3783,3784],[3683,3684,3785],[3683,3784,3785],[3684,3685,3786],[3684,3785,3786],[3685,3686,3787],[3685,3786,3787],[3686,3687,3788],[3686,3787,3788],[3687,3688,3789],[3687,3788,3789],[3688,3689,3790],[3688,3789,3790],[3689,3690,3791],[3689,3790,3791],[3690,3691,3792],[3690,3791,3792],[3691,3692,3793],[3691,3792,3793],[3692,3693,3794],[3692,3793,3794],[3693,3694,3795],[3693,3794,3795],[3694,3695,3796],[3694,3795,3796],[3695,3696,3797],[3695,3796,3797],[3696,3697,3798],[3696,3797,3798],[3697,3698,3799],[3697,3798,3799],[3698,3699,3800],[3698,3799,3800],[3699,3700,3801],[3699,3800,3801],[3700,3701,3802],[3700,3801,3802],[3701,3702,3803],[3701,3802,3803],[3702,3703,3804],[3702,3803,3804],[3703,3704,3805],[3703,3804,3805],[3704,3705,3806],[3704,3805,3806],[3705,3706,3807],[3705,3806,3807],[3706,3707,3808],[3706,3807,3808],[3707,3708,3809],[3707,3808,3809],[3708,3709,3810],[3708,3809,3810],[3709,3710,3811],[3709,3810,3811],[3710,3711,3812],[3710,3811,3812],[3711,3712,3813],[3711,3812,3813],[3712,3713,3814],[3712,3813,3814],[3713,3714,3815],[3713,3814,3815],[3714,3715,3816],[3714,3815,3816],[3715,3716,3817],[3715,3816,3817],[3716,3717,3818],[3716,3817,3818],[3717,3718,3819],[3717,3818,3819],[3718,3719,3820],[3718,3819,3820],[3719,3720,3821],[3719,3820,3821],[3720,3721,3822],[3720,3821,3822],[3724,3725,3826],[3724,3825,3826],[3725,3726,3827],[3725,3826,3827],[3726,3727,3828],[3726,3827,3828],[3727,3728,3829],[3727,3828,3829],[3728,3729,3830],[3728,3829,3830],[3729,3730,3831],[3729,3830,3831],[3737,3738,3839],[3737,3838,3839],[3738,3739,3840],[3738,3839,3840],[3739,3740,3841],[3739,3840,3841],[3740,3741,3842],[3740,3841,3842],[3741,3742,3843],[3741,3842,3843],[3742,3743,3844],[3742,3843,3844],[3743,3744,3845],[3743,3844,3845],[3744,3745,3846],[3744,3845,3846],[3745,3746,3847],[3745,3846,3847],[3746,3747,3848],[3746,3847,3848],[3747,3748,3849],[3747,3848,3849],[3748,3749,3850],[3748,3849,3850],[3749,3750,3851],[3749,3850,3851],[3750,3751,3852],[3750,3851,3852],[3751,3752,3853],[3751,3852,3853],[3752,3753,3854],[3752,3853,3854],[3758,3759,3860],[3758,3859,3860],[3759,3760,3861],[3759,3860,3861],[3760,3761,3862],[3760,3861,3862],[3761,3762,3863],[3761,3862,3863],[3762,3763,3864],[3762,3863,3864],[3763,3764,3865],[3763,3864,3865],[3764,3765,3866],[3764,3865,3866],[3765,3766,3867],[3765,3866,3867],[3766,3767,3868],[3766,3867,3868],[3767,3768,3869],[3767,3868,3869],[3768,3769,3870],[3768,3869,3870],[3769,3770,3871],[3769,3870,3871],[3770,3771,3872],[3770,3871,3872],[3771,3772,3873],[3771,3872,3873],[3772,3773,3874],[3772,3873,3874],[3775,3776,3877],[3775,3876,3877],[3776,3777,3878],[3776,3877,3878],[3780,3781,3882],[3780,3881,3882],[3781,3782,3883],[3781,3882,3883],[3782,3783,3884],[3782,3883,3884],[3783,3784,3885],[3783,3884,3885],[3784,3785,3886],[3784,3885,3886],[3785,3786,3887],[3785,3886,3887],[3786,3787,3888],[3786,3887,3888],[3787,3788,3889],[3787,3888,3889],[3788,3789,3890],[3788,3889,3890],[3789,3790,3891],[3789,3890,3891],[3790,3791,3892],[3790,3891,3892],[3791,3792,3893],[3791,3892,3893],[3792,3793,3894],[3792,3893,3894],[3793,3794,3895],[3793,3894,3895],[3794,3795,3896],[3794,3895,3896],[3795,3796,3897],[3795,3896,3897],[3796,3797,3898],[3796,3897,3898],[3797,3798,3899],[3797,3898,3899],[3798,3799,3900],[3798,3899,3900],[3799,3800,3901],[3799,3900,3901],[3800,3801,3902],[3800,3901,3902],[3801,3802,3903],[3801,3902,3903],[3802,3803,3904],[3802,3903,3904],[3803,3804,3905],[3803,3904,3905],[3804,3805,3906],[3804,3905,3906],[3805,3806,3907],[3805,3906,3907],[3806,3807,3908],[3806,3907,3908],[3807,3808,3909],[3807,3908,3909],[3808,3809,3910],[3808,3909,3910],[3809,3810,3911],[3809,3910,3911],[3810,3811,3912],[3810,3911,3912],[3811,3812,3913],[3811,3912,3913],[3812,3813,3914],[3812,3913,3914],[3813,3814,3915],[3813,3914,3915],[3814,3815,3916],[3814,3915,3916],[3815,3816,3917],[3815,3916,3917],[3816,3817,3918],[3816,3917,3918],[3817,3818,3919],[3817,3918,3919],[3818,3819,3920],[3818,3919,3920],[3819,3820,3921],[3819,3920,3921],[3820,3821,3922],[3820,3921,3922],[3821,3822,3923],[3821,3922,3923],[3825,3826,3927],[3825,3926,3927],[3826,3827,3928],[3826,3927,3928],[3827,3828,3929],[3827,3928,3929],[3828,3829,3930],[3828,3929,3930],[3829,3830,3931],[3829,3930,3931],[3830,3831,3932],[3830,3931,3932],[3838,3839,3940],[3838,3939,3940],[3839,3840,3941],[3839,3940,3941],[3840,3841,3942],[3840,3941,3942],[3841,3842,3943],[3841,3942,3943],[3842,3843,3944],[3842,3943,3944],[3843,3844,3945],[3843,3944,3945],[3844,3845,3946],[3844,3945,3946],[3845,3846,3947],[3845,3946,3947],[3846,3847,3948],[3846,3947,3948],[3847,3848,3949],[3847,3948,3949],[3848,3849,3950],[3848,3949,3950],[3849,3850,3951],[3849,3950,3951],[3850,3851,3952],[3850,3951,3952],[3851,3852,3953],[3851,3952,3953],[3852,3853,3954],[3852,3953,3954],[3853,3854,3955],[3853,3954,3955],[3857,3858,3959],[3857,3958,3959],[3859,3860,3961],[3860,3861,3962],[3860,3961,3962],[3861,3862,3963],[3861,3962,3963],[3862,3863,3964],[3862,3963,3964],[3863,3864,3965],[3863,3964,3965],[3864,3865,3966],[3864,3965,3966],[3865,3866,3967],[3865,3966,3967],[3866,3867,3968],[3866,3967,3968],[3867,3868,3969],[3867,3968,3969],[3868,3869,3970],[3868,3969,3970],[3869,3870,3971],[3869,3970,3971],[3870,3871,3972],[3870,3971,3972],[3871,3872,3973],[3871,3972,3973],[3872,3873,3974],[3872,3973,3974],[3873,3874,3975],[3873,3974,3975],[3876,3877,3978],[3876,3977,3978],[3877,3878,3979],[3877,3978,3979],[3881,3882,3983],[3881,3982,3983],[3882,3883,3984],[3882,3983,3984],[3883,3884,3985],[3883,3984,3985],[3884,3885,3986],[3884,3985,3986],[3885,3886,3987],[3885,3986,3987],[3886,3887,3988],[3886,3987,3988],[3887,3888,3989],[3887,3988,3989],[3888,3889,3990],[3888,3989,3990],[3889,3890,3991],[3889,3990,3991],[3890,3891,3992],[3890,3991,3992],[3891,3892,3993],[3891,3992,3993],[3892,3893,3994],[3892,3993,3994],[3893,3894,3995],[3893,3994,3995],[3894,3895,3996],[3894,3995,3996],[3895,3896,3997],[3895,3996,3997],[3896,3897,3998],[3896,3997,3998],[3897,3898,3999],[3897,3998,3999],[3898,3899,4000],[3898,3999,4000],[3899,3900,4001],[3899,4000,4001],[3900,3901,4002],[3900,4001,4002],[3901,3902,4003],[3901,4002,4003],[3902,3903,4004],[3902,4003,4004],[3903,3904,4005],[3903,4004,4005],[3904,3905,4006],[3904,4005,4006],[3905,3906,4007],[3905,4006,4007],[3906,3907,4008],[3906,4007,4008],[3907,3908,4009],[3907,4008,4009],[3908,3909,4010],[3908,4009,4010],[3909,3910,4011],[3909,4010,4011],[3910,3911,4012],[3910,4011,4012],[3911,3912,4013],[3911,4012,4013],[3912,3913,4014],[3912,4013,4014],[3913,3914,4015],[3913,4014,4015],[3914,3915,4016],[3914,4015,4016],[3915,3916,4017],[3915,4016,4017],[3916,3917,4018],[3916,4017,4018],[3917,3918,4019],[3917,4018,4019],[3918,3919,4020],[3918,4019,4020],[3919,3920,4021],[3919,4020,4021],[3920,3921,4022],[3920,4021,4022],[3921,3922,4023],[3921,4022,4023],[3922,3923,4024],[3922,4023,4024],[3926,3927,4028],[3926,4027,4028],[3927,3928,4029],[3927,4028,4029],[3928,3929,4030],[3928,4029,4030],[3929,3930,4031],[3929,4030,4031],[3930,3931,4032],[3930,4031,4032],[3931,3932,4033],[3931,4032,4033],[3939,3940,4041],[3939,4040,4041],[3940,3941,4042],[3940,4041,4042],[3941,3942,4043],[3941,4042,4043],[3942,3943,4044],[3942,4043,4044],[3943,3944,4045],[3943,4044,4045],[3944,3945,4046],[3944,4045,4046],[3945,3946,4047],[3945,4046,4047],[3946,3947,4048],[3946,4047,4048],[3947,3948,4049],[3947,4048,4049],[3948,3949,4050],[3948,4049,4050],[3949,3950,4051],[3949,4050,4051],[3950,3951,4052],[3950,4051,4052],[3951,3952,4053],[3951,4052,4053],[3952,3953,4054],[3952,4053,4054],[3953,3954,4055],[3953,4054,4055],[3954,3955,4056],[3954,4055,4056],[3958,3959,4060],[3958,4059,4060],[3961,3962,4063],[3961,4062,4063],[3962,3963,4064],[3962,4063,4064],[3963,3964,4065],[3963,4064,4065],[3964,3965,4066],[3964,4065,4066],[3965,3966,4067],[3965,4066,4067],[3966,3967,4068],[3966,4067,4068],[3967,3968,4069],[3967,4068,4069],[3968,3969,4070],[3968,4069,4070],[3969,3970,4071],[3969,4070,4071],[3970,3971,4072],[3970,4071,4072],[3971,3972,4073],[3971,4072,4073],[3972,3973,4074],[3972,4073,4074],[3973,3974,4075],[3973,4074,4075],[3976,3977,4078],[3976,4077,4078],[3977,3978,4079],[3977,4078,4079],[3978,3979,4080],[3978,4079,4080],[3982,3983,4084],[3982,4083,4084],[3983,3984,4085],[3983,4084,4085],[3984,3985,4086],[3984,4085,4086],[3985,3986,4087],[3985,4086,4087],[3986,3987,4088],[3986,4087,4088],[3987,3988,4089],[3987,4088,4089],[3988,3989,4090],[3988,4089,4090],[3989,3990,4091],[3989,4090,4091],[3990,3991,4092],[3990,4091,4092],[3991,3992,4093],[3991,4092,4093],[3992,3993,4094],[3992,4093,4094],[3993,3994,4095],[3993,4094,4095],[3994,3995,4096],[3994,4095,4096],[3995,3996,4097],[3995,4096,4097],[3996,3997,4098],[3996,4097,4098],[3997,3998,4099],[3997,4098,4099],[3998,3999,4100],[3998,4099,4100],[3999,4000,4101],[3999,4100,4101],[4000,4001,4102],[4000,4101,4102],[4001,4002,4103],[4001,4102,4103],[4002,4003,4104],[4002,4103,4104],[4003,4004,4105],[4003,4104,4105],[4004,4005,4106],[4004,4105,4106],[4005,4006,4107],[4005,4106,4107],[4006,4007,4108],[4006,4107,4108],[4007,4008,4109],[4007,4108,4109],[4008,4009,4110],[4008,4109,4110],[4009,4010,4111],[4009,4110,4111],[4010,4011,4112],[4010,4111,4112],[4011,4012,4113],[4011,4112,4113],[4012,4013,4114],[4012,4113,4114],[4013,4014,4115],[4013,4114,4115],[4014,4015,4116],[4014,4115,4116],[4015,4016,4117],[4015,4116,4117],[4016,4017,4118],[4016,4117,4118],[4017,4018,4119],[4017,4118,4119],[4018,4019,4120],[4018,4119,4120],[4019,4020,4121],[4019,4120,4121],[4020,4021,4122],[4020,4121,4122],[4021,4022,4123],[4021,4122,4123],[4022,4023,4124],[4022,4123,4124],[4023,4024,4125],[4023,4124,4125],[4024,4025,4126],[4024,4125,4126],[4027,4028,4129],[4027,4128,4129],[4028,4029,4130],[4028,4129,4130],[4029,4030,4131],[4029,4130,4131],[4030,4031,4132],[4030,4131,4132],[4031,4032,4133],[4031,4132,4133],[4032,4033,4134],[4032,4133,4134],[4041,4042,4143],[4041,4142,4143],[4042,4043,4144],[4042,4143,4144],[4043,4044,4145],[4043,4144,4145],[4044,4045,4146],[4044,4145,4146],[4045,4046,4147],[4045,4146,4147],[4046,4047,4148],[4046,4147,4148],[4047,4048,4149],[4047,4148,4149],[4048,4049,4150],[4048,4149,4150],[4049,4050,4151],[4049,4150,4151],[4050,4051,4152],[4050,4151,4152],[4051,4052,4153],[4051,4152,4153],[4052,4053,4154],[4052,4153,4154],[4053,4054,4155],[4053,4154,4155],[4054,4055,4156],[4054,4155,4156],[4055,4056,4157],[4055,4156,4157],[4059,4060,4161],[4059,4160,4161],[4062,4063,4164],[4062,4163,4164],[4063,4064,4165],[4063,4164,4165],[4064,4065,4166],[4064,4165,4166],[4065,4066,4167],[4065,4166,4167],[4066,4067,4168],[4066,4167,4168],[4067,4068,4169],[4067,4168,4169],[4068,4069,4170],[4068,4169,4170],[4069,4070,4171],[4069,4170,4171],[4070,4071,4172],[4070,4171,4172],[4071,4072,4173],[4071,4172,4173],[4072,4073,4174],[4072,4173,4174],[4073,4074,4175],[4073,4174,4175],[4074,4075,4176],[4074,4175,4176],[4077,4078,4179],[4077,4178,4179],[4078,4079,4180],[4078,4179,4180],[4079,4080,4181],[4079,4180,4181],[4080,4081,4182],[4080,4181,4182],[4082,4083,4184],[4082,4183,4184],[4083,4084,4185],[4083,4184,4185],[4084,4085,4186],[4084,4185,4186],[4085,4086,4187],[4085,4186,4187],[4086,4087,4188],[4086,4187,4188],[4087,4088,4189],[4087,4188,4189],[4088,4089,4190],[4088,4189,4190],[4089,4090,4191],[4089,4190,4191],[4090,4091,4192],[4090,4191,4192],[4091,4092,4193],[4091,4192,4193],[4092,4093,4194],[4092,4193,4194],[4093,4094,4195],[4093,4194,4195],[4094,4095,4196],[4094,4195,4196],[4095,4096,4197],[4095,4196,4197],[4096,4097,4198],[4096,4197,4198],[4097,4098,4199],[4097,4198,4199],[4098,4099,4200],[4098,4199,4200],[4101,4102,4203],[4101,4202,4203],[4102,4103,4204],[4102,4203,4204],[4103,4104,4205],[4103,4204,4205],[4104,4105,4206],[4104,4205,4206],[4105,4106,4207],[4105,4206,4207],[4106,4107,4208],[4106,4207,4208],[4108,4109,4210],[4108,4209,4210],[4109,4110,4211],[4109,4210,4211],[4110,4111,4212],[4110,4211,4212],[4111,4112,4213],[4111,4212,4213],[4112,4113,4214],[4112,4213,4214],[4113,4114,4215],[4113,4214,4215],[4114,4115,4216],[4114,4215,4216],[4115,4116,4217],[4115,4216,4217],[4116,4117,4218],[4116,4217,4218],[4117,4118,4219],[4117,4218,4219],[4118,4119,4220],[4118,4219,4220],[4119,4120,4221],[4119,4220,4221],[4120,4121,4222],[4120,4221,4222],[4121,4122,4223],[4121,4222,4223],[4122,4123,4224],[4122,4223,4224],[4123,4124,4225],[4123,4224,4225],[4124,4125,4226],[4124,4225,4226],[4125,4126,4227],[4125,4226,4227],[4128,4129,4230],[4128,4229,4230],[4129,4130,4231],[4129,4230,4231],[4130,4131,4232],[4130,4231,4232],[4131,4132,4233],[4131,4232,4233],[4132,4133,4234],[4132,4233,4234],[4133,4134,4235],[4133,4234,4235],[4142,4143,4244],[4143,4144,4245],[4143,4244,4245],[4144,4145,4246],[4144,4245,4246],[4145,4146,4247],[4145,4246,4247],[4146,4147,4248],[4146,4247,4248],[4147,4148,4249],[4147,4248,4249],[4148,4149,4250],[4148,4249,4250],[4149,4150,4251],[4149,4250,4251],[4150,4151,4252],[4150,4251,4252],[4151,4152,4253],[4151,4252,4253],[4152,4153,4254],[4152,4253,4254],[4153,4154,4255],[4153,4254,4255],[4154,4155,4256],[4154,4255,4256],[4155,4156,4257],[4155,4256,4257],[4156,4157,4258],[4156,4257,4258],[4160,4161,4262],[4160,4261,4262],[4163,4164,4265],[4163,4264,4265],[4164,4165,4266],[4164,4265,4266],[4165,4166,4267],[4165,4266,4267],[4166,4167,4268],[4166,4267,4268],[4167,4168,4269],[4167,4268,4269],[4168,4169,4270],[4168,4269,4270],[4169,4170,4271],[4169,4270,4271],[4170,4171,4272],[4170,4271,4272],[4171,4172,4273],[4171,4272,4273],[4172,4173,4274],[4172,4273,4274],[4173,4174,4275],[4173,4274,4275],[4174,4175,4276],[4174,4275,4276],[4175,4176,4277],[4175,4276,4277],[4178,4179,4280],[4178,4279,4280],[4179,4180,4281],[4179,4280,4281],[4180,4181,4282],[4180,4281,4282],[4181,4182,4283],[4181,4282,4283],[4183,4184,4285],[4183,4284,4285],[4184,4185,4286],[4184,4285,4286],[4185,4186,4287],[4185,4286,4287],[4186,4187,4288],[4186,4287,4288],[4187,4188,4289],[4187,4288,4289],[4188,4189,4290],[4188,4289,4290],[4189,4190,4291],[4189,4290,4291],[4190,4191,4292],[4190,4291,4292],[4191,4192,4293],[4191,4292,4293],[4192,4193,4294],[4192,4293,4294],[4193,4194,4295],[4193,4294,4295],[4194,4195,4296],[4194,4295,4296],[4195,4196,4297],[4195,4296,4297],[4196,4197,4298],[4196,4297,4298],[4197,4198,4299],[4197,4298,4299],[4198,4199,4300],[4198,4299,4300],[4199,4200,4301],[4199,4300,4301],[4202,4203,4304],[4202,4303,4304],[4203,4204,4305],[4203,4304,4305],[4204,4205,4306],[4204,4305,4306],[4205,4206,4307],[4205,4306,4307],[4206,4207,4308],[4206,4307,4308],[4207,4208,4309],[4207,4308,4309],[4209,4210,4311],[4209,4310,4311],[4210,4211,4312],[4210,4311,4312],[4211,4212,4313],[4211,4312,4313],[4212,4213,4314],[4212,4313,4314],[4213,4214,4315],[4213,4314,4315],[4214,4215,4316],[4214,4315,4316],[4215,4216,4317],[4215,4316,4317],[4216,4217,4318],[4216,4317,4318],[4217,4218,4319],[4217,4318,4319],[4218,4219,4320],[4218,4319,4320],[4219,4220,4321],[4219,4320,4321],[4220,4221,4322],[4220,4321,4322],[4221,4222,4323],[4221,4322,4323],[4222,4223,4324],[4222,4323,4324],[4223,4224,4325],[4223,4324,4325],[4224,4225,4326],[4224,4325,4326],[4225,4226,4327],[4225,4326,4327],[4226,4227,4328],[4226,4327,4328],[4229,4230,4331],[4230,4231,4332],[4230,4331,4332],[4231,4232,4333],[4231,4332,4333],[4232,4233,4334],[4232,4333,4334],[4233,4234,4335],[4233,4334,4335],[4234,4235,4336],[4234,4335,4336],[4244,4245,4346],[4244,4345,4346],[4245,4246,4347],[4245,4346,4347],[4246,4247,4348],[4246,4347,4348],[4247,4248,4349],[4247,4348,4349],[4248,4249,4350],[4248,4349,4350],[4249,4250,4351],[4249,4350,4351],[4250,4251,4352],[4250,4351,4352],[4251,4252,4353],[4251,4352,4353],[4252,4253,4354],[4252,4353,4354],[4253,4254,4355],[4253,4354,4355],[4254,4255,4356],[4254,4355,4356],[4255,4256,4357],[4255,4356,4357],[4256,4257,4358],[4256,4357,4358],[4257,4258,4359],[4257,4358,4359],[4261,4262,4363],[4261,4362,4363],[4264,4265,4366],[4264,4365,4366],[4265,4266,4367],[4265,4366,4367],[4266,4267,4368],[4266,4367,4368],[4267,4268,4369],[4267,4368,4369],[4268,4269,4370],[4268,4369,4370],[4269,4270,4371],[4269,4370,4371],[4270,4271,4372],[4270,4371,4372],[4271,4272,4373],[4271,4372,4373],[4272,4273,4374],[4272,4373,4374],[4273,4274,4375],[4273,4374,4375],[4274,4275,4376],[4274,4375,4376],[4275,4276,4377],[4275,4376,4377],[4279,4280,4381],[4279,4380,4381],[4280,4281,4382],[4280,4381,4382],[4281,4282,4383],[4281,4382,4383],[4282,4283,4384],[4282,4383,4384],[4284,4285,4386],[4284,4385,4386],[4285,4286,4387],[4285,4386,4387],[4286,4287,4388],[4286,4387,4388],[4287,4288,4389],[4287,4388,4389],[4288,4289,4390],[4288,4389,4390],[4289,4290,4391],[4289,4390,4391],[4291,4292,4393],[4291,4392,4393],[4292,4293,4394],[4292,4393,4394],[4293,4294,4395],[4293,4394,4395],[4294,4295,4396],[4294,4395,4396],[4295,4296,4397],[4295,4396,4397],[4296,4297,4398],[4296,4397,4398],[4297,4298,4399],[4297,4398,4399],[4298,4299,4400],[4298,4399,4400],[4299,4300,4401],[4299,4400,4401],[4300,4301,4402],[4300,4401,4402],[4303,4304,4405],[4303,4404,4405],[4304,4305,4406],[4304,4405,4406],[4305,4306,4407],[4305,4406,4407],[4306,4307,4408],[4306,4407,4408],[4307,4308,4409],[4307,4408,4409],[4308,4309,4410],[4308,4409,4410],[4310,4311,4412],[4310,4411,4412],[4311,4312,4413],[4311,4412,4413],[4312,4313,4414],[4312,4413,4414],[4313,4314,4415],[4313,4414,4415],[4314,4315,4416],[4314,4415,4416],[4315,4316,4417],[4315,4416,4417],[4316,4317,4418],[4316,4417,4418],[4317,4318,4419],[4317,4418,4419],[4318,4319,4420],[4318,4419,4420],[4319,4320,4421],[4319,4420,4421],[4320,4321,4422],[4320,4421,4422],[4321,4322,4423],[4321,4422,4423],[4322,4323,4424],[4322,4423,4424],[4323,4324,4425],[4323,4424,4425],[4324,4325,4426],[4324,4425,4426],[4325,4326,4427],[4325,4426,4427],[4326,4327,4428],[4326,4427,4428],[4327,4328,4429],[4327,4428,4429],[4331,4332,4433],[4331,4432,4433],[4332,4333,4434],[4332,4433,4434],[4333,4334,4435],[4333,4434,4435],[4334,4335,4436],[4334,4435,4436],[4345,4346,4447],[4345,4446,4447],[4346,4347,4448],[4346,4447,4448],[4347,4348,4449],[4347,4448,4449],[4348,4349,4450],[4348,4449,4450],[4349,4350,4451],[4349,4450,4451],[4350,4351,4452],[4350,4451,4452],[4351,4352,4453],[4351,4452,4453],[4352,4353,4454],[4352,4453,4454],[4353,4354,4455],[4353,4454,4455],[4354,4355,4456],[4354,4455,4456],[4355,4356,4457],[4355,4456,4457],[4356,4357,4458],[4356,4457,4458],[4357,4358,4459],[4357,4458,4459],[4358,4359,4460],[4358,4459,4460],[4362,4363,4464],[4362,4463,4464],[4365,4366,4467],[4365,4466,4467],[4366,4367,4468],[4366,4467,4468],[4367,4368,4469],[4367,4468,4469],[4368,4369,4470],[4368,4469,4470],[4369,4370,4471],[4369,4470,4471],[4370,4371,4472],[4370,4471,4472],[4371,4372,4473],[4371,4472,4473],[4372,4373,4474],[4372,4473,4474],[4373,4374,4475],[4373,4474,4475],[4374,4375,4476],[4374,4475,4476],[4375,4376,4477],[4375,4476,4477],[4376,4377,4478],[4376,4477,4478],[4380,4381,4482],[4380,4481,4482],[4381,4382,4483],[4381,4482,4483],[4382,4383,4484],[4382,4483,4484],[4383,4384,4485],[4383,4484,4485],[4385,4386,4487],[4385,4486,4487],[4386,4387,4488],[4386,4487,4488],[4387,4388,4489],[4387,4488,4489],[4388,4389,4490],[4388,4489,4490],[4389,4390,4491],[4389,4490,4491],[4390,4391,4492],[4390,4491,4492],[4392,4393,4494],[4392,4493,4494],[4393,4394,4495],[4393,4494,4495],[4394,4395,4496],[4394,4495,4496],[4395,4396,4497],[4395,4496,4497],[4396,4397,4498],[4396,4497,4498],[4397,4398,4499],[4397,4498,4499],[4398,4399,4500],[4398,4499,4500],[4399,4400,4501],[4399,4500,4501],[4400,4401,4502],[4400,4501,4502],[4401,4402,4503],[4401,4502,4503],[4404,4405,4506],[4404,4505,4506],[4405,4406,4507],[4405,4506,4507],[4406,4407,4508],[4406,4507,4508],[4407,4408,4509],[4407,4508,4509],[4408,4409,4510],[4408,4509,4510],[4409,4410,4511],[4409,4510,4511],[4411,4412,4513],[4411,4512,4513],[4412,4413,4514],[4412,4513,4514],[4413,4414,4515],[4413,4514,4515],[4414,4415,4516],[4414,4515,4516],[4415,4416,4517],[4415,4516,4517],[4416,4417,4518],[4416,4517,4518],[4417,4418,4519],[4417,4518,4519],[4418,4419,4520],[4418,4519,4520],[4419,4420,4521],[4419,4520,4521],[4420,4421,4522],[4420,4521,4522],[4421,4422,4523],[4421,4522,4523],[4422,4423,4524],[4422,4523,4524],[4423,4424,4525],[4423,4524,4525],[4424,4425,4526],[4424,4525,4526],[4425,4426,4527],[4425,4526,4527],[4426,4427,4528],[4426,4527,4528],[4427,4428,4529],[4427,4528,4529],[4428,4429,4530],[4428,4529,4530],[4432,4433,4534],[4432,4533,4534],[4433,4434,4535],[4433,4534,4535],[4434,4435,4536],[4434,4535,4536],[4435,4436,4537],[4435,4536,4537],[4444,4445,4546],[4444,4545,4546],[4446,4447,4548],[4447,4448,4549],[4447,4548,4549],[4448,4449,4550],[4448,4549,4550],[4449,4450,4551],[4449,4550,4551],[4450,4451,4552],[4450,4551,4552],[4451,4452,4553],[4451,4552,4553],[4452,4453,4554],[4452,4553,4554],[4453,4454,4555],[4453,4554,4555],[4454,4455,4556],[4454,4555,4556],[4455,4456,4557],[4455,4556,4557],[4456,4457,4558],[4456,4557,4558],[4457,4458,4559],[4457,4558,4559],[4458,4459,4560],[4458,4559,4560],[4462,4463,4564],[4462,4563,4564],[4463,4464,4565],[4463,4564,4565],[4466,4467,4568],[4467,4468,4569],[4467,4568,4569],[4468,4469,4570],[4468,4569,4570],[4469,4470,4571],[4469,4570,4571],[4470,4471,4572],[4470,4571,4572],[4471,4472,4573],[4471,4572,4573],[4472,4473,4574],[4472,4573,4574],[4473,4474,4575],[4473,4574,4575],[4474,4475,4576],[4474,4575,4576],[4475,4476,4577],[4475,4576,4577],[4476,4477,4578],[4476,4577,4578],[4477,4478,4579],[4477,4578,4579],[4481,4482,4583],[4481,4582,4583],[4482,4483,4584],[4482,4583,4584],[4483,4484,4585],[4483,4584,4585],[4484,4485,4586],[4484,4585,4586],[4486,4487,4588],[4486,4587,4588],[4487,4488,4589],[4487,4588,4589],[4488,4489,4590],[4488,4589,4590],[4489,4490,4591],[4489,4590,4591],[4490,4491,4592],[4490,4591,4592],[4491,4492,4593],[4491,4592,4593],[4493,4494,4595],[4493,4594,4595],[4494,4495,4596],[4494,4595,4596],[4495,4496,4597],[4495,4596,4597],[4496,4497,4598],[4496,4597,4598],[4497,4498,4599],[4497,4598,4599],[4498,4499,4600],[4498,4599,4600],[4499,4500,4601],[4499,4600,4601],[4500,4501,4602],[4500,4601,4602],[4501,4502,4603],[4501,4602,4603],[4502,4503,4604],[4502,4603,4604],[4505,4506,4607],[4505,4606,4607],[4506,4507,4608],[4506,4607,4608],[4507,4508,4609],[4507,4608,4609],[4508,4509,4610],[4508,4609,4610],[4509,4510,4611],[4509,4610,4611],[4510,4511,4612],[4510,4611,4612],[4512,4513,4614],[4512,4613,4614],[4513,4514,4615],[4513,4614,4615],[4514,4515,4616],[4514,4615,4616],[4515,4516,4617],[4515,4616,4617],[4516,4517,4618],[4516,4617,4618],[4517,4518,4619],[4517,4618,4619],[4518,4519,4620],[4518,4619,4620],[4519,4520,4621],[4519,4620,4621],[4520,4521,4622],[4520,4621,4622],[4521,4522,4623],[4521,4622,4623],[4522,4523,4624],[4522,4623,4624],[4523,4524,4625],[4523,4624,4625],[4524,4525,4626],[4524,4625,4626],[4525,4526,4627],[4525,4626,4627],[4526,4527,4628],[4526,4627,4628],[4527,4528,4629],[4527,4628,4629],[4528,4529,4630],[4528,4629,4630],[4529,4530,4631],[4529,4630,4631],[4533,4534,4635],[4533,4634,4635],[4534,4535,4636],[4534,4635,4636],[4535,4536,4637],[4535,4636,4637],[4536,4537,4638],[4536,4637,4638],[4545,4546,4647],[4545,4646,4647],[4548,4549,4650],[4548,4649,4650],[4549,4550,4651],[4549,4650,4651],[4550,4551,4652],[4550,4651,4652],[4551,4552,4653],[4551,4652,4653],[4552,4553,4654],[4552,4653,4654],[4553,4554,4655],[4553,4654,4655],[4554,4555,4656],[4554,4655,4656],[4555,4556,4657],[4555,4656,4657],[4556,4557,4658],[4556,4657,4658],[4557,4558,4659],[4557,4658,4659],[4558,4559,4660],[4558,4659,4660],[4559,4560,4661],[4559,4660,4661],[4563,4564,4665],[4563,4664,4665],[4564,4565,4666],[4564,4665,4666],[4565,4566,4667],[4565,4666,4667],[4568,4569,4670],[4568,4669,4670],[4569,4570,4671],[4569,4670,4671],[4570,4571,4672],[4570,4671,4672],[4571,4572,4673],[4571,4672,4673],[4572,4573,4674],[4572,4673,4674],[4573,4574,4675],[4573,4674,4675],[4574,4575,4676],[4574,4675,4676],[4575,4576,4677],[4575,4676,4677],[4576,4577,4678],[4576,4677,4678],[4577,4578,4679],[4577,4678,4679],[4578,4579,4680],[4578,4679,4680],[4582,4583,4684],[4582,4683,4684],[4583,4584,4685],[4583,4684,4685],[4584,4585,4686],[4584,4685,4686],[4585,4586,4687],[4585,4686,4687],[4587,4588,4689],[4587,4688,4689],[4588,4589,4690],[4588,4689,4690],[4589,4590,4691],[4589,4690,4691],[4590,4591,4692],[4590,4691,4692],[4591,4592,4693],[4591,4692,4693],[4592,4593,4694],[4592,4693,4694],[4594,4595,4696],[4594,4695,4696],[4595,4596,4697],[4595,4696,4697],[4596,4597,4698],[4596,4697,4698],[4597,4598,4699],[4597,4698,4699],[4598,4599,4700],[4598,4699,4700],[4599,4600,4701],[4599,4700,4701],[4600,4601,4702],[4600,4701,4702],[4601,4602,4703],[4601,4702,4703],[4602,4603,4704],[4602,4703,4704],[4603,4604,4705],[4603,4704,4705],[4606,4607,4708],[4606,4707,4708],[4607,4608,4709],[4607,4708,4709],[4608,4609,4710],[4608,4709,4710],[4609,4610,4711],[4609,4710,4711],[4610,4611,4712],[4610,4711,4712],[4611,4612,4713],[4611,4712,4713],[4613,4614,4715],[4613,4714,4715],[4614,4615,4716],[4614,4715,4716],[4615,4616,4717],[4615,4716,4717],[4616,4617,4718],[4616,4717,4718],[4617,4618,4719],[4617,4718,4719],[4618,4619,4720],[4618,4719,4720],[4619,4620,4721],[4619,4720,4721],[4620,4621,4722],[4620,4721,4722],[4621,4622,4723],[4621,4722,4723],[4622,4623,4724],[4622,4723,4724],[4623,4624,4725],[4623,4724,4725],[4624,4625,4726],[4624,4725,4726],[4625,4626,4727],[4625,4726,4727],[4626,4627,4728],[4626,4727,4728],[4627,4628,4729],[4627,4728,4729],[4628,4629,4730],[4628,4729,4730],[4629,4630,4731],[4629,4730,4731],[4630,4631,4732],[4630,4731,4732],[4634,4635,4736],[4634,4735,4736],[4635,4636,4737],[4635,4736,4737],[4636,4637,4738],[4636,4737,4738],[4637,4638,4739],[4637,4738,4739],[4646,4647,4748],[4646,4747,4748],[4649,4650,4751],[4650,4651,4752],[4650,4751,4752],[4651,4652,4753],[4651,4752,4753],[4652,4653,4754],[4652,4753,4754],[4653,4654,4755],[4653,4754,4755],[4654,4655,4756],[4654,4755,4756],[4655,4656,4757],[4655,4756,4757],[4656,4657,4758],[4656,4757,4758],[4657,4658,4759],[4657,4758,4759],[4658,4659,4760],[4658,4759,4760],[4659,4660,4761],[4659,4760,4761],[4660,4661,4762],[4660,4761,4762],[4664,4665,4766],[4664,4765,4766],[4665,4666,4767],[4665,4766,4767],[4666,4667,4768],[4666,4767,4768],[4669,4670,4771],[4669,4770,4771],[4670,4671,4772],[4670,4771,4772],[4671,4672,4773],[4671,4772,4773],[4672,4673,4774],[4672,4773,4774],[4673,4674,4775],[4673,4774,4775],[4674,4675,4776],[4674,4775,4776],[4675,4676,4777],[4675,4776,4777],[4676,4677,4778],[4676,4777,4778],[4677,4678,4779],[4677,4778,4779],[4678,4679,4780],[4678,4779,4780],[4682,4683,4784],[4682,4783,4784],[4683,4684,4785],[4683,4784,4785],[4684,4685,4786],[4684,4785,4786],[4685,4686,4787],[4685,4786,4787],[4686,4687,4788],[4686,4787,4788],[4688,4689,4790],[4688,4789,4790],[4689,4690,4791],[4689,4790,4791],[4690,4691,4792],[4690,4791,4792],[4691,4692,4793],[4691,4792,4793],[4692,4693,4794],[4692,4793,4794],[4693,4694,4795],[4693,4794,4795],[4695,4696,4797],[4695,4796,4797],[4696,4697,4798],[4696,4797,4798],[4697,4698,4799],[4697,4798,4799],[4698,4699,4800],[4698,4799,4800],[4699,4700,4801],[4699,4800,4801],[4700,4701,4802],[4700,4801,4802],[4701,4702,4803],[4701,4802,4803],[4702,4703,4804],[4702,4803,4804],[4703,4704,4805],[4703,4804,4805],[4704,4705,4806],[4704,4805,4806],[4707,4708,4809],[4707,4808,4809],[4708,4709,4810],[4708,4809,4810],[4709,4710,4811],[4709,4810,4811],[4710,4711,4812],[4710,4811,4812],[4711,4712,4813],[4711,4812,4813],[4712,4713,4814],[4712,4813,4814],[4714,4715,4816],[4714,4815,4816],[4715,4716,4817],[4715,4816,4817],[4716,4717,4818],[4716,4817,4818],[4717,4718,4819],[4717,4818,4819],[4718,4719,4820],[4718,4819,4820],[4719,4720,4821],[4719,4820,4821],[4720,4721,4822],[4720,4821,4822],[4721,4722,4823],[4721,4822,4823],[4722,4723,4824],[4722,4823,4824],[4723,4724,4825],[4723,4824,4825],[4724,4725,4826],[4724,4825,4826],[4725,4726,4827],[4725,4826,4827],[4726,4727,4828],[4726,4827,4828],[4727,4728,4829],[4727,4828,4829],[4728,4729,4830],[4728,4829,4830],[4729,4730,4831],[4729,4830,4831],[4730,4731,4832],[4730,4831,4832],[4731,4732,4833],[4731,4832,4833],[4732,4733,4834],[4732,4833,4834],[4735,4736,4837],[4735,4836,4837],[4736,4737,4838],[4736,4837,4838],[4737,4738,4839],[4737,4838,4839],[4738,4739,4840],[4738,4839,4840],[4747,4748,4849],[4747,4848,4849],[4751,4752,4853],[4751,4852,4853],[4752,4753,4854],[4752,4853,4854],[4753,4754,4855],[4753,4854,4855],[4754,4755,4856],[4754,4855,4856],[4755,4756,4857],[4755,4856,4857],[4756,4757,4858],[4756,4857,4858],[4757,4758,4859],[4757,4858,4859],[4758,4759,4860],[4758,4859,4860],[4759,4760,4861],[4759,4860,4861],[4760,4761,4862],[4760,4861,4862],[4761,4762,4863],[4761,4862,4863],[4765,4766,4867],[4765,4866,4867],[4766,4767,4868],[4766,4867,4868],[4767,4768,4869],[4767,4868,4869],[4770,4771,4872],[4770,4871,4872],[4771,4772,4873],[4771,4872,4873],[4772,4773,4874],[4772,4873,4874],[4773,4774,4875],[4773,4874,4875],[4774,4775,4876],[4774,4875,4876],[4775,4776,4877],[4775,4876,4877],[4776,4777,4878],[4776,4877,4878],[4777,4778,4879],[4777,4878,4879],[4778,4779,4880],[4778,4879,4880],[4779,4780,4881],[4779,4880,4881],[4783,4784,4885],[4783,4884,4885],[4784,4785,4886],[4784,4885,4886],[4785,4786,4887],[4785,4886,4887],[4786,4787,4888],[4786,4887,4888],[4787,4788,4889],[4787,4888,4889],[4789,4790,4891],[4789,4890,4891],[4790,4791,4892],[4790,4891,4892],[4791,4792,4893],[4791,4892,4893],[4792,4793,4894],[4792,4893,4894],[4793,4794,4895],[4793,4894,4895],[4794,4795,4896],[4794,4895,4896],[4796,4797,4898],[4796,4897,4898],[4797,4798,4899],[4797,4898,4899],[4798,4799,4900],[4798,4899,4900],[4799,4800,4901],[4799,4900,4901],[4800,4801,4902],[4800,4901,4902],[4801,4802,4903],[4801,4902,4903],[4802,4803,4904],[4802,4903,4904],[4803,4804,4905],[4803,4904,4905],[4804,4805,4906],[4804,4905,4906],[4805,4806,4907],[4805,4906,4907],[4808,4809,4910],[4808,4909,4910],[4809,4810,4911],[4809,4910,4911],[4810,4811,4912],[4810,4911,4912],[4811,4812,4913],[4811,4912,4913],[4812,4813,4914],[4812,4913,4914],[4813,4814,4915],[4813,4914,4915],[4815,4816,4917],[4815,4916,4917],[4816,4817,4918],[4816,4917,4918],[4817,4818,4919],[4817,4918,4919],[4818,4819,4920],[4818,4919,4920],[4819,4820,4921],[4819,4920,4921],[4820,4821,4922],[4820,4921,4922],[4821,4822,4923],[4821,4922,4923],[4822,4823,4924],[4822,4923,4924],[4823,4824,4925],[4823,4924,4925],[4824,4825,4926],[4824,4925,4926],[4825,4826,4927],[4825,4926,4927],[4826,4827,4928],[4826,4927,4928],[4827,4828,4929],[4827,4928,4929],[4828,4829,4930],[4828,4929,4930],[4829,4830,4931],[4829,4930,4931],[4830,4831,4932],[4830,4931,4932],[4831,4832,4933],[4831,4932,4933],[4832,4833,4934],[4832,4933,4934],[4833,4834,4935],[4833,4934,4935],[4836,4837,4938],[4836,4937,4938],[4837,4838,4939],[4837,4938,4939],[4838,4839,4940],[4838,4939,4940],[4839,4840,4941],[4839,4940,4941],[4848,4849,4950],[4848,4949,4950],[4849,4850,4951],[4849,4950,4951],[4852,4853,4954],[4853,4854,4955],[4853,4954,4955],[4854,4855,4956],[4854,4955,4956],[4855,4856,4957],[4855,4956,4957],[4856,4857,4958],[4856,4957,4958],[4857,4858,4959],[4857,4958,4959],[4858,4859,4960],[4858,4959,4960],[4859,4860,4961],[4859,4960,4961],[4860,4861,4962],[4860,4961,4962],[4861,4862,4963],[4861,4962,4963],[4862,4863,4964],[4862,4963,4964],[4866,4867,4968],[4866,4967,4968],[4867,4868,4969],[4867,4968,4969],[4868,4869,4970],[4868,4969,4970],[4871,4872,4973],[4871,4972,4973],[4872,4873,4974],[4872,4973,4974],[4873,4874,4975],[4873,4974,4975],[4874,4875,4976],[4874,4975,4976],[4875,4876,4977],[4875,4976,4977],[4876,4877,4978],[4876,4977,4978],[4877,4878,4979],[4877,4978,4979],[4878,4879,4980],[4878,4979,4980],[4879,4880,4981],[4879,4980,4981],[4880,4881,4982],[4880,4981,4982],[4884,4885,4986],[4884,4985,4986],[4885,4886,4987],[4885,4986,4987],[4886,4887,4988],[4886,4987,4988],[4887,4888,4989],[4887,4988,4989],[4888,4889,4990],[4888,4989,4990],[4890,4891,4992],[4890,4991,4992],[4891,4892,4993],[4891,4992,4993],[4892,4893,4994],[4892,4993,4994],[4893,4894,4995],[4893,4994,4995],[4894,4895,4996],[4894,4995,4996],[4895,4896,4997],[4895,4996,4997],[4897,4898,4999],[4898,4899,5000],[4898,4999,5000],[4899,4900,5001],[4899,5000,5001],[4900,4901,5002],[4900,5001,5002],[4901,4902,5003],[4901,5002,5003],[4902,4903,5004],[4902,5003,5004],[4903,4904,5005],[4903,5004,5005],[4904,4905,5006],[4904,5005,5006],[4905,4906,5007],[4905,5006,5007],[4906,4907,5008],[4906,5007,5008],[4909,4910,5011],[4909,5010,5011],[4910,4911,5012],[4910,5011,5012],[4911,4912,5013],[4911,5012,5013],[4912,4913,5014],[4912,5013,5014],[4913,4914,5015],[4913,5014,5015],[4914,4915,5016],[4914,5015,5016],[4916,4917,5018],[4916,5017,5018],[4917,4918,5019],[4917,5018,5019],[4918,4919,5020],[4918,5019,5020],[4919,4920,5021],[4919,5020,5021],[4920,4921,5022],[4920,5021,5022],[4921,4922,5023],[4921,5022,5023],[4922,4923,5024],[4922,5023,5024],[4923,4924,5025],[4923,5024,5025],[4924,4925,5026],[4924,5025,5026],[4925,4926,5027],[4925,5026,5027],[4926,4927,5028],[4926,5027,5028],[4927,4928,5029],[4927,5028,5029],[4928,4929,5030],[4928,5029,5030],[4929,4930,5031],[4929,5030,5031],[4930,4931,5032],[4930,5031,5032],[4931,4932,5033],[4931,5032,5033],[4932,4933,5034],[4932,5033,5034],[4933,4934,5035],[4933,5034,5035],[4934,4935,5036],[4934,5035,5036],[4937,4938,5039],[4937,5038,5039],[4938,4939,5040],[4938,5039,5040],[4939,4940,5041],[4939,5040,5041],[4940,4941,5042],[4940,5041,5042],[4949,4950,5051],[4949,5050,5051],[4950,4951,5052],[4950,5051,5052],[4954,4955,5056],[4954,5055,5056],[4955,4956,5057],[4955,5056,5057],[4956,4957,5058],[4956,5057,5058],[4957,4958,5059],[4957,5058,5059],[4958,4959,5060],[4958,5059,5060],[4959,4960,5061],[4959,5060,5061],[4960,4961,5062],[4960,5061,5062],[4961,4962,5063],[4961,5062,5063],[4962,4963,5064],[4962,5063,5064],[4963,4964,5065],[4963,5064,5065],[4967,4968,5069],[4967,5068,5069],[4968,4969,5070],[4968,5069,5070],[4969,4970,5071],[4969,5070,5071],[4972,4973,5074],[4972,5073,5074],[4973,4974,5075],[4973,5074,5075],[4974,4975,5076],[4974,5075,5076],[4975,4976,5077],[4975,5076,5077],[4976,4977,5078],[4976,5077,5078],[4977,4978,5079],[4977,5078,5079],[4978,4979,5080],[4978,5079,5080],[4979,4980,5081],[4979,5080,5081],[4980,4981,5082],[4980,5081,5082],[4981,4982,5083],[4981,5082,5083],[4985,4986,5087],[4985,5086,5087],[4986,4987,5088],[4986,5087,5088],[4987,4988,5089],[4987,5088,5089],[4988,4989,5090],[4988,5089,5090],[4989,4990,5091],[4989,5090,5091],[4991,4992,5093],[4991,5092,5093],[4992,4993,5094],[4992,5093,5094],[4993,4994,5095],[4993,5094,5095],[4994,4995,5096],[4994,5095,5096],[4995,4996,5097],[4995,5096,5097],[4999,5000,5101],[4999,5100,5101],[5000,5001,5102],[5000,5101,5102],[5001,5002,5103],[5001,5102,5103],[5002,5003,5104],[5002,5103,5104],[5003,5004,5105],[5003,5104,5105],[5004,5005,5106],[5004,5105,5106],[5005,5006,5107],[5005,5106,5107],[5006,5007,5108],[5006,5107,5108],[5007,5008,5109],[5007,5108,5109],[5010,5011,5112],[5010,5111,5112],[5011,5012,5113],[5011,5112,5113],[5012,5013,5114],[5012,5113,5114],[5013,5014,5115],[5013,5114,5115],[5014,5015,5116],[5014,5115,5116],[5015,5016,5117],[5015,5116,5117],[5017,5018,5119],[5017,5118,5119],[5018,5019,5120],[5018,5119,5120],[5019,5020,5121],[5019,5120,5121],[5020,5021,5122],[5020,5121,5122],[5021,5022,5123],[5021,5122,5123],[5022,5023,5124],[5022,5123,5124],[5023,5024,5125],[5023,5124,5125],[5024,5025,5126],[5024,5125,5126],[5025,5026,5127],[5025,5126,5127],[5026,5027,5128],[5026,5127,5128],[5027,5028,5129],[5027,5128,5129],[5028,5029,5130],[5028,5129,5130],[5029,5030,5131],[5029,5130,5131],[5030,5031,5132],[5030,5131,5132],[5031,5032,5133],[5031,5132,5133],[5032,5033,5134],[5032,5133,5134],[5033,5034,5135],[5033,5134,5135],[5034,5035,5136],[5034,5135,5136],[5035,5036,5137],[5035,5136,5137],[5038,5039,5140],[5038,5139,5140],[5039,5040,5141],[5039,5140,5141],[5040,5041,5142],[5040,5141,5142],[5041,5042,5143],[5041,5142,5143],[5050,5051,5152],[5050,5151,5152],[5051,5052,5153],[5051,5152,5153],[5055,5056,5157],[5055,5156,5157],[5056,5057,5158],[5056,5157,5158],[5057,5058,5159],[5057,5158,5159],[5058,5059,5160],[5058,5159,5160],[5059,5060,5161],[5059,5160,5161],[5060,5061,5162],[5060,5161,5162],[5061,5062,5163],[5061,5162,5163],[5062,5063,5164],[5062,5163,5164],[5063,5064,5165],[5063,5164,5165],[5064,5065,5166],[5064,5165,5166],[5068,5069,5170],[5068,5169,5170],[5069,5070,5171],[5069,5170,5171],[5070,5071,5172],[5070,5171,5172],[5073,5074,5175],[5073,5174,5175],[5074,5075,5176],[5074,5175,5176],[5075,5076,5177],[5075,5176,5177],[5076,5077,5178],[5076,5177,5178],[5077,5078,5179],[5077,5178,5179],[5078,5079,5180],[5078,5179,5180],[5079,5080,5181],[5079,5180,5181],[5080,5081,5182],[5080,5181,5182],[5081,5082,5183],[5081,5182,5183],[5086,5087,5188],[5086,5187,5188],[5087,5088,5189],[5087,5188,5189],[5088,5089,5190],[5088,5189,5190],[5089,5090,5191],[5089,5190,5191],[5090,5091,5192],[5090,5191,5192],[5092,5093,5194],[5092,5193,5194],[5093,5094,5195],[5093,5194,5195],[5094,5095,5196],[5094,5195,5196],[5095,5096,5197],[5095,5196,5197],[5096,5097,5198],[5096,5197,5198],[5100,5101,5202],[5100,5201,5202],[5101,5102,5203],[5101,5202,5203],[5102,5103,5204],[5102,5203,5204],[5103,5104,5205],[5103,5204,5205],[5104,5105,5206],[5104,5205,5206],[5105,5106,5207],[5105,5206,5207],[5106,5107,5208],[5106,5207,5208],[5107,5108,5209],[5107,5208,5209],[5108,5109,5210],[5108,5209,5210],[5111,5112,5213],[5111,5212,5213],[5112,5113,5214],[5112,5213,5214],[5113,5114,5215],[5113,5214,5215],[5114,5115,5216],[5114,5215,5216],[5115,5116,5217],[5115,5216,5217],[5116,5117,5218],[5116,5217,5218],[5118,5119,5220],[5118,5219,5220],[5119,5120,5221],[5119,5220,5221],[5120,5121,5222],[5120,5221,5222],[5121,5122,5223],[5121,5222,5223],[5122,5123,5224],[5122,5223,5224],[5123,5124,5225],[5123,5224,5225],[5124,5125,5226],[5124,5225,5226],[5125,5126,5227],[5125,5226,5227],[5126,5127,5228],[5126,5227,5228],[5127,5128,5229],[5127,5228,5229],[5128,5129,5230],[5128,5229,5230],[5129,5130,5231],[5129,5230,5231],[5130,5131,5232],[5130,5231,5232],[5131,5132,5233],[5131,5232,5233],[5132,5133,5234],[5132,5233,5234],[5133,5134,5235],[5133,5234,5235],[5134,5135,5236],[5134,5235,5236],[5135,5136,5237],[5135,5236,5237],[5136,5137,5238],[5136,5237,5238],[5139,5140,5241],[5139,5240,5241],[5140,5141,5242],[5140,5241,5242],[5141,5142,5243],[5141,5242,5243],[5151,5152,5253],[5151,5252,5253],[5152,5153,5254],[5152,5253,5254],[5156,5157,5258],[5157,5158,5259],[5157,5258,5259],[5158,5159,5260],[5158,5259,5260],[5159,5160,5261],[5159,5260,5261],[5160,5161,5262],[5160,5261,5262],[5161,5162,5263],[5161,5262,5263],[5162,5163,5264],[5162,5263,5264],[5163,5164,5265],[5163,5264,5265],[5164,5165,5266],[5164,5265,5266],[5165,5166,5267],[5165,5266,5267],[5168,5169,5270],[5168,5269,5270],[5169,5170,5271],[5169,5270,5271],[5170,5171,5272],[5170,5271,5272],[5171,5172,5273],[5171,5272,5273],[5174,5175,5276],[5174,5275,5276],[5175,5176,5277],[5175,5276,5277],[5176,5177,5278],[5176,5277,5278],[5177,5178,5279],[5177,5278,5279],[5178,5179,5280],[5178,5279,5280],[5179,5180,5281],[5179,5280,5281],[5180,5181,5282],[5180,5281,5282],[5181,5182,5283],[5181,5282,5283],[5182,5183,5284],[5182,5283,5284],[5187,5188,5289],[5187,5288,5289],[5188,5189,5290],[5188,5289,5290],[5189,5190,5291],[5189,5290,5291],[5190,5191,5292],[5190,5291,5292],[5192,5193,5294],[5192,5293,5294],[5193,5194,5295],[5193,5294,5295],[5194,5195,5296],[5194,5295,5296],[5195,5196,5297],[5195,5296,5297],[5196,5197,5298],[5196,5297,5298],[5197,5198,5299],[5197,5298,5299],[5201,5202,5303],[5201,5302,5303],[5202,5203,5304],[5202,5303,5304],[5203,5204,5305],[5203,5304,5305],[5204,5205,5306],[5204,5305,5306],[5205,5206,5307],[5205,5306,5307],[5206,5207,5308],[5206,5307,5308],[5207,5208,5309],[5207,5308,5309],[5208,5209,5310],[5208,5309,5310],[5209,5210,5311],[5209,5310,5311],[5212,5213,5314],[5212,5313,5314],[5213,5214,5315],[5213,5314,5315],[5214,5215,5316],[5214,5315,5316],[5215,5216,5317],[5215,5316,5317],[5216,5217,5318],[5216,5317,5318],[5217,5218,5319],[5217,5318,5319],[5219,5220,5321],[5219,5320,5321],[5220,5221,5322],[5220,5321,5322],[5221,5222,5323],[5221,5322,5323],[5222,5223,5324],[5222,5323,5324],[5223,5224,5325],[5223,5324,5325],[5224,5225,5326],[5224,5325,5326],[5225,5226,5327],[5225,5326,5327],[5226,5227,5328],[5226,5327,5328],[5227,5228,5329],[5227,5328,5329],[5228,5229,5330],[5228,5329,5330],[5229,5230,5331],[5229,5330,5331],[5230,5231,5332],[5230,5331,5332],[5231,5232,5333],[5231,5332,5333],[5232,5233,5334],[5232,5333,5334],[5233,5234,5335],[5233,5334,5335],[5234,5235,5336],[5234,5335,5336],[5235,5236,5337],[5235,5336,5337],[5236,5237,5338],[5236,5337,5338],[5237,5238,5339],[5237,5338,5339],[5240,5241,5342],[5240,5341,5342],[5241,5242,5343],[5241,5342,5343],[5242,5243,5344],[5242,5343,5344],[5252,5253,5354],[5252,5353,5354],[5253,5254,5355],[5253,5354,5355],[5254,5255,5356],[5254,5355,5356],[5258,5259,5360],[5258,5359,5360],[5259,5260,5361],[5259,5360,5361],[5260,5261,5362],[5260,5361,5362],[5261,5262,5363],[5261,5362,5363],[5262,5263,5364],[5262,5363,5364],[5263,5264,5365],[5263,5364,5365],[5264,5265,5366],[5264,5365,5366],[5265,5266,5367],[5265,5366,5367],[5269,5270,5371],[5269,5370,5371],[5270,5271,5372],[5270,5371,5372],[5271,5272,5373],[5271,5372,5373],[5272,5273,5374],[5272,5373,5374],[5275,5276,5377],[5276,5277,5378],[5276,5377,5378],[5277,5278,5379],[5277,5378,5379],[5278,5279,5380],[5278,5379,5380],[5279,5280,5381],[5279,5380,5381],[5280,5281,5382],[5280,5381,5382],[5281,5282,5383],[5281,5382,5383],[5282,5283,5384],[5282,5383,5384],[5283,5284,5385],[5283,5384,5385],[5288,5289,5390],[5288,5389,5390],[5289,5290,5391],[5289,5390,5391],[5290,5291,5392],[5290,5391,5392],[5291,5292,5393],[5291,5392,5393],[5293,5294,5395],[5293,5394,5395],[5294,5295,5396],[5294,5395,5396],[5295,5296,5397],[5295,5396,5397],[5296,5297,5398],[5296,5397,5398],[5297,5298,5399],[5297,5398,5399],[5298,5299,5400],[5298,5399,5400],[5302,5303,5404],[5302,5403,5404],[5303,5304,5405],[5303,5404,5405],[5304,5305,5406],[5304,5405,5406],[5305,5306,5407],[5305,5406,5407],[5306,5307,5408],[5306,5407,5408],[5307,5308,5409],[5307,5408,5409],[5308,5309,5410],[5308,5409,5410],[5309,5310,5411],[5309,5410,5411],[5310,5311,5412],[5310,5411,5412],[5313,5314,5415],[5313,5414,5415],[5314,5315,5416],[5314,5415,5416],[5315,5316,5417],[5315,5416,5417],[5316,5317,5418],[5316,5417,5418],[5317,5318,5419],[5317,5418,5419],[5318,5319,5420],[5318,5419,5420],[5320,5321,5422],[5320,5421,5422],[5321,5322,5423],[5321,5422,5423],[5322,5323,5424],[5322,5423,5424],[5323,5324,5425],[5323,5424,5425],[5324,5325,5426],[5324,5425,5426],[5325,5326,5427],[5325,5426,5427],[5326,5327,5428],[5326,5427,5428],[5327,5328,5429],[5327,5428,5429],[5328,5329,5430],[5328,5429,5430],[5329,5330,5431],[5329,5430,5431],[5330,5331,5432],[5330,5431,5432],[5331,5332,5433],[5331,5432,5433],[5332,5333,5434],[5332,5433,5434],[5333,5334,5435],[5333,5434,5435],[5334,5335,5436],[5334,5435,5436],[5335,5336,5437],[5335,5436,5437],[5336,5337,5438],[5336,5437,5438],[5337,5338,5439],[5337,5438,5439],[5338,5339,5440],[5338,5439,5440],[5341,5342,5443],[5341,5442,5443],[5342,5343,5444],[5342,5443,5444],[5343,5344,5445],[5343,5444,5445],[5353,5354,5455],[5353,5454,5455],[5354,5355,5456],[5354,5455,5456],[5355,5356,5457],[5355,5456,5457],[5359,5360,5461],[5359,5460,5461],[5360,5361,5462],[5360,5461,5462],[5361,5362,5463],[5361,5462,5463],[5362,5363,5464],[5362,5463,5464],[5363,5364,5465],[5363,5464,5465],[5364,5365,5466],[5364,5465,5466],[5365,5366,5467],[5365,5466,5467],[5366,5367,5468],[5366,5467,5468],[5370,5371,5472],[5370,5471,5472],[5371,5372,5473],[5371,5472,5473],[5372,5373,5474],[5372,5473,5474],[5373,5374,5475],[5373,5474,5475],[5374,5375,5476],[5374,5475,5476],[5377,5378,5479],[5377,5478,5479],[5378,5379,5480],[5378,5479,5480],[5379,5380,5481],[5379,5480,5481],[5380,5381,5482],[5380,5481,5482],[5381,5382,5483],[5381,5482,5483],[5382,5383,5484],[5382,5483,5484],[5383,5384,5485],[5383,5484,5485],[5384,5385,5486],[5384,5485,5486],[5389,5390,5491],[5389,5490,5491],[5390,5391,5492],[5390,5491,5492],[5391,5392,5493],[5391,5492,5493],[5392,5393,5494],[5392,5493,5494],[5393,5394,5495],[5393,5494,5495],[5394,5395,5496],[5394,5495,5496],[5395,5396,5497],[5395,5496,5497],[5396,5397,5498],[5396,5497,5498],[5397,5398,5499],[5397,5498,5499],[5398,5399,5500],[5398,5499,5500],[5399,5400,5501],[5399,5500,5501],[5403,5404,5505],[5403,5504,5505],[5404,5405,5506],[5404,5505,5506],[5405,5406,5507],[5405,5506,5507],[5406,5407,5508],[5406,5507,5508],[5407,5408,5509],[5407,5508,5509],[5408,5409,5510],[5408,5509,5510],[5409,5410,5511],[5409,5510,5511],[5410,5411,5512],[5410,5511,5512],[5411,5412,5513],[5411,5512,5513],[5414,5415,5516],[5414,5515,5516],[5415,5416,5517],[5415,5516,5517],[5416,5417,5518],[5416,5517,5518],[5417,5418,5519],[5417,5518,5519],[5418,5419,5520],[5418,5519,5520],[5419,5420,5521],[5419,5520,5521],[5421,5422,5523],[5421,5522,5523],[5422,5423,5524],[5422,5523,5524],[5423,5424,5525],[5423,5524,5525],[5424,5425,5526],[5424,5525,5526],[5425,5426,5527],[5425,5526,5527],[5426,5427,5528],[5426,5527,5528],[5427,5428,5529],[5427,5528,5529],[5428,5429,5530],[5428,5529,5530],[5429,5430,5531],[5429,5530,5531],[5430,5431,5532],[5430,5531,5532],[5431,5432,5533],[5431,5532,5533],[5432,5433,5534],[5432,5533,5534],[5433,5434,5535],[5433,5534,5535],[5434,5435,5536],[5434,5535,5536],[5435,5436,5537],[5435,5536,5537],[5436,5437,5538],[5436,5537,5538],[5437,5438,5539],[5437,5538,5539],[5438,5439,5540],[5438,5539,5540],[5439,5440,5541],[5439,5540,5541],[5442,5443,5544],[5442,5543,5544],[5443,5444,5545],[5443,5544,5545],[5444,5445,5546],[5444,5545,5546],[5454,5455,5556],[5454,5555,5556],[5455,5456,5557],[5455,5556,5557],[5456,5457,5558],[5456,5557,5558],[5460,5461,5562],[5461,5462,5563],[5461,5562,5563],[5462,5463,5564],[5462,5563,5564],[5463,5464,5565],[5463,5564,5565],[5464,5465,5566],[5464,5565,5566],[5465,5466,5567],[5465,5566,5567],[5466,5467,5568],[5466,5567,5568],[5467,5468,5569],[5467,5568,5569],[5471,5472,5573],[5471,5572,5573],[5472,5473,5574],[5472,5573,5574],[5473,5474,5575],[5473,5574,5575],[5474,5475,5576],[5474,5575,5576],[5475,5476,5577],[5475,5576,5577],[5478,5479,5580],[5478,5579,5580],[5479,5480,5581],[5479,5580,5581],[5480,5481,5582],[5480,5581,5582],[5481,5482,5583],[5481,5582,5583],[5482,5483,5584],[5482,5583,5584],[5483,5484,5585],[5483,5584,5585],[5484,5485,5586],[5484,5585,5586],[5485,5486,5587],[5485,5586,5587],[5490,5491,5592],[5490,5591,5592],[5491,5492,5593],[5491,5592,5593],[5492,5493,5594],[5492,5593,5594],[5493,5494,5595],[5493,5594,5595],[5494,5495,5596],[5494,5595,5596],[5495,5496,5597],[5495,5596,5597],[5496,5497,5598],[5496,5597,5598],[5497,5498,5599],[5497,5598,5599],[5498,5499,5600],[5498,5599,5600],[5499,5500,5601],[5499,5600,5601],[5500,5501,5602],[5500,5601,5602],[5504,5505,5606],[5504,5605,5606],[5505,5506,5607],[5505,5606,5607],[5506,5507,5608],[5506,5607,5608],[5507,5508,5609],[5507,5608,5609],[5508,5509,5610],[5508,5609,5610],[5509,5510,5611],[5509,5610,5611],[5510,5511,5612],[5510,5611,5612],[5511,5512,5613],[5511,5612,5613],[5512,5513,5614],[5512,5613,5614],[5515,5516,5617],[5515,5616,5617],[5516,5517,5618],[5516,5617,5618],[5517,5518,5619],[5517,5618,5619],[5518,5519,5620],[5518,5619,5620],[5519,5520,5621],[5519,5620,5621],[5520,5521,5622],[5520,5621,5622],[5522,5523,5624],[5522,5623,5624],[5523,5524,5625],[5523,5624,5625],[5524,5525,5626],[5524,5625,5626],[5525,5526,5627],[5525,5626,5627],[5526,5527,5628],[5526,5627,5628],[5527,5528,5629],[5527,5628,5629],[5528,5529,5630],[5528,5629,5630],[5529,5530,5631],[5529,5630,5631],[5530,5531,5632],[5530,5631,5632],[5531,5532,5633],[5531,5632,5633],[5532,5533,5634],[5532,5633,5634],[5533,5534,5635],[5533,5634,5635],[5534,5535,5636],[5534,5635,5636],[5535,5536,5637],[5535,5636,5637],[5536,5537,5638],[5536,5637,5638],[5537,5538,5639],[5537,5638,5639],[5538,5539,5640],[5538,5639,5640],[5539,5540,5641],[5539,5640,5641],[5540,5541,5642],[5540,5641,5642],[5543,5544,5645],[5543,5644,5645],[5544,5545,5646],[5544,5645,5646],[5545,5546,5647],[5545,5646,5647],[5555,5556,5657],[5555,5656,5657],[5556,5557,5658],[5556,5657,5658],[5557,5558,5659],[5557,5658,5659],[5562,5563,5664],[5562,5663,5664],[5563,5564,5665],[5563,5664,5665],[5564,5565,5666],[5564,5665,5666],[5565,5566,5667],[5565,5666,5667],[5566,5567,5668],[5566,5667,5668],[5567,5568,5669],[5567,5668,5669],[5568,5569,5670],[5568,5669,5670],[5572,5573,5674],[5572,5673,5674],[5573,5574,5675],[5573,5674,5675],[5574,5575,5676],[5574,5675,5676],[5575,5576,5677],[5575,5676,5677],[5576,5577,5678],[5576,5677,5678],[5579,5580,5681],[5579,5680,5681],[5580,5581,5682],[5580,5681,5682],[5581,5582,5683],[5581,5682,5683],[5582,5583,5684],[5582,5683,5684],[5583,5584,5685],[5583,5684,5685],[5584,5585,5686],[5584,5685,5686],[5585,5586,5687],[5585,5686,5687],[5586,5587,5688],[5586,5687,5688],[5591,5592,5693],[5591,5692,5693],[5592,5593,5694],[5592,5693,5694],[5593,5594,5695],[5593,5694,5695],[5594,5595,5696],[5594,5695,5696],[5595,5596,5697],[5595,5696,5697],[5596,5597,5698],[5596,5697,5698],[5597,5598,5699],[5597,5698,5699],[5598,5599,5700],[5598,5699,5700],[5599,5600,5701],[5599,5700,5701],[5600,5601,5702],[5600,5701,5702],[5601,5602,5703],[5601,5702,5703],[5605,5606,5707],[5605,5706,5707],[5606,5607,5708],[5606,5707,5708],[5607,5608,5709],[5607,5708,5709],[5608,5609,5710],[5608,5709,5710],[5609,5610,5711],[5609,5710,5711],[5610,5611,5712],[5610,5711,5712],[5611,5612,5713],[5611,5712,5713],[5612,5613,5714],[5612,5713,5714],[5613,5614,5715],[5613,5714,5715],[5616,5617,5718],[5616,5717,5718],[5617,5618,5719],[5617,5718,5719],[5618,5619,5720],[5618,5719,5720],[5619,5620,5721],[5619,5720,5721],[5620,5621,5722],[5620,5721,5722],[5621,5622,5723],[5621,5722,5723],[5623,5624,5725],[5623,5724,5725],[5624,5625,5726],[5624,5725,5726],[5625,5626,5727],[5625,5726,5727],[5626,5627,5728],[5626,5727,5728],[5627,5628,5729],[5627,5728,5729],[5628,5629,5730],[5628,5729,5730],[5629,5630,5731],[5629,5730,5731],[5630,5631,5732],[5630,5731,5732],[5631,5632,5733],[5631,5732,5733],[5632,5633,5734],[5632,5733,5734],[5633,5634,5735],[5633,5734,5735],[5634,5635,5736],[5634,5735,5736],[5635,5636,5737],[5635,5736,5737],[5636,5637,5738],[5636,5737,5738],[5637,5638,5739],[5637,5738,5739],[5638,5639,5740],[5638,5739,5740],[5639,5640,5741],[5639,5740,5741],[5640,5641,5742],[5640,5741,5742],[5641,5642,5743],[5641,5742,5743],[5644,5645,5746],[5644,5745,5746],[5645,5646,5747],[5645,5746,5747],[5646,5647,5748],[5646,5747,5748],[5656,5657,5758],[5656,5757,5758],[5657,5658,5759],[5657,5758,5759],[5658,5659,5760],[5658,5759,5760],[5659,5660,5761],[5659,5760,5761],[5663,5664,5765],[5663,5764,5765],[5664,5665,5766],[5664,5765,5766],[5665,5666,5767],[5665,5766,5767],[5666,5667,5768],[5666,5767,5768],[5667,5668,5769],[5667,5768,5769],[5668,5669,5770],[5668,5769,5770],[5669,5670,5771],[5669,5770,5771],[5672,5673,5774],[5672,5773,5774],[5673,5674,5775],[5673,5774,5775],[5674,5675,5776],[5674,5775,5776],[5675,5676,5777],[5675,5776,5777],[5676,5677,5778],[5676,5777,5778],[5677,5678,5779],[5677,5778,5779],[5680,5681,5782],[5680,5781,5782],[5681,5682,5783],[5681,5782,5783],[5682,5683,5784],[5682,5783,5784],[5683,5684,5785],[5683,5784,5785],[5684,5685,5786],[5684,5785,5786],[5685,5686,5787],[5685,5786,5787],[5686,5687,5788],[5686,5787,5788],[5691,5692,5793],[5691,5792,5793],[5692,5693,5794],[5692,5793,5794],[5693,5694,5795],[5693,5794,5795],[5694,5695,5796],[5694,5795,5796],[5695,5696,5797],[5695,5796,5797],[5696,5697,5798],[5696,5797,5798],[5697,5698,5799],[5697,5798,5799],[5698,5699,5800],[5698,5799,5800],[5699,5700,5801],[5699,5800,5801],[5700,5701,5802],[5700,5801,5802],[5701,5702,5803],[5701,5802,5803],[5702,5703,5804],[5702,5803,5804],[5706,5707,5808],[5706,5807,5808],[5707,5708,5809],[5707,5808,5809],[5708,5709,5810],[5708,5809,5810],[5709,5710,5811],[5709,5810,5811],[5710,5711,5812],[5710,5811,5812],[5711,5712,5813],[5711,5812,5813],[5712,5713,5814],[5712,5813,5814],[5713,5714,5815],[5713,5814,5815],[5714,5715,5816],[5714,5815,5816],[5715,5716,5817],[5715,5816,5817],[5717,5718,5819],[5717,5818,5819],[5718,5719,5820],[5718,5819,5820],[5719,5720,5821],[5719,5820,5821],[5720,5721,5822],[5720,5821,5822],[5721,5722,5823],[5721,5822,5823],[5722,5723,5824],[5722,5823,5824],[5724,5725,5826],[5724,5825,5826],[5725,5726,5827],[5725,5826,5827],[5726,5727,5828],[5726,5827,5828],[5727,5728,5829],[5727,5828,5829],[5728,5729,5830],[5728,5829,5830],[5729,5730,5831],[5729,5830,5831],[5730,5731,5832],[5730,5831,5832],[5731,5732,5833],[5731,5832,5833],[5732,5733,5834],[5732,5833,5834],[5733,5734,5835],[5733,5834,5835],[5734,5735,5836],[5734,5835,5836],[5735,5736,5837],[5735,5836,5837],[5736,5737,5838],[5736,5837,5838],[5737,5738,5839],[5737,5838,5839],[5738,5739,5840],[5738,5839,5840],[5739,5740,5841],[5739,5840,5841],[5740,5741,5842],[5740,5841,5842],[5741,5742,5843],[5741,5842,5843],[5742,5743,5844],[5742,5843,5844],[5745,5746,5847],[5745,5846,5847],[5746,5747,5848],[5746,5847,5848],[5757,5758,5859],[5757,5858,5859],[5758,5759,5860],[5758,5859,5860],[5759,5760,5861],[5759,5860,5861],[5760,5761,5862],[5760,5861,5862],[5764,5765,5866],[5765,5766,5867],[5765,5866,5867],[5766,5767,5868],[5766,5867,5868],[5767,5768,5869],[5767,5868,5869],[5768,5769,5870],[5768,5869,5870],[5769,5770,5871],[5769,5870,5871],[5770,5771,5872],[5770,5871,5872],[5773,5774,5875],[5773,5874,5875],[5774,5775,5876],[5774,5875,5876],[5775,5776,5877],[5775,5876,5877],[5776,5777,5878],[5776,5877,5878],[5777,5778,5879],[5777,5878,5879],[5778,5779,5880],[5778,5879,5880],[5781,5782,5883],[5781,5882,5883],[5782,5783,5884],[5782,5883,5884],[5783,5784,5885],[5783,5884,5885],[5784,5785,5886],[5784,5885,5886],[5785,5786,5887],[5785,5886,5887],[5786,5787,5888],[5786,5887,5888],[5787,5788,5889],[5787,5888,5889],[5792,5793,5894],[5792,5893,5894],[5793,5794,5895],[5793,5894,5895],[5794,5795,5896],[5794,5895,5896],[5795,5796,5897],[5795,5896,5897],[5796,5797,5898],[5796,5897,5898],[5797,5798,5899],[5797,5898,5899],[5798,5799,5900],[5798,5899,5900],[5799,5800,5901],[5799,5900,5901],[5800,5801,5902],[5800,5901,5902],[5801,5802,5903],[5801,5902,5903],[5802,5803,5904],[5802,5903,5904],[5803,5804,5905],[5803,5904,5905],[5807,5808,5909],[5807,5908,5909],[5808,5809,5910],[5808,5909,5910],[5809,5810,5911],[5809,5910,5911],[5810,5811,5912],[5810,5911,5912],[5811,5812,5913],[5811,5912,5913],[5812,5813,5914],[5812,5913,5914],[5813,5814,5915],[5813,5914,5915],[5814,5815,5916],[5814,5915,5916],[5815,5816,5917],[5815,5916,5917],[5816,5817,5918],[5816,5917,5918],[5818,5819,5920],[5818,5919,5920],[5819,5820,5921],[5819,5920,5921],[5820,5821,5922],[5820,5921,5922],[5821,5822,5923],[5821,5922,5923],[5822,5823,5924],[5822,5923,5924],[5823,5824,5925],[5823,5924,5925],[5825,5826,5927],[5825,5926,5927],[5826,5827,5928],[5826,5927,5928],[5827,5828,5929],[5827,5928,5929],[5828,5829,5930],[5828,5929,5930],[5829,5830,5931],[5829,5930,5931],[5830,5831,5932],[5830,5931,5932],[5831,5832,5933],[5831,5932,5933],[5832,5833,5934],[5832,5933,5934],[5833,5834,5935],[5833,5934,5935],[5834,5835,5936],[5834,5935,5936],[5835,5836,5937],[5835,5936,5937],[5836,5837,5938],[5836,5937,5938],[5837,5838,5939],[5837,5938,5939],[5838,5839,5940],[5838,5939,5940],[5839,5840,5941],[5839,5940,5941],[5840,5841,5942],[5840,5941,5942],[5841,5842,5943],[5841,5942,5943],[5842,5843,5944],[5842,5943,5944],[5843,5844,5945],[5843,5944,5945],[5846,5847,5948],[5846,5947,5948],[5847,5848,5949],[5847,5948,5949],[5858,5859,5960],[5858,5959,5960],[5859,5860,5961],[5859,5960,5961],[5860,5861,5962],[5860,5961,5962],[5861,5862,5963],[5861,5962,5963],[5866,5867,5968],[5866,5967,5968],[5867,5868,5969],[5867,5968,5969],[5868,5869,5970],[5868,5969,5970],[5869,5870,5971],[5869,5970,5971],[5870,5871,5972],[5870,5971,5972],[5871,5872,5973],[5871,5972,5973],[5874,5875,5976],[5874,5975,5976],[5875,5876,5977],[5875,5976,5977],[5876,5877,5978],[5876,5977,5978],[5877,5878,5979],[5877,5978,5979],[5878,5879,5980],[5878,5979,5980],[5879,5880,5981],[5879,5980,5981],[5882,5883,5984],[5882,5983,5984],[5883,5884,5985],[5883,5984,5985],[5884,5885,5986],[5884,5985,5986],[5885,5886,5987],[5885,5986,5987],[5886,5887,5988],[5886,5987,5988],[5887,5888,5989],[5887,5988,5989],[5888,5889,5990],[5888,5989,5990],[5894,5895,5996],[5894,5995,5996],[5895,5896,5997],[5895,5996,5997],[5896,5897,5998],[5896,5997,5998],[5897,5898,5999],[5897,5998,5999],[5898,5899,6000],[5898,5999,6000],[5899,5900,6001],[5899,6000,6001],[5900,5901,6002],[5900,6001,6002],[5901,5902,6003],[5901,6002,6003],[5902,5903,6004],[5902,6003,6004],[5903,5904,6005],[5903,6004,6005],[5904,5905,6006],[5904,6005,6006],[5908,5909,6010],[5908,6009,6010],[5909,5910,6011],[5909,6010,6011],[5910,5911,6012],[5910,6011,6012],[5911,5912,6013],[5911,6012,6013],[5912,5913,6014],[5912,6013,6014],[5913,5914,6015],[5913,6014,6015],[5914,5915,6016],[5914,6015,6016],[5915,5916,6017],[5915,6016,6017],[5916,5917,6018],[5916,6017,6018],[5917,5918,6019],[5917,6018,6019],[5919,5920,6021],[5919,6020,6021],[5920,5921,6022],[5920,6021,6022],[5921,5922,6023],[5921,6022,6023],[5922,5923,6024],[5922,6023,6024],[5923,5924,6025],[5923,6024,6025],[5924,5925,6026],[5924,6025,6026],[5926,5927,6028],[5926,6027,6028],[5927,5928,6029],[5927,6028,6029],[5928,5929,6030],[5928,6029,6030],[5929,5930,6031],[5929,6030,6031],[5930,5931,6032],[5930,6031,6032],[5931,5932,6033],[5931,6032,6033],[5932,5933,6034],[5932,6033,6034],[5933,5934,6035],[5933,6034,6035],[5934,5935,6036],[5934,6035,6036],[5935,5936,6037],[5935,6036,6037],[5936,5937,6038],[5936,6037,6038],[5937,5938,6039],[5937,6038,6039],[5938,5939,6040],[5938,6039,6040],[5939,5940,6041],[5939,6040,6041],[5940,5941,6042],[5940,6041,6042],[5941,5942,6043],[5941,6042,6043],[5942,5943,6044],[5942,6043,6044],[5943,5944,6045],[5943,6044,6045],[5944,5945,6046],[5944,6045,6046],[5947,5948,6049],[5947,6048,6049],[5948,5949,6050],[5948,6049,6050],[5959,5960,6061],[5959,6060,6061],[5960,5961,6062],[5960,6061,6062],[5961,5962,6063],[5961,6062,6063],[5962,5963,6064],[5962,6063,6064],[5967,5968,6069],[5967,6068,6069],[5968,5969,6070],[5968,6069,6070],[5969,5970,6071],[5969,6070,6071],[5970,5971,6072],[5970,6071,6072],[5971,5972,6073],[5971,6072,6073],[5972,5973,6074],[5972,6073,6074],[5975,5976,6077],[5975,6076,6077],[5976,5977,6078],[5976,6077,6078],[5977,5978,6079],[5977,6078,6079],[5978,5979,6080],[5978,6079,6080],[5979,5980,6081],[5979,6080,6081],[5980,5981,6082],[5980,6081,6082],[5983,5984,6085],[5983,6084,6085],[5984,5985,6086],[5984,6085,6086],[5985,5986,6087],[5985,6086,6087],[5986,5987,6088],[5986,6087,6088],[5987,5988,6089],[5987,6088,6089],[5988,5989,6090],[5988,6089,6090],[5989,5990,6091],[5989,6090,6091],[5995,5996,6097],[5995,6096,6097],[5996,5997,6098],[5996,6097,6098],[5997,5998,6099],[5997,6098,6099],[5998,5999,6100],[5998,6099,6100],[5999,6000,6101],[5999,6100,6101],[6000,6001,6102],[6000,6101,6102],[6001,6002,6103],[6001,6102,6103],[6002,6003,6104],[6002,6103,6104],[6003,6004,6105],[6003,6104,6105],[6004,6005,6106],[6004,6105,6106],[6005,6006,6107],[6005,6106,6107],[6009,6010,6111],[6009,6110,6111],[6010,6011,6112],[6010,6111,6112],[6011,6012,6113],[6011,6112,6113],[6012,6013,6114],[6012,6113,6114],[6013,6014,6115],[6013,6114,6115],[6014,6015,6116],[6014,6115,6116],[6015,6016,6117],[6015,6116,6117],[6016,6017,6118],[6016,6117,6118],[6017,6018,6119],[6017,6118,6119],[6018,6019,6120],[6018,6119,6120],[6020,6021,6122],[6021,6022,6123],[6021,6122,6123],[6022,6023,6124],[6022,6123,6124],[6023,6024,6125],[6023,6124,6125],[6024,6025,6126],[6024,6125,6126],[6025,6026,6127],[6025,6126,6127],[6027,6028,6129],[6027,6128,6129],[6028,6029,6130],[6028,6129,6130],[6029,6030,6131],[6029,6130,6131],[6030,6031,6132],[6030,6131,6132],[6031,6032,6133],[6031,6132,6133],[6032,6033,6134],[6032,6133,6134],[6033,6034,6135],[6033,6134,6135],[6034,6035,6136],[6034,6135,6136],[6035,6036,6137],[6035,6136,6137],[6036,6037,6138],[6036,6137,6138],[6037,6038,6139],[6037,6138,6139],[6038,6039,6140],[6038,6139,6140],[6039,6040,6141],[6039,6140,6141],[6040,6041,6142],[6040,6141,6142],[6041,6042,6143],[6041,6142,6143],[6042,6043,6144],[6042,6143,6144],[6043,6044,6145],[6043,6144,6145],[6044,6045,6146],[6044,6145,6146],[6045,6046,6147],[6045,6146,6147],[6048,6049,6150],[6048,6149,6150],[6049,6050,6151],[6049,6150,6151],[6060,6061,6162],[6060,6161,6162],[6061,6062,6163],[6061,6162,6163],[6062,6063,6164],[6062,6163,6164],[6063,6064,6165],[6063,6164,6165],[6068,6069,6170],[6068,6169,6170],[6069,6070,6171],[6069,6170,6171],[6070,6071,6172],[6070,6171,6172],[6071,6072,6173],[6071,6172,6173],[6072,6073,6174],[6072,6173,6174],[6073,6074,6175],[6073,6174,6175],[6076,6077,6178],[6076,6177,6178],[6077,6078,6179],[6077,6178,6179],[6078,6079,6180],[6078,6179,6180],[6079,6080,6181],[6079,6180,6181],[6080,6081,6182],[6080,6181,6182],[6081,6082,6183],[6081,6182,6183],[6084,6085,6186],[6084,6185,6186],[6085,6086,6187],[6085,6186,6187],[6086,6087,6188],[6086,6187,6188],[6087,6088,6189],[6087,6188,6189],[6088,6089,6190],[6088,6189,6190],[6089,6090,6191],[6089,6190,6191],[6090,6091,6192],[6090,6191,6192],[6096,6097,6198],[6096,6197,6198],[6097,6098,6199],[6097,6198,6199],[6098,6099,6200],[6098,6199,6200],[6099,6100,6201],[6099,6200,6201],[6100,6101,6202],[6100,6201,6202],[6101,6102,6203],[6101,6202,6203],[6102,6103,6204],[6102,6203,6204],[6103,6104,6205],[6103,6204,6205],[6104,6105,6206],[6104,6205,6206],[6105,6106,6207],[6105,6206,6207],[6106,6107,6208],[6106,6207,6208],[6110,6111,6212],[6110,6211,6212],[6111,6112,6213],[6111,6212,6213],[6112,6113,6214],[6112,6213,6214],[6113,6114,6215],[6113,6214,6215],[6114,6115,6216],[6114,6215,6216],[6115,6116,6217],[6115,6216,6217],[6116,6117,6218],[6116,6217,6218],[6117,6118,6219],[6117,6218,6219],[6118,6119,6220],[6118,6219,6220],[6119,6120,6221],[6119,6220,6221],[6122,6123,6224],[6122,6223,6224],[6123,6124,6225],[6123,6224,6225],[6124,6125,6226],[6124,6225,6226],[6125,6126,6227],[6125,6226,6227],[6126,6127,6228],[6126,6227,6228],[6128,6129,6230],[6128,6229,6230],[6129,6130,6231],[6129,6230,6231],[6130,6131,6232],[6130,6231,6232],[6131,6132,6233],[6131,6232,6233],[6132,6133,6234],[6132,6233,6234],[6133,6134,6235],[6133,6234,6235],[6134,6135,6236],[6134,6235,6236],[6135,6136,6237],[6135,6236,6237],[6136,6137,6238],[6136,6237,6238],[6137,6138,6239],[6137,6238,6239],[6138,6139,6240],[6138,6239,6240],[6139,6140,6241],[6139,6240,6241],[6140,6141,6242],[6140,6241,6242],[6141,6142,6243],[6141,6242,6243],[6142,6143,6244],[6142,6243,6244],[6143,6144,6245],[6143,6244,6245],[6144,6145,6246],[6144,6245,6246],[6145,6146,6247],[6145,6246,6247],[6146,6147,6248],[6146,6247,6248],[6149,6150,6251],[6149,6250,6251],[6150,6151,6252],[6150,6251,6252],[6161,6162,6263],[6161,6262,6263],[6162,6163,6264],[6162,6263,6264],[6163,6164,6265],[6163,6264,6265],[6164,6165,6266],[6164,6265,6266],[6165,6166,6267],[6165,6266,6267],[6169,6170,6271],[6170,6171,6272],[6170,6271,6272],[6171,6172,6273],[6171,6272,6273],[6172,6173,6274],[6172,6273,6274],[6173,6174,6275],[6173,6274,6275],[6176,6177,6278],[6176,6277,6278],[6177,6178,6279],[6177,6278,6279],[6178,6179,6280],[6178,6279,6280],[6179,6180,6281],[6179,6280,6281],[6180,6181,6282],[6180,6281,6282],[6181,6182,6283],[6181,6282,6283],[6182,6183,6284],[6182,6283,6284],[6185,6186,6287],[6185,6286,6287],[6186,6187,6288],[6186,6287,6288],[6187,6188,6289],[6187,6288,6289],[6188,6189,6290],[6188,6289,6290],[6189,6190,6291],[6189,6290,6291],[6190,6191,6292],[6190,6291,6292],[6191,6192,6293],[6191,6292,6293],[6197,6198,6299],[6197,6298,6299],[6198,6199,6300],[6198,6299,6300],[6199,6200,6301],[6199,6300,6301],[6200,6201,6302],[6200,6301,6302],[6201,6202,6303],[6201,6302,6303],[6202,6203,6304],[6202,6303,6304],[6203,6204,6305],[6203,6304,6305],[6204,6205,6306],[6204,6305,6306],[6205,6206,6307],[6205,6306,6307],[6206,6207,6308],[6206,6307,6308],[6207,6208,6309],[6207,6308,6309],[6211,6212,6313],[6211,6312,6313],[6212,6213,6314],[6212,6313,6314],[6213,6214,6315],[6213,6314,6315],[6214,6215,6316],[6214,6315,6316],[6215,6216,6317],[6215,6316,6317],[6216,6217,6318],[6216,6317,6318],[6217,6218,6319],[6217,6318,6319],[6218,6219,6320],[6218,6319,6320],[6219,6220,6321],[6219,6320,6321],[6220,6221,6322],[6220,6321,6322],[6223,6224,6325],[6223,6324,6325],[6224,6225,6326],[6224,6325,6326],[6225,6226,6327],[6225,6326,6327],[6226,6227,6328],[6226,6327,6328],[6227,6228,6329],[6227,6328,6329],[6229,6230,6331],[6229,6330,6331],[6230,6231,6332],[6230,6331,6332],[6231,6232,6333],[6231,6332,6333],[6232,6233,6334],[6232,6333,6334],[6233,6234,6335],[6233,6334,6335],[6234,6235,6336],[6234,6335,6336],[6235,6236,6337],[6235,6336,6337],[6236,6237,6338],[6236,6337,6338],[6237,6238,6339],[6237,6338,6339],[6238,6239,6340],[6238,6339,6340],[6239,6240,6341],[6239,6340,6341],[6240,6241,6342],[6240,6341,6342],[6241,6242,6343],[6241,6342,6343],[6242,6243,6344],[6242,6343,6344],[6243,6244,6345],[6243,6344,6345],[6244,6245,6346],[6244,6345,6346],[6245,6246,6347],[6245,6346,6347],[6246,6247,6348],[6246,6347,6348],[6247,6248,6349],[6247,6348,6349],[6250,6251,6352],[6250,6351,6352],[6251,6252,6353],[6251,6352,6353],[6262,6263,6364],[6262,6363,6364],[6263,6264,6365],[6263,6364,6365],[6264,6265,6366],[6264,6365,6366],[6265,6266,6367],[6265,6366,6367],[6266,6267,6368],[6266,6367,6368],[6271,6272,6373],[6271,6372,6373],[6272,6273,6374],[6272,6373,6374],[6273,6274,6375],[6273,6374,6375],[6274,6275,6376],[6274,6375,6376],[6277,6278,6379],[6277,6378,6379],[6278,6279,6380],[6278,6379,6380],[6279,6280,6381],[6279,6380,6381],[6280,6281,6382],[6280,6381,6382],[6281,6282,6383],[6281,6382,6383],[6282,6283,6384],[6282,6383,6384],[6283,6284,6385],[6283,6384,6385],[6286,6287,6388],[6286,6387,6388],[6287,6288,6389],[6287,6388,6389],[6288,6289,6390],[6288,6389,6390],[6289,6290,6391],[6289,6390,6391],[6290,6291,6392],[6290,6391,6392],[6291,6292,6393],[6291,6392,6393],[6292,6293,6394],[6292,6393,6394],[6298,6299,6400],[6298,6399,6400],[6299,6300,6401],[6299,6400,6401],[6300,6301,6402],[6300,6401,6402],[6301,6302,6403],[6301,6402,6403],[6302,6303,6404],[6302,6403,6404],[6303,6304,6405],[6303,6404,6405],[6304,6305,6406],[6304,6405,6406],[6305,6306,6407],[6305,6406,6407],[6306,6307,6408],[6306,6407,6408],[6307,6308,6409],[6307,6408,6409],[6312,6313,6414],[6312,6413,6414],[6313,6314,6415],[6313,6414,6415],[6314,6315,6416],[6314,6415,6416],[6315,6316,6417],[6315,6416,6417],[6316,6317,6418],[6316,6417,6418],[6317,6318,6419],[6317,6418,6419],[6318,6319,6420],[6318,6419,6420],[6319,6320,6421],[6319,6420,6421],[6320,6321,6422],[6320,6421,6422],[6321,6322,6423],[6321,6422,6423],[6324,6325,6426],[6324,6425,6426],[6325,6326,6427],[6325,6426,6427],[6326,6327,6428],[6326,6427,6428],[6327,6328,6429],[6327,6428,6429],[6328,6329,6430],[6328,6429,6430],[6330,6331,6432],[6330,6431,6432],[6331,6332,6433],[6331,6432,6433],[6332,6333,6434],[6332,6433,6434],[6333,6334,6435],[6333,6434,6435],[6334,6335,6436],[6334,6435,6436],[6335,6336,6437],[6335,6436,6437],[6336,6337,6438],[6336,6437,6438],[6337,6338,6439],[6337,6438,6439],[6338,6339,6440],[6338,6439,6440],[6339,6340,6441],[6339,6440,6441],[6340,6341,6442],[6340,6441,6442],[6341,6342,6443],[6341,6442,6443],[6342,6343,6444],[6342,6443,6444],[6343,6344,6445],[6343,6444,6445],[6344,6345,6446],[6344,6445,6446],[6345,6346,6447],[6345,6446,6447],[6346,6347,6448],[6346,6447,6448],[6347,6348,6449],[6347,6448,6449],[6348,6349,6450],[6348,6449,6450],[6351,6352,6453],[6351,6452,6453],[6352,6353,6454],[6352,6453,6454],[6363,6364,6465],[6363,6464,6465],[6364,6365,6466],[6364,6465,6466],[6365,6366,6467],[6365,6466,6467],[6366,6367,6468],[6366,6467,6468],[6367,6368,6469],[6367,6468,6469],[6372,6373,6474],[6372,6473,6474],[6373,6374,6475],[6373,6474,6475],[6374,6375,6476],[6374,6475,6476],[6375,6376,6477],[6375,6476,6477],[6378,6379,6480],[6378,6479,6480],[6379,6380,6481],[6379,6480,6481],[6380,6381,6482],[6380,6481,6482],[6381,6382,6483],[6381,6482,6483],[6382,6383,6484],[6382,6483,6484],[6383,6384,6485],[6383,6484,6485],[6384,6385,6486],[6384,6485,6486],[6387,6388,6489],[6387,6488,6489],[6388,6389,6490],[6388,6489,6490],[6389,6390,6491],[6389,6490,6491],[6390,6391,6492],[6390,6491,6492],[6391,6392,6493],[6391,6492,6493],[6392,6393,6494],[6392,6493,6494],[6393,6394,6495],[6393,6494,6495],[6399,6400,6501],[6399,6500,6501],[6400,6401,6502],[6400,6501,6502],[6401,6402,6503],[6401,6502,6503],[6402,6403,6504],[6402,6503,6504],[6403,6404,6505],[6403,6504,6505],[6404,6405,6506],[6404,6505,6506],[6405,6406,6507],[6405,6506,6507],[6406,6407,6508],[6406,6507,6508],[6407,6408,6509],[6407,6508,6509],[6408,6409,6510],[6408,6509,6510],[6413,6414,6515],[6413,6514,6515],[6414,6415,6516],[6414,6515,6516],[6415,6416,6517],[6415,6516,6517],[6416,6417,6518],[6416,6517,6518],[6417,6418,6519],[6417,6518,6519],[6418,6419,6520],[6418,6519,6520],[6419,6420,6521],[6419,6520,6521],[6420,6421,6522],[6420,6521,6522],[6421,6422,6523],[6421,6522,6523],[6422,6423,6524],[6422,6523,6524],[6425,6426,6527],[6425,6526,6527],[6426,6427,6528],[6426,6527,6528],[6427,6428,6529],[6427,6528,6529],[6428,6429,6530],[6428,6529,6530],[6429,6430,6531],[6429,6530,6531],[6431,6432,6533],[6431,6532,6533],[6432,6433,6534],[6432,6533,6534],[6433,6434,6535],[6433,6534,6535],[6434,6435,6536],[6434,6535,6536],[6435,6436,6537],[6435,6536,6537],[6436,6437,6538],[6436,6537,6538],[6437,6438,6539],[6437,6538,6539],[6438,6439,6540],[6438,6539,6540],[6439,6440,6541],[6439,6540,6541],[6440,6441,6542],[6440,6541,6542],[6441,6442,6543],[6441,6542,6543],[6442,6443,6544],[6442,6543,6544],[6443,6444,6545],[6443,6544,6545],[6444,6445,6546],[6444,6545,6546],[6445,6446,6547],[6445,6546,6547],[6446,6447,6548],[6446,6547,6548],[6447,6448,6549],[6447,6548,6549],[6448,6449,6550],[6448,6549,6550],[6449,6450,6551],[6449,6550,6551],[6452,6453,6554],[6452,6553,6554],[6453,6454,6555],[6453,6554,6555],[6464,6465,6566],[6464,6565,6566],[6465,6466,6567],[6465,6566,6567],[6466,6467,6568],[6466,6567,6568],[6467,6468,6569],[6467,6568,6569],[6468,6469,6570],[6468,6569,6570],[6473,6474,6575],[6473,6574,6575],[6474,6475,6576],[6474,6575,6576],[6475,6476,6577],[6475,6576,6577],[6476,6477,6578],[6476,6577,6578],[6479,6480,6581],[6479,6580,6581],[6480,6481,6582],[6480,6581,6582],[6481,6482,6583],[6481,6582,6583],[6482,6483,6584],[6482,6583,6584],[6483,6484,6585],[6483,6584,6585],[6484,6485,6586],[6484,6585,6586],[6485,6486,6587],[6485,6586,6587],[6488,6489,6590],[6488,6589,6590],[6489,6490,6591],[6489,6590,6591],[6490,6491,6592],[6490,6591,6592],[6491,6492,6593],[6491,6592,6593],[6492,6493,6594],[6492,6593,6594],[6493,6494,6595],[6493,6594,6595],[6494,6495,6596],[6494,6595,6596],[6500,6501,6602],[6500,6601,6602],[6501,6502,6603],[6501,6602,6603],[6502,6503,6604],[6502,6603,6604],[6503,6504,6605],[6503,6604,6605],[6504,6505,6606],[6504,6605,6606],[6505,6506,6607],[6505,6606,6607],[6506,6507,6608],[6506,6607,6608],[6507,6508,6609],[6507,6608,6609],[6508,6509,6610],[6508,6609,6610],[6509,6510,6611],[6509,6610,6611],[6514,6515,6616],[6514,6615,6616],[6515,6516,6617],[6515,6616,6617],[6516,6517,6618],[6516,6617,6618],[6517,6518,6619],[6517,6618,6619],[6518,6519,6620],[6518,6619,6620],[6519,6520,6621],[6519,6620,6621],[6520,6521,6622],[6520,6621,6622],[6521,6522,6623],[6521,6622,6623],[6522,6523,6624],[6522,6623,6624],[6523,6524,6625],[6523,6624,6625],[6526,6527,6628],[6526,6627,6628],[6527,6528,6629],[6527,6628,6629],[6528,6529,6630],[6528,6629,6630],[6529,6530,6631],[6529,6630,6631],[6530,6531,6632],[6530,6631,6632],[6532,6533,6634],[6532,6633,6634],[6533,6534,6635],[6533,6634,6635],[6534,6535,6636],[6534,6635,6636],[6535,6536,6637],[6535,6636,6637],[6536,6537,6638],[6536,6637,6638],[6537,6538,6639],[6537,6638,6639],[6538,6539,6640],[6538,6639,6640],[6539,6540,6641],[6539,6640,6641],[6540,6541,6642],[6540,6641,6642],[6541,6542,6643],[6541,6642,6643],[6542,6543,6644],[6542,6643,6644],[6543,6544,6645],[6543,6644,6645],[6544,6545,6646],[6544,6645,6646],[6545,6546,6647],[6545,6646,6647],[6546,6547,6648],[6546,6647,6648],[6547,6548,6649],[6547,6648,6649],[6548,6549,6650],[6548,6649,6650],[6549,6550,6651],[6549,6650,6651],[6550,6551,6652],[6550,6651,6652],[6553,6554,6655],[6553,6654,6655],[6554,6555,6656],[6554,6655,6656],[6565,6566,6667],[6565,6666,6667],[6566,6567,6668],[6566,6667,6668],[6567,6568,6669],[6567,6668,6669],[6568,6569,6670],[6568,6669,6670],[6569,6570,6671],[6569,6670,6671],[6574,6575,6676],[6574,6675,6676],[6575,6576,6677],[6575,6676,6677],[6576,6577,6678],[6576,6677,6678],[6577,6578,6679],[6577,6678,6679],[6580,6581,6682],[6580,6681,6682],[6581,6582,6683],[6581,6682,6683],[6582,6583,6684],[6582,6683,6684],[6583,6584,6685],[6583,6684,6685],[6584,6585,6686],[6584,6685,6686],[6585,6586,6687],[6585,6686,6687],[6586,6587,6688],[6586,6687,6688],[6589,6590,6691],[6589,6690,6691],[6590,6591,6692],[6590,6691,6692],[6591,6592,6693],[6591,6692,6693],[6592,6593,6694],[6592,6693,6694],[6593,6594,6695],[6593,6694,6695],[6594,6595,6696],[6594,6695,6696],[6595,6596,6697],[6595,6696,6697],[6601,6602,6703],[6601,6702,6703],[6602,6603,6704],[6602,6703,6704],[6603,6604,6705],[6603,6704,6705],[6604,6605,6706],[6604,6705,6706],[6605,6606,6707],[6605,6706,6707],[6606,6607,6708],[6606,6707,6708],[6607,6608,6709],[6607,6708,6709],[6608,6609,6710],[6608,6709,6710],[6609,6610,6711],[6609,6710,6711],[6610,6611,6712],[6610,6711,6712],[6614,6615,6716],[6614,6715,6716],[6615,6616,6717],[6615,6716,6717],[6616,6617,6718],[6616,6717,6718],[6617,6618,6719],[6617,6718,6719],[6618,6619,6720],[6618,6719,6720],[6619,6620,6721],[6619,6720,6721],[6620,6621,6722],[6620,6721,6722],[6621,6622,6723],[6621,6722,6723],[6622,6623,6724],[6622,6723,6724],[6623,6624,6725],[6623,6724,6725],[6624,6625,6726],[6624,6725,6726],[6625,6626,6727],[6625,6726,6727],[6627,6628,6729],[6627,6728,6729],[6628,6629,6730],[6628,6729,6730],[6629,6630,6731],[6629,6730,6731],[6630,6631,6732],[6630,6731,6732],[6631,6632,6733],[6631,6732,6733],[6633,6634,6735],[6633,6734,6735],[6634,6635,6736],[6634,6735,6736],[6635,6636,6737],[6635,6736,6737],[6636,6637,6738],[6636,6737,6738],[6637,6638,6739],[6637,6738,6739],[6638,6639,6740],[6638,6739,6740],[6639,6640,6741],[6639,6740,6741],[6640,6641,6742],[6640,6741,6742],[6641,6642,6743],[6641,6742,6743],[6642,6643,6744],[6642,6743,6744],[6643,6644,6745],[6643,6744,6745],[6644,6645,6746],[6644,6745,6746],[6645,6646,6747],[6645,6746,6747],[6646,6647,6748],[6646,6747,6748],[6647,6648,6749],[6647,6748,6749],[6648,6649,6750],[6648,6749,6750],[6649,6650,6751],[6649,6750,6751],[6650,6651,6752],[6650,6751,6752],[6651,6652,6753],[6651,6752,6753],[6654,6655,6756],[6654,6755,6756],[6655,6656,6757],[6655,6756,6757],[6666,6667,6768],[6666,6767,6768],[6667,6668,6769],[6667,6768,6769],[6668,6669,6770],[6668,6769,6770],[6669,6670,6771],[6669,6770,6771],[6670,6671,6772],[6670,6771,6772],[6675,6676,6777],[6675,6776,6777],[6676,6677,6778],[6676,6777,6778],[6677,6678,6779],[6677,6778,6779],[6678,6679,6780],[6678,6779,6780],[6680,6681,6782],[6680,6781,6782],[6681,6682,6783],[6681,6782,6783],[6682,6683,6784],[6682,6783,6784],[6683,6684,6785],[6683,6784,6785],[6684,6685,6786],[6684,6785,6786],[6685,6686,6787],[6685,6786,6787],[6686,6687,6788],[6686,6787,6788],[6687,6688,6789],[6687,6788,6789],[6690,6691,6792],[6690,6791,6792],[6691,6692,6793],[6691,6792,6793],[6692,6693,6794],[6692,6793,6794],[6693,6694,6795],[6693,6794,6795],[6694,6695,6796],[6694,6795,6796],[6695,6696,6797],[6695,6796,6797],[6696,6697,6798],[6696,6797,6798],[6702,6703,6804],[6702,6803,6804],[6703,6704,6805],[6703,6804,6805],[6704,6705,6806],[6704,6805,6806],[6705,6706,6807],[6705,6806,6807],[6706,6707,6808],[6706,6807,6808],[6707,6708,6809],[6707,6808,6809],[6708,6709,6810],[6708,6809,6810],[6709,6710,6811],[6709,6810,6811],[6710,6711,6812],[6710,6811,6812],[6711,6712,6813],[6711,6812,6813],[6715,6716,6817],[6715,6816,6817],[6716,6717,6818],[6716,6817,6818],[6717,6718,6819],[6717,6818,6819],[6718,6719,6820],[6718,6819,6820],[6719,6720,6821],[6719,6820,6821],[6720,6721,6822],[6720,6821,6822],[6721,6722,6823],[6721,6822,6823],[6722,6723,6824],[6722,6823,6824],[6723,6724,6825],[6723,6824,6825],[6724,6725,6826],[6724,6825,6826],[6725,6726,6827],[6725,6826,6827],[6726,6727,6828],[6726,6827,6828],[6728,6729,6830],[6728,6829,6830],[6729,6730,6831],[6729,6830,6831],[6730,6731,6832],[6730,6831,6832],[6731,6732,6833],[6731,6832,6833],[6732,6733,6834],[6732,6833,6834],[6734,6735,6836],[6734,6835,6836],[6735,6736,6837],[6735,6836,6837],[6736,6737,6838],[6736,6837,6838],[6737,6738,6839],[6737,6838,6839],[6738,6739,6840],[6738,6839,6840],[6739,6740,6841],[6739,6840,6841],[6740,6741,6842],[6740,6841,6842],[6741,6742,6843],[6741,6842,6843],[6742,6743,6844],[6742,6843,6844],[6743,6744,6845],[6743,6844,6845],[6744,6745,6846],[6744,6845,6846],[6745,6746,6847],[6745,6846,6847],[6746,6747,6848],[6746,6847,6848],[6747,6748,6849],[6747,6848,6849],[6748,6749,6850],[6748,6849,6850],[6749,6750,6851],[6749,6850,6851],[6750,6751,6852],[6750,6851,6852],[6751,6752,6853],[6751,6852,6853],[6752,6753,6854],[6752,6853,6854],[6755,6756,6857],[6755,6856,6857],[6756,6757,6858],[6756,6857,6858],[6767,6768,6869],[6767,6868,6869],[6768,6769,6870],[6768,6869,6870],[6769,6770,6871],[6769,6870,6871],[6770,6771,6872],[6770,6871,6872],[6771,6772,6873],[6771,6872,6873],[6772,6773,6874],[6772,6873,6874],[6776,6777,6878],[6776,6877,6878],[6777,6778,6879],[6777,6878,6879],[6778,6779,6880],[6778,6879,6880],[6779,6780,6881],[6779,6880,6881],[6781,6782,6883],[6781,6882,6883],[6782,6783,6884],[6782,6883,6884],[6783,6784,6885],[6783,6884,6885],[6784,6785,6886],[6784,6885,6886],[6785,6786,6887],[6785,6886,6887],[6786,6787,6888],[6786,6887,6888],[6787,6788,6889],[6787,6888,6889],[6788,6789,6890],[6788,6889,6890],[6791,6792,6893],[6791,6892,6893],[6792,6793,6894],[6792,6893,6894],[6793,6794,6895],[6793,6894,6895],[6794,6795,6896],[6794,6895,6896],[6795,6796,6897],[6795,6896,6897],[6796,6797,6898],[6796,6897,6898],[6803,6804,6905],[6804,6805,6906],[6804,6905,6906],[6805,6806,6907],[6805,6906,6907],[6806,6807,6908],[6806,6907,6908],[6807,6808,6909],[6807,6908,6909],[6808,6809,6910],[6808,6909,6910],[6809,6810,6911],[6809,6910,6911],[6810,6811,6912],[6810,6911,6912],[6811,6812,6913],[6811,6912,6913],[6812,6813,6914],[6812,6913,6914],[6816,6817,6918],[6816,6917,6918],[6817,6818,6919],[6817,6918,6919],[6818,6819,6920],[6818,6919,6920],[6819,6820,6921],[6819,6920,6921],[6820,6821,6922],[6820,6921,6922],[6821,6822,6923],[6821,6922,6923],[6822,6823,6924],[6822,6923,6924],[6823,6824,6925],[6823,6924,6925],[6824,6825,6926],[6824,6925,6926],[6825,6826,6927],[6825,6926,6927],[6826,6827,6928],[6826,6927,6928],[6827,6828,6929],[6827,6928,6929],[6829,6830,6931],[6830,6831,6932],[6830,6931,6932],[6831,6832,6933],[6831,6932,6933],[6832,6833,6934],[6832,6933,6934],[6833,6834,6935],[6833,6934,6935],[6834,6835,6936],[6834,6935,6936],[6835,6836,6937],[6835,6936,6937],[6836,6837,6938],[6836,6937,6938],[6837,6838,6939],[6837,6938,6939],[6838,6839,6940],[6838,6939,6940],[6839,6840,6941],[6839,6940,6941],[6840,6841,6942],[6840,6941,6942],[6841,6842,6943],[6841,6942,6943],[6842,6843,6944],[6842,6943,6944],[6843,6844,6945],[6843,6944,6945],[6844,6845,6946],[6844,6945,6946],[6845,6846,6947],[6845,6946,6947],[6846,6847,6948],[6846,6947,6948],[6847,6848,6949],[6847,6948,6949],[6848,6849,6950],[6848,6949,6950],[6849,6850,6951],[6849,6950,6951],[6850,6851,6952],[6850,6951,6952],[6851,6852,6953],[6851,6952,6953],[6852,6853,6954],[6852,6953,6954],[6853,6854,6955],[6853,6954,6955],[6856,6857,6958],[6856,6957,6958],[6857,6858,6959],[6857,6958,6959],[6868,6869,6970],[6868,6969,6970],[6869,6870,6971],[6869,6970,6971],[6870,6871,6972],[6870,6971,6972],[6871,6872,6973],[6871,6972,6973],[6872,6873,6974],[6872,6973,6974],[6873,6874,6975],[6873,6974,6975],[6877,6878,6979],[6877,6978,6979],[6878,6879,6980],[6878,6979,6980],[6879,6880,6981],[6879,6980,6981],[6880,6881,6982],[6880,6981,6982],[6882,6883,6984],[6882,6983,6984],[6883,6884,6985],[6883,6984,6985],[6884,6885,6986],[6884,6985,6986],[6885,6886,6987],[6885,6986,6987],[6886,6887,6988],[6886,6987,6988],[6887,6888,6989],[6887,6988,6989],[6888,6889,6990],[6888,6989,6990],[6889,6890,6991],[6889,6990,6991],[6892,6893,6994],[6892,6993,6994],[6893,6894,6995],[6893,6994,6995],[6894,6895,6996],[6894,6995,6996],[6895,6896,6997],[6895,6996,6997],[6896,6897,6998],[6896,6997,6998],[6897,6898,6999],[6897,6998,6999],[6905,6906,7007],[6905,7006,7007],[6906,6907,7008],[6906,7007,7008],[6907,6908,7009],[6907,7008,7009],[6908,6909,7010],[6908,7009,7010],[6909,6910,7011],[6909,7010,7011],[6910,6911,7012],[6910,7011,7012],[6911,6912,7013],[6911,7012,7013],[6912,6913,7014],[6912,7013,7014],[6917,6918,7019],[6917,7018,7019],[6918,6919,7020],[6918,7019,7020],[6919,6920,7021],[6919,7020,7021],[6920,6921,7022],[6920,7021,7022],[6921,6922,7023],[6921,7022,7023],[6922,6923,7024],[6922,7023,7024],[6923,6924,7025],[6923,7024,7025],[6924,6925,7026],[6924,7025,7026],[6925,6926,7027],[6925,7026,7027],[6927,6928,7029],[6927,7028,7029],[6928,6929,7030],[6928,7029,7030],[6931,6932,7033],[6931,7032,7033],[6932,6933,7034],[6932,7033,7034],[6933,6934,7035],[6933,7034,7035],[6934,6935,7036],[6934,7035,7036],[6935,6936,7037],[6935,7036,7037],[6936,6937,7038],[6936,7037,7038],[6937,6938,7039],[6937,7038,7039],[6938,6939,7040],[6938,7039,7040],[6939,6940,7041],[6939,7040,7041],[6940,6941,7042],[6940,7041,7042],[6941,6942,7043],[6941,7042,7043],[6942,6943,7044],[6942,7043,7044],[6943,6944,7045],[6943,7044,7045],[6944,6945,7046],[6944,7045,7046],[6945,6946,7047],[6945,7046,7047],[6946,6947,7048],[6946,7047,7048],[6947,6948,7049],[6947,7048,7049],[6948,6949,7050],[6948,7049,7050],[6949,6950,7051],[6949,7050,7051],[6950,6951,7052],[6950,7051,7052],[6951,6952,7053],[6951,7052,7053],[6952,6953,7054],[6952,7053,7054],[6953,6954,7055],[6953,7054,7055],[6954,6955,7056],[6954,7055,7056],[6957,6958,7059],[6957,7058,7059],[6958,6959,7060],[6958,7059,7060],[6969,6970,7071],[6969,7070,7071],[6970,6971,7072],[6970,7071,7072],[6971,6972,7073],[6971,7072,7073],[6972,6973,7074],[6972,7073,7074],[6973,6974,7075],[6973,7074,7075],[6974,6975,7076],[6974,7075,7076],[6978,6979,7080],[6979,6980,7081],[6979,7080,7081],[6980,6981,7082],[6980,7081,7082],[6981,6982,7083],[6981,7082,7083],[6982,6983,7084],[6982,7083,7084],[6983,6984,7085],[6983,7084,7085],[6984,6985,7086],[6984,7085,7086],[6985,6986,7087],[6985,7086,7087],[6986,6987,7088],[6986,7087,7088],[6987,6988,7089],[6987,7088,7089],[6988,6989,7090],[6988,7089,7090],[6989,6990,7091],[6989,7090,7091],[6990,6991,7092],[6990,7091,7092],[6993,6994,7095],[6993,7094,7095],[6994,6995,7096],[6994,7095,7096],[6995,6996,7097],[6995,7096,7097],[6996,6997,7098],[6996,7097,7098],[6997,6998,7099],[6997,7098,7099],[6998,6999,7100],[6998,7099,7100],[7006,7007,7108],[7006,7107,7108],[7007,7008,7109],[7007,7108,7109],[7008,7009,7110],[7008,7109,7110],[7009,7010,7111],[7009,7110,7111],[7010,7011,7112],[7010,7111,7112],[7011,7012,7113],[7011,7112,7113],[7012,7013,7114],[7012,7113,7114],[7013,7014,7115],[7013,7114,7115],[7018,7019,7120],[7018,7119,7120],[7019,7020,7121],[7019,7120,7121],[7020,7021,7122],[7020,7121,7122],[7021,7022,7123],[7021,7122,7123],[7022,7023,7124],[7022,7123,7124],[7023,7024,7125],[7023,7124,7125],[7024,7025,7126],[7024,7125,7126],[7025,7026,7127],[7025,7126,7127],[7026,7027,7128],[7026,7127,7128],[7028,7029,7130],[7028,7129,7130],[7029,7030,7131],[7029,7130,7131],[7032,7033,7134],[7032,7133,7134],[7033,7034,7135],[7033,7134,7135],[7034,7035,7136],[7034,7135,7136],[7035,7036,7137],[7035,7136,7137],[7036,7037,7138],[7036,7137,7138],[7037,7038,7139],[7037,7138,7139],[7038,7039,7140],[7038,7139,7140],[7039,7040,7141],[7039,7140,7141],[7040,7041,7142],[7040,7141,7142],[7041,7042,7143],[7041,7142,7143],[7042,7043,7144],[7042,7143,7144],[7043,7044,7145],[7043,7144,7145],[7044,7045,7146],[7044,7145,7146],[7045,7046,7147],[7045,7146,7147],[7046,7047,7148],[7046,7147,7148],[7047,7048,7149],[7047,7148,7149],[7048,7049,7150],[7048,7149,7150],[7049,7050,7151],[7049,7150,7151],[7050,7051,7152],[7050,7151,7152],[7051,7052,7153],[7051,7152,7153],[7052,7053,7154],[7052,7153,7154],[7053,7054,7155],[7053,7154,7155],[7054,7055,7156],[7054,7155,7156],[7055,7056,7157],[7055,7156,7157],[7058,7059,7160],[7058,7159,7160],[7059,7060,7161],[7059,7160,7161],[7070,7071,7172],[7070,7171,7172],[7071,7072,7173],[7071,7172,7173],[7072,7073,7174],[7072,7173,7174],[7073,7074,7175],[7073,7174,7175],[7074,7075,7176],[7074,7175,7176],[7075,7076,7177],[7075,7176,7177],[7080,7081,7182],[7080,7181,7182],[7081,7082,7183],[7081,7182,7183],[7082,7083,7184],[7082,7183,7184],[7083,7084,7185],[7083,7184,7185],[7084,7085,7186],[7084,7185,7186],[7085,7086,7187],[7085,7186,7187],[7086,7087,7188],[7086,7187,7188],[7087,7088,7189],[7087,7188,7189],[7088,7089,7190],[7088,7189,7190],[7089,7090,7191],[7089,7190,7191],[7090,7091,7192],[7090,7191,7192],[7091,7092,7193],[7091,7192,7193],[7094,7095,7196],[7094,7195,7196],[7095,7096,7197],[7095,7196,7197],[7096,7097,7198],[7096,7197,7198],[7097,7098,7199],[7097,7198,7199],[7098,7099,7200],[7098,7199,7200],[7099,7100,7201],[7099,7200,7201],[7104,7105,7206],[7104,7205,7206],[7107,7108,7209],[7107,7208,7209],[7108,7109,7210],[7108,7209,7210],[7109,7110,7211],[7109,7210,7211],[7110,7111,7212],[7110,7211,7212],[7111,7112,7213],[7111,7212,7213],[7112,7113,7214],[7112,7213,7214],[7113,7114,7215],[7113,7214,7215],[7114,7115,7216],[7114,7215,7216],[7119,7120,7221],[7119,7220,7221],[7120,7121,7222],[7120,7221,7222],[7121,7122,7223],[7121,7222,7223],[7122,7123,7224],[7122,7223,7224],[7123,7124,7225],[7123,7224,7225],[7124,7125,7226],[7124,7225,7226],[7125,7126,7227],[7125,7226,7227],[7126,7127,7228],[7126,7227,7228],[7127,7128,7229],[7127,7228,7229],[7129,7130,7231],[7129,7230,7231],[7130,7131,7232],[7130,7231,7232],[7133,7134,7235],[7133,7234,7235],[7134,7135,7236],[7134,7235,7236],[7135,7136,7237],[7135,7236,7237],[7136,7137,7238],[7136,7237,7238],[7137,7138,7239],[7137,7238,7239],[7138,7139,7240],[7138,7239,7240],[7139,7140,7241],[7139,7240,7241],[7140,7141,7242],[7140,7241,7242],[7141,7142,7243],[7141,7242,7243],[7142,7143,7244],[7142,7243,7244],[7143,7144,7245],[7143,7244,7245],[7144,7145,7246],[7144,7245,7246],[7145,7146,7247],[7145,7246,7247],[7146,7147,7248],[7146,7247,7248],[7147,7148,7249],[7147,7248,7249],[7148,7149,7250],[7148,7249,7250],[7149,7150,7251],[7149,7250,7251],[7150,7151,7252],[7150,7251,7252],[7151,7152,7253],[7151,7252,7253],[7152,7153,7254],[7152,7253,7254],[7153,7154,7255],[7153,7254,7255],[7154,7155,7256],[7154,7255,7256],[7155,7156,7257],[7155,7256,7257],[7156,7157,7258],[7156,7257,7258],[7158,7159,7260],[7158,7259,7260],[7159,7160,7261],[7159,7260,7261],[7160,7161,7262],[7160,7261,7262],[7171,7172,7273],[7171,7272,7273],[7172,7173,7274],[7172,7273,7274],[7173,7174,7275],[7173,7274,7275],[7174,7175,7276],[7174,7275,7276],[7175,7176,7277],[7175,7276,7277],[7176,7177,7278],[7176,7277,7278],[7181,7182,7283],[7181,7282,7283],[7182,7183,7284],[7182,7283,7284],[7183,7184,7285],[7183,7284,7285],[7184,7185,7286],[7184,7285,7286],[7185,7186,7287],[7185,7286,7287],[7186,7187,7288],[7186,7287,7288],[7187,7188,7289],[7187,7288,7289],[7188,7189,7290],[7188,7289,7290],[7189,7190,7291],[7189,7290,7291],[7190,7191,7292],[7190,7291,7292],[7191,7192,7293],[7191,7292,7293],[7192,7193,7294],[7192,7293,7294],[7195,7196,7297],[7195,7296,7297],[7196,7197,7298],[7196,7297,7298],[7197,7198,7299],[7197,7298,7299],[7198,7199,7300],[7198,7299,7300],[7199,7200,7301],[7199,7300,7301],[7200,7201,7302],[7200,7301,7302],[7205,7206,7307],[7205,7306,7307],[7208,7209,7310],[7208,7309,7310],[7209,7210,7311],[7209,7310,7311],[7210,7211,7312],[7210,7311,7312],[7211,7212,7313],[7211,7312,7313],[7212,7213,7314],[7212,7313,7314],[7213,7214,7315],[7213,7314,7315],[7214,7215,7316],[7214,7315,7316],[7215,7216,7317],[7215,7316,7317],[7220,7221,7322],[7220,7321,7322],[7221,7222,7323],[7221,7322,7323],[7222,7223,7324],[7222,7323,7324],[7223,7224,7325],[7223,7324,7325],[7224,7225,7326],[7224,7325,7326],[7225,7226,7327],[7225,7326,7327],[7226,7227,7328],[7226,7327,7328],[7227,7228,7329],[7227,7328,7329],[7228,7229,7330],[7228,7329,7330],[7230,7231,7332],[7230,7331,7332],[7231,7232,7333],[7231,7332,7333],[7234,7235,7336],[7234,7335,7336],[7235,7236,7337],[7235,7336,7337],[7236,7237,7338],[7236,7337,7338],[7237,7238,7339],[7237,7338,7339],[7238,7239,7340],[7238,7339,7340],[7239,7240,7341],[7239,7340,7341],[7240,7241,7342],[7240,7341,7342],[7241,7242,7343],[7241,7342,7343],[7242,7243,7344],[7242,7343,7344],[7243,7244,7345],[7243,7344,7345],[7244,7245,7346],[7244,7345,7346],[7245,7246,7347],[7245,7346,7347],[7246,7247,7348],[7246,7347,7348],[7247,7248,7349],[7247,7348,7349],[7248,7249,7350],[7248,7349,7350],[7249,7250,7351],[7249,7350,7351],[7250,7251,7352],[7250,7351,7352],[7251,7252,7353],[7251,7352,7353],[7252,7253,7354],[7252,7353,7354],[7253,7254,7355],[7253,7354,7355],[7254,7255,7356],[7254,7355,7356],[7255,7256,7357],[7255,7356,7357],[7256,7257,7358],[7256,7357,7358],[7257,7258,7359],[7257,7358,7359],[7259,7260,7361],[7259,7360,7361],[7260,7261,7362],[7260,7361,7362],[7261,7262,7363],[7261,7362,7363],[7272,7273,7374],[7272,7373,7374],[7273,7274,7375],[7273,7374,7375],[7274,7275,7376],[7274,7375,7376],[7275,7276,7377],[7275,7376,7377],[7276,7277,7378],[7276,7377,7378],[7277,7278,7379],[7277,7378,7379],[7282,7283,7384],[7282,7383,7384],[7283,7284,7385],[7283,7384,7385],[7284,7285,7386],[7284,7385,7386],[7285,7286,7387],[7285,7386,7387],[7286,7287,7388],[7286,7387,7388],[7287,7288,7389],[7287,7388,7389],[7288,7289,7390],[7288,7389,7390],[7289,7290,7391],[7289,7390,7391],[7290,7291,7392],[7290,7391,7392],[7291,7292,7393],[7291,7392,7393],[7292,7293,7394],[7292,7393,7394],[7293,7294,7395],[7293,7394,7395],[7296,7297,7398],[7296,7397,7398],[7297,7298,7399],[7297,7398,7399],[7298,7299,7400],[7298,7399,7400],[7299,7300,7401],[7299,7400,7401],[7300,7301,7402],[7300,7401,7402],[7301,7302,7403],[7301,7402,7403],[7306,7307,7408],[7306,7407,7408],[7309,7310,7411],[7309,7410,7411],[7310,7311,7412],[7310,7411,7412],[7311,7312,7413],[7311,7412,7413],[7312,7313,7414],[7312,7413,7414],[7313,7314,7415],[7313,7414,7415],[7314,7315,7416],[7314,7415,7416],[7315,7316,7417],[7315,7416,7417],[7316,7317,7418],[7316,7417,7418],[7321,7322,7423],[7321,7422,7423],[7322,7323,7424],[7322,7423,7424],[7323,7324,7425],[7323,7424,7425],[7324,7325,7426],[7324,7425,7426],[7325,7326,7427],[7325,7426,7427],[7326,7327,7428],[7326,7427,7428],[7327,7328,7429],[7327,7428,7429],[7328,7329,7430],[7328,7429,7430],[7329,7330,7431],[7329,7430,7431],[7331,7332,7433],[7331,7432,7433],[7332,7333,7434],[7332,7433,7434],[7335,7336,7437],[7335,7436,7437],[7336,7337,7438],[7336,7437,7438],[7337,7338,7439],[7337,7438,7439],[7338,7339,7440],[7338,7439,7440],[7339,7340,7441],[7339,7440,7441],[7340,7341,7442],[7340,7441,7442],[7341,7342,7443],[7341,7442,7443],[7342,7343,7444],[7342,7443,7444],[7343,7344,7445],[7343,7444,7445],[7344,7345,7446],[7344,7445,7446],[7345,7346,7447],[7345,7446,7447],[7346,7347,7448],[7346,7447,7448],[7347,7348,7449],[7347,7448,7449],[7348,7349,7450],[7348,7449,7450],[7349,7350,7451],[7349,7450,7451],[7350,7351,7452],[7350,7451,7452],[7351,7352,7453],[7351,7452,7453],[7352,7353,7454],[7352,7453,7454],[7353,7354,7455],[7353,7454,7455],[7354,7355,7456],[7354,7455,7456],[7355,7356,7457],[7355,7456,7457],[7356,7357,7458],[7356,7457,7458],[7357,7358,7459],[7357,7458,7459],[7358,7359,7460],[7358,7459,7460],[7360,7361,7462],[7360,7461,7462],[7361,7362,7463],[7361,7462,7463],[7362,7363,7464],[7362,7463,7464],[7373,7374,7475],[7373,7474,7475],[7374,7375,7476],[7374,7475,7476],[7375,7376,7477],[7375,7476,7477],[7376,7377,7478],[7376,7477,7478],[7377,7378,7479],[7377,7478,7479],[7378,7379,7480],[7378,7479,7480],[7383,7384,7485],[7383,7484,7485],[7384,7385,7486],[7384,7485,7486],[7385,7386,7487],[7385,7486,7487],[7386,7387,7488],[7386,7487,7488],[7387,7388,7489],[7387,7488,7489],[7388,7389,7490],[7388,7489,7490],[7389,7390,7491],[7389,7490,7491],[7390,7391,7492],[7390,7491,7492],[7391,7392,7493],[7391,7492,7493],[7392,7393,7494],[7392,7493,7494],[7393,7394,7495],[7393,7494,7495],[7394,7395,7496],[7394,7495,7496],[7397,7398,7499],[7397,7498,7499],[7398,7399,7500],[7398,7499,7500],[7399,7400,7501],[7399,7500,7501],[7400,7401,7502],[7400,7501,7502],[7401,7402,7503],[7401,7502,7503],[7402,7403,7504],[7402,7503,7504],[7407,7408,7509],[7407,7508,7509],[7410,7411,7512],[7410,7511,7512],[7411,7412,7513],[7411,7512,7513],[7412,7413,7514],[7412,7513,7514],[7413,7414,7515],[7413,7514,7515],[7414,7415,7516],[7414,7515,7516],[7415,7416,7517],[7415,7516,7517],[7416,7417,7518],[7416,7517,7518],[7417,7418,7519],[7417,7518,7519],[7421,7422,7523],[7421,7522,7523],[7422,7423,7524],[7422,7523,7524],[7423,7424,7525],[7423,7524,7525],[7424,7425,7526],[7424,7525,7526],[7425,7426,7527],[7425,7526,7527],[7426,7427,7528],[7426,7527,7528],[7427,7428,7529],[7427,7528,7529],[7428,7429,7530],[7428,7529,7530],[7429,7430,7531],[7429,7530,7531],[7430,7431,7532],[7430,7531,7532],[7432,7433,7534],[7432,7533,7534],[7433,7434,7535],[7433,7534,7535],[7434,7435,7536],[7434,7535,7536],[7436,7437,7538],[7436,7537,7538],[7437,7438,7539],[7437,7538,7539],[7438,7439,7540],[7438,7539,7540],[7439,7440,7541],[7439,7540,7541],[7440,7441,7542],[7440,7541,7542],[7441,7442,7543],[7441,7542,7543],[7442,7443,7544],[7442,7543,7544],[7443,7444,7545],[7443,7544,7545],[7444,7445,7546],[7444,7545,7546],[7445,7446,7547],[7445,7546,7547],[7446,7447,7548],[7446,7547,7548],[7447,7448,7549],[7447,7548,7549],[7448,7449,7550],[7448,7549,7550],[7449,7450,7551],[7449,7550,7551],[7450,7451,7552],[7450,7551,7552],[7451,7452,7553],[7451,7552,7553],[7452,7453,7554],[7452,7553,7554],[7453,7454,7555],[7453,7554,7555],[7454,7455,7556],[7454,7555,7556],[7455,7456,7557],[7455,7556,7557],[7456,7457,7558],[7456,7557,7558],[7457,7458,7559],[7457,7558,7559],[7458,7459,7560],[7458,7559,7560],[7459,7460,7561],[7459,7560,7561],[7461,7462,7563],[7461,7562,7563],[7462,7463,7564],[7462,7563,7564],[7463,7464,7565],[7463,7564,7565],[7474,7475,7576],[7474,7575,7576],[7475,7476,7577],[7475,7576,7577],[7476,7477,7578],[7476,7577,7578],[7477,7478,7579],[7477,7578,7579],[7478,7479,7580],[7478,7579,7580],[7479,7480,7581],[7479,7580,7581],[7484,7485,7586],[7484,7585,7586],[7485,7486,7587],[7485,7586,7587],[7486,7487,7588],[7486,7587,7588],[7487,7488,7589],[7487,7588,7589],[7488,7489,7590],[7488,7589,7590],[7489,7490,7591],[7489,7590,7591],[7490,7491,7592],[7490,7591,7592],[7491,7492,7593],[7491,7592,7593],[7492,7493,7594],[7492,7593,7594],[7493,7494,7595],[7493,7594,7595],[7494,7495,7596],[7494,7595,7596],[7495,7496,7597],[7495,7596,7597],[7497,7498,7599],[7497,7598,7599],[7498,7499,7600],[7498,7599,7600],[7499,7500,7601],[7499,7600,7601],[7500,7501,7602],[7500,7601,7602],[7501,7502,7603],[7501,7602,7603],[7502,7503,7604],[7502,7603,7604],[7503,7504,7605],[7503,7604,7605],[7508,7509,7610],[7508,7609,7610],[7509,7510,7611],[7509,7610,7611],[7511,7512,7613],[7511,7612,7613],[7512,7513,7614],[7512,7613,7614],[7513,7514,7615],[7513,7614,7615],[7514,7515,7616],[7514,7615,7616],[7515,7516,7617],[7515,7616,7617],[7516,7517,7618],[7516,7617,7618],[7517,7518,7619],[7517,7618,7619],[7518,7519,7620],[7518,7619,7620],[7522,7523,7624],[7522,7623,7624],[7523,7524,7625],[7523,7624,7625],[7524,7525,7626],[7524,7625,7626],[7525,7526,7627],[7525,7626,7627],[7526,7527,7628],[7526,7627,7628],[7527,7528,7629],[7527,7628,7629],[7528,7529,7630],[7528,7629,7630],[7529,7530,7631],[7529,7630,7631],[7530,7531,7632],[7530,7631,7632],[7531,7532,7633],[7531,7632,7633],[7533,7534,7635],[7533,7634,7635],[7534,7535,7636],[7534,7635,7636],[7535,7536,7637],[7535,7636,7637],[7537,7538,7639],[7537,7638,7639],[7538,7539,7640],[7538,7639,7640],[7539,7540,7641],[7539,7640,7641],[7540,7541,7642],[7540,7641,7642],[7541,7542,7643],[7541,7642,7643],[7542,7543,7644],[7542,7643,7644],[7543,7544,7645],[7543,7644,7645],[7544,7545,7646],[7544,7645,7646],[7545,7546,7647],[7545,7646,7647],[7546,7547,7648],[7546,7647,7648],[7547,7548,7649],[7547,7648,7649],[7548,7549,7650],[7548,7649,7650],[7549,7550,7651],[7549,7650,7651],[7550,7551,7652],[7550,7651,7652],[7551,7552,7653],[7551,7652,7653],[7552,7553,7654],[7552,7653,7654],[7553,7554,7655],[7553,7654,7655],[7554,7555,7656],[7554,7655,7656],[7555,7556,7657],[7555,7656,7657],[7556,7557,7658],[7556,7657,7658],[7557,7558,7659],[7557,7658,7659],[7558,7559,7660],[7558,7659,7660],[7559,7560,7661],[7559,7660,7661],[7560,7561,7662],[7560,7661,7662],[7561,7562,7663],[7561,7662,7663],[7562,7563,7664],[7562,7663,7664],[7563,7564,7665],[7563,7664,7665],[7564,7565,7666],[7564,7665,7666],[7575,7576,7677],[7575,7676,7677],[7576,7577,7678],[7576,7677,7678],[7577,7578,7679],[7577,7678,7679],[7578,7579,7680],[7578,7679,7680],[7579,7580,7681],[7579,7680,7681],[7580,7581,7682],[7580,7681,7682],[7585,7586,7687],[7585,7686,7687],[7586,7587,7688],[7586,7687,7688],[7587,7588,7689],[7587,7688,7689],[7588,7589,7690],[7588,7689,7690],[7589,7590,7691],[7589,7690,7691],[7590,7591,7692],[7590,7691,7692],[7591,7592,7693],[7591,7692,7693],[7592,7593,7694],[7592,7693,7694],[7593,7594,7695],[7593,7694,7695],[7594,7595,7696],[7594,7695,7696],[7595,7596,7697],[7595,7696,7697],[7596,7597,7698],[7596,7697,7698],[7598,7599,7700],[7598,7699,7700],[7599,7600,7701],[7599,7700,7701],[7600,7601,7702],[7600,7701,7702],[7601,7602,7703],[7601,7702,7703],[7602,7603,7704],[7602,7703,7704],[7603,7604,7705],[7603,7704,7705],[7604,7605,7706],[7604,7705,7706],[7609,7610,7711],[7609,7710,7711],[7610,7611,7712],[7610,7711,7712],[7612,7613,7714],[7612,7713,7714],[7613,7614,7715],[7613,7714,7715],[7614,7615,7716],[7614,7715,7716],[7615,7616,7717],[7615,7716,7717],[7616,7617,7718],[7616,7717,7718],[7617,7618,7719],[7617,7718,7719],[7618,7619,7720],[7618,7719,7720],[7623,7624,7725],[7623,7724,7725],[7624,7625,7726],[7624,7725,7726],[7625,7626,7727],[7625,7726,7727],[7626,7627,7728],[7626,7727,7728],[7627,7628,7729],[7627,7728,7729],[7628,7629,7730],[7628,7729,7730],[7629,7630,7731],[7629,7730,7731],[7630,7631,7732],[7630,7731,7732],[7631,7632,7733],[7631,7732,7733],[7632,7633,7734],[7632,7733,7734],[7634,7635,7736],[7634,7735,7736],[7635,7636,7737],[7635,7736,7737],[7636,7637,7738],[7636,7737,7738],[7638,7639,7740],[7638,7739,7740],[7639,7640,7741],[7639,7740,7741],[7640,7641,7742],[7640,7741,7742],[7641,7642,7743],[7641,7742,7743],[7642,7643,7744],[7642,7743,7744],[7643,7644,7745],[7643,7744,7745],[7644,7645,7746],[7644,7745,7746],[7645,7646,7747],[7645,7746,7747],[7646,7647,7748],[7646,7747,7748],[7647,7648,7749],[7647,7748,7749],[7648,7649,7750],[7648,7749,7750],[7649,7650,7751],[7649,7750,7751],[7650,7651,7752],[7650,7751,7752],[7651,7652,7753],[7651,7752,7753],[7652,7653,7754],[7652,7753,7754],[7653,7654,7755],[7653,7754,7755],[7654,7655,7756],[7654,7755,7756],[7655,7656,7757],[7655,7756,7757],[7656,7657,7758],[7656,7757,7758],[7657,7658,7759],[7657,7758,7759],[7658,7659,7760],[7658,7759,7760],[7659,7660,7761],[7659,7760,7761],[7660,7661,7762],[7660,7761,7762],[7661,7662,7763],[7661,7762,7763],[7662,7663,7764],[7662,7763,7764],[7663,7664,7765],[7663,7764,7765],[7664,7665,7766],[7664,7765,7766],[7665,7666,7767],[7665,7766,7767],[7676,7677,7778],[7676,7777,7778],[7677,7678,7779],[7677,7778,7779],[7678,7679,7780],[7678,7779,7780],[7679,7680,7781],[7679,7780,7781],[7680,7681,7782],[7680,7781,7782],[7681,7682,7783],[7681,7782,7783],[7686,7687,7788],[7686,7787,7788],[7687,7688,7789],[7687,7788,7789],[7688,7689,7790],[7688,7789,7790],[7689,7690,7791],[7689,7790,7791],[7690,7691,7792],[7690,7791,7792],[7691,7692,7793],[7691,7792,7793],[7692,7693,7794],[7692,7793,7794],[7693,7694,7795],[7693,7794,7795],[7694,7695,7796],[7694,7795,7796],[7695,7696,7797],[7695,7796,7797],[7696,7697,7798],[7696,7797,7798],[7697,7698,7799],[7697,7798,7799],[7699,7700,7801],[7699,7800,7801],[7700,7701,7802],[7700,7801,7802],[7701,7702,7803],[7701,7802,7803],[7702,7703,7804],[7702,7803,7804],[7703,7704,7805],[7703,7804,7805],[7704,7705,7806],[7704,7805,7806],[7705,7706,7807],[7705,7806,7807],[7710,7711,7812],[7710,7811,7812],[7711,7712,7813],[7711,7812,7813],[7713,7714,7815],[7714,7715,7816],[7714,7815,7816],[7715,7716,7817],[7715,7816,7817],[7716,7717,7818],[7716,7817,7818],[7717,7718,7819],[7717,7818,7819],[7718,7719,7820],[7718,7819,7820],[7719,7720,7821],[7719,7820,7821],[7724,7725,7826],[7724,7825,7826],[7725,7726,7827],[7725,7826,7827],[7726,7727,7828],[7726,7827,7828],[7727,7728,7829],[7727,7828,7829],[7728,7729,7830],[7728,7829,7830],[7729,7730,7831],[7729,7830,7831],[7730,7731,7832],[7730,7831,7832],[7731,7732,7833],[7731,7832,7833],[7732,7733,7834],[7732,7833,7834],[7733,7734,7835],[7733,7834,7835],[7735,7736,7837],[7735,7836,7837],[7736,7737,7838],[7736,7837,7838],[7737,7738,7839],[7737,7838,7839],[7739,7740,7841],[7739,7840,7841],[7740,7741,7842],[7740,7841,7842],[7741,7742,7843],[7741,7842,7843],[7742,7743,7844],[7742,7843,7844],[7743,7744,7845],[7743,7844,7845],[7744,7745,7846],[7744,7845,7846],[7745,7746,7847],[7745,7846,7847],[7746,7747,7848],[7746,7847,7848],[7747,7748,7849],[7747,7848,7849],[7748,7749,7850],[7748,7849,7850],[7749,7750,7851],[7749,7850,7851],[7750,7751,7852],[7750,7851,7852],[7751,7752,7853],[7751,7852,7853],[7752,7753,7854],[7752,7853,7854],[7753,7754,7855],[7753,7854,7855],[7754,7755,7856],[7754,7855,7856],[7755,7756,7857],[7755,7856,7857],[7756,7757,7858],[7756,7857,7858],[7757,7758,7859],[7757,7858,7859],[7758,7759,7860],[7758,7859,7860],[7759,7760,7861],[7759,7860,7861],[7760,7761,7862],[7760,7861,7862],[7761,7762,7863],[7761,7862,7863],[7762,7763,7864],[7762,7863,7864],[7763,7764,7865],[7763,7864,7865],[7764,7765,7866],[7764,7865,7866],[7765,7766,7867],[7765,7866,7867],[7766,7767,7868],[7766,7867,7868],[7777,7778,7879],[7777,7878,7879],[7778,7779,7880],[7778,7879,7880],[7779,7780,7881],[7779,7880,7881],[7780,7781,7882],[7780,7881,7882],[7781,7782,7883],[7781,7882,7883],[7782,7783,7884],[7782,7883,7884],[7787,7788,7889],[7787,7888,7889],[7788,7789,7890],[7788,7889,7890],[7789,7790,7891],[7789,7890,7891],[7790,7791,7892],[7790,7891,7892],[7791,7792,7893],[7791,7892,7893],[7792,7793,7894],[7792,7893,7894],[7793,7794,7895],[7793,7894,7895],[7794,7795,7896],[7794,7895,7896],[7795,7796,7897],[7795,7896,7897],[7796,7797,7898],[7796,7897,7898],[7797,7798,7899],[7797,7898,7899],[7798,7799,7900],[7798,7899,7900],[7799,7800,7901],[7799,7900,7901],[7800,7801,7902],[7800,7901,7902],[7801,7802,7903],[7801,7902,7903],[7802,7803,7904],[7802,7903,7904],[7803,7804,7905],[7803,7904,7905],[7804,7805,7906],[7804,7905,7906],[7805,7806,7907],[7805,7906,7907],[7806,7807,7908],[7806,7907,7908],[7811,7812,7913],[7811,7912,7913],[7812,7813,7914],[7812,7913,7914],[7815,7816,7917],[7815,7916,7917],[7816,7817,7918],[7816,7917,7918],[7817,7818,7919],[7817,7918,7919],[7818,7819,7920],[7818,7919,7920],[7819,7820,7921],[7819,7920,7921],[7820,7821,7922],[7820,7921,7922],[7825,7826,7927],[7825,7926,7927],[7826,7827,7928],[7826,7927,7928],[7827,7828,7929],[7827,7928,7929],[7828,7829,7930],[7828,7929,7930],[7829,7830,7931],[7829,7930,7931],[7830,7831,7932],[7830,7931,7932],[7831,7832,7933],[7831,7932,7933],[7832,7833,7934],[7832,7933,7934],[7833,7834,7935],[7833,7934,7935],[7834,7835,7936],[7834,7935,7936],[7836,7837,7938],[7836,7937,7938],[7837,7838,7939],[7837,7938,7939],[7838,7839,7940],[7838,7939,7940],[7840,7841,7942],[7841,7842,7943],[7841,7942,7943],[7842,7843,7944],[7842,7943,7944],[7843,7844,7945],[7843,7944,7945],[7844,7845,7946],[7844,7945,7946],[7845,7846,7947],[7845,7946,7947],[7846,7847,7948],[7846,7947,7948],[7847,7848,7949],[7847,7948,7949],[7848,7849,7950],[7848,7949,7950],[7849,7850,7951],[7849,7950,7951],[7850,7851,7952],[7850,7951,7952],[7851,7852,7953],[7851,7952,7953],[7852,7853,7954],[7852,7953,7954],[7853,7854,7955],[7853,7954,7955],[7854,7855,7956],[7854,7955,7956],[7855,7856,7957],[7855,7956,7957],[7856,7857,7958],[7856,7957,7958],[7857,7858,7959],[7857,7958,7959],[7858,7859,7960],[7858,7959,7960],[7859,7860,7961],[7859,7960,7961],[7860,7861,7962],[7860,7961,7962],[7861,7862,7963],[7861,7962,7963],[7862,7863,7964],[7862,7963,7964],[7863,7864,7965],[7863,7964,7965],[7864,7865,7966],[7864,7965,7966],[7865,7866,7967],[7865,7966,7967],[7866,7867,7968],[7866,7967,7968],[7867,7868,7969],[7867,7968,7969],[7878,7879,7980],[7878,7979,7980],[7879,7880,7981],[7879,7980,7981],[7880,7881,7982],[7880,7981,7982],[7881,7882,7983],[7881,7982,7983],[7882,7883,7984],[7882,7983,7984],[7883,7884,7985],[7883,7984,7985],[7888,7889,7990],[7888,7989,7990],[7889,7890,7991],[7889,7990,7991],[7890,7891,7992],[7890,7991,7992],[7891,7892,7993],[7891,7992,7993],[7892,7893,7994],[7892,7993,7994],[7893,7894,7995],[7893,7994,7995],[7894,7895,7996],[7894,7995,7996],[7895,7896,7997],[7895,7996,7997],[7896,7897,7998],[7896,7997,7998],[7897,7898,7999],[7897,7998,7999],[7898,7899,8000],[7898,7999,8000],[7899,7900,8001],[7899,8000,8001],[7900,7901,8002],[7900,8001,8002],[7901,7902,8003],[7901,8002,8003],[7902,7903,8004],[7902,8003,8004],[7903,7904,8005],[7903,8004,8005],[7904,7905,8006],[7904,8005,8006],[7905,7906,8007],[7905,8006,8007],[7906,7907,8008],[7906,8007,8008],[7907,7908,8009],[7907,8008,8009],[7912,7913,8014],[7912,8013,8014],[7913,7914,8015],[7913,8014,8015],[7916,7917,8018],[7916,8017,8018],[7917,7918,8019],[7917,8018,8019],[7918,7919,8020],[7918,8019,8020],[7919,7920,8021],[7919,8020,8021],[7920,7921,8022],[7920,8021,8022],[7921,7922,8023],[7921,8022,8023],[7926,7927,8028],[7926,8027,8028],[7927,7928,8029],[7927,8028,8029],[7928,7929,8030],[7928,8029,8030],[7929,7930,8031],[7929,8030,8031],[7930,7931,8032],[7930,8031,8032],[7931,7932,8033],[7931,8032,8033],[7932,7933,8034],[7932,8033,8034],[7933,7934,8035],[7933,8034,8035],[7934,7935,8036],[7934,8035,8036],[7935,7936,8037],[7935,8036,8037],[7937,7938,8039],[7937,8038,8039],[7938,7939,8040],[7938,8039,8040],[7939,7940,8041],[7939,8040,8041],[7942,7943,8044],[7942,8043,8044],[7943,7944,8045],[7943,8044,8045],[7944,7945,8046],[7944,8045,8046],[7945,7946,8047],[7945,8046,8047],[7946,7947,8048],[7946,8047,8048],[7947,7948,8049],[7947,8048,8049],[7948,7949,8050],[7948,8049,8050],[7949,7950,8051],[7949,8050,8051],[7950,7951,8052],[7950,8051,8052],[7951,7952,8053],[7951,8052,8053],[7952,7953,8054],[7952,8053,8054],[7953,7954,8055],[7953,8054,8055],[7954,7955,8056],[7954,8055,8056],[7955,7956,8057],[7955,8056,8057],[7956,7957,8058],[7956,8057,8058],[7957,7958,8059],[7957,8058,8059],[7958,7959,8060],[7958,8059,8060],[7959,7960,8061],[7959,8060,8061],[7960,7961,8062],[7960,8061,8062],[7961,7962,8063],[7961,8062,8063],[7962,7963,8064],[7962,8063,8064],[7963,7964,8065],[7963,8064,8065],[7964,7965,8066],[7964,8065,8066],[7965,7966,8067],[7965,8066,8067],[7966,7967,8068],[7966,8067,8068],[7967,7968,8069],[7967,8068,8069],[7968,7969,8070],[7968,8069,8070],[7969,7970,8071],[7969,8070,8071],[7979,7980,8081],[7979,8080,8081],[7980,7981,8082],[7980,8081,8082],[7981,7982,8083],[7981,8082,8083],[7982,7983,8084],[7982,8083,8084],[7983,7984,8085],[7983,8084,8085],[7984,7985,8086],[7984,8085,8086],[7989,7990,8091],[7989,8090,8091],[7990,7991,8092],[7990,8091,8092],[7991,7992,8093],[7991,8092,8093],[7992,7993,8094],[7992,8093,8094],[7993,7994,8095],[7993,8094,8095],[7994,7995,8096],[7994,8095,8096],[7995,7996,8097],[7995,8096,8097],[7996,7997,8098],[7996,8097,8098],[7997,7998,8099],[7997,8098,8099],[7998,7999,8100],[7998,8099,8100],[7999,8000,8101],[7999,8100,8101],[8000,8001,8102],[8000,8101,8102],[8001,8002,8103],[8001,8102,8103],[8002,8003,8104],[8002,8103,8104],[8003,8004,8105],[8003,8104,8105],[8004,8005,8106],[8004,8105,8106],[8005,8006,8107],[8005,8106,8107],[8006,8007,8108],[8006,8107,8108],[8007,8008,8109],[8007,8108,8109],[8008,8009,8110],[8008,8109,8110],[8012,8013,8114],[8012,8113,8114],[8013,8014,8115],[8013,8114,8115],[8014,8015,8116],[8014,8115,8116],[8017,8018,8119],[8017,8118,8119],[8018,8019,8120],[8018,8119,8120],[8019,8020,8121],[8019,8120,8121],[8020,8021,8122],[8020,8121,8122],[8021,8022,8123],[8021,8122,8123],[8022,8023,8124],[8022,8123,8124],[8027,8028,8129],[8027,8128,8129],[8028,8029,8130],[8028,8129,8130],[8029,8030,8131],[8029,8130,8131],[8030,8031,8132],[8030,8131,8132],[8031,8032,8133],[8031,8132,8133],[8032,8033,8134],[8032,8133,8134],[8033,8034,8135],[8033,8134,8135],[8034,8035,8136],[8034,8135,8136],[8035,8036,8137],[8035,8136,8137],[8036,8037,8138],[8036,8137,8138],[8038,8039,8140],[8038,8139,8140],[8039,8040,8141],[8039,8140,8141],[8040,8041,8142],[8040,8141,8142],[8043,8044,8145],[8043,8144,8145],[8044,8045,8146],[8044,8145,8146],[8045,8046,8147],[8045,8146,8147],[8046,8047,8148],[8046,8147,8148],[8047,8048,8149],[8047,8148,8149],[8048,8049,8150],[8048,8149,8150],[8049,8050,8151],[8049,8150,8151],[8050,8051,8152],[8050,8151,8152],[8051,8052,8153],[8051,8152,8153],[8052,8053,8154],[8052,8153,8154],[8053,8054,8155],[8053,8154,8155],[8054,8055,8156],[8054,8155,8156],[8055,8056,8157],[8055,8156,8157],[8056,8057,8158],[8056,8157,8158],[8057,8058,8159],[8057,8158,8159],[8058,8059,8160],[8058,8159,8160],[8059,8060,8161],[8059,8160,8161],[8060,8061,8162],[8060,8161,8162],[8061,8062,8163],[8061,8162,8163],[8062,8063,8164],[8062,8163,8164],[8063,8064,8165],[8063,8164,8165],[8064,8065,8166],[8064,8165,8166],[8065,8066,8167],[8065,8166,8167],[8066,8067,8168],[8066,8167,8168],[8067,8068,8169],[8067,8168,8169],[8068,8069,8170],[8068,8169,8170],[8069,8070,8171],[8069,8170,8171],[8070,8071,8172],[8070,8171,8172],[8080,8081,8182],[8080,8181,8182],[8081,8082,8183],[8081,8182,8183],[8082,8083,8184],[8082,8183,8184],[8083,8084,8185],[8083,8184,8185],[8084,8085,8186],[8084,8185,8186],[8085,8086,8187],[8085,8186,8187],[8090,8091,8192],[8090,8191,8192],[8091,8092,8193],[8091,8192,8193],[8092,8093,8194],[8092,8193,8194],[8093,8094,8195],[8093,8194,8195],[8094,8095,8196],[8094,8195,8196],[8095,8096,8197],[8095,8196,8197],[8096,8097,8198],[8096,8197,8198],[8097,8098,8199],[8097,8198,8199],[8098,8099,8200],[8098,8199,8200],[8099,8100,8201],[8099,8200,8201],[8100,8101,8202],[8100,8201,8202],[8101,8102,8203],[8101,8202,8203],[8102,8103,8204],[8102,8203,8204],[8103,8104,8205],[8103,8204,8205],[8104,8105,8206],[8104,8205,8206],[8105,8106,8207],[8105,8206,8207],[8106,8107,8208],[8106,8207,8208],[8107,8108,8209],[8107,8208,8209],[8108,8109,8210],[8108,8209,8210],[8109,8110,8211],[8109,8210,8211],[8113,8114,8215],[8113,8214,8215],[8114,8115,8216],[8114,8215,8216],[8115,8116,8217],[8115,8216,8217],[8116,8117,8218],[8116,8217,8218],[8118,8119,8220],[8118,8219,8220],[8119,8120,8221],[8119,8220,8221],[8120,8121,8222],[8120,8221,8222],[8121,8122,8223],[8121,8222,8223],[8122,8123,8224],[8122,8223,8224],[8123,8124,8225],[8123,8224,8225],[8128,8129,8230],[8128,8229,8230],[8129,8130,8231],[8129,8230,8231],[8130,8131,8232],[8130,8231,8232],[8131,8132,8233],[8131,8232,8233],[8132,8133,8234],[8132,8233,8234],[8133,8134,8235],[8133,8234,8235],[8134,8135,8236],[8134,8235,8236],[8135,8136,8237],[8135,8236,8237],[8136,8137,8238],[8136,8237,8238],[8137,8138,8239],[8137,8238,8239],[8139,8140,8241],[8139,8240,8241],[8140,8141,8242],[8140,8241,8242],[8141,8142,8243],[8141,8242,8243],[8144,8145,8246],[8144,8245,8246],[8145,8146,8247],[8145,8246,8247],[8146,8147,8248],[8146,8247,8248],[8147,8148,8249],[8147,8248,8249],[8148,8149,8250],[8148,8249,8250],[8149,8150,8251],[8149,8250,8251],[8150,8151,8252],[8150,8251,8252],[8151,8152,8253],[8151,8252,8253],[8152,8153,8254],[8152,8253,8254],[8153,8154,8255],[8153,8254,8255],[8154,8155,8256],[8154,8255,8256],[8155,8156,8257],[8155,8256,8257],[8156,8157,8258],[8156,8257,8258],[8157,8158,8259],[8157,8258,8259],[8158,8159,8260],[8158,8259,8260],[8159,8160,8261],[8159,8260,8261],[8160,8161,8262],[8160,8261,8262],[8161,8162,8263],[8161,8262,8263],[8162,8163,8264],[8162,8263,8264],[8163,8164,8265],[8163,8264,8265],[8164,8165,8266],[8164,8265,8266],[8165,8166,8267],[8165,8266,8267],[8166,8167,8268],[8166,8267,8268],[8167,8168,8269],[8167,8268,8269],[8168,8169,8270],[8168,8269,8270],[8169,8170,8271],[8169,8270,8271],[8170,8171,8272],[8170,8271,8272],[8171,8172,8273],[8171,8272,8273],[8181,8182,8283],[8181,8282,8283],[8182,8183,8284],[8182,8283,8284],[8183,8184,8285],[8183,8284,8285],[8184,8185,8286],[8184,8285,8286],[8185,8186,8287],[8185,8286,8287],[8186,8187,8288],[8186,8287,8288],[8191,8192,8293],[8191,8292,8293],[8192,8193,8294],[8192,8293,8294],[8193,8194,8295],[8193,8294,8295],[8194,8195,8296],[8194,8295,8296],[8195,8196,8297],[8195,8296,8297],[8196,8197,8298],[8196,8297,8298],[8197,8198,8299],[8197,8298,8299],[8198,8199,8300],[8198,8299,8300],[8199,8200,8301],[8199,8300,8301],[8200,8201,8302],[8200,8301,8302],[8201,8202,8303],[8201,8302,8303],[8202,8203,8304],[8202,8303,8304],[8203,8204,8305],[8203,8304,8305],[8204,8205,8306],[8204,8305,8306],[8205,8206,8307],[8205,8306,8307],[8206,8207,8308],[8206,8307,8308],[8207,8208,8309],[8207,8308,8309],[8208,8209,8310],[8208,8309,8310],[8209,8210,8311],[8209,8310,8311],[8210,8211,8312],[8210,8311,8312],[8214,8215,8316],[8214,8315,8316],[8215,8216,8317],[8215,8316,8317],[8216,8217,8318],[8216,8317,8318],[8217,8218,8319],[8217,8318,8319],[8219,8220,8321],[8219,8320,8321],[8220,8221,8322],[8220,8321,8322],[8221,8222,8323],[8221,8322,8323],[8222,8223,8324],[8222,8323,8324],[8223,8224,8325],[8223,8324,8325],[8224,8225,8326],[8224,8325,8326],[8229,8230,8331],[8229,8330,8331],[8230,8231,8332],[8230,8331,8332],[8231,8232,8333],[8231,8332,8333],[8232,8233,8334],[8232,8333,8334],[8233,8234,8335],[8233,8334,8335],[8234,8235,8336],[8234,8335,8336],[8235,8236,8337],[8235,8336,8337],[8236,8237,8338],[8236,8337,8338],[8237,8238,8339],[8237,8338,8339],[8238,8239,8340],[8238,8339,8340],[8240,8241,8342],[8240,8341,8342],[8241,8242,8343],[8241,8342,8343],[8242,8243,8344],[8242,8343,8344],[8245,8246,8347],[8245,8346,8347],[8246,8247,8348],[8246,8347,8348],[8247,8248,8349],[8247,8348,8349],[8248,8249,8350],[8248,8349,8350],[8249,8250,8351],[8249,8350,8351],[8250,8251,8352],[8250,8351,8352],[8251,8252,8353],[8251,8352,8353],[8252,8253,8354],[8252,8353,8354],[8253,8254,8355],[8253,8354,8355],[8254,8255,8356],[8254,8355,8356],[8255,8256,8357],[8255,8356,8357],[8256,8257,8358],[8256,8357,8358],[8257,8258,8359],[8257,8358,8359],[8258,8259,8360],[8258,8359,8360],[8259,8260,8361],[8259,8360,8361],[8260,8261,8362],[8260,8361,8362],[8261,8262,8363],[8261,8362,8363],[8262,8263,8364],[8262,8363,8364],[8263,8264,8365],[8263,8364,8365],[8264,8265,8366],[8264,8365,8366],[8265,8266,8367],[8265,8366,8367],[8266,8267,8368],[8266,8367,8368],[8267,8268,8369],[8267,8368,8369],[8268,8269,8370],[8268,8369,8370],[8269,8270,8371],[8269,8370,8371],[8270,8271,8372],[8270,8371,8372],[8271,8272,8373],[8271,8372,8373],[8272,8273,8374],[8272,8373,8374],[8282,8283,8384],[8282,8383,8384],[8283,8284,8385],[8283,8384,8385],[8284,8285,8386],[8284,8385,8386],[8285,8286,8387],[8285,8386,8387],[8286,8287,8388],[8286,8387,8388],[8287,8288,8389],[8287,8388,8389],[8288,8289,8390],[8288,8389,8390],[8292,8293,8394],[8292,8393,8394],[8293,8294,8395],[8293,8394,8395],[8294,8295,8396],[8294,8395,8396],[8295,8296,8397],[8295,8396,8397],[8296,8297,8398],[8296,8397,8398],[8297,8298,8399],[8297,8398,8399],[8298,8299,8400],[8298,8399,8400],[8299,8300,8401],[8299,8400,8401],[8300,8301,8402],[8300,8401,8402],[8301,8302,8403],[8301,8402,8403],[8302,8303,8404],[8302,8403,8404],[8303,8304,8405],[8303,8404,8405],[8304,8305,8406],[8304,8405,8406],[8305,8306,8407],[8305,8406,8407],[8306,8307,8408],[8306,8407,8408],[8307,8308,8409],[8307,8408,8409],[8308,8309,8410],[8308,8409,8410],[8309,8310,8411],[8309,8410,8411],[8310,8311,8412],[8310,8411,8412],[8311,8312,8413],[8311,8412,8413],[8315,8316,8417],[8315,8416,8417],[8316,8317,8418],[8316,8417,8418],[8317,8318,8419],[8317,8418,8419],[8318,8319,8420],[8318,8419,8420],[8320,8321,8422],[8320,8421,8422],[8321,8322,8423],[8321,8422,8423],[8322,8323,8424],[8322,8423,8424],[8323,8324,8425],[8323,8424,8425],[8324,8325,8426],[8324,8425,8426],[8325,8326,8427],[8325,8426,8427],[8330,8331,8432],[8330,8431,8432],[8331,8332,8433],[8331,8432,8433],[8332,8333,8434],[8332,8433,8434],[8333,8334,8435],[8333,8434,8435],[8334,8335,8436],[8334,8435,8436],[8335,8336,8437],[8335,8436,8437],[8336,8337,8438],[8336,8437,8438],[8337,8338,8439],[8337,8438,8439],[8338,8339,8440],[8338,8439,8440],[8339,8340,8441],[8339,8440,8441],[8341,8342,8443],[8341,8442,8443],[8342,8343,8444],[8342,8443,8444],[8343,8344,8445],[8343,8444,8445],[8346,8347,8448],[8346,8447,8448],[8347,8348,8449],[8347,8448,8449],[8348,8349,8450],[8348,8449,8450],[8349,8350,8451],[8349,8450,8451],[8350,8351,8452],[8350,8451,8452],[8351,8352,8453],[8351,8452,8453],[8352,8353,8454],[8352,8453,8454],[8353,8354,8455],[8353,8454,8455],[8354,8355,8456],[8354,8455,8456],[8355,8356,8457],[8355,8456,8457],[8356,8357,8458],[8356,8457,8458],[8357,8358,8459],[8357,8458,8459],[8358,8359,8460],[8358,8459,8460],[8359,8360,8461],[8359,8460,8461],[8360,8361,8462],[8360,8461,8462],[8361,8362,8463],[8361,8462,8463],[8362,8363,8464],[8362,8463,8464],[8363,8364,8465],[8363,8464,8465],[8364,8365,8466],[8364,8465,8466],[8365,8366,8467],[8365,8466,8467],[8366,8367,8468],[8366,8467,8468],[8367,8368,8469],[8367,8468,8469],[8368,8369,8470],[8368,8469,8470],[8369,8370,8471],[8369,8470,8471],[8370,8371,8472],[8370,8471,8472],[8371,8372,8473],[8371,8472,8473],[8372,8373,8474],[8372,8473,8474],[8373,8374,8475],[8373,8474,8475],[8383,8384,8485],[8383,8484,8485],[8384,8385,8486],[8384,8485,8486],[8385,8386,8487],[8385,8486,8487],[8386,8387,8488],[8386,8487,8488],[8387,8388,8489],[8387,8488,8489],[8388,8389,8490],[8388,8489,8490],[8389,8390,8491],[8389,8490,8491],[8392,8393,8494],[8392,8493,8494],[8393,8394,8495],[8393,8494,8495],[8394,8395,8496],[8394,8495,8496],[8395,8396,8497],[8395,8496,8497],[8396,8397,8498],[8396,8497,8498],[8397,8398,8499],[8397,8498,8499],[8398,8399,8500],[8398,8499,8500],[8399,8400,8501],[8399,8500,8501],[8400,8401,8502],[8400,8501,8502],[8401,8402,8503],[8401,8502,8503],[8402,8403,8504],[8402,8503,8504],[8403,8404,8505],[8403,8504,8505],[8404,8405,8506],[8404,8505,8506],[8405,8406,8507],[8405,8506,8507],[8406,8407,8508],[8406,8507,8508],[8407,8408,8509],[8407,8508,8509],[8408,8409,8510],[8408,8509,8510],[8409,8410,8511],[8409,8510,8511],[8410,8411,8512],[8410,8511,8512],[8411,8412,8513],[8411,8512,8513],[8412,8413,8514],[8412,8513,8514],[8416,8417,8518],[8416,8517,8518],[8417,8418,8519],[8417,8518,8519],[8418,8419,8520],[8418,8519,8520],[8419,8420,8521],[8419,8520,8521],[8421,8422,8523],[8422,8423,8524],[8422,8523,8524],[8423,8424,8525],[8423,8524,8525],[8424,8425,8526],[8424,8525,8526],[8425,8426,8527],[8425,8526,8527],[8426,8427,8528],[8426,8527,8528],[8430,8431,8532],[8430,8531,8532],[8431,8432,8533],[8431,8532,8533],[8432,8433,8534],[8432,8533,8534],[8433,8434,8535],[8433,8534,8535],[8434,8435,8536],[8434,8535,8536],[8435,8436,8537],[8435,8536,8537],[8436,8437,8538],[8436,8537,8538],[8437,8438,8539],[8437,8538,8539],[8438,8439,8540],[8438,8539,8540],[8439,8440,8541],[8439,8540,8541],[8440,8441,8542],[8440,8541,8542],[8442,8443,8544],[8442,8543,8544],[8443,8444,8545],[8443,8544,8545],[8444,8445,8546],[8444,8545,8546],[8447,8448,8549],[8447,8548,8549],[8448,8449,8550],[8448,8549,8550],[8449,8450,8551],[8449,8550,8551],[8450,8451,8552],[8450,8551,8552],[8451,8452,8553],[8451,8552,8553],[8452,8453,8554],[8452,8553,8554],[8453,8454,8555],[8453,8554,8555],[8454,8455,8556],[8454,8555,8556],[8455,8456,8557],[8455,8556,8557],[8456,8457,8558],[8456,8557,8558],[8457,8458,8559],[8457,8558,8559],[8458,8459,8560],[8458,8559,8560],[8459,8460,8561],[8459,8560,8561],[8460,8461,8562],[8460,8561,8562],[8461,8462,8563],[8461,8562,8563],[8462,8463,8564],[8462,8563,8564],[8463,8464,8565],[8463,8564,8565],[8464,8465,8566],[8464,8565,8566],[8465,8466,8567],[8465,8566,8567],[8466,8467,8568],[8466,8567,8568],[8467,8468,8569],[8467,8568,8569],[8468,8469,8570],[8468,8569,8570],[8469,8470,8571],[8469,8570,8571],[8470,8471,8572],[8470,8571,8572],[8471,8472,8573],[8471,8572,8573],[8472,8473,8574],[8472,8573,8574],[8473,8474,8575],[8473,8574,8575],[8474,8475,8576],[8474,8575,8576],[8475,8476,8577],[8475,8576,8577],[8484,8485,8586],[8484,8585,8586],[8485,8486,8587],[8485,8586,8587],[8486,8487,8588],[8486,8587,8588],[8487,8488,8589],[8487,8588,8589],[8488,8489,8590],[8488,8589,8590],[8489,8490,8591],[8489,8590,8591],[8490,8491,8592],[8490,8591,8592],[8493,8494,8595],[8493,8594,8595],[8494,8495,8596],[8494,8595,8596],[8495,8496,8597],[8495,8596,8597],[8496,8497,8598],[8496,8597,8598],[8497,8498,8599],[8497,8598,8599],[8498,8499,8600],[8498,8599,8600],[8499,8500,8601],[8499,8600,8601],[8500,8501,8602],[8500,8601,8602],[8501,8502,8603],[8501,8602,8603],[8502,8503,8604],[8502,8603,8604],[8503,8504,8605],[8503,8604,8605],[8504,8505,8606],[8504,8605,8606],[8505,8506,8607],[8505,8606,8607],[8506,8507,8608],[8506,8607,8608],[8507,8508,8609],[8507,8608,8609],[8508,8509,8610],[8508,8609,8610],[8509,8510,8611],[8509,8610,8611],[8510,8511,8612],[8510,8611,8612],[8511,8512,8613],[8511,8612,8613],[8512,8513,8614],[8512,8613,8614],[8513,8514,8615],[8513,8614,8615],[8517,8518,8619],[8517,8618,8619],[8518,8519,8620],[8518,8619,8620],[8519,8520,8621],[8519,8620,8621],[8520,8521,8622],[8520,8621,8622],[8523,8524,8625],[8523,8624,8625],[8524,8525,8626],[8524,8625,8626],[8525,8526,8627],[8525,8626,8627],[8526,8527,8628],[8526,8627,8628],[8527,8528,8629],[8527,8628,8629],[8531,8532,8633],[8531,8632,8633],[8532,8533,8634],[8532,8633,8634],[8533,8534,8635],[8533,8634,8635],[8534,8535,8636],[8534,8635,8636],[8535,8536,8637],[8535,8636,8637],[8536,8537,8638],[8536,8637,8638],[8537,8538,8639],[8537,8638,8639],[8538,8539,8640],[8538,8639,8640],[8539,8540,8641],[8539,8640,8641],[8540,8541,8642],[8540,8641,8642],[8541,8542,8643],[8541,8642,8643],[8543,8544,8645],[8543,8644,8645],[8544,8545,8646],[8544,8645,8646],[8545,8546,8647],[8545,8646,8647],[8548,8549,8650],[8548,8649,8650],[8549,8550,8651],[8549,8650,8651],[8550,8551,8652],[8550,8651,8652],[8551,8552,8653],[8551,8652,8653],[8552,8553,8654],[8552,8653,8654],[8553,8554,8655],[8553,8654,8655],[8554,8555,8656],[8554,8655,8656],[8555,8556,8657],[8555,8656,8657],[8556,8557,8658],[8556,8657,8658],[8557,8558,8659],[8557,8658,8659],[8558,8559,8660],[8558,8659,8660],[8559,8560,8661],[8559,8660,8661],[8560,8561,8662],[8560,8661,8662],[8561,8562,8663],[8561,8662,8663],[8562,8563,8664],[8562,8663,8664],[8563,8564,8665],[8563,8664,8665],[8564,8565,8666],[8564,8665,8666],[8565,8566,8667],[8565,8666,8667],[8566,8567,8668],[8566,8667,8668],[8567,8568,8669],[8567,8668,8669],[8568,8569,8670],[8568,8669,8670],[8569,8570,8671],[8569,8670,8671],[8570,8571,8672],[8570,8671,8672],[8571,8572,8673],[8571,8672,8673],[8572,8573,8674],[8572,8673,8674],[8573,8574,8675],[8573,8674,8675],[8574,8575,8676],[8574,8675,8676],[8575,8576,8677],[8575,8676,8677],[8576,8577,8678],[8576,8677,8678],[8585,8586,8687],[8585,8686,8687],[8586,8587,8688],[8586,8687,8688],[8587,8588,8689],[8587,8688,8689],[8588,8589,8690],[8588,8689,8690],[8589,8590,8691],[8589,8690,8691],[8590,8591,8692],[8590,8691,8692],[8591,8592,8693],[8591,8692,8693],[8594,8595,8696],[8594,8695,8696],[8595,8596,8697],[8595,8696,8697],[8596,8597,8698],[8596,8697,8698],[8597,8598,8699],[8597,8698,8699],[8598,8599,8700],[8598,8699,8700],[8599,8600,8701],[8599,8700,8701],[8600,8601,8702],[8600,8701,8702],[8601,8602,8703],[8601,8702,8703],[8602,8603,8704],[8602,8703,8704],[8603,8604,8705],[8603,8704,8705],[8604,8605,8706],[8604,8705,8706],[8605,8606,8707],[8605,8706,8707],[8606,8607,8708],[8606,8707,8708],[8607,8608,8709],[8607,8708,8709],[8608,8609,8710],[8608,8709,8710],[8609,8610,8711],[8609,8710,8711],[8610,8611,8712],[8610,8711,8712],[8611,8612,8713],[8611,8712,8713],[8612,8613,8714],[8612,8713,8714],[8613,8614,8715],[8613,8714,8715],[8614,8615,8716],[8614,8715,8716],[8618,8619,8720],[8618,8719,8720],[8619,8620,8721],[8619,8720,8721],[8620,8621,8722],[8620,8721,8722],[8621,8622,8723],[8621,8722,8723],[8622,8623,8724],[8622,8723,8724],[8624,8625,8726],[8624,8725,8726],[8625,8626,8727],[8625,8726,8727],[8626,8627,8728],[8626,8727,8728],[8627,8628,8729],[8627,8728,8729],[8628,8629,8730],[8628,8729,8730],[8632,8633,8734],[8632,8733,8734],[8633,8634,8735],[8633,8734,8735],[8634,8635,8736],[8634,8735,8736],[8635,8636,8737],[8635,8736,8737],[8636,8637,8738],[8636,8737,8738],[8637,8638,8739],[8637,8738,8739],[8638,8639,8740],[8638,8739,8740],[8639,8640,8741],[8639,8740,8741],[8640,8641,8742],[8640,8741,8742],[8641,8642,8743],[8641,8742,8743],[8642,8643,8744],[8642,8743,8744],[8644,8645,8746],[8644,8745,8746],[8645,8646,8747],[8645,8746,8747],[8646,8647,8748],[8646,8747,8748],[8649,8650,8751],[8649,8750,8751],[8650,8651,8752],[8650,8751,8752],[8651,8652,8753],[8651,8752,8753],[8652,8653,8754],[8652,8753,8754],[8653,8654,8755],[8653,8754,8755],[8654,8655,8756],[8654,8755,8756],[8655,8656,8757],[8655,8756,8757],[8656,8657,8758],[8656,8757,8758],[8657,8658,8759],[8657,8758,8759],[8658,8659,8760],[8658,8759,8760],[8659,8660,8761],[8659,8760,8761],[8660,8661,8762],[8660,8761,8762],[8661,8662,8763],[8661,8762,8763],[8662,8663,8764],[8662,8763,8764],[8663,8664,8765],[8663,8764,8765],[8664,8665,8766],[8664,8765,8766],[8665,8666,8767],[8665,8766,8767],[8666,8667,8768],[8666,8767,8768],[8667,8668,8769],[8667,8768,8769],[8668,8669,8770],[8668,8769,8770],[8669,8670,8771],[8669,8770,8771],[8670,8671,8772],[8670,8771,8772],[8671,8672,8773],[8671,8772,8773],[8672,8673,8774],[8672,8773,8774],[8673,8674,8775],[8673,8774,8775],[8674,8675,8776],[8674,8775,8776],[8675,8676,8777],[8675,8776,8777],[8676,8677,8778],[8676,8777,8778],[8677,8678,8779],[8677,8778,8779],[8686,8687,8788],[8686,8787,8788],[8687,8688,8789],[8687,8788,8789],[8688,8689,8790],[8688,8789,8790],[8689,8690,8791],[8689,8790,8791],[8690,8691,8792],[8690,8791,8792],[8691,8692,8793],[8691,8792,8793],[8692,8693,8794],[8692,8793,8794],[8695,8696,8797],[8695,8796,8797],[8696,8697,8798],[8696,8797,8798],[8697,8698,8799],[8697,8798,8799],[8698,8699,8800],[8698,8799,8800],[8699,8700,8801],[8699,8800,8801],[8700,8701,8802],[8700,8801,8802],[8701,8702,8803],[8701,8802,8803],[8702,8703,8804],[8702,8803,8804],[8703,8704,8805],[8703,8804,8805],[8704,8705,8806],[8704,8805,8806],[8705,8706,8807],[8705,8806,8807],[8706,8707,8808],[8706,8807,8808],[8707,8708,8809],[8707,8808,8809],[8708,8709,8810],[8708,8809,8810],[8709,8710,8811],[8709,8810,8811],[8710,8711,8812],[8710,8811,8812],[8711,8712,8813],[8711,8812,8813],[8712,8713,8814],[8712,8813,8814],[8713,8714,8815],[8713,8814,8815],[8714,8715,8816],[8714,8815,8816],[8715,8716,8817],[8715,8816,8817],[8719,8720,8821],[8719,8820,8821],[8720,8721,8822],[8720,8821,8822],[8721,8722,8823],[8721,8822,8823],[8722,8723,8824],[8722,8823,8824],[8723,8724,8825],[8723,8824,8825],[8725,8726,8827],[8725,8826,8827],[8726,8727,8828],[8726,8827,8828],[8727,8728,8829],[8727,8828,8829],[8728,8729,8830],[8728,8829,8830],[8729,8730,8831],[8729,8830,8831],[8733,8734,8835],[8733,8834,8835],[8734,8735,8836],[8734,8835,8836],[8735,8736,8837],[8735,8836,8837],[8736,8737,8838],[8736,8837,8838],[8737,8738,8839],[8737,8838,8839],[8738,8739,8840],[8738,8839,8840],[8739,8740,8841],[8739,8840,8841],[8740,8741,8842],[8740,8841,8842],[8741,8742,8843],[8741,8842,8843],[8742,8743,8844],[8742,8843,8844],[8743,8744,8845],[8743,8844,8845],[8745,8746,8847],[8745,8846,8847],[8746,8747,8848],[8746,8847,8848],[8747,8748,8849],[8747,8848,8849],[8750,8751,8852],[8750,8851,8852],[8751,8752,8853],[8751,8852,8853],[8752,8753,8854],[8752,8853,8854],[8753,8754,8855],[8753,8854,8855],[8754,8755,8856],[8754,8855,8856],[8755,8756,8857],[8755,8856,8857],[8756,8757,8858],[8756,8857,8858],[8757,8758,8859],[8757,8858,8859],[8758,8759,8860],[8758,8859,8860],[8759,8760,8861],[8759,8860,8861],[8760,8761,8862],[8760,8861,8862],[8761,8762,8863],[8761,8862,8863],[8762,8763,8864],[8762,8863,8864],[8763,8764,8865],[8763,8864,8865],[8764,8765,8866],[8764,8865,8866],[8765,8766,8867],[8765,8866,8867],[8766,8767,8868],[8766,8867,8868],[8767,8768,8869],[8767,8868,8869],[8768,8769,8870],[8768,8869,8870],[8769,8770,8871],[8769,8870,8871],[8770,8771,8872],[8770,8871,8872],[8771,8772,8873],[8771,8872,8873],[8772,8773,8874],[8772,8873,8874],[8773,8774,8875],[8773,8874,8875],[8774,8775,8876],[8774,8875,8876],[8775,8776,8877],[8775,8876,8877],[8776,8777,8878],[8776,8877,8878],[8777,8778,8879],[8777,8878,8879],[8778,8779,8880],[8778,8879,8880],[8787,8788,8889],[8787,8888,8889],[8788,8789,8890],[8788,8889,8890],[8789,8790,8891],[8789,8890,8891],[8790,8791,8892],[8790,8891,8892],[8791,8792,8893],[8791,8892,8893],[8792,8793,8894],[8792,8893,8894],[8793,8794,8895],[8793,8894,8895],[8796,8797,8898],[8796,8897,8898],[8797,8798,8899],[8797,8898,8899],[8798,8799,8900],[8798,8899,8900],[8799,8800,8901],[8799,8900,8901],[8800,8801,8902],[8800,8901,8902],[8801,8802,8903],[8801,8902,8903],[8802,8803,8904],[8802,8903,8904],[8803,8804,8905],[8803,8904,8905],[8804,8805,8906],[8804,8905,8906],[8805,8806,8907],[8805,8906,8907],[8806,8807,8908],[8806,8907,8908],[8807,8808,8909],[8807,8908,8909],[8808,8809,8910],[8808,8909,8910],[8809,8810,8911],[8809,8910,8911],[8810,8811,8912],[8810,8911,8912],[8811,8812,8913],[8811,8912,8913],[8812,8813,8914],[8812,8913,8914],[8813,8814,8915],[8813,8914,8915],[8814,8815,8916],[8814,8915,8916],[8815,8816,8917],[8815,8916,8917],[8816,8817,8918],[8816,8917,8918],[8817,8818,8919],[8817,8918,8919],[8820,8821,8922],[8820,8921,8922],[8821,8822,8923],[8821,8922,8923],[8822,8823,8924],[8822,8923,8924],[8823,8824,8925],[8823,8924,8925],[8824,8825,8926],[8824,8925,8926],[8826,8827,8928],[8826,8927,8928],[8827,8828,8929],[8827,8928,8929],[8828,8829,8930],[8828,8929,8930],[8829,8830,8931],[8829,8930,8931],[8830,8831,8932],[8830,8931,8932],[8834,8835,8936],[8834,8935,8936],[8835,8836,8937],[8835,8936,8937],[8836,8837,8938],[8836,8937,8938],[8837,8838,8939],[8837,8938,8939],[8838,8839,8940],[8838,8939,8940],[8839,8840,8941],[8839,8940,8941],[8840,8841,8942],[8840,8941,8942],[8841,8842,8943],[8841,8942,8943],[8842,8843,8944],[8842,8943,8944],[8843,8844,8945],[8843,8944,8945],[8844,8845,8946],[8844,8945,8946],[8846,8847,8948],[8846,8947,8948],[8847,8848,8949],[8847,8948,8949],[8848,8849,8950],[8848,8949,8950],[8851,8852,8953],[8851,8952,8953],[8852,8853,8954],[8852,8953,8954],[8853,8854,8955],[8853,8954,8955],[8854,8855,8956],[8854,8955,8956],[8855,8856,8957],[8855,8956,8957],[8856,8857,8958],[8856,8957,8958],[8857,8858,8959],[8857,8958,8959],[8858,8859,8960],[8858,8959,8960],[8859,8860,8961],[8859,8960,8961],[8860,8861,8962],[8860,8961,8962],[8861,8862,8963],[8861,8962,8963],[8862,8863,8964],[8862,8963,8964],[8863,8864,8965],[8863,8964,8965],[8864,8865,8966],[8864,8965,8966],[8865,8866,8967],[8865,8966,8967],[8866,8867,8968],[8866,8967,8968],[8867,8868,8969],[8867,8968,8969],[8868,8869,8970],[8868,8969,8970],[8869,8870,8971],[8869,8970,8971],[8870,8871,8972],[8870,8971,8972],[8871,8872,8973],[8871,8972,8973],[8872,8873,8974],[8872,8973,8974],[8873,8874,8975],[8873,8974,8975],[8874,8875,8976],[8874,8975,8976],[8875,8876,8977],[8875,8976,8977],[8876,8877,8978],[8876,8977,8978],[8877,8878,8979],[8877,8978,8979],[8878,8879,8980],[8878,8979,8980],[8879,8880,8981],[8879,8980,8981],[8880,8881,8982],[8880,8981,8982],[8888,8889,8990],[8888,8989,8990],[8889,8890,8991],[8889,8990,8991],[8890,8891,8992],[8890,8991,8992],[8891,8892,8993],[8891,8992,8993],[8892,8893,8994],[8892,8993,8994],[8893,8894,8995],[8893,8994,8995],[8894,8895,8996],[8894,8995,8996],[8897,8898,8999],[8897,8998,8999],[8898,8899,9000],[8898,8999,9000],[8899,8900,9001],[8899,9000,9001],[8900,8901,9002],[8900,9001,9002],[8901,8902,9003],[8901,9002,9003],[8902,8903,9004],[8902,9003,9004],[8903,8904,9005],[8903,9004,9005],[8904,8905,9006],[8904,9005,9006],[8905,8906,9007],[8905,9006,9007],[8906,8907,9008],[8906,9007,9008],[8907,8908,9009],[8907,9008,9009],[8908,8909,9010],[8908,9009,9010],[8910,8911,9012],[8910,9011,9012],[8911,8912,9013],[8911,9012,9013],[8912,8913,9014],[8912,9013,9014],[8913,8914,9015],[8913,9014,9015],[8914,8915,9016],[8914,9015,9016],[8915,8916,9017],[8915,9016,9017],[8916,8917,9018],[8916,9017,9018],[8917,8918,9019],[8917,9018,9019],[8918,8919,9020],[8918,9019,9020],[8921,8922,9023],[8921,9022,9023],[8922,8923,9024],[8922,9023,9024],[8923,8924,9025],[8923,9024,9025],[8924,8925,9026],[8924,9025,9026],[8925,8926,9027],[8925,9026,9027],[8926,8927,9028],[8926,9027,9028],[8927,8928,9029],[8927,9028,9029],[8928,8929,9030],[8928,9029,9030],[8929,8930,9031],[8929,9030,9031],[8930,8931,9032],[8930,9031,9032],[8931,8932,9033],[8931,9032,9033],[8935,8936,9037],[8935,9036,9037],[8936,8937,9038],[8936,9037,9038],[8937,8938,9039],[8937,9038,9039],[8938,8939,9040],[8938,9039,9040],[8939,8940,9041],[8939,9040,9041],[8940,8941,9042],[8940,9041,9042],[8941,8942,9043],[8941,9042,9043],[8942,8943,9044],[8942,9043,9044],[8943,8944,9045],[8943,9044,9045],[8944,8945,9046],[8944,9045,9046],[8945,8946,9047],[8945,9046,9047],[8947,8948,9049],[8947,9048,9049],[8948,8949,9050],[8948,9049,9050],[8949,8950,9051],[8949,9050,9051],[8952,8953,9054],[8952,9053,9054],[8953,8954,9055],[8953,9054,9055],[8954,8955,9056],[8954,9055,9056],[8955,8956,9057],[8955,9056,9057],[8956,8957,9058],[8956,9057,9058],[8957,8958,9059],[8957,9058,9059],[8958,8959,9060],[8958,9059,9060],[8959,8960,9061],[8959,9060,9061],[8960,8961,9062],[8960,9061,9062],[8961,8962,9063],[8961,9062,9063],[8962,8963,9064],[8962,9063,9064],[8963,8964,9065],[8963,9064,9065],[8964,8965,9066],[8964,9065,9066],[8965,8966,9067],[8965,9066,9067],[8966,8967,9068],[8966,9067,9068],[8967,8968,9069],[8967,9068,9069],[8968,8969,9070],[8968,9069,9070],[8969,8970,9071],[8969,9070,9071],[8970,8971,9072],[8970,9071,9072],[8971,8972,9073],[8971,9072,9073],[8972,8973,9074],[8972,9073,9074],[8973,8974,9075],[8973,9074,9075],[8974,8975,9076],[8974,9075,9076],[8975,8976,9077],[8975,9076,9077],[8976,8977,9078],[8976,9077,9078],[8977,8978,9079],[8977,9078,9079],[8978,8979,9080],[8978,9079,9080],[8979,8980,9081],[8979,9080,9081],[8980,8981,9082],[8980,9081,9082],[8981,8982,9083],[8981,9082,9083],[8989,8990,9091],[8989,9090,9091],[8990,8991,9092],[8990,9091,9092],[8991,8992,9093],[8991,9092,9093],[8992,8993,9094],[8992,9093,9094],[8993,8994,9095],[8993,9094,9095],[8994,8995,9096],[8994,9095,9096],[8995,8996,9097],[8995,9096,9097],[8998,8999,9100],[8998,9099,9100],[8999,9000,9101],[8999,9100,9101],[9000,9001,9102],[9000,9101,9102],[9001,9002,9103],[9001,9102,9103],[9002,9003,9104],[9002,9103,9104],[9003,9004,9105],[9003,9104,9105],[9004,9005,9106],[9004,9105,9106],[9005,9006,9107],[9005,9106,9107],[9006,9007,9108],[9006,9107,9108],[9007,9008,9109],[9007,9108,9109],[9008,9009,9110],[9008,9109,9110],[9009,9010,9111],[9009,9110,9111],[9011,9012,9113],[9011,9112,9113],[9012,9013,9114],[9012,9113,9114],[9013,9014,9115],[9013,9114,9115],[9014,9015,9116],[9014,9115,9116],[9015,9016,9117],[9015,9116,9117],[9016,9017,9118],[9016,9117,9118],[9017,9018,9119],[9017,9118,9119],[9018,9019,9120],[9018,9119,9120],[9019,9020,9121],[9019,9120,9121],[9022,9023,9124],[9022,9123,9124],[9023,9024,9125],[9023,9124,9125],[9024,9025,9126],[9024,9125,9126],[9025,9026,9127],[9025,9126,9127],[9026,9027,9128],[9026,9127,9128],[9027,9028,9129],[9027,9128,9129],[9028,9029,9130],[9028,9129,9130],[9029,9030,9131],[9029,9130,9131],[9030,9031,9132],[9030,9131,9132],[9031,9032,9133],[9031,9132,9133],[9032,9033,9134],[9032,9133,9134],[9036,9037,9138],[9036,9137,9138],[9037,9038,9139],[9037,9138,9139],[9038,9039,9140],[9038,9139,9140],[9039,9040,9141],[9039,9140,9141],[9040,9041,9142],[9040,9141,9142],[9041,9042,9143],[9041,9142,9143],[9042,9043,9144],[9042,9143,9144],[9043,9044,9145],[9043,9144,9145],[9044,9045,9146],[9044,9145,9146],[9045,9046,9147],[9045,9146,9147],[9046,9047,9148],[9046,9147,9148],[9048,9049,9150],[9048,9149,9150],[9049,9050,9151],[9049,9150,9151],[9050,9051,9152],[9050,9151,9152],[9053,9054,9155],[9053,9154,9155],[9054,9055,9156],[9054,9155,9156],[9055,9056,9157],[9055,9156,9157],[9056,9057,9158],[9056,9157,9158],[9057,9058,9159],[9057,9158,9159],[9058,9059,9160],[9058,9159,9160],[9059,9060,9161],[9059,9160,9161],[9060,9061,9162],[9060,9161,9162],[9061,9062,9163],[9061,9162,9163],[9062,9063,9164],[9062,9163,9164],[9063,9064,9165],[9063,9164,9165],[9064,9065,9166],[9064,9165,9166],[9065,9066,9167],[9065,9166,9167],[9066,9067,9168],[9066,9167,9168],[9067,9068,9169],[9067,9168,9169],[9068,9069,9170],[9068,9169,9170],[9069,9070,9171],[9069,9170,9171],[9070,9071,9172],[9070,9171,9172],[9071,9072,9173],[9071,9172,9173],[9072,9073,9174],[9072,9173,9174],[9073,9074,9175],[9073,9174,9175],[9074,9075,9176],[9074,9175,9176],[9075,9076,9177],[9075,9176,9177],[9076,9077,9178],[9076,9177,9178],[9077,9078,9179],[9077,9178,9179],[9078,9079,9180],[9078,9179,9180],[9079,9080,9181],[9079,9180,9181],[9080,9081,9182],[9080,9181,9182],[9081,9082,9183],[9081,9182,9183],[9082,9083,9184],[9082,9183,9184],[9090,9091,9192],[9090,9191,9192],[9091,9092,9193],[9091,9192,9193],[9092,9093,9194],[9092,9193,9194],[9093,9094,9195],[9093,9194,9195],[9094,9095,9196],[9094,9195,9196],[9095,9096,9197],[9095,9196,9197],[9096,9097,9198],[9096,9197,9198],[9099,9100,9201],[9099,9200,9201],[9100,9101,9202],[9100,9201,9202],[9101,9102,9203],[9101,9202,9203],[9102,9103,9204],[9102,9203,9204],[9103,9104,9205],[9103,9204,9205],[9104,9105,9206],[9104,9205,9206],[9105,9106,9207],[9105,9206,9207],[9106,9107,9208],[9106,9207,9208],[9107,9108,9209],[9107,9208,9209],[9108,9109,9210],[9108,9209,9210],[9109,9110,9211],[9109,9210,9211],[9110,9111,9212],[9110,9211,9212],[9112,9113,9214],[9113,9114,9215],[9113,9214,9215],[9114,9115,9216],[9114,9215,9216],[9115,9116,9217],[9115,9216,9217],[9116,9117,9218],[9116,9217,9218],[9117,9118,9219],[9117,9218,9219],[9118,9119,9220],[9118,9219,9220],[9119,9120,9221],[9119,9220,9221],[9120,9121,9222],[9120,9221,9222],[9123,9124,9225],[9123,9224,9225],[9124,9125,9226],[9124,9225,9226],[9125,9126,9227],[9125,9226,9227],[9126,9127,9228],[9126,9227,9228],[9127,9128,9229],[9127,9228,9229],[9128,9129,9230],[9128,9229,9230],[9129,9130,9231],[9129,9230,9231],[9130,9131,9232],[9130,9231,9232],[9131,9132,9233],[9131,9232,9233],[9132,9133,9234],[9132,9233,9234],[9133,9134,9235],[9133,9234,9235],[9137,9138,9239],[9137,9238,9239],[9138,9139,9240],[9138,9239,9240],[9139,9140,9241],[9139,9240,9241],[9140,9141,9242],[9140,9241,9242],[9141,9142,9243],[9141,9242,9243],[9142,9143,9244],[9142,9243,9244],[9143,9144,9245],[9143,9244,9245],[9144,9145,9246],[9144,9245,9246],[9145,9146,9247],[9145,9246,9247],[9146,9147,9248],[9146,9247,9248],[9147,9148,9249],[9147,9248,9249],[9149,9150,9251],[9149,9250,9251],[9150,9151,9252],[9150,9251,9252],[9151,9152,9253],[9151,9252,9253],[9154,9155,9256],[9154,9255,9256],[9155,9156,9257],[9155,9256,9257],[9156,9157,9258],[9156,9257,9258],[9157,9158,9259],[9157,9258,9259],[9158,9159,9260],[9158,9259,9260],[9159,9160,9261],[9159,9260,9261],[9160,9161,9262],[9160,9261,9262],[9161,9162,9263],[9161,9262,9263],[9162,9163,9264],[9162,9263,9264],[9163,9164,9265],[9163,9264,9265],[9164,9165,9266],[9164,9265,9266],[9165,9166,9267],[9165,9266,9267],[9166,9167,9268],[9166,9267,9268],[9167,9168,9269],[9167,9268,9269],[9168,9169,9270],[9168,9269,9270],[9169,9170,9271],[9169,9270,9271],[9170,9171,9272],[9170,9271,9272],[9171,9172,9273],[9171,9272,9273],[9172,9173,9274],[9172,9273,9274],[9173,9174,9275],[9173,9274,9275],[9174,9175,9276],[9174,9275,9276],[9175,9176,9277],[9175,9276,9277],[9176,9177,9278],[9176,9277,9278],[9177,9178,9279],[9177,9278,9279],[9178,9179,9280],[9178,9279,9280],[9179,9180,9281],[9179,9280,9281],[9180,9181,9282],[9180,9281,9282],[9181,9182,9283],[9181,9282,9283],[9182,9183,9284],[9182,9283,9284],[9183,9184,9285],[9183,9284,9285],[9191,9192,9293],[9191,9292,9293],[9192,9193,9294],[9192,9293,9294],[9193,9194,9295],[9193,9294,9295],[9194,9195,9296],[9194,9295,9296],[9195,9196,9297],[9195,9296,9297],[9196,9197,9298],[9196,9297,9298],[9197,9198,9299],[9197,9298,9299],[9200,9201,9302],[9200,9301,9302],[9201,9202,9303],[9201,9302,9303],[9202,9203,9304],[9202,9303,9304],[9203,9204,9305],[9203,9304,9305],[9204,9205,9306],[9204,9305,9306],[9205,9206,9307],[9205,9306,9307],[9206,9207,9308],[9206,9307,9308],[9207,9208,9309],[9207,9308,9309],[9208,9209,9310],[9208,9309,9310],[9209,9210,9311],[9209,9310,9311],[9210,9211,9312],[9210,9311,9312],[9211,9212,9313],[9211,9312,9313],[9214,9215,9316],[9214,9315,9316],[9215,9216,9317],[9215,9316,9317],[9216,9217,9318],[9216,9317,9318],[9217,9218,9319],[9217,9318,9319],[9218,9219,9320],[9218,9319,9320],[9219,9220,9321],[9219,9320,9321],[9220,9221,9322],[9220,9321,9322],[9221,9222,9323],[9221,9322,9323],[9223,9224,9325],[9223,9324,9325],[9224,9225,9326],[9224,9325,9326],[9225,9226,9327],[9225,9326,9327],[9226,9227,9328],[9226,9327,9328],[9227,9228,9329],[9227,9328,9329],[9228,9229,9330],[9228,9329,9330],[9229,9230,9331],[9229,9330,9331],[9230,9231,9332],[9230,9331,9332],[9231,9232,9333],[9231,9332,9333],[9232,9233,9334],[9232,9333,9334],[9233,9234,9335],[9233,9334,9335],[9234,9235,9336],[9234,9335,9336],[9238,9239,9340],[9238,9339,9340],[9239,9240,9341],[9239,9340,9341],[9240,9241,9342],[9240,9341,9342],[9241,9242,9343],[9241,9342,9343],[9242,9243,9344],[9242,9343,9344],[9243,9244,9345],[9243,9344,9345],[9244,9245,9346],[9244,9345,9346],[9245,9246,9347],[9245,9346,9347],[9246,9247,9348],[9246,9347,9348],[9247,9248,9349],[9247,9348,9349],[9248,9249,9350],[9248,9349,9350],[9250,9251,9352],[9250,9351,9352],[9251,9252,9353],[9251,9352,9353],[9252,9253,9354],[9252,9353,9354],[9255,9256,9357],[9255,9356,9357],[9256,9257,9358],[9256,9357,9358],[9257,9258,9359],[9257,9358,9359],[9258,9259,9360],[9258,9359,9360],[9259,9260,9361],[9259,9360,9361],[9260,9261,9362],[9260,9361,9362],[9261,9262,9363],[9261,9362,9363],[9262,9263,9364],[9262,9363,9364],[9263,9264,9365],[9263,9364,9365],[9264,9265,9366],[9264,9365,9366],[9265,9266,9367],[9265,9366,9367],[9266,9267,9368],[9266,9367,9368],[9267,9268,9369],[9267,9368,9369],[9268,9269,9370],[9268,9369,9370],[9269,9270,9371],[9269,9370,9371],[9270,9271,9372],[9270,9371,9372],[9271,9272,9373],[9271,9372,9373],[9272,9273,9374],[9272,9373,9374],[9273,9274,9375],[9273,9374,9375],[9274,9275,9376],[9274,9375,9376],[9275,9276,9377],[9275,9376,9377],[9276,9277,9378],[9276,9377,9378],[9277,9278,9379],[9277,9378,9379],[9278,9279,9380],[9278,9379,9380],[9279,9280,9381],[9279,9380,9381],[9280,9281,9382],[9280,9381,9382],[9281,9282,9383],[9281,9382,9383],[9282,9283,9384],[9282,9383,9384],[9283,9284,9385],[9283,9384,9385],[9284,9285,9386],[9284,9385,9386],[9285,9286,9387],[9285,9386,9387],[9292,9293,9394],[9292,9393,9394],[9293,9294,9395],[9293,9394,9395],[9294,9295,9396],[9294,9395,9396],[9295,9296,9397],[9295,9396,9397],[9296,9297,9398],[9296,9397,9398],[9297,9298,9399],[9297,9398,9399],[9298,9299,9400],[9298,9399,9400],[9301,9302,9403],[9301,9402,9403],[9302,9303,9404],[9302,9403,9404],[9303,9304,9405],[9303,9404,9405],[9304,9305,9406],[9304,9405,9406],[9305,9306,9407],[9305,9406,9407],[9306,9307,9408],[9306,9407,9408],[9307,9308,9409],[9307,9408,9409],[9308,9309,9410],[9308,9409,9410],[9309,9310,9411],[9309,9410,9411],[9310,9311,9412],[9310,9411,9412],[9311,9312,9413],[9311,9412,9413],[9312,9313,9414],[9312,9413,9414],[9315,9316,9417],[9315,9416,9417],[9316,9317,9418],[9316,9417,9418],[9317,9318,9419],[9317,9418,9419],[9318,9319,9420],[9318,9419,9420],[9319,9320,9421],[9319,9420,9421],[9320,9321,9422],[9320,9421,9422],[9321,9322,9423],[9321,9422,9423],[9322,9323,9424],[9322,9423,9424],[9324,9325,9426],[9324,9425,9426],[9325,9326,9427],[9325,9426,9427],[9327,9328,9429],[9327,9428,9429],[9328,9329,9430],[9328,9429,9430],[9329,9330,9431],[9329,9430,9431],[9330,9331,9432],[9330,9431,9432],[9331,9332,9433],[9331,9432,9433],[9332,9333,9434],[9332,9433,9434],[9333,9334,9435],[9333,9434,9435],[9334,9335,9436],[9334,9435,9436],[9335,9336,9437],[9335,9436,9437],[9339,9340,9441],[9339,9440,9441],[9340,9341,9442],[9340,9441,9442],[9341,9342,9443],[9341,9442,9443],[9342,9343,9444],[9342,9443,9444],[9343,9344,9445],[9343,9444,9445],[9344,9345,9446],[9344,9445,9446],[9345,9346,9447],[9345,9446,9447],[9346,9347,9448],[9346,9447,9448],[9347,9348,9449],[9347,9448,9449],[9348,9349,9450],[9348,9449,9450],[9349,9350,9451],[9349,9450,9451],[9351,9352,9453],[9351,9452,9453],[9352,9353,9454],[9352,9453,9454],[9353,9354,9455],[9353,9454,9455],[9356,9357,9458],[9356,9457,9458],[9357,9358,9459],[9357,9458,9459],[9358,9359,9460],[9358,9459,9460],[9359,9360,9461],[9359,9460,9461],[9360,9361,9462],[9360,9461,9462],[9361,9362,9463],[9361,9462,9463],[9362,9363,9464],[9362,9463,9464],[9363,9364,9465],[9363,9464,9465],[9364,9365,9466],[9364,9465,9466],[9365,9366,9467],[9365,9466,9467],[9366,9367,9468],[9366,9467,9468],[9367,9368,9469],[9367,9468,9469],[9368,9369,9470],[9368,9469,9470],[9369,9370,9471],[9369,9470,9471],[9370,9371,9472],[9370,9471,9472],[9371,9372,9473],[9371,9472,9473],[9372,9373,9474],[9372,9473,9474],[9373,9374,9475],[9373,9474,9475],[9374,9375,9476],[9374,9475,9476],[9375,9376,9477],[9375,9476,9477],[9376,9377,9478],[9376,9477,9478],[9378,9379,9480],[9378,9479,9480],[9379,9380,9481],[9379,9480,9481],[9380,9381,9482],[9380,9481,9482],[9381,9382,9483],[9381,9482,9483],[9382,9383,9484],[9382,9483,9484],[9383,9384,9485],[9383,9484,9485],[9384,9385,9486],[9384,9485,9486],[9385,9386,9487],[9385,9486,9487],[9386,9387,9488],[9386,9487,9488],[9393,9394,9495],[9393,9494,9495],[9394,9395,9496],[9394,9495,9496],[9395,9396,9497],[9395,9496,9497],[9396,9397,9498],[9396,9497,9498],[9397,9398,9499],[9397,9498,9499],[9398,9399,9500],[9398,9499,9500],[9399,9400,9501],[9399,9500,9501],[9402,9403,9504],[9402,9503,9504],[9403,9404,9505],[9403,9504,9505],[9404,9405,9506],[9404,9505,9506],[9405,9406,9507],[9405,9506,9507],[9406,9407,9508],[9406,9507,9508],[9407,9408,9509],[9407,9508,9509],[9408,9409,9510],[9408,9509,9510],[9409,9410,9511],[9409,9510,9511],[9410,9411,9512],[9410,9511,9512],[9411,9412,9513],[9411,9512,9513],[9412,9413,9514],[9412,9513,9514],[9413,9414,9515],[9413,9514,9515],[9414,9415,9516],[9414,9515,9516],[9416,9417,9518],[9416,9517,9518],[9417,9418,9519],[9417,9518,9519],[9418,9419,9520],[9418,9519,9520],[9419,9420,9521],[9419,9520,9521],[9420,9421,9522],[9420,9521,9522],[9421,9422,9523],[9421,9522,9523],[9422,9423,9524],[9422,9523,9524],[9423,9424,9525],[9423,9524,9525],[9425,9426,9527],[9425,9526,9527],[9426,9427,9528],[9426,9527,9528],[9428,9429,9530],[9428,9529,9530],[9429,9430,9531],[9429,9530,9531],[9430,9431,9532],[9430,9531,9532],[9431,9432,9533],[9431,9532,9533],[9432,9433,9534],[9432,9533,9534],[9433,9434,9535],[9433,9534,9535],[9434,9435,9536],[9434,9535,9536],[9435,9436,9537],[9435,9536,9537],[9436,9437,9538],[9436,9537,9538],[9440,9441,9542],[9441,9442,9543],[9441,9542,9543],[9442,9443,9544],[9442,9543,9544],[9443,9444,9545],[9443,9544,9545],[9444,9445,9546],[9444,9545,9546],[9445,9446,9547],[9445,9546,9547],[9446,9447,9548],[9446,9547,9548],[9447,9448,9549],[9447,9548,9549],[9448,9449,9550],[9448,9549,9550],[9449,9450,9551],[9449,9550,9551],[9450,9451,9552],[9450,9551,9552],[9452,9453,9554],[9452,9553,9554],[9453,9454,9555],[9453,9554,9555],[9454,9455,9556],[9454,9555,9556],[9457,9458,9559],[9457,9558,9559],[9458,9459,9560],[9458,9559,9560],[9459,9460,9561],[9459,9560,9561],[9460,9461,9562],[9460,9561,9562],[9461,9462,9563],[9461,9562,9563],[9462,9463,9564],[9462,9563,9564],[9463,9464,9565],[9463,9564,9565],[9464,9465,9566],[9464,9565,9566],[9465,9466,9567],[9465,9566,9567],[9466,9467,9568],[9466,9567,9568],[9467,9468,9569],[9467,9568,9569],[9468,9469,9570],[9468,9569,9570],[9469,9470,9571],[9469,9570,9571],[9470,9471,9572],[9470,9571,9572],[9471,9472,9573],[9471,9572,9573],[9472,9473,9574],[9472,9573,9574],[9473,9474,9575],[9473,9574,9575],[9474,9475,9576],[9474,9575,9576],[9475,9476,9577],[9475,9576,9577],[9476,9477,9578],[9476,9577,9578],[9477,9478,9579],[9477,9578,9579],[9479,9480,9581],[9479,9580,9581],[9480,9481,9582],[9480,9581,9582],[9481,9482,9583],[9481,9582,9583],[9482,9483,9584],[9482,9583,9584],[9483,9484,9585],[9483,9584,9585],[9484,9485,9586],[9484,9585,9586],[9485,9486,9587],[9485,9586,9587],[9486,9487,9588],[9486,9587,9588],[9487,9488,9589],[9487,9588,9589],[9494,9495,9596],[9494,9595,9596],[9495,9496,9597],[9495,9596,9597],[9496,9497,9598],[9496,9597,9598],[9497,9498,9599],[9497,9598,9599],[9498,9499,9600],[9498,9599,9600],[9499,9500,9601],[9499,9600,9601],[9500,9501,9602],[9500,9601,9602],[9503,9504,9605],[9503,9604,9605],[9504,9505,9606],[9504,9605,9606],[9505,9506,9607],[9505,9606,9607],[9506,9507,9608],[9506,9607,9608],[9507,9508,9609],[9507,9608,9609],[9508,9509,9610],[9508,9609,9610],[9509,9510,9611],[9509,9610,9611],[9510,9511,9612],[9510,9611,9612],[9511,9512,9613],[9511,9612,9613],[9512,9513,9614],[9512,9613,9614],[9513,9514,9615],[9513,9614,9615],[9514,9515,9616],[9514,9615,9616],[9515,9516,9617],[9515,9616,9617],[9517,9518,9619],[9517,9618,9619],[9518,9519,9620],[9518,9619,9620],[9519,9520,9621],[9519,9620,9621],[9520,9521,9622],[9520,9621,9622],[9521,9522,9623],[9521,9622,9623],[9522,9523,9624],[9522,9623,9624],[9523,9524,9625],[9523,9624,9625],[9524,9525,9626],[9524,9625,9626],[9526,9527,9628],[9526,9627,9628],[9527,9528,9629],[9527,9628,9629],[9529,9530,9631],[9529,9630,9631],[9530,9531,9632],[9530,9631,9632],[9531,9532,9633],[9531,9632,9633],[9532,9533,9634],[9532,9633,9634],[9533,9534,9635],[9533,9634,9635],[9534,9535,9636],[9534,9635,9636],[9535,9536,9637],[9535,9636,9637],[9536,9537,9638],[9536,9637,9638],[9537,9538,9639],[9537,9638,9639],[9542,9543,9644],[9542,9643,9644],[9543,9544,9645],[9543,9644,9645],[9544,9545,9646],[9544,9645,9646],[9545,9546,9647],[9545,9646,9647],[9546,9547,9648],[9546,9647,9648],[9547,9548,9649],[9547,9648,9649],[9548,9549,9650],[9548,9649,9650],[9549,9550,9651],[9549,9650,9651],[9550,9551,9652],[9550,9651,9652],[9551,9552,9653],[9551,9652,9653],[9553,9554,9655],[9553,9654,9655],[9554,9555,9656],[9554,9655,9656],[9555,9556,9657],[9555,9656,9657],[9558,9559,9660],[9558,9659,9660],[9559,9560,9661],[9559,9660,9661],[9560,9561,9662],[9560,9661,9662],[9561,9562,9663],[9561,9662,9663],[9562,9563,9664],[9562,9663,9664],[9563,9564,9665],[9563,9664,9665],[9564,9565,9666],[9564,9665,9666],[9565,9566,9667],[9565,9666,9667],[9566,9567,9668],[9566,9667,9668],[9567,9568,9669],[9567,9668,9669],[9568,9569,9670],[9568,9669,9670],[9569,9570,9671],[9569,9670,9671],[9570,9571,9672],[9570,9671,9672],[9571,9572,9673],[9571,9672,9673],[9572,9573,9674],[9572,9673,9674],[9573,9574,9675],[9573,9674,9675],[9574,9575,9676],[9574,9675,9676],[9575,9576,9677],[9575,9676,9677],[9576,9577,9678],[9576,9677,9678],[9577,9578,9679],[9577,9678,9679],[9579,9580,9681],[9579,9680,9681],[9580,9581,9682],[9580,9681,9682],[9581,9582,9683],[9581,9682,9683],[9582,9583,9684],[9582,9683,9684],[9583,9584,9685],[9583,9684,9685],[9584,9585,9686],[9584,9685,9686],[9585,9586,9687],[9585,9686,9687],[9586,9587,9688],[9586,9687,9688],[9587,9588,9689],[9587,9688,9689],[9588,9589,9690],[9588,9689,9690],[9595,9596,9697],[9595,9696,9697],[9596,9597,9698],[9596,9697,9698],[9597,9598,9699],[9597,9698,9699],[9598,9599,9700],[9598,9699,9700],[9599,9600,9701],[9599,9700,9701],[9600,9601,9702],[9600,9701,9702],[9601,9602,9703],[9601,9702,9703],[9604,9605,9706],[9605,9606,9707],[9605,9706,9707],[9606,9607,9708],[9606,9707,9708],[9607,9608,9709],[9607,9708,9709],[9608,9609,9710],[9608,9709,9710],[9609,9610,9711],[9609,9710,9711],[9610,9611,9712],[9610,9711,9712],[9611,9612,9713],[9611,9712,9713],[9612,9613,9714],[9612,9713,9714],[9613,9614,9715],[9613,9714,9715],[9614,9615,9716],[9614,9715,9716],[9615,9616,9717],[9615,9716,9717],[9616,9617,9718],[9616,9717,9718],[9618,9619,9720],[9618,9719,9720],[9619,9620,9721],[9619,9720,9721],[9620,9621,9722],[9620,9721,9722],[9621,9622,9723],[9621,9722,9723],[9622,9623,9724],[9622,9723,9724],[9623,9624,9725],[9623,9724,9725],[9624,9625,9726],[9624,9725,9726],[9625,9626,9727],[9625,9726,9727],[9626,9627,9728],[9626,9727,9728],[9627,9628,9729],[9627,9728,9729],[9628,9629,9730],[9628,9729,9730],[9630,9631,9732],[9631,9632,9733],[9631,9732,9733],[9632,9633,9734],[9632,9733,9734],[9633,9634,9735],[9633,9734,9735],[9634,9635,9736],[9634,9735,9736],[9635,9636,9737],[9635,9736,9737],[9636,9637,9738],[9636,9737,9738],[9637,9638,9739],[9637,9738,9739],[9638,9639,9740],[9638,9739,9740],[9643,9644,9745],[9643,9744,9745],[9644,9645,9746],[9644,9745,9746],[9645,9646,9747],[9645,9746,9747],[9646,9647,9748],[9646,9747,9748],[9647,9648,9749],[9647,9748,9749],[9648,9649,9750],[9648,9749,9750],[9649,9650,9751],[9649,9750,9751],[9650,9651,9752],[9650,9751,9752],[9651,9652,9753],[9651,9752,9753],[9652,9653,9754],[9652,9753,9754],[9654,9655,9756],[9654,9755,9756],[9655,9656,9757],[9655,9756,9757],[9656,9657,9758],[9656,9757,9758],[9659,9660,9761],[9659,9760,9761],[9660,9661,9762],[9660,9761,9762],[9661,9662,9763],[9661,9762,9763],[9662,9663,9764],[9662,9763,9764],[9663,9664,9765],[9663,9764,9765],[9664,9665,9766],[9664,9765,9766],[9665,9666,9767],[9665,9766,9767],[9666,9667,9768],[9666,9767,9768],[9667,9668,9769],[9667,9768,9769],[9668,9669,9770],[9668,9769,9770],[9669,9670,9771],[9669,9770,9771],[9670,9671,9772],[9670,9771,9772],[9671,9672,9773],[9671,9772,9773],[9672,9673,9774],[9672,9773,9774],[9673,9674,9775],[9673,9774,9775],[9674,9675,9776],[9674,9775,9776],[9675,9676,9777],[9675,9776,9777],[9676,9677,9778],[9676,9777,9778],[9677,9678,9779],[9677,9778,9779],[9680,9681,9782],[9680,9781,9782],[9681,9682,9783],[9681,9782,9783],[9682,9683,9784],[9682,9783,9784],[9683,9684,9785],[9683,9784,9785],[9684,9685,9786],[9684,9785,9786],[9685,9686,9787],[9685,9786,9787],[9686,9687,9788],[9686,9787,9788],[9687,9688,9789],[9687,9788,9789],[9688,9689,9790],[9688,9789,9790],[9689,9690,9791],[9689,9790,9791],[9690,9691,9792],[9690,9791,9792],[9696,9697,9798],[9696,9797,9798],[9697,9698,9799],[9697,9798,9799],[9698,9699,9800],[9698,9799,9800],[9699,9700,9801],[9699,9800,9801],[9700,9701,9802],[9700,9801,9802],[9701,9702,9803],[9701,9802,9803],[9702,9703,9804],[9702,9803,9804],[9706,9707,9808],[9706,9807,9808],[9707,9708,9809],[9707,9808,9809],[9708,9709,9810],[9708,9809,9810],[9709,9710,9811],[9709,9810,9811],[9710,9711,9812],[9710,9811,9812],[9711,9712,9813],[9711,9812,9813],[9712,9713,9814],[9712,9813,9814],[9713,9714,9815],[9713,9814,9815],[9714,9715,9816],[9714,9815,9816],[9715,9716,9817],[9715,9816,9817],[9716,9717,9818],[9716,9817,9818],[9717,9718,9819],[9717,9818,9819],[9719,9720,9821],[9719,9820,9821],[9720,9721,9822],[9720,9821,9822],[9721,9722,9823],[9721,9822,9823],[9722,9723,9824],[9722,9823,9824],[9723,9724,9825],[9723,9824,9825],[9724,9725,9826],[9724,9825,9826],[9725,9726,9827],[9725,9826,9827],[9726,9727,9828],[9726,9827,9828],[9727,9728,9829],[9727,9828,9829],[9728,9729,9830],[9728,9829,9830],[9729,9730,9831],[9729,9830,9831],[9732,9733,9834],[9732,9833,9834],[9733,9734,9835],[9733,9834,9835],[9734,9735,9836],[9734,9835,9836],[9735,9736,9837],[9735,9836,9837],[9736,9737,9838],[9736,9837,9838],[9737,9738,9839],[9737,9838,9839],[9738,9739,9840],[9738,9839,9840],[9739,9740,9841],[9739,9840,9841],[9744,9745,9846],[9744,9845,9846],[9745,9746,9847],[9745,9846,9847],[9746,9747,9848],[9746,9847,9848],[9747,9748,9849],[9747,9848,9849],[9748,9749,9850],[9748,9849,9850],[9749,9750,9851],[9749,9850,9851],[9750,9751,9852],[9750,9851,9852],[9751,9752,9853],[9751,9852,9853],[9752,9753,9854],[9752,9853,9854],[9753,9754,9855],[9753,9854,9855],[9755,9756,9857],[9755,9856,9857],[9756,9757,9858],[9756,9857,9858],[9757,9758,9859],[9757,9858,9859],[9760,9761,9862],[9760,9861,9862],[9761,9762,9863],[9761,9862,9863],[9762,9763,9864],[9762,9863,9864],[9763,9764,9865],[9763,9864,9865],[9764,9765,9866],[9764,9865,9866],[9765,9766,9867],[9765,9866,9867],[9766,9767,9868],[9766,9867,9868],[9767,9768,9869],[9767,9868,9869],[9768,9769,9870],[9768,9869,9870],[9769,9770,9871],[9769,9870,9871],[9770,9771,9872],[9770,9871,9872],[9771,9772,9873],[9771,9872,9873],[9772,9773,9874],[9772,9873,9874],[9773,9774,9875],[9773,9874,9875],[9774,9775,9876],[9774,9875,9876],[9775,9776,9877],[9775,9876,9877],[9776,9777,9878],[9776,9877,9878],[9777,9778,9879],[9777,9878,9879],[9778,9779,9880],[9778,9879,9880],[9781,9782,9883],[9781,9882,9883],[9782,9783,9884],[9782,9883,9884],[9783,9784,9885],[9783,9884,9885],[9784,9785,9886],[9784,9885,9886],[9785,9786,9887],[9785,9886,9887],[9786,9787,9888],[9786,9887,9888],[9787,9788,9889],[9787,9888,9889],[9788,9789,9890],[9788,9889,9890],[9789,9790,9891],[9789,9890,9891],[9790,9791,9892],[9790,9891,9892],[9791,9792,9893],[9791,9892,9893],[9797,9798,9899],[9797,9898,9899],[9798,9799,9900],[9798,9899,9900],[9799,9800,9901],[9799,9900,9901],[9800,9801,9902],[9800,9901,9902],[9801,9802,9903],[9801,9902,9903],[9802,9803,9904],[9802,9903,9904],[9803,9804,9905],[9803,9904,9905],[9807,9808,9909],[9807,9908,9909],[9808,9809,9910],[9808,9909,9910],[9809,9810,9911],[9809,9910,9911],[9810,9811,9912],[9810,9911,9912],[9811,9812,9913],[9811,9912,9913],[9812,9813,9914],[9812,9913,9914],[9813,9814,9915],[9813,9914,9915],[9814,9815,9916],[9814,9915,9916],[9815,9816,9917],[9815,9916,9917],[9816,9817,9918],[9816,9917,9918],[9817,9818,9919],[9817,9918,9919],[9818,9819,9920],[9818,9919,9920],[9820,9821,9922],[9820,9921,9922],[9821,9822,9923],[9821,9922,9923],[9822,9823,9924],[9822,9923,9924],[9823,9824,9925],[9823,9924,9925],[9824,9825,9926],[9824,9925,9926],[9825,9826,9927],[9825,9926,9927],[9826,9827,9928],[9826,9927,9928],[9827,9828,9929],[9827,9928,9929],[9828,9829,9930],[9828,9929,9930],[9829,9830,9931],[9829,9930,9931],[9830,9831,9932],[9830,9931,9932],[9833,9834,9935],[9833,9934,9935],[9834,9835,9936],[9834,9935,9936],[9835,9836,9937],[9835,9936,9937],[9836,9837,9938],[9836,9937,9938],[9837,9838,9939],[9837,9938,9939],[9838,9839,9940],[9838,9939,9940],[9839,9840,9941],[9839,9940,9941],[9840,9841,9942],[9840,9941,9942],[9845,9846,9947],[9845,9946,9947],[9846,9847,9948],[9846,9947,9948],[9847,9848,9949],[9847,9948,9949],[9848,9849,9950],[9848,9949,9950],[9849,9850,9951],[9849,9950,9951],[9850,9851,9952],[9850,9951,9952],[9851,9852,9953],[9851,9952,9953],[9852,9853,9954],[9852,9953,9954],[9853,9854,9955],[9853,9954,9955],[9854,9855,9956],[9854,9955,9956],[9856,9857,9958],[9856,9957,9958],[9857,9858,9959],[9857,9958,9959],[9858,9859,9960],[9858,9959,9960],[9861,9862,9963],[9861,9962,9963],[9862,9863,9964],[9862,9963,9964],[9863,9864,9965],[9863,9964,9965],[9864,9865,9966],[9864,9965,9966],[9865,9866,9967],[9865,9966,9967],[9866,9867,9968],[9866,9967,9968],[9867,9868,9969],[9867,9968,9969],[9868,9869,9970],[9868,9969,9970],[9869,9870,9971],[9869,9970,9971],[9870,9871,9972],[9870,9971,9972],[9871,9872,9973],[9871,9972,9973],[9872,9873,9974],[9872,9973,9974],[9873,9874,9975],[9873,9974,9975],[9874,9875,9976],[9874,9975,9976],[9875,9876,9977],[9875,9976,9977],[9876,9877,9978],[9876,9977,9978],[9877,9878,9979],[9877,9978,9979],[9878,9879,9980],[9878,9979,9980],[9879,9880,9981],[9879,9980,9981],[9881,9882,9983],[9881,9982,9983],[9882,9883,9984],[9882,9983,9984],[9883,9884,9985],[9883,9984,9985],[9884,9885,9986],[9884,9985,9986],[9885,9886,9987],[9885,9986,9987],[9886,9887,9988],[9886,9987,9988],[9887,9888,9989],[9887,9988,9989],[9888,9889,9990],[9888,9989,9990],[9889,9890,9991],[9889,9990,9991],[9890,9891,9992],[9890,9991,9992],[9891,9892,9993],[9891,9992,9993],[9892,9893,9994],[9892,9993,9994],[9898,9899,10000],[9898,9999,10000],[9899,9900,10001],[9899,10000,10001],[9900,9901,10002],[9900,10001,10002],[9901,9902,10003],[9901,10002,10003],[9902,9903,10004],[9902,10003,10004],[9903,9904,10005],[9903,10004,10005],[9904,9905,10006],[9904,10005,10006],[9908,9909,10010],[9908,10009,10010],[9909,9910,10011],[9909,10010,10011],[9910,9911,10012],[9910,10011,10012],[9911,9912,10013],[9911,10012,10013],[9912,9913,10014],[9912,10013,10014],[9913,9914,10015],[9913,10014,10015],[9914,9915,10016],[9914,10015,10016],[9915,9916,10017],[9915,10016,10017],[9916,9917,10018],[9916,10017,10018],[9917,9918,10019],[9917,10018,10019],[9918,9919,10020],[9918,10019,10020],[9919,9920,10021],[9919,10020,10021],[9921,9922,10023],[9921,10022,10023],[9922,9923,10024],[9922,10023,10024],[9923,9924,10025],[9923,10024,10025],[9924,9925,10026],[9924,10025,10026],[9925,9926,10027],[9925,10026,10027],[9926,9927,10028],[9926,10027,10028],[9927,9928,10029],[9927,10028,10029],[9928,9929,10030],[9928,10029,10030],[9929,9930,10031],[9929,10030,10031],[9930,9931,10032],[9930,10031,10032],[9931,9932,10033],[9931,10032,10033],[9934,9935,10036],[9934,10035,10036],[9935,9936,10037],[9935,10036,10037],[9936,9937,10038],[9936,10037,10038],[9937,9938,10039],[9937,10038,10039],[9938,9939,10040],[9938,10039,10040],[9939,9940,10041],[9939,10040,10041],[9940,9941,10042],[9940,10041,10042],[9941,9942,10043],[9941,10042,10043],[9946,9947,10048],[9946,10047,10048],[9947,9948,10049],[9947,10048,10049],[9948,9949,10050],[9948,10049,10050],[9949,9950,10051],[9949,10050,10051],[9950,9951,10052],[9950,10051,10052],[9951,9952,10053],[9951,10052,10053],[9952,9953,10054],[9952,10053,10054],[9953,9954,10055],[9953,10054,10055],[9954,9955,10056],[9954,10055,10056],[9955,9956,10057],[9955,10056,10057],[9957,9958,10059],[9957,10058,10059],[9958,9959,10060],[9958,10059,10060],[9959,9960,10061],[9959,10060,10061],[9962,9963,10064],[9962,10063,10064],[9963,9964,10065],[9963,10064,10065],[9964,9965,10066],[9964,10065,10066],[9965,9966,10067],[9965,10066,10067],[9966,9967,10068],[9966,10067,10068],[9967,9968,10069],[9967,10068,10069],[9968,9969,10070],[9968,10069,10070],[9969,9970,10071],[9969,10070,10071],[9970,9971,10072],[9970,10071,10072],[9971,9972,10073],[9971,10072,10073],[9972,9973,10074],[9972,10073,10074],[9973,9974,10075],[9973,10074,10075],[9974,9975,10076],[9974,10075,10076],[9975,9976,10077],[9975,10076,10077],[9976,9977,10078],[9976,10077,10078],[9977,9978,10079],[9977,10078,10079],[9978,9979,10080],[9978,10079,10080],[9979,9980,10081],[9979,10080,10081],[9982,9983,10084],[9982,10083,10084],[9983,9984,10085],[9983,10084,10085],[9984,9985,10086],[9984,10085,10086],[9985,9986,10087],[9985,10086,10087],[9986,9987,10088],[9986,10087,10088],[9987,9988,10089],[9987,10088,10089],[9988,9989,10090],[9988,10089,10090],[9989,9990,10091],[9989,10090,10091],[9990,9991,10092],[9990,10091,10092],[9991,9992,10093],[9991,10092,10093],[9992,9993,10094],[9992,10093,10094],[9993,9994,10095],[9993,10094,10095],[9999,10000,10101],[9999,10100,10101],[10000,10001,10102],[10000,10101,10102],[10001,10002,10103],[10001,10102,10103],[10002,10003,10104],[10002,10103,10104],[10003,10004,10105],[10003,10104,10105],[10004,10005,10106],[10004,10105,10106],[10005,10006,10107],[10005,10106,10107],[10009,10010,10111],[10009,10110,10111],[10010,10011,10112],[10010,10111,10112],[10011,10012,10113],[10011,10112,10113],[10012,10013,10114],[10012,10113,10114],[10013,10014,10115],[10013,10114,10115],[10014,10015,10116],[10014,10115,10116],[10015,10016,10117],[10015,10116,10117],[10016,10017,10118],[10016,10117,10118],[10017,10018,10119],[10017,10118,10119],[10018,10019,10120],[10018,10119,10120],[10019,10020,10121],[10019,10120,10121],[10020,10021,10122],[10020,10121,10122],[10022,10023,10124],[10023,10024,10125],[10023,10124,10125],[10024,10025,10126],[10024,10125,10126],[10025,10026,10127],[10025,10126,10127],[10026,10027,10128],[10026,10127,10128],[10027,10028,10129],[10027,10128,10129],[10028,10029,10130],[10028,10129,10130],[10029,10030,10131],[10029,10130,10131],[10030,10031,10132],[10030,10131,10132],[10031,10032,10133],[10031,10132,10133],[10032,10033,10134],[10032,10133,10134],[10035,10036,10137],[10035,10136,10137],[10036,10037,10138],[10036,10137,10138],[10037,10038,10139],[10037,10138,10139],[10038,10039,10140],[10038,10139,10140],[10039,10040,10141],[10039,10140,10141],[10040,10041,10142],[10040,10141,10142],[10041,10042,10143],[10041,10142,10143],[10042,10043,10144],[10042,10143,10144],[10047,10048,10149],[10047,10148,10149],[10048,10049,10150],[10048,10149,10150],[10049,10050,10151],[10049,10150,10151],[10050,10051,10152],[10050,10151,10152],[10051,10052,10153],[10051,10152,10153],[10052,10053,10154],[10052,10153,10154],[10053,10054,10155],[10053,10154,10155],[10054,10055,10156],[10054,10155,10156],[10055,10056,10157],[10055,10156,10157],[10056,10057,10158],[10056,10157,10158],[10058,10059,10160],[10058,10159,10160],[10059,10060,10161],[10059,10160,10161],[10060,10061,10162],[10060,10161,10162],[10063,10064,10165],[10063,10164,10165],[10064,10065,10166],[10064,10165,10166],[10065,10066,10167],[10065,10166,10167],[10066,10067,10168],[10066,10167,10168],[10067,10068,10169],[10067,10168,10169],[10068,10069,10170],[10068,10169,10170],[10069,10070,10171],[10069,10170,10171],[10070,10071,10172],[10070,10171,10172],[10071,10072,10173],[10071,10172,10173],[10072,10073,10174],[10072,10173,10174],[10073,10074,10175],[10073,10174,10175],[10074,10075,10176],[10074,10175,10176],[10075,10076,10177],[10075,10176,10177],[10076,10077,10178],[10076,10177,10178],[10077,10078,10179],[10077,10178,10179],[10078,10079,10180],[10078,10179,10180],[10079,10080,10181],[10079,10180,10181],[10080,10081,10182],[10080,10181,10182],[10083,10084,10185],[10083,10184,10185],[10084,10085,10186],[10084,10185,10186],[10085,10086,10187],[10085,10186,10187],[10086,10087,10188],[10086,10187,10188],[10087,10088,10189],[10087,10188,10189],[10088,10089,10190],[10088,10189,10190],[10089,10090,10191],[10089,10190,10191],[10090,10091,10192],[10090,10191,10192],[10091,10092,10193],[10091,10192,10193],[10092,10093,10194],[10092,10193,10194],[10093,10094,10195],[10093,10194,10195],[10094,10095,10196],[10094,10195,10196],[10100,10101,10202],[10100,10201,10202],[10101,10102,10203],[10101,10202,10203],[10102,10103,10204],[10102,10203,10204],[10103,10104,10205],[10103,10204,10205],[10104,10105,10206],[10104,10205,10206],[10105,10106,10207],[10105,10206,10207],[10106,10107,10208],[10106,10207,10208],[10107,10108,10209],[10107,10208,10209],[10110,10111,10212],[10110,10211,10212],[10111,10112,10213],[10111,10212,10213],[10112,10113,10214],[10112,10213,10214],[10113,10114,10215],[10113,10214,10215],[10114,10115,10216],[10114,10215,10216],[10115,10116,10217],[10115,10216,10217],[10116,10117,10218],[10116,10217,10218],[10117,10118,10219],[10117,10218,10219],[10118,10119,10220],[10118,10219,10220],[10119,10120,10221],[10119,10220,10221],[10120,10121,10222],[10120,10221,10222],[10121,10122,10223],[10121,10222,10223],[10124,10125,10226],[10124,10225,10226],[10125,10126,10227],[10125,10226,10227],[10126,10127,10228],[10126,10227,10228],[10127,10128,10229],[10127,10228,10229],[10128,10129,10230],[10128,10229,10230],[10129,10130,10231],[10129,10230,10231],[10130,10131,10232],[10130,10231,10232],[10131,10132,10233],[10131,10232,10233],[10132,10133,10234],[10132,10233,10234],[10133,10134,10235],[10133,10234,10235],[10136,10137,10238],[10136,10237,10238],[10137,10138,10239],[10137,10238,10239],[10138,10139,10240],[10138,10239,10240],[10139,10140,10241],[10139,10240,10241],[10140,10141,10242],[10140,10241,10242],[10141,10142,10243],[10141,10242,10243],[10142,10143,10244],[10142,10243,10244],[10143,10144,10245],[10143,10244,10245],[10144,10145,10246],[10144,10245,10246],[10148,10149,10250],[10148,10249,10250],[10149,10150,10251],[10149,10250,10251],[10150,10151,10252],[10150,10251,10252],[10151,10152,10253],[10151,10252,10253],[10152,10153,10254],[10152,10253,10254],[10154,10155,10256],[10154,10255,10256],[10155,10156,10257],[10155,10256,10257],[10156,10157,10258],[10156,10257,10258],[10157,10158,10259],[10157,10258,10259],[10159,10160,10261],[10159,10260,10261],[10160,10161,10262],[10160,10261,10262],[10161,10162,10263],[10161,10262,10263],[10164,10165,10266],[10164,10265,10266],[10165,10166,10267],[10165,10266,10267],[10166,10167,10268],[10166,10267,10268],[10167,10168,10269],[10167,10268,10269],[10168,10169,10270],[10168,10269,10270],[10169,10170,10271],[10169,10270,10271],[10170,10171,10272],[10170,10271,10272],[10171,10172,10273],[10171,10272,10273],[10172,10173,10274],[10172,10273,10274],[10173,10174,10275],[10173,10274,10275],[10174,10175,10276],[10174,10275,10276],[10175,10176,10277],[10175,10276,10277],[10176,10177,10278],[10176,10277,10278],[10177,10178,10279],[10177,10278,10279],[10178,10179,10280],[10178,10279,10280],[10179,10180,10281],[10179,10280,10281],[10180,10181,10282],[10180,10281,10282],[10181,10182,10283],[10181,10282,10283],[10183,10184,10285],[10183,10284,10285],[10184,10185,10286],[10184,10285,10286],[10185,10186,10287],[10185,10286,10287],[10186,10187,10288],[10186,10287,10288],[10187,10188,10289],[10187,10288,10289],[10188,10189,10290],[10188,10289,10290],[10189,10190,10291],[10189,10290,10291],[10190,10191,10292],[10190,10291,10292],[10191,10192,10293],[10191,10292,10293],[10192,10193,10294],[10192,10293,10294],[10193,10194,10295],[10193,10294,10295],[10194,10195,10296],[10194,10295,10296],[10195,10196,10297],[10195,10296,10297],[10196,10197,10298],[10196,10297,10298],[10201,10202,10303],[10201,10302,10303],[10202,10203,10304],[10202,10303,10304],[10203,10204,10305],[10203,10304,10305],[10204,10205,10306],[10204,10305,10306],[10205,10206,10307],[10205,10306,10307],[10206,10207,10308],[10206,10307,10308],[10207,10208,10309],[10207,10308,10309],[10208,10209,10310],[10208,10309,10310],[10211,10212,10313],[10211,10312,10313],[10212,10213,10314],[10212,10313,10314],[10213,10214,10315],[10213,10314,10315],[10214,10215,10316],[10214,10315,10316],[10215,10216,10317],[10215,10316,10317],[10216,10217,10318],[10216,10317,10318],[10217,10218,10319],[10217,10318,10319],[10218,10219,10320],[10218,10319,10320],[10219,10220,10321],[10219,10320,10321],[10220,10221,10322],[10220,10321,10322],[10221,10222,10323],[10221,10322,10323],[10222,10223,10324],[10222,10323,10324],[10225,10226,10327],[10225,10326,10327],[10226,10227,10328],[10226,10327,10328],[10227,10228,10329],[10227,10328,10329],[10228,10229,10330],[10228,10329,10330],[10229,10230,10331],[10229,10330,10331],[10230,10231,10332],[10230,10331,10332],[10231,10232,10333],[10231,10332,10333],[10232,10233,10334],[10232,10333,10334],[10233,10234,10335],[10233,10334,10335],[10234,10235,10336],[10234,10335,10336],[10237,10238,10339],[10237,10338,10339],[10238,10239,10340],[10238,10339,10340],[10239,10240,10341],[10239,10340,10341],[10240,10241,10342],[10240,10341,10342],[10241,10242,10343],[10241,10342,10343],[10242,10243,10344],[10242,10343,10344],[10243,10244,10345],[10243,10344,10345],[10244,10245,10346],[10244,10345,10346],[10245,10246,10347],[10245,10346,10347],[10249,10250,10351],[10249,10350,10351],[10250,10251,10352],[10250,10351,10352],[10251,10252,10353],[10251,10352,10353],[10252,10253,10354],[10252,10353,10354],[10253,10254,10355],[10253,10354,10355],[10255,10256,10357],[10255,10356,10357],[10256,10257,10358],[10256,10357,10358],[10257,10258,10359],[10257,10358,10359],[10258,10259,10360],[10258,10359,10360],[10260,10261,10362],[10260,10361,10362],[10261,10262,10363],[10261,10362,10363],[10262,10263,10364],[10262,10363,10364],[10264,10265,10366],[10264,10365,10366],[10265,10266,10367],[10265,10366,10367],[10266,10267,10368],[10266,10367,10368],[10267,10268,10369],[10267,10368,10369],[10268,10269,10370],[10268,10369,10370],[10269,10270,10371],[10269,10370,10371],[10270,10271,10372],[10270,10371,10372],[10271,10272,10373],[10271,10372,10373],[10272,10273,10374],[10272,10373,10374],[10273,10274,10375],[10273,10374,10375],[10274,10275,10376],[10274,10375,10376],[10275,10276,10377],[10275,10376,10377],[10276,10277,10378],[10276,10377,10378],[10277,10278,10379],[10277,10378,10379],[10278,10279,10380],[10278,10379,10380],[10279,10280,10381],[10279,10380,10381],[10280,10281,10382],[10280,10381,10382],[10281,10282,10383],[10281,10382,10383],[10284,10285,10386],[10284,10385,10386],[10285,10286,10387],[10285,10386,10387],[10286,10287,10388],[10286,10387,10388],[10287,10288,10389],[10287,10388,10389],[10288,10289,10390],[10288,10389,10390],[10289,10290,10391],[10289,10390,10391],[10290,10291,10392],[10290,10391,10392],[10291,10292,10393],[10291,10392,10393],[10292,10293,10394],[10292,10393,10394],[10293,10294,10395],[10293,10394,10395],[10294,10295,10396],[10294,10395,10396],[10295,10296,10397],[10295,10396,10397],[10296,10297,10398],[10296,10397,10398],[10297,10298,10399],[10297,10398,10399],[10302,10303,10404],[10302,10403,10404],[10303,10304,10405],[10303,10404,10405],[10304,10305,10406],[10304,10405,10406],[10305,10306,10407],[10305,10406,10407],[10306,10307,10408],[10306,10407,10408],[10307,10308,10409],[10307,10408,10409],[10308,10309,10410],[10308,10409,10410],[10309,10310,10411],[10309,10410,10411],[10312,10313,10414],[10312,10413,10414],[10313,10314,10415],[10313,10414,10415],[10314,10315,10416],[10314,10415,10416],[10315,10316,10417],[10315,10416,10417],[10316,10317,10418],[10316,10417,10418],[10317,10318,10419],[10317,10418,10419],[10318,10319,10420],[10318,10419,10420],[10319,10320,10421],[10319,10420,10421],[10320,10321,10422],[10320,10421,10422],[10321,10322,10423],[10321,10422,10423],[10322,10323,10424],[10322,10423,10424],[10323,10324,10425],[10323,10424,10425],[10326,10327,10428],[10326,10427,10428],[10327,10328,10429],[10327,10428,10429],[10328,10329,10430],[10328,10429,10430],[10329,10330,10431],[10329,10430,10431],[10330,10331,10432],[10330,10431,10432],[10331,10332,10433],[10331,10432,10433],[10332,10333,10434],[10332,10433,10434],[10333,10334,10435],[10333,10434,10435],[10334,10335,10436],[10334,10435,10436],[10335,10336,10437],[10335,10436,10437],[10336,10337,10438],[10336,10437,10438],[10338,10339,10440],[10338,10439,10440],[10339,10340,10441],[10339,10440,10441],[10340,10341,10442],[10340,10441,10442],[10341,10342,10443],[10341,10442,10443],[10342,10343,10444],[10342,10443,10444],[10343,10344,10445],[10343,10444,10445],[10344,10345,10446],[10344,10445,10446],[10345,10346,10447],[10345,10446,10447],[10350,10351,10452],[10350,10451,10452],[10351,10352,10453],[10351,10452,10453],[10352,10353,10454],[10352,10453,10454],[10353,10354,10455],[10353,10454,10455],[10354,10355,10456],[10354,10455,10456],[10356,10357,10458],[10356,10457,10458],[10357,10358,10459],[10357,10458,10459],[10358,10359,10460],[10358,10459,10460],[10359,10360,10461],[10359,10460,10461],[10361,10362,10463],[10361,10462,10463],[10362,10363,10464],[10362,10463,10464],[10363,10364,10465],[10363,10464,10465],[10365,10366,10467],[10365,10466,10467],[10366,10367,10468],[10366,10467,10468],[10367,10368,10469],[10367,10468,10469],[10368,10369,10470],[10368,10469,10470],[10369,10370,10471],[10369,10470,10471],[10370,10371,10472],[10370,10471,10472],[10371,10372,10473],[10371,10472,10473],[10372,10373,10474],[10372,10473,10474],[10373,10374,10475],[10373,10474,10475],[10374,10375,10476],[10374,10475,10476],[10375,10376,10477],[10375,10476,10477],[10376,10377,10478],[10376,10477,10478],[10377,10378,10479],[10377,10478,10479],[10378,10379,10480],[10378,10479,10480],[10379,10380,10481],[10379,10480,10481],[10380,10381,10482],[10380,10481,10482],[10381,10382,10483],[10381,10482,10483],[10382,10383,10484],[10382,10483,10484],[10385,10386,10487],[10385,10486,10487],[10386,10387,10488],[10386,10487,10488],[10387,10388,10489],[10387,10488,10489],[10388,10389,10490],[10388,10489,10490],[10389,10390,10491],[10389,10490,10491],[10390,10391,10492],[10390,10491,10492],[10391,10392,10493],[10391,10492,10493],[10392,10393,10494],[10392,10493,10494],[10393,10394,10495],[10393,10494,10495],[10394,10395,10496],[10394,10495,10496],[10395,10396,10497],[10395,10496,10497],[10396,10397,10498],[10396,10497,10498],[10397,10398,10499],[10397,10498,10499],[10398,10399,10500],[10398,10499,10500],[10403,10404,10505],[10403,10504,10505],[10404,10405,10506],[10404,10505,10506],[10405,10406,10507],[10405,10506,10507],[10406,10407,10508],[10406,10507,10508],[10407,10408,10509],[10407,10508,10509],[10408,10409,10510],[10408,10509,10510],[10409,10410,10511],[10409,10510,10511],[10410,10411,10512],[10410,10511,10512],[10413,10414,10515],[10413,10514,10515],[10414,10415,10516],[10414,10515,10516],[10415,10416,10517],[10415,10516,10517],[10416,10417,10518],[10416,10517,10518],[10417,10418,10519],[10417,10518,10519],[10418,10419,10520],[10418,10519,10520],[10419,10420,10521],[10419,10520,10521],[10420,10421,10522],[10420,10521,10522],[10421,10422,10523],[10421,10522,10523],[10422,10423,10524],[10422,10523,10524],[10423,10424,10525],[10423,10524,10525],[10424,10425,10526],[10424,10525,10526],[10427,10428,10529],[10427,10528,10529],[10428,10429,10530],[10428,10529,10530],[10429,10430,10531],[10429,10530,10531],[10430,10431,10532],[10430,10531,10532],[10431,10432,10533],[10431,10532,10533],[10432,10433,10534],[10432,10533,10534],[10433,10434,10535],[10433,10534,10535],[10434,10435,10536],[10434,10535,10536],[10435,10436,10537],[10435,10536,10537],[10436,10437,10538],[10436,10537,10538],[10437,10438,10539],[10437,10538,10539],[10439,10440,10541],[10439,10540,10541],[10440,10441,10542],[10440,10541,10542],[10441,10442,10543],[10441,10542,10543],[10442,10443,10544],[10442,10543,10544],[10443,10444,10545],[10443,10544,10545],[10444,10445,10546],[10444,10545,10546],[10445,10446,10547],[10445,10546,10547],[10446,10447,10548],[10446,10547,10548],[10451,10452,10553],[10451,10552,10553],[10452,10453,10554],[10452,10553,10554],[10453,10454,10555],[10453,10554,10555],[10454,10455,10556],[10454,10555,10556],[10455,10456,10557],[10455,10556,10557],[10457,10458,10559],[10458,10459,10560],[10458,10559,10560],[10459,10460,10561],[10459,10560,10561],[10460,10461,10562],[10460,10561,10562],[10461,10462,10563],[10461,10562,10563],[10462,10463,10564],[10462,10563,10564],[10463,10464,10565],[10463,10564,10565],[10464,10465,10566],[10464,10565,10566],[10466,10467,10568],[10466,10567,10568],[10467,10468,10569],[10467,10568,10569],[10468,10469,10570],[10468,10569,10570],[10469,10470,10571],[10469,10570,10571],[10470,10471,10572],[10470,10571,10572],[10471,10472,10573],[10471,10572,10573],[10472,10473,10574],[10472,10573,10574],[10473,10474,10575],[10473,10574,10575],[10474,10475,10576],[10474,10575,10576],[10475,10476,10577],[10475,10576,10577],[10476,10477,10578],[10476,10577,10578],[10477,10478,10579],[10477,10578,10579],[10478,10479,10580],[10478,10579,10580],[10479,10480,10581],[10479,10580,10581],[10480,10481,10582],[10480,10581,10582],[10481,10482,10583],[10481,10582,10583],[10482,10483,10584],[10482,10583,10584],[10483,10484,10585],[10483,10584,10585],[10485,10486,10587],[10485,10586,10587],[10486,10487,10588],[10486,10587,10588],[10487,10488,10589],[10487,10588,10589],[10488,10489,10590],[10488,10589,10590],[10489,10490,10591],[10489,10590,10591],[10490,10491,10592],[10490,10591,10592],[10491,10492,10593],[10491,10592,10593],[10492,10493,10594],[10492,10593,10594],[10493,10494,10595],[10493,10594,10595],[10494,10495,10596],[10494,10595,10596],[10495,10496,10597],[10495,10596,10597],[10496,10497,10598],[10496,10597,10598],[10497,10498,10599],[10497,10598,10599],[10498,10499,10600],[10498,10599,10600],[10499,10500,10601],[10499,10600,10601],[10504,10505,10606],[10504,10605,10606],[10505,10506,10607],[10505,10606,10607],[10506,10507,10608],[10506,10607,10608],[10507,10508,10609],[10507,10608,10609],[10508,10509,10610],[10508,10609,10610],[10509,10510,10611],[10509,10610,10611],[10510,10511,10612],[10510,10611,10612],[10511,10512,10613],[10511,10612,10613],[10514,10515,10616],[10514,10615,10616],[10515,10516,10617],[10515,10616,10617],[10516,10517,10618],[10516,10617,10618],[10517,10518,10619],[10517,10618,10619],[10518,10519,10620],[10518,10619,10620],[10519,10520,10621],[10519,10620,10621],[10520,10521,10622],[10520,10621,10622],[10521,10522,10623],[10521,10622,10623],[10522,10523,10624],[10522,10623,10624],[10523,10524,10625],[10523,10624,10625],[10524,10525,10626],[10524,10625,10626],[10525,10526,10627],[10525,10626,10627],[10528,10529,10630],[10528,10629,10630],[10529,10530,10631],[10529,10630,10631],[10530,10531,10632],[10530,10631,10632],[10531,10532,10633],[10531,10632,10633],[10532,10533,10634],[10532,10633,10634],[10533,10534,10635],[10533,10634,10635],[10534,10535,10636],[10534,10635,10636],[10535,10536,10637],[10535,10636,10637],[10536,10537,10638],[10536,10637,10638],[10537,10538,10639],[10537,10638,10639],[10538,10539,10640],[10538,10639,10640],[10540,10541,10642],[10541,10542,10643],[10541,10642,10643],[10542,10543,10644],[10542,10643,10644],[10543,10544,10645],[10543,10644,10645],[10544,10545,10646],[10544,10645,10646],[10545,10546,10647],[10545,10646,10647],[10546,10547,10648],[10546,10647,10648],[10547,10548,10649],[10547,10648,10649],[10552,10553,10654],[10552,10653,10654],[10553,10554,10655],[10553,10654,10655],[10554,10555,10656],[10554,10655,10656],[10555,10556,10657],[10555,10656,10657],[10556,10557,10658],[10556,10657,10658],[10559,10560,10661],[10559,10660,10661],[10560,10561,10662],[10560,10661,10662],[10561,10562,10663],[10561,10662,10663],[10562,10563,10664],[10562,10663,10664],[10563,10564,10665],[10563,10664,10665],[10564,10565,10666],[10564,10665,10666],[10565,10566,10667],[10565,10666,10667],[10567,10568,10669],[10567,10668,10669],[10568,10569,10670],[10568,10669,10670],[10569,10570,10671],[10569,10670,10671],[10570,10571,10672],[10570,10671,10672],[10571,10572,10673],[10571,10672,10673],[10572,10573,10674],[10572,10673,10674],[10573,10574,10675],[10573,10674,10675],[10574,10575,10676],[10574,10675,10676],[10575,10576,10677],[10575,10676,10677],[10576,10577,10678],[10576,10677,10678],[10577,10578,10679],[10577,10678,10679],[10578,10579,10680],[10578,10679,10680],[10579,10580,10681],[10579,10680,10681],[10580,10581,10682],[10580,10681,10682],[10581,10582,10683],[10581,10682,10683],[10582,10583,10684],[10582,10683,10684],[10583,10584,10685],[10583,10684,10685],[10586,10587,10688],[10586,10687,10688],[10587,10588,10689],[10587,10688,10689],[10588,10589,10690],[10588,10689,10690],[10589,10590,10691],[10589,10690,10691],[10590,10591,10692],[10590,10691,10692],[10591,10592,10693],[10591,10692,10693],[10592,10593,10694],[10592,10693,10694],[10593,10594,10695],[10593,10694,10695],[10594,10595,10696],[10594,10695,10696],[10595,10596,10697],[10595,10696,10697],[10596,10597,10698],[10596,10697,10698],[10597,10598,10699],[10597,10698,10699],[10598,10599,10700],[10598,10699,10700],[10599,10600,10701],[10599,10700,10701],[10600,10601,10702],[10600,10701,10702],[10605,10606,10707],[10605,10706,10707],[10606,10607,10708],[10606,10707,10708],[10607,10608,10709],[10607,10708,10709],[10608,10609,10710],[10608,10709,10710],[10609,10610,10711],[10609,10710,10711],[10610,10611,10712],[10610,10711,10712],[10611,10612,10713],[10611,10712,10713],[10612,10613,10714],[10612,10713,10714],[10615,10616,10717],[10615,10716,10717],[10616,10617,10718],[10616,10717,10718],[10617,10618,10719],[10617,10718,10719],[10618,10619,10720],[10618,10719,10720],[10619,10620,10721],[10619,10720,10721],[10620,10621,10722],[10620,10721,10722],[10621,10622,10723],[10621,10722,10723],[10622,10623,10724],[10622,10723,10724],[10623,10624,10725],[10623,10724,10725],[10624,10625,10726],[10624,10725,10726],[10625,10626,10727],[10625,10726,10727],[10626,10627,10728],[10626,10727,10728],[10629,10630,10731],[10629,10730,10731],[10630,10631,10732],[10630,10731,10732],[10631,10632,10733],[10631,10732,10733],[10632,10633,10734],[10632,10733,10734],[10633,10634,10735],[10633,10734,10735],[10634,10635,10736],[10634,10735,10736],[10635,10636,10737],[10635,10736,10737],[10636,10637,10738],[10636,10737,10738],[10637,10638,10739],[10637,10738,10739],[10638,10639,10740],[10638,10739,10740],[10639,10640,10741],[10639,10740,10741],[10642,10643,10744],[10642,10743,10744],[10643,10644,10745],[10643,10744,10745],[10644,10645,10746],[10644,10745,10746],[10645,10646,10747],[10645,10746,10747],[10646,10647,10748],[10646,10747,10748],[10647,10648,10749],[10647,10748,10749],[10648,10649,10750],[10648,10749,10750],[10653,10654,10755],[10653,10754,10755],[10654,10655,10756],[10654,10755,10756],[10655,10656,10757],[10655,10756,10757],[10656,10657,10758],[10656,10757,10758],[10657,10658,10759],[10657,10758,10759],[10658,10659,10760],[10658,10759,10760],[10660,10661,10762],[10660,10761,10762],[10661,10662,10763],[10661,10762,10763],[10662,10663,10764],[10662,10763,10764],[10663,10664,10765],[10663,10764,10765],[10664,10665,10766],[10664,10765,10766],[10665,10666,10767],[10665,10766,10767],[10666,10667,10768],[10666,10767,10768],[10668,10669,10770],[10668,10769,10770],[10669,10670,10771],[10669,10770,10771],[10670,10671,10772],[10670,10771,10772],[10671,10672,10773],[10671,10772,10773],[10672,10673,10774],[10672,10773,10774],[10673,10674,10775],[10673,10774,10775],[10674,10675,10776],[10674,10775,10776],[10675,10676,10777],[10675,10776,10777],[10676,10677,10778],[10676,10777,10778],[10677,10678,10779],[10677,10778,10779],[10678,10679,10780],[10678,10779,10780],[10679,10680,10781],[10679,10780,10781],[10680,10681,10782],[10680,10781,10782],[10681,10682,10783],[10681,10782,10783],[10682,10683,10784],[10682,10783,10784],[10683,10684,10785],[10683,10784,10785],[10684,10685,10786],[10684,10785,10786],[10687,10688,10789],[10687,10788,10789],[10688,10689,10790],[10688,10789,10790],[10689,10690,10791],[10689,10790,10791],[10690,10691,10792],[10690,10791,10792],[10691,10692,10793],[10691,10792,10793],[10692,10693,10794],[10692,10793,10794],[10693,10694,10795],[10693,10794,10795],[10694,10695,10796],[10694,10795,10796],[10695,10696,10797],[10695,10796,10797],[10696,10697,10798],[10696,10797,10798],[10697,10698,10799],[10697,10798,10799],[10698,10699,10800],[10698,10799,10800],[10699,10700,10801],[10699,10800,10801],[10700,10701,10802],[10700,10801,10802],[10701,10702,10803],[10701,10802,10803],[10706,10707,10808],[10706,10807,10808],[10707,10708,10809],[10707,10808,10809],[10708,10709,10810],[10708,10809,10810],[10709,10710,10811],[10709,10810,10811],[10710,10711,10812],[10710,10811,10812],[10711,10712,10813],[10711,10812,10813],[10712,10713,10814],[10712,10813,10814],[10713,10714,10815],[10713,10814,10815],[10716,10717,10818],[10717,10718,10819],[10717,10818,10819],[10718,10719,10820],[10718,10819,10820],[10719,10720,10821],[10719,10820,10821],[10720,10721,10822],[10720,10821,10822],[10721,10722,10823],[10721,10822,10823],[10722,10723,10824],[10722,10823,10824],[10723,10724,10825],[10723,10824,10825],[10724,10725,10826],[10724,10825,10826],[10725,10726,10827],[10725,10826,10827],[10726,10727,10828],[10726,10827,10828],[10727,10728,10829],[10727,10828,10829],[10728,10729,10830],[10728,10829,10830],[10730,10731,10832],[10730,10831,10832],[10731,10732,10833],[10731,10832,10833],[10732,10733,10834],[10732,10833,10834],[10733,10734,10835],[10733,10834,10835],[10734,10735,10836],[10734,10835,10836],[10735,10736,10837],[10735,10836,10837],[10736,10737,10838],[10736,10837,10838],[10737,10738,10839],[10737,10838,10839],[10738,10739,10840],[10738,10839,10840],[10739,10740,10841],[10739,10840,10841],[10740,10741,10842],[10740,10841,10842],[10743,10744,10845],[10743,10844,10845],[10744,10745,10846],[10744,10845,10846],[10745,10746,10847],[10745,10846,10847],[10746,10747,10848],[10746,10847,10848],[10747,10748,10849],[10747,10848,10849],[10748,10749,10850],[10748,10849,10850],[10754,10755,10856],[10754,10855,10856],[10755,10756,10857],[10755,10856,10857],[10756,10757,10858],[10756,10857,10858],[10757,10758,10859],[10757,10858,10859],[10758,10759,10860],[10758,10859,10860],[10759,10760,10861],[10759,10860,10861],[10761,10762,10863],[10761,10862,10863],[10762,10763,10864],[10762,10863,10864],[10763,10764,10865],[10763,10864,10865],[10764,10765,10866],[10764,10865,10866],[10765,10766,10867],[10765,10866,10867],[10766,10767,10868],[10766,10867,10868],[10767,10768,10869],[10767,10868,10869],[10769,10770,10871],[10769,10870,10871],[10770,10771,10872],[10770,10871,10872],[10771,10772,10873],[10771,10872,10873],[10772,10773,10874],[10772,10873,10874],[10773,10774,10875],[10773,10874,10875],[10774,10775,10876],[10774,10875,10876],[10775,10776,10877],[10775,10876,10877],[10776,10777,10878],[10776,10877,10878],[10777,10778,10879],[10777,10878,10879],[10778,10779,10880],[10778,10879,10880],[10779,10780,10881],[10779,10880,10881],[10780,10781,10882],[10780,10881,10882],[10781,10782,10883],[10781,10882,10883],[10782,10783,10884],[10782,10883,10884],[10783,10784,10885],[10783,10884,10885],[10784,10785,10886],[10784,10885,10886],[10785,10786,10887],[10785,10886,10887],[10788,10789,10890],[10788,10889,10890],[10789,10790,10891],[10789,10890,10891],[10790,10791,10892],[10790,10891,10892],[10791,10792,10893],[10791,10892,10893],[10792,10793,10894],[10792,10893,10894],[10793,10794,10895],[10793,10894,10895],[10794,10795,10896],[10794,10895,10896],[10795,10796,10897],[10795,10896,10897],[10796,10797,10898],[10796,10897,10898],[10797,10798,10899],[10797,10898,10899],[10798,10799,10900],[10798,10899,10900],[10799,10800,10901],[10799,10900,10901],[10800,10801,10902],[10800,10901,10902],[10801,10802,10903],[10801,10902,10903],[10802,10803,10904],[10802,10903,10904],[10807,10808,10909],[10807,10908,10909],[10808,10809,10910],[10808,10909,10910],[10809,10810,10911],[10809,10910,10911],[10810,10811,10912],[10810,10911,10912],[10811,10812,10913],[10811,10912,10913],[10812,10813,10914],[10812,10913,10914],[10813,10814,10915],[10813,10914,10915],[10814,10815,10916],[10814,10915,10916],[10818,10819,10920],[10818,10919,10920],[10819,10820,10921],[10819,10920,10921],[10820,10821,10922],[10820,10921,10922],[10821,10822,10923],[10821,10922,10923],[10822,10823,10924],[10822,10923,10924],[10823,10824,10925],[10823,10924,10925],[10824,10825,10926],[10824,10925,10926],[10825,10826,10927],[10825,10926,10927],[10826,10827,10928],[10826,10927,10928],[10827,10828,10929],[10827,10928,10929],[10828,10829,10930],[10828,10929,10930],[10829,10830,10931],[10829,10930,10931],[10831,10832,10933],[10831,10932,10933],[10832,10833,10934],[10832,10933,10934],[10833,10834,10935],[10833,10934,10935],[10834,10835,10936],[10834,10935,10936],[10835,10836,10937],[10835,10936,10937],[10836,10837,10938],[10836,10937,10938],[10837,10838,10939],[10837,10938,10939],[10838,10839,10940],[10838,10939,10940],[10839,10840,10941],[10839,10940,10941],[10840,10841,10942],[10840,10941,10942],[10841,10842,10943],[10841,10942,10943],[10844,10845,10946],[10844,10945,10946],[10845,10846,10947],[10845,10946,10947],[10846,10847,10948],[10846,10947,10948],[10847,10848,10949],[10847,10948,10949],[10848,10849,10950],[10848,10949,10950],[10849,10850,10951],[10849,10950,10951],[10855,10856,10957],[10855,10956,10957],[10856,10857,10958],[10856,10957,10958],[10857,10858,10959],[10857,10958,10959],[10858,10859,10960],[10858,10959,10960],[10859,10860,10961],[10859,10960,10961],[10860,10861,10962],[10860,10961,10962],[10862,10863,10964],[10862,10963,10964],[10863,10864,10965],[10863,10964,10965],[10864,10865,10966],[10864,10965,10966],[10865,10866,10967],[10865,10966,10967],[10866,10867,10968],[10866,10967,10968],[10867,10868,10969],[10867,10968,10969],[10868,10869,10970],[10868,10969,10970],[10870,10871,10972],[10870,10971,10972],[10871,10872,10973],[10871,10972,10973],[10872,10873,10974],[10872,10973,10974],[10873,10874,10975],[10873,10974,10975],[10874,10875,10976],[10874,10975,10976],[10875,10876,10977],[10875,10976,10977],[10876,10877,10978],[10876,10977,10978],[10877,10878,10979],[10877,10978,10979],[10878,10879,10980],[10878,10979,10980],[10879,10880,10981],[10879,10980,10981],[10880,10881,10982],[10880,10981,10982],[10881,10882,10983],[10881,10982,10983],[10882,10883,10984],[10882,10983,10984],[10883,10884,10985],[10883,10984,10985],[10884,10885,10986],[10884,10985,10986],[10885,10886,10987],[10885,10986,10987],[10888,10889,10990],[10888,10989,10990],[10889,10890,10991],[10889,10990,10991],[10890,10891,10992],[10890,10991,10992],[10891,10892,10993],[10891,10992,10993],[10892,10893,10994],[10892,10993,10994],[10893,10894,10995],[10893,10994,10995],[10894,10895,10996],[10894,10995,10996],[10895,10896,10997],[10895,10996,10997],[10896,10897,10998],[10896,10997,10998],[10897,10898,10999],[10897,10998,10999],[10898,10899,11000],[10898,10999,11000],[10899,10900,11001],[10899,11000,11001],[10900,10901,11002],[10900,11001,11002],[10901,10902,11003],[10901,11002,11003],[10902,10903,11004],[10902,11003,11004],[10903,10904,11005],[10903,11004,11005],[10908,10909,11010],[10908,11009,11010],[10909,10910,11011],[10909,11010,11011],[10910,10911,11012],[10910,11011,11012],[10911,10912,11013],[10911,11012,11013],[10912,10913,11014],[10912,11013,11014],[10913,10914,11015],[10913,11014,11015],[10914,10915,11016],[10914,11015,11016],[10915,10916,11017],[10915,11016,11017],[10919,10920,11021],[10919,11020,11021],[10920,10921,11022],[10920,11021,11022],[10921,10922,11023],[10921,11022,11023],[10922,10923,11024],[10922,11023,11024],[10923,10924,11025],[10923,11024,11025],[10924,10925,11026],[10924,11025,11026],[10925,10926,11027],[10925,11026,11027],[10926,10927,11028],[10926,11027,11028],[10927,10928,11029],[10927,11028,11029],[10928,10929,11030],[10928,11029,11030],[10929,10930,11031],[10929,11030,11031],[10930,10931,11032],[10930,11031,11032],[10932,10933,11034],[10932,11033,11034],[10933,10934,11035],[10933,11034,11035],[10934,10935,11036],[10934,11035,11036],[10935,10936,11037],[10935,11036,11037],[10936,10937,11038],[10936,11037,11038],[10937,10938,11039],[10937,11038,11039],[10938,10939,11040],[10938,11039,11040],[10939,10940,11041],[10939,11040,11041],[10940,10941,11042],[10940,11041,11042],[10941,10942,11043],[10941,11042,11043],[10942,10943,11044],[10942,11043,11044],[10945,10946,11047],[10945,11046,11047],[10946,10947,11048],[10946,11047,11048],[10947,10948,11049],[10947,11048,11049],[10948,10949,11050],[10948,11049,11050],[10949,10950,11051],[10949,11050,11051],[10950,10951,11052],[10950,11051,11052],[10956,10957,11058],[10956,11057,11058],[10957,10958,11059],[10957,11058,11059],[10958,10959,11060],[10958,11059,11060],[10959,10960,11061],[10959,11060,11061],[10960,10961,11062],[10960,11061,11062],[10961,10962,11063],[10961,11062,11063],[10963,10964,11065],[10963,11064,11065],[10964,10965,11066],[10964,11065,11066],[10965,10966,11067],[10965,11066,11067],[10966,10967,11068],[10966,11067,11068],[10967,10968,11069],[10967,11068,11069],[10968,10969,11070],[10968,11069,11070],[10969,10970,11071],[10969,11070,11071],[10971,10972,11073],[10971,11072,11073],[10972,10973,11074],[10972,11073,11074],[10973,10974,11075],[10973,11074,11075],[10974,10975,11076],[10974,11075,11076],[10975,10976,11077],[10975,11076,11077],[10976,10977,11078],[10976,11077,11078],[10977,10978,11079],[10977,11078,11079],[10978,10979,11080],[10978,11079,11080],[10979,10980,11081],[10979,11080,11081],[10980,10981,11082],[10980,11081,11082],[10981,10982,11083],[10981,11082,11083],[10982,10983,11084],[10982,11083,11084],[10983,10984,11085],[10983,11084,11085],[10984,10985,11086],[10984,11085,11086],[10985,10986,11087],[10985,11086,11087],[10986,10987,11088],[10986,11087,11088],[10989,10990,11091],[10989,11090,11091],[10990,10991,11092],[10990,11091,11092],[10991,10992,11093],[10991,11092,11093],[10992,10993,11094],[10992,11093,11094],[10993,10994,11095],[10993,11094,11095],[10994,10995,11096],[10994,11095,11096],[10995,10996,11097],[10995,11096,11097],[10996,10997,11098],[10996,11097,11098],[10997,10998,11099],[10997,11098,11099],[10998,10999,11100],[10998,11099,11100],[10999,11000,11101],[10999,11100,11101],[11000,11001,11102],[11000,11101,11102],[11001,11002,11103],[11001,11102,11103],[11002,11003,11104],[11002,11103,11104],[11003,11004,11105],[11003,11104,11105],[11004,11005,11106],[11004,11105,11106],[11009,11010,11111],[11009,11110,11111],[11010,11011,11112],[11010,11111,11112],[11011,11012,11113],[11011,11112,11113],[11012,11013,11114],[11012,11113,11114],[11013,11014,11115],[11013,11114,11115],[11014,11015,11116],[11014,11115,11116],[11015,11016,11117],[11015,11116,11117],[11016,11017,11118],[11016,11117,11118],[11017,11018,11119],[11017,11118,11119],[11020,11021,11122],[11020,11121,11122],[11021,11022,11123],[11021,11122,11123],[11022,11023,11124],[11022,11123,11124],[11023,11024,11125],[11023,11124,11125],[11024,11025,11126],[11024,11125,11126],[11025,11026,11127],[11025,11126,11127],[11026,11027,11128],[11026,11127,11128],[11027,11028,11129],[11027,11128,11129],[11028,11029,11130],[11028,11129,11130],[11029,11030,11131],[11029,11130,11131],[11030,11031,11132],[11030,11131,11132],[11031,11032,11133],[11031,11132,11133],[11033,11034,11135],[11034,11035,11136],[11034,11135,11136],[11035,11036,11137],[11035,11136,11137],[11036,11037,11138],[11036,11137,11138],[11037,11038,11139],[11037,11138,11139],[11038,11039,11140],[11038,11139,11140],[11039,11040,11141],[11039,11140,11141],[11040,11041,11142],[11040,11141,11142],[11041,11042,11143],[11041,11142,11143],[11042,11043,11144],[11042,11143,11144],[11043,11044,11145],[11043,11144,11145],[11046,11047,11148],[11046,11147,11148],[11047,11048,11149],[11047,11148,11149],[11048,11049,11150],[11048,11149,11150],[11049,11050,11151],[11049,11150,11151],[11050,11051,11152],[11050,11151,11152],[11051,11052,11153],[11051,11152,11153],[11057,11058,11159],[11057,11158,11159],[11058,11059,11160],[11058,11159,11160],[11059,11060,11161],[11059,11160,11161],[11060,11061,11162],[11060,11161,11162],[11061,11062,11163],[11061,11162,11163],[11062,11063,11164],[11062,11163,11164],[11064,11065,11166],[11064,11165,11166],[11065,11066,11167],[11065,11166,11167],[11066,11067,11168],[11066,11167,11168],[11067,11068,11169],[11067,11168,11169],[11068,11069,11170],[11068,11169,11170],[11069,11070,11171],[11069,11170,11171],[11070,11071,11172],[11070,11171,11172],[11072,11073,11174],[11072,11173,11174],[11073,11074,11175],[11073,11174,11175],[11074,11075,11176],[11074,11175,11176],[11075,11076,11177],[11075,11176,11177],[11076,11077,11178],[11076,11177,11178],[11077,11078,11179],[11077,11178,11179],[11078,11079,11180],[11078,11179,11180],[11079,11080,11181],[11079,11180,11181],[11080,11081,11182],[11080,11181,11182],[11081,11082,11183],[11081,11182,11183],[11082,11083,11184],[11082,11183,11184],[11083,11084,11185],[11083,11184,11185],[11084,11085,11186],[11084,11185,11186],[11085,11086,11187],[11085,11186,11187],[11086,11087,11188],[11086,11187,11188],[11087,11088,11189],[11087,11188,11189],[11090,11091,11192],[11090,11191,11192],[11091,11092,11193],[11091,11192,11193],[11092,11093,11194],[11092,11193,11194],[11093,11094,11195],[11093,11194,11195],[11094,11095,11196],[11094,11195,11196],[11095,11096,11197],[11095,11196,11197],[11096,11097,11198],[11096,11197,11198],[11097,11098,11199],[11097,11198,11199],[11098,11099,11200],[11098,11199,11200],[11099,11100,11201],[11099,11200,11201],[11100,11101,11202],[11100,11201,11202],[11101,11102,11203],[11101,11202,11203],[11102,11103,11204],[11102,11203,11204],[11103,11104,11205],[11103,11204,11205],[11104,11105,11206],[11104,11205,11206],[11105,11106,11207],[11105,11206,11207],[11110,11111,11212],[11110,11211,11212],[11111,11112,11213],[11111,11212,11213],[11112,11113,11214],[11112,11213,11214],[11113,11114,11215],[11113,11214,11215],[11114,11115,11216],[11114,11215,11216],[11115,11116,11217],[11115,11216,11217],[11116,11117,11218],[11116,11217,11218],[11117,11118,11219],[11117,11218,11219],[11118,11119,11220],[11118,11219,11220],[11121,11122,11223],[11121,11222,11223],[11122,11123,11224],[11122,11223,11224],[11123,11124,11225],[11123,11224,11225],[11124,11125,11226],[11124,11225,11226],[11125,11126,11227],[11125,11226,11227],[11126,11127,11228],[11126,11227,11228],[11127,11128,11229],[11127,11228,11229],[11128,11129,11230],[11128,11229,11230],[11129,11130,11231],[11129,11230,11231],[11130,11131,11232],[11130,11231,11232],[11131,11132,11233],[11131,11232,11233],[11132,11133,11234],[11132,11233,11234],[11135,11136,11237],[11135,11236,11237],[11136,11137,11238],[11136,11237,11238],[11137,11138,11239],[11137,11238,11239],[11138,11139,11240],[11138,11239,11240],[11139,11140,11241],[11139,11240,11241],[11140,11141,11242],[11140,11241,11242],[11141,11142,11243],[11141,11242,11243],[11142,11143,11244],[11142,11243,11244],[11143,11144,11245],[11143,11244,11245],[11144,11145,11246],[11144,11245,11246],[11147,11148,11249],[11147,11248,11249],[11148,11149,11250],[11148,11249,11250],[11149,11150,11251],[11149,11250,11251],[11150,11151,11252],[11150,11251,11252],[11151,11152,11253],[11151,11252,11253],[11152,11153,11254],[11152,11253,11254],[11155,11156,11257],[11155,11256,11257],[11158,11159,11260],[11158,11259,11260],[11159,11160,11261],[11159,11260,11261],[11160,11161,11262],[11160,11261,11262],[11161,11162,11263],[11161,11262,11263],[11162,11163,11264],[11162,11263,11264],[11163,11164,11265],[11163,11264,11265],[11165,11166,11267],[11165,11266,11267],[11166,11167,11268],[11166,11267,11268],[11167,11168,11269],[11167,11268,11269],[11168,11169,11270],[11168,11269,11270],[11169,11170,11271],[11169,11270,11271],[11170,11171,11272],[11170,11271,11272],[11171,11172,11273],[11171,11272,11273],[11173,11174,11275],[11173,11274,11275],[11174,11175,11276],[11174,11275,11276],[11175,11176,11277],[11175,11276,11277],[11176,11177,11278],[11176,11277,11278],[11177,11178,11279],[11177,11278,11279],[11178,11179,11280],[11178,11279,11280],[11179,11180,11281],[11179,11280,11281],[11180,11181,11282],[11180,11281,11282],[11181,11182,11283],[11181,11282,11283],[11182,11183,11284],[11182,11283,11284],[11183,11184,11285],[11183,11284,11285],[11184,11185,11286],[11184,11285,11286],[11185,11186,11287],[11185,11286,11287],[11186,11187,11288],[11186,11287,11288],[11187,11188,11289],[11187,11288,11289],[11188,11189,11290],[11188,11289,11290],[11191,11192,11293],[11191,11292,11293],[11192,11193,11294],[11192,11293,11294],[11193,11194,11295],[11193,11294,11295],[11194,11195,11296],[11194,11295,11296],[11195,11196,11297],[11195,11296,11297],[11196,11197,11298],[11196,11297,11298],[11197,11198,11299],[11197,11298,11299],[11198,11199,11300],[11198,11299,11300],[11199,11200,11301],[11199,11300,11301],[11200,11201,11302],[11200,11301,11302],[11201,11202,11303],[11201,11302,11303],[11202,11203,11304],[11202,11303,11304],[11203,11204,11305],[11203,11304,11305],[11204,11205,11306],[11204,11305,11306],[11205,11206,11307],[11205,11306,11307],[11206,11207,11308],[11206,11307,11308],[11211,11212,11313],[11211,11312,11313],[11212,11213,11314],[11212,11313,11314],[11213,11214,11315],[11213,11314,11315],[11214,11215,11316],[11214,11315,11316],[11215,11216,11317],[11215,11316,11317],[11216,11217,11318],[11216,11317,11318],[11217,11218,11319],[11217,11318,11319],[11218,11219,11320],[11218,11319,11320],[11219,11220,11321],[11219,11320,11321],[11222,11223,11324],[11222,11323,11324],[11223,11224,11325],[11223,11324,11325],[11224,11225,11326],[11224,11325,11326],[11225,11226,11327],[11225,11326,11327],[11226,11227,11328],[11226,11327,11328],[11227,11228,11329],[11227,11328,11329],[11228,11229,11330],[11228,11329,11330],[11229,11230,11331],[11229,11330,11331],[11230,11231,11332],[11230,11331,11332],[11231,11232,11333],[11231,11332,11333],[11232,11233,11334],[11232,11333,11334],[11233,11234,11335],[11233,11334,11335],[11236,11237,11338],[11236,11337,11338],[11237,11238,11339],[11237,11338,11339],[11238,11239,11340],[11238,11339,11340],[11239,11240,11341],[11239,11340,11341],[11240,11241,11342],[11240,11341,11342],[11241,11242,11343],[11241,11342,11343],[11242,11243,11344],[11242,11343,11344],[11243,11244,11345],[11243,11344,11345],[11244,11245,11346],[11244,11345,11346],[11245,11246,11347],[11245,11346,11347],[11248,11249,11350],[11248,11349,11350],[11249,11250,11351],[11249,11350,11351],[11250,11251,11352],[11250,11351,11352],[11251,11252,11353],[11251,11352,11353],[11252,11253,11354],[11252,11353,11354],[11256,11257,11358],[11256,11357,11358],[11259,11260,11361],[11259,11360,11361],[11260,11261,11362],[11260,11361,11362],[11261,11262,11363],[11261,11362,11363],[11262,11263,11364],[11262,11363,11364],[11263,11264,11365],[11263,11364,11365],[11264,11265,11366],[11264,11365,11366],[11266,11267,11368],[11266,11367,11368],[11267,11268,11369],[11267,11368,11369],[11268,11269,11370],[11268,11369,11370],[11269,11270,11371],[11269,11370,11371],[11270,11271,11372],[11270,11371,11372],[11271,11272,11373],[11271,11372,11373],[11272,11273,11374],[11272,11373,11374],[11274,11275,11376],[11274,11375,11376],[11275,11276,11377],[11275,11376,11377],[11276,11277,11378],[11276,11377,11378],[11277,11278,11379],[11277,11378,11379],[11278,11279,11380],[11278,11379,11380],[11279,11280,11381],[11279,11380,11381],[11280,11281,11382],[11280,11381,11382],[11281,11282,11383],[11281,11382,11383],[11282,11283,11384],[11282,11383,11384],[11283,11284,11385],[11283,11384,11385],[11284,11285,11386],[11284,11385,11386],[11285,11286,11387],[11285,11386,11387],[11286,11287,11388],[11286,11387,11388],[11287,11288,11389],[11287,11388,11389],[11288,11289,11390],[11288,11389,11390],[11289,11290,11391],[11289,11390,11391],[11291,11292,11393],[11291,11392,11393],[11292,11293,11394],[11292,11393,11394],[11293,11294,11395],[11293,11394,11395],[11294,11295,11396],[11294,11395,11396],[11295,11296,11397],[11295,11396,11397],[11296,11297,11398],[11296,11397,11398],[11297,11298,11399],[11297,11398,11399],[11298,11299,11400],[11298,11399,11400],[11299,11300,11401],[11299,11400,11401],[11300,11301,11402],[11300,11401,11402],[11301,11302,11403],[11301,11402,11403],[11302,11303,11404],[11302,11403,11404],[11303,11304,11405],[11303,11404,11405],[11304,11305,11406],[11304,11405,11406],[11305,11306,11407],[11305,11406,11407],[11306,11307,11408],[11306,11407,11408],[11307,11308,11409],[11307,11408,11409],[11308,11309,11410],[11308,11409,11410],[11312,11313,11414],[11312,11413,11414],[11313,11314,11415],[11313,11414,11415],[11314,11315,11416],[11314,11415,11416],[11315,11316,11417],[11315,11416,11417],[11316,11317,11418],[11316,11417,11418],[11317,11318,11419],[11317,11418,11419],[11318,11319,11420],[11318,11419,11420],[11319,11320,11421],[11319,11420,11421],[11320,11321,11422],[11320,11421,11422],[11323,11324,11425],[11323,11424,11425],[11324,11325,11426],[11324,11425,11426],[11325,11326,11427],[11325,11426,11427],[11326,11327,11428],[11326,11427,11428],[11327,11328,11429],[11327,11428,11429],[11328,11329,11430],[11328,11429,11430],[11329,11330,11431],[11329,11430,11431],[11330,11331,11432],[11330,11431,11432],[11331,11332,11433],[11331,11432,11433],[11332,11333,11434],[11332,11433,11434],[11333,11334,11435],[11333,11434,11435],[11334,11335,11436],[11334,11435,11436],[11337,11338,11439],[11337,11438,11439],[11338,11339,11440],[11338,11439,11440],[11339,11340,11441],[11339,11440,11441],[11340,11341,11442],[11340,11441,11442],[11341,11342,11443],[11341,11442,11443],[11342,11343,11444],[11342,11443,11444],[11343,11344,11445],[11343,11444,11445],[11344,11345,11446],[11344,11445,11446],[11345,11346,11447],[11345,11446,11447],[11346,11347,11448],[11346,11447,11448],[11349,11350,11451],[11349,11450,11451],[11350,11351,11452],[11350,11451,11452],[11351,11352,11453],[11351,11452,11453],[11352,11353,11454],[11352,11453,11454],[11353,11354,11455],[11353,11454,11455],[11357,11358,11459],[11357,11458,11459],[11360,11361,11462],[11360,11461,11462],[11361,11362,11463],[11361,11462,11463],[11362,11363,11464],[11362,11463,11464],[11363,11364,11465],[11363,11464,11465],[11364,11365,11466],[11364,11465,11466],[11365,11366,11467],[11365,11466,11467],[11367,11368,11469],[11367,11468,11469],[11368,11369,11470],[11368,11469,11470],[11369,11370,11471],[11369,11470,11471],[11370,11371,11472],[11370,11471,11472],[11371,11372,11473],[11371,11472,11473],[11372,11373,11474],[11372,11473,11474],[11373,11374,11475],[11373,11474,11475],[11375,11376,11477],[11375,11476,11477],[11376,11377,11478],[11376,11477,11478],[11377,11378,11479],[11377,11478,11479],[11378,11379,11480],[11378,11479,11480],[11379,11380,11481],[11379,11480,11481],[11380,11381,11482],[11380,11481,11482],[11381,11382,11483],[11381,11482,11483],[11382,11383,11484],[11382,11483,11484],[11383,11384,11485],[11383,11484,11485],[11384,11385,11486],[11384,11485,11486],[11385,11386,11487],[11385,11486,11487],[11386,11387,11488],[11386,11487,11488],[11387,11388,11489],[11387,11488,11489],[11388,11389,11490],[11388,11489,11490],[11389,11390,11491],[11389,11490,11491],[11390,11391,11492],[11390,11491,11492],[11392,11393,11494],[11392,11493,11494],[11393,11394,11495],[11393,11494,11495],[11394,11395,11496],[11394,11495,11496],[11395,11396,11497],[11395,11496,11497],[11396,11397,11498],[11396,11497,11498],[11397,11398,11499],[11397,11498,11499],[11398,11399,11500],[11398,11499,11500],[11399,11400,11501],[11399,11500,11501],[11400,11401,11502],[11400,11501,11502],[11401,11402,11503],[11401,11502,11503],[11402,11403,11504],[11402,11503,11504],[11403,11404,11505],[11403,11504,11505],[11404,11405,11506],[11404,11505,11506],[11405,11406,11507],[11405,11506,11507],[11406,11407,11508],[11406,11507,11508],[11407,11408,11509],[11407,11508,11509],[11408,11409,11510],[11408,11509,11510],[11409,11410,11511],[11409,11510,11511],[11413,11414,11515],[11413,11514,11515],[11414,11415,11516],[11414,11515,11516],[11415,11416,11517],[11415,11516,11517],[11416,11417,11518],[11416,11517,11518],[11417,11418,11519],[11417,11518,11519],[11418,11419,11520],[11418,11519,11520],[11419,11420,11521],[11419,11520,11521],[11420,11421,11522],[11420,11521,11522],[11421,11422,11523],[11421,11522,11523],[11424,11425,11526],[11425,11426,11527],[11425,11526,11527],[11426,11427,11528],[11426,11527,11528],[11427,11428,11529],[11427,11528,11529],[11428,11429,11530],[11428,11529,11530],[11429,11430,11531],[11429,11530,11531],[11430,11431,11532],[11430,11531,11532],[11431,11432,11533],[11431,11532,11533],[11432,11433,11534],[11432,11533,11534],[11433,11434,11535],[11433,11534,11535],[11434,11435,11536],[11434,11535,11536],[11435,11436,11537],[11435,11536,11537],[11438,11439,11540],[11438,11539,11540],[11439,11440,11541],[11439,11540,11541],[11440,11441,11542],[11440,11541,11542],[11441,11442,11543],[11441,11542,11543],[11442,11443,11544],[11442,11543,11544],[11443,11444,11545],[11443,11544,11545],[11444,11445,11546],[11444,11545,11546],[11445,11446,11547],[11445,11546,11547],[11446,11447,11548],[11446,11547,11548],[11447,11448,11549],[11447,11548,11549],[11450,11451,11552],[11450,11551,11552],[11451,11452,11553],[11451,11552,11553],[11452,11453,11554],[11452,11553,11554],[11453,11454,11555],[11453,11554,11555],[11454,11455,11556],[11454,11555,11556],[11458,11459,11560],[11458,11559,11560],[11461,11462,11563],[11461,11562,11563],[11462,11463,11564],[11462,11563,11564],[11463,11464,11565],[11463,11564,11565],[11464,11465,11566],[11464,11565,11566],[11465,11466,11567],[11465,11566,11567],[11466,11467,11568],[11466,11567,11568],[11468,11469,11570],[11468,11569,11570],[11469,11470,11571],[11469,11570,11571],[11470,11471,11572],[11470,11571,11572],[11471,11472,11573],[11471,11572,11573],[11472,11473,11574],[11472,11573,11574],[11473,11474,11575],[11473,11574,11575],[11474,11475,11576],[11474,11575,11576],[11476,11477,11578],[11476,11577,11578],[11477,11478,11579],[11477,11578,11579],[11478,11479,11580],[11478,11579,11580],[11479,11480,11581],[11479,11580,11581],[11480,11481,11582],[11480,11581,11582],[11481,11482,11583],[11481,11582,11583],[11482,11483,11584],[11482,11583,11584],[11483,11484,11585],[11483,11584,11585],[11484,11485,11586],[11484,11585,11586],[11485,11486,11587],[11485,11586,11587],[11486,11487,11588],[11486,11587,11588],[11487,11488,11589],[11487,11588,11589],[11488,11489,11590],[11488,11589,11590],[11489,11490,11591],[11489,11590,11591],[11490,11491,11592],[11490,11591,11592],[11493,11494,11595],[11493,11594,11595],[11494,11495,11596],[11494,11595,11596],[11495,11496,11597],[11495,11596,11597],[11496,11497,11598],[11496,11597,11598],[11497,11498,11599],[11497,11598,11599],[11498,11499,11600],[11498,11599,11600],[11499,11500,11601],[11499,11600,11601],[11500,11501,11602],[11500,11601,11602],[11501,11502,11603],[11501,11602,11603],[11502,11503,11604],[11502,11603,11604],[11503,11504,11605],[11503,11604,11605],[11504,11505,11606],[11504,11605,11606],[11505,11506,11607],[11505,11606,11607],[11506,11507,11608],[11506,11607,11608],[11507,11508,11609],[11507,11608,11609],[11508,11509,11610],[11508,11609,11610],[11509,11510,11611],[11509,11610,11611],[11514,11515,11616],[11514,11615,11616],[11515,11516,11617],[11515,11616,11617],[11516,11517,11618],[11516,11617,11618],[11517,11518,11619],[11517,11618,11619],[11518,11519,11620],[11518,11619,11620],[11519,11520,11621],[11519,11620,11621],[11520,11521,11622],[11520,11621,11622],[11521,11522,11623],[11521,11622,11623],[11522,11523,11624],[11522,11623,11624],[11526,11527,11628],[11526,11627,11628],[11527,11528,11629],[11527,11628,11629],[11528,11529,11630],[11528,11629,11630],[11529,11530,11631],[11529,11630,11631],[11530,11531,11632],[11530,11631,11632],[11531,11532,11633],[11531,11632,11633],[11532,11533,11634],[11532,11633,11634],[11533,11534,11635],[11533,11634,11635],[11534,11535,11636],[11534,11635,11636],[11535,11536,11637],[11535,11636,11637],[11536,11537,11638],[11536,11637,11638],[11539,11540,11641],[11539,11640,11641],[11540,11541,11642],[11540,11641,11642],[11541,11542,11643],[11541,11642,11643],[11542,11543,11644],[11542,11643,11644],[11543,11544,11645],[11543,11644,11645],[11544,11545,11646],[11544,11645,11646],[11545,11546,11647],[11545,11646,11647],[11546,11547,11648],[11546,11647,11648],[11547,11548,11649],[11547,11648,11649],[11548,11549,11650],[11548,11649,11650],[11551,11552,11653],[11551,11652,11653],[11552,11553,11654],[11552,11653,11654],[11553,11554,11655],[11553,11654,11655],[11554,11555,11656],[11554,11655,11656],[11555,11556,11657],[11555,11656,11657],[11559,11560,11661],[11559,11660,11661],[11562,11563,11664],[11562,11663,11664],[11563,11564,11665],[11563,11664,11665],[11564,11565,11666],[11564,11665,11666],[11565,11566,11667],[11565,11666,11667],[11566,11567,11668],[11566,11667,11668],[11567,11568,11669],[11567,11668,11669],[11569,11570,11671],[11569,11670,11671],[11570,11571,11672],[11570,11671,11672],[11571,11572,11673],[11571,11672,11673],[11572,11573,11674],[11572,11673,11674],[11573,11574,11675],[11573,11674,11675],[11574,11575,11676],[11574,11675,11676],[11575,11576,11677],[11575,11676,11677],[11577,11578,11679],[11577,11678,11679],[11578,11579,11680],[11578,11679,11680],[11579,11580,11681],[11579,11680,11681],[11580,11581,11682],[11580,11681,11682],[11581,11582,11683],[11581,11682,11683],[11582,11583,11684],[11582,11683,11684],[11583,11584,11685],[11583,11684,11685],[11584,11585,11686],[11584,11685,11686],[11585,11586,11687],[11585,11686,11687],[11586,11587,11688],[11586,11687,11688],[11587,11588,11689],[11587,11688,11689],[11588,11589,11690],[11588,11689,11690],[11589,11590,11691],[11589,11690,11691],[11590,11591,11692],[11590,11691,11692],[11591,11592,11693],[11591,11692,11693],[11594,11595,11696],[11594,11695,11696],[11595,11596,11697],[11595,11696,11697],[11596,11597,11698],[11596,11697,11698],[11597,11598,11699],[11597,11698,11699],[11598,11599,11700],[11598,11699,11700],[11599,11600,11701],[11599,11700,11701],[11600,11601,11702],[11600,11701,11702],[11601,11602,11703],[11601,11702,11703],[11602,11603,11704],[11602,11703,11704],[11603,11604,11705],[11603,11704,11705],[11604,11605,11706],[11604,11705,11706],[11605,11606,11707],[11605,11706,11707],[11606,11607,11708],[11606,11707,11708],[11607,11608,11709],[11607,11708,11709],[11608,11609,11710],[11608,11709,11710],[11609,11610,11711],[11609,11710,11711],[11610,11611,11712],[11610,11711,11712],[11615,11616,11717],[11615,11716,11717],[11616,11617,11718],[11616,11717,11718],[11617,11618,11719],[11617,11718,11719],[11618,11619,11720],[11618,11719,11720],[11619,11620,11721],[11619,11720,11721],[11620,11621,11722],[11620,11721,11722],[11621,11622,11723],[11621,11722,11723],[11622,11623,11724],[11622,11723,11724],[11623,11624,11725],[11623,11724,11725],[11627,11628,11729],[11627,11728,11729],[11628,11629,11730],[11628,11729,11730],[11629,11630,11731],[11629,11730,11731],[11630,11631,11732],[11630,11731,11732],[11631,11632,11733],[11631,11732,11733],[11632,11633,11734],[11632,11733,11734],[11633,11634,11735],[11633,11734,11735],[11634,11635,11736],[11634,11735,11736],[11635,11636,11737],[11635,11736,11737],[11636,11637,11738],[11636,11737,11738],[11637,11638,11739],[11637,11738,11739],[11638,11639,11740],[11638,11739,11740],[11640,11641,11742],[11640,11741,11742],[11641,11642,11743],[11641,11742,11743],[11642,11643,11744],[11642,11743,11744],[11643,11644,11745],[11643,11744,11745],[11644,11645,11746],[11644,11745,11746],[11645,11646,11747],[11645,11746,11747],[11646,11647,11748],[11646,11747,11748],[11647,11648,11749],[11647,11748,11749],[11648,11649,11750],[11648,11749,11750],[11649,11650,11751],[11649,11750,11751],[11652,11653,11754],[11652,11753,11754],[11653,11654,11755],[11653,11754,11755],[11654,11655,11756],[11654,11755,11756],[11655,11656,11757],[11655,11756,11757],[11656,11657,11758],[11656,11757,11758],[11660,11661,11762],[11660,11761,11762],[11663,11664,11765],[11663,11764,11765],[11664,11665,11766],[11664,11765,11766],[11665,11666,11767],[11665,11766,11767],[11666,11667,11768],[11666,11767,11768],[11667,11668,11769],[11667,11768,11769],[11668,11669,11770],[11668,11769,11770],[11670,11671,11772],[11670,11771,11772],[11671,11672,11773],[11671,11772,11773],[11672,11673,11774],[11672,11773,11774],[11673,11674,11775],[11673,11774,11775],[11674,11675,11776],[11674,11775,11776],[11675,11676,11777],[11675,11776,11777],[11676,11677,11778],[11676,11777,11778],[11678,11679,11780],[11678,11779,11780],[11679,11680,11781],[11679,11780,11781],[11680,11681,11782],[11680,11781,11782],[11681,11682,11783],[11681,11782,11783],[11682,11683,11784],[11682,11783,11784],[11683,11684,11785],[11683,11784,11785],[11684,11685,11786],[11684,11785,11786],[11685,11686,11787],[11685,11786,11787],[11686,11687,11788],[11686,11787,11788],[11687,11688,11789],[11687,11788,11789],[11688,11689,11790],[11688,11789,11790],[11689,11690,11791],[11689,11790,11791],[11690,11691,11792],[11690,11791,11792],[11691,11692,11793],[11691,11792,11793],[11692,11693,11794],[11692,11793,11794],[11695,11696,11797],[11695,11796,11797],[11696,11697,11798],[11696,11797,11798],[11697,11698,11799],[11697,11798,11799],[11698,11699,11800],[11698,11799,11800],[11699,11700,11801],[11699,11800,11801],[11700,11701,11802],[11700,11801,11802],[11701,11702,11803],[11701,11802,11803],[11702,11703,11804],[11702,11803,11804],[11703,11704,11805],[11703,11804,11805],[11704,11705,11806],[11704,11805,11806],[11705,11706,11807],[11705,11806,11807],[11706,11707,11808],[11706,11807,11808],[11707,11708,11809],[11707,11808,11809],[11708,11709,11810],[11708,11809,11810],[11709,11710,11811],[11709,11810,11811],[11710,11711,11812],[11710,11811,11812],[11711,11712,11813],[11711,11812,11813],[11716,11717,11818],[11716,11817,11818],[11717,11718,11819],[11717,11818,11819],[11718,11719,11820],[11718,11819,11820],[11719,11720,11821],[11719,11820,11821],[11720,11721,11822],[11720,11821,11822],[11721,11722,11823],[11721,11822,11823],[11722,11723,11824],[11722,11823,11824],[11723,11724,11825],[11723,11824,11825],[11724,11725,11826],[11724,11825,11826],[11725,11726,11827],[11725,11826,11827],[11728,11729,11830],[11728,11829,11830],[11729,11730,11831],[11729,11830,11831],[11730,11731,11832],[11730,11831,11832],[11731,11732,11833],[11731,11832,11833],[11732,11733,11834],[11732,11833,11834],[11733,11734,11835],[11733,11834,11835],[11734,11735,11836],[11734,11835,11836],[11735,11736,11837],[11735,11836,11837],[11736,11737,11838],[11736,11837,11838],[11737,11738,11839],[11737,11838,11839],[11738,11739,11840],[11738,11839,11840],[11739,11740,11841],[11739,11840,11841],[11741,11742,11843],[11741,11842,11843],[11742,11743,11844],[11742,11843,11844],[11743,11744,11845],[11743,11844,11845],[11744,11745,11846],[11744,11845,11846],[11745,11746,11847],[11745,11846,11847],[11746,11747,11848],[11746,11847,11848],[11747,11748,11849],[11747,11848,11849],[11748,11749,11850],[11748,11849,11850],[11749,11750,11851],[11749,11850,11851],[11750,11751,11852],[11750,11851,11852],[11753,11754,11855],[11753,11854,11855],[11754,11755,11856],[11754,11855,11856],[11755,11756,11857],[11755,11856,11857],[11756,11757,11858],[11756,11857,11858],[11757,11758,11859],[11757,11858,11859],[11761,11762,11863],[11761,11862,11863],[11764,11765,11866],[11764,11865,11866],[11765,11766,11867],[11765,11866,11867],[11766,11767,11868],[11766,11867,11868],[11767,11768,11869],[11767,11868,11869],[11768,11769,11870],[11768,11869,11870],[11769,11770,11871],[11769,11870,11871],[11771,11772,11873],[11771,11872,11873],[11772,11773,11874],[11772,11873,11874],[11773,11774,11875],[11773,11874,11875],[11774,11775,11876],[11774,11875,11876],[11775,11776,11877],[11775,11876,11877],[11776,11777,11878],[11776,11877,11878],[11777,11778,11879],[11777,11878,11879],[11779,11780,11881],[11779,11880,11881],[11780,11781,11882],[11780,11881,11882],[11781,11782,11883],[11781,11882,11883],[11782,11783,11884],[11782,11883,11884],[11783,11784,11885],[11783,11884,11885],[11784,11785,11886],[11784,11885,11886],[11785,11786,11887],[11785,11886,11887],[11786,11787,11888],[11786,11887,11888],[11787,11788,11889],[11787,11888,11889],[11788,11789,11890],[11788,11889,11890],[11789,11790,11891],[11789,11890,11891],[11790,11791,11892],[11790,11891,11892],[11791,11792,11893],[11791,11892,11893],[11792,11793,11894],[11792,11893,11894],[11793,11794,11895],[11793,11894,11895],[11796,11797,11898],[11796,11897,11898],[11797,11798,11899],[11797,11898,11899],[11798,11799,11900],[11798,11899,11900],[11799,11800,11901],[11799,11900,11901],[11800,11801,11902],[11800,11901,11902],[11801,11802,11903],[11801,11902,11903],[11802,11803,11904],[11802,11903,11904],[11803,11804,11905],[11803,11904,11905],[11804,11805,11906],[11804,11905,11906],[11805,11806,11907],[11805,11906,11907],[11806,11807,11908],[11806,11907,11908],[11807,11808,11909],[11807,11908,11909],[11808,11809,11910],[11808,11909,11910],[11809,11810,11911],[11809,11910,11911],[11810,11811,11912],[11810,11911,11912],[11811,11812,11913],[11811,11912,11913],[11812,11813,11914],[11812,11913,11914],[11817,11818,11919],[11817,11918,11919],[11818,11819,11920],[11818,11919,11920],[11819,11820,11921],[11819,11920,11921],[11820,11821,11922],[11820,11921,11922],[11821,11822,11923],[11821,11922,11923],[11822,11823,11924],[11822,11923,11924],[11823,11824,11925],[11823,11924,11925],[11824,11825,11926],[11824,11925,11926],[11825,11826,11927],[11825,11926,11927],[11826,11827,11928],[11826,11927,11928],[11829,11830,11931],[11829,11930,11931],[11830,11831,11932],[11830,11931,11932],[11831,11832,11933],[11831,11932,11933],[11832,11833,11934],[11832,11933,11934],[11833,11834,11935],[11833,11934,11935],[11834,11835,11936],[11834,11935,11936],[11835,11836,11937],[11835,11936,11937],[11836,11837,11938],[11836,11937,11938],[11837,11838,11939],[11837,11938,11939],[11838,11839,11940],[11838,11939,11940],[11839,11840,11941],[11839,11940,11941],[11840,11841,11942],[11840,11941,11942],[11842,11843,11944],[11842,11943,11944],[11843,11844,11945],[11843,11944,11945],[11844,11845,11946],[11844,11945,11946],[11845,11846,11947],[11845,11946,11947],[11846,11847,11948],[11846,11947,11948],[11847,11848,11949],[11847,11948,11949],[11848,11849,11950],[11848,11949,11950],[11849,11850,11951],[11849,11950,11951],[11850,11851,11952],[11850,11951,11952],[11851,11852,11953],[11851,11952,11953],[11854,11855,11956],[11854,11955,11956],[11855,11856,11957],[11855,11956,11957],[11856,11857,11958],[11856,11957,11958],[11857,11858,11959],[11857,11958,11959],[11862,11863,11964],[11862,11963,11964],[11865,11866,11967],[11865,11966,11967],[11866,11867,11968],[11866,11967,11968],[11867,11868,11969],[11867,11968,11969],[11868,11869,11970],[11868,11969,11970],[11869,11870,11971],[11869,11970,11971],[11870,11871,11972],[11870,11971,11972],[11872,11873,11974],[11872,11973,11974],[11873,11874,11975],[11873,11974,11975],[11874,11875,11976],[11874,11975,11976],[11875,11876,11977],[11875,11976,11977],[11876,11877,11978],[11876,11977,11978],[11877,11878,11979],[11877,11978,11979],[11878,11879,11980],[11878,11979,11980],[11879,11880,11981],[11879,11980,11981],[11880,11881,11982],[11880,11981,11982],[11881,11882,11983],[11881,11982,11983],[11882,11883,11984],[11882,11983,11984],[11883,11884,11985],[11883,11984,11985],[11884,11885,11986],[11884,11985,11986],[11885,11886,11987],[11885,11986,11987],[11886,11887,11988],[11886,11987,11988],[11887,11888,11989],[11887,11988,11989],[11888,11889,11990],[11888,11989,11990],[11889,11890,11991],[11889,11990,11991],[11890,11891,11992],[11890,11991,11992],[11891,11892,11993],[11891,11992,11993],[11892,11893,11994],[11892,11993,11994],[11893,11894,11995],[11893,11994,11995],[11894,11895,11996],[11894,11995,11996],[11897,11898,11999],[11897,11998,11999],[11898,11899,12000],[11898,11999,12000],[11899,11900,12001],[11899,12000,12001],[11900,11901,12002],[11900,12001,12002],[11901,11902,12003],[11901,12002,12003],[11902,11903,12004],[11902,12003,12004],[11903,11904,12005],[11903,12004,12005],[11904,11905,12006],[11904,12005,12006],[11905,11906,12007],[11905,12006,12007],[11906,11907,12008],[11906,12007,12008],[11907,11908,12009],[11907,12008,12009],[11908,11909,12010],[11908,12009,12010],[11909,11910,12011],[11909,12010,12011],[11910,11911,12012],[11910,12011,12012],[11911,11912,12013],[11911,12012,12013],[11912,11913,12014],[11912,12013,12014],[11913,11914,12015],[11913,12014,12015],[11918,11919,12020],[11918,12019,12020],[11919,11920,12021],[11919,12020,12021],[11920,11921,12022],[11920,12021,12022],[11921,11922,12023],[11921,12022,12023],[11922,11923,12024],[11922,12023,12024],[11923,11924,12025],[11923,12024,12025],[11924,11925,12026],[11924,12025,12026],[11925,11926,12027],[11925,12026,12027],[11926,11927,12028],[11926,12027,12028],[11927,11928,12029],[11927,12028,12029],[11930,11931,12032],[11931,11932,12033],[11931,12032,12033],[11932,11933,12034],[11932,12033,12034],[11933,11934,12035],[11933,12034,12035],[11934,11935,12036],[11934,12035,12036],[11935,11936,12037],[11935,12036,12037],[11936,11937,12038],[11936,12037,12038],[11937,11938,12039],[11937,12038,12039],[11938,11939,12040],[11938,12039,12040],[11939,11940,12041],[11939,12040,12041],[11940,11941,12042],[11940,12041,12042],[11941,11942,12043],[11941,12042,12043],[11943,11944,12045],[11943,12044,12045],[11944,11945,12046],[11944,12045,12046],[11945,11946,12047],[11945,12046,12047],[11946,11947,12048],[11946,12047,12048],[11947,11948,12049],[11947,12048,12049],[11948,11949,12050],[11948,12049,12050],[11949,11950,12051],[11949,12050,12051],[11950,11951,12052],[11950,12051,12052],[11951,11952,12053],[11951,12052,12053],[11952,11953,12054],[11952,12053,12054],[11955,11956,12057],[11955,12056,12057],[11956,11957,12058],[11956,12057,12058],[11957,11958,12059],[11957,12058,12059],[11958,11959,12060],[11958,12059,12060],[11962,11963,12064],[11962,12063,12064],[11963,11964,12065],[11963,12064,12065],[11964,11965,12066],[11964,12065,12066],[11966,11967,12068],[11966,12067,12068],[11967,11968,12069],[11967,12068,12069],[11968,11969,12070],[11968,12069,12070],[11969,11970,12071],[11969,12070,12071],[11970,11971,12072],[11970,12071,12072],[11971,11972,12073],[11971,12072,12073],[11973,11974,12075],[11973,12074,12075],[11974,11975,12076],[11974,12075,12076],[11975,11976,12077],[11975,12076,12077],[11976,11977,12078],[11976,12077,12078],[11977,11978,12079],[11977,12078,12079],[11978,11979,12080],[11978,12079,12080],[11979,11980,12081],[11979,12080,12081],[11980,11981,12082],[11980,12081,12082],[11981,11982,12083],[11981,12082,12083],[11982,11983,12084],[11982,12083,12084],[11983,11984,12085],[11983,12084,12085],[11984,11985,12086],[11984,12085,12086],[11985,11986,12087],[11985,12086,12087],[11986,11987,12088],[11986,12087,12088],[11987,11988,12089],[11987,12088,12089],[11988,11989,12090],[11988,12089,12090],[11989,11990,12091],[11989,12090,12091],[11990,11991,12092],[11990,12091,12092],[11991,11992,12093],[11991,12092,12093],[11992,11993,12094],[11992,12093,12094],[11993,11994,12095],[11993,12094,12095],[11994,11995,12096],[11994,12095,12096],[11995,11996,12097],[11995,12096,12097],[11997,11998,12099],[11997,12098,12099],[11998,11999,12100],[11998,12099,12100],[11999,12000,12101],[11999,12100,12101],[12000,12001,12102],[12000,12101,12102],[12001,12002,12103],[12001,12102,12103],[12002,12003,12104],[12002,12103,12104],[12003,12004,12105],[12003,12104,12105],[12004,12005,12106],[12004,12105,12106],[12005,12006,12107],[12005,12106,12107],[12006,12007,12108],[12006,12107,12108],[12007,12008,12109],[12007,12108,12109],[12008,12009,12110],[12008,12109,12110],[12009,12010,12111],[12009,12110,12111],[12010,12011,12112],[12010,12111,12112],[12011,12012,12113],[12011,12112,12113],[12012,12013,12114],[12012,12113,12114],[12013,12014,12115],[12013,12114,12115],[12014,12015,12116],[12014,12115,12116],[12019,12020,12121],[12019,12120,12121],[12020,12021,12122],[12020,12121,12122],[12021,12022,12123],[12021,12122,12123],[12022,12023,12124],[12022,12123,12124],[12023,12024,12125],[12023,12124,12125],[12024,12025,12126],[12024,12125,12126],[12025,12026,12127],[12025,12126,12127],[12026,12027,12128],[12026,12127,12128],[12027,12028,12129],[12027,12128,12129],[12028,12029,12130],[12028,12129,12130],[12032,12033,12134],[12032,12133,12134],[12033,12034,12135],[12033,12134,12135],[12034,12035,12136],[12034,12135,12136],[12035,12036,12137],[12035,12136,12137],[12036,12037,12138],[12036,12137,12138],[12037,12038,12139],[12037,12138,12139],[12038,12039,12140],[12038,12139,12140],[12039,12040,12141],[12039,12140,12141],[12040,12041,12142],[12040,12141,12142],[12041,12042,12143],[12041,12142,12143],[12042,12043,12144],[12042,12143,12144],[12044,12045,12146],[12044,12145,12146],[12045,12046,12147],[12045,12146,12147],[12046,12047,12148],[12046,12147,12148],[12047,12048,12149],[12047,12148,12149],[12048,12049,12150],[12048,12149,12150],[12049,12050,12151],[12049,12150,12151],[12050,12051,12152],[12050,12151,12152],[12051,12052,12153],[12051,12152,12153],[12052,12053,12154],[12052,12153,12154],[12053,12054,12155],[12053,12154,12155],[12056,12057,12158],[12056,12157,12158],[12057,12058,12159],[12057,12158,12159],[12058,12059,12160],[12058,12159,12160],[12059,12060,12161],[12059,12160,12161],[12063,12064,12165],[12063,12164,12165],[12064,12065,12166],[12064,12165,12166],[12065,12066,12167],[12065,12166,12167],[12067,12068,12169],[12067,12168,12169],[12068,12069,12170],[12068,12169,12170],[12069,12070,12171],[12069,12170,12171],[12070,12071,12172],[12070,12171,12172],[12071,12072,12173],[12071,12172,12173],[12072,12073,12174],[12072,12173,12174],[12074,12075,12176],[12074,12175,12176],[12075,12076,12177],[12075,12176,12177],[12076,12077,12178],[12076,12177,12178],[12077,12078,12179],[12077,12178,12179],[12078,12079,12180],[12078,12179,12180],[12079,12080,12181],[12079,12180,12181],[12080,12081,12182],[12080,12181,12182],[12081,12082,12183],[12081,12182,12183],[12082,12083,12184],[12082,12183,12184],[12083,12084,12185],[12083,12184,12185],[12084,12085,12186],[12084,12185,12186],[12085,12086,12187],[12085,12186,12187],[12086,12087,12188],[12086,12187,12188],[12087,12088,12189],[12087,12188,12189],[12088,12089,12190],[12088,12189,12190],[12089,12090,12191],[12089,12190,12191],[12090,12091,12192],[12090,12191,12192],[12091,12092,12193],[12091,12192,12193],[12092,12093,12194],[12092,12193,12194],[12093,12094,12195],[12093,12194,12195],[12094,12095,12196],[12094,12195,12196],[12095,12096,12197],[12095,12196,12197],[12096,12097,12198],[12096,12197,12198],[12098,12099,12200],[12098,12199,12200],[12099,12100,12201],[12099,12200,12201],[12100,12101,12202],[12100,12201,12202],[12101,12102,12203],[12101,12202,12203],[12102,12103,12204],[12102,12203,12204],[12103,12104,12205],[12103,12204,12205],[12104,12105,12206],[12104,12205,12206],[12105,12106,12207],[12105,12206,12207],[12106,12107,12208],[12106,12207,12208],[12107,12108,12209],[12107,12208,12209],[12108,12109,12210],[12108,12209,12210],[12109,12110,12211],[12109,12210,12211],[12110,12111,12212],[12110,12211,12212],[12111,12112,12213],[12111,12212,12213],[12112,12113,12214],[12112,12213,12214],[12113,12114,12215],[12113,12214,12215],[12114,12115,12216],[12114,12215,12216],[12115,12116,12217],[12115,12216,12217],[12120,12121,12222],[12120,12221,12222],[12121,12122,12223],[12121,12222,12223],[12122,12123,12224],[12122,12223,12224],[12123,12124,12225],[12123,12224,12225],[12124,12125,12226],[12124,12225,12226],[12125,12126,12227],[12125,12226,12227],[12126,12127,12228],[12126,12227,12228],[12127,12128,12229],[12127,12228,12229],[12128,12129,12230],[12128,12229,12230],[12129,12130,12231],[12129,12230,12231],[12133,12134,12235],[12133,12234,12235],[12134,12135,12236],[12134,12235,12236],[12135,12136,12237],[12135,12236,12237],[12136,12137,12238],[12136,12237,12238],[12137,12138,12239],[12137,12238,12239],[12138,12139,12240],[12138,12239,12240],[12139,12140,12241],[12139,12240,12241],[12140,12141,12242],[12140,12241,12242],[12141,12142,12243],[12141,12242,12243],[12142,12143,12244],[12142,12243,12244],[12143,12144,12245],[12143,12244,12245],[12145,12146,12247],[12146,12147,12248],[12146,12247,12248],[12147,12148,12249],[12147,12248,12249],[12148,12149,12250],[12148,12249,12250],[12149,12150,12251],[12149,12250,12251],[12150,12151,12252],[12150,12251,12252],[12151,12152,12253],[12151,12252,12253],[12152,12153,12254],[12152,12253,12254],[12153,12154,12255],[12153,12254,12255],[12154,12155,12256],[12154,12255,12256],[12157,12158,12259],[12157,12258,12259],[12158,12159,12260],[12158,12259,12260],[12159,12160,12261],[12159,12260,12261],[12160,12161,12262],[12160,12261,12262],[12164,12165,12266],[12164,12265,12266],[12165,12166,12267],[12165,12266,12267],[12166,12167,12268],[12166,12267,12268],[12168,12169,12270],[12168,12269,12270],[12169,12170,12271],[12169,12270,12271],[12170,12171,12272],[12170,12271,12272],[12171,12172,12273],[12171,12272,12273],[12172,12173,12274],[12172,12273,12274],[12173,12174,12275],[12173,12274,12275],[12175,12176,12277],[12175,12276,12277],[12176,12177,12278],[12176,12277,12278],[12177,12178,12279],[12177,12278,12279],[12178,12179,12280],[12178,12279,12280],[12179,12180,12281],[12179,12280,12281],[12180,12181,12282],[12180,12281,12282],[12181,12182,12283],[12181,12282,12283],[12182,12183,12284],[12182,12283,12284],[12183,12184,12285],[12183,12284,12285],[12184,12185,12286],[12184,12285,12286],[12185,12186,12287],[12185,12286,12287],[12186,12187,12288],[12186,12287,12288],[12187,12188,12289],[12187,12288,12289],[12188,12189,12290],[12188,12289,12290],[12189,12190,12291],[12189,12290,12291],[12190,12191,12292],[12190,12291,12292],[12191,12192,12293],[12191,12292,12293],[12192,12193,12294],[12192,12293,12294],[12193,12194,12295],[12193,12294,12295],[12194,12195,12296],[12194,12295,12296],[12195,12196,12297],[12195,12296,12297],[12196,12197,12298],[12196,12297,12298],[12197,12198,12299],[12197,12298,12299],[12199,12200,12301],[12199,12300,12301],[12200,12201,12302],[12200,12301,12302],[12201,12202,12303],[12201,12302,12303],[12202,12203,12304],[12202,12303,12304],[12203,12204,12305],[12203,12304,12305],[12204,12205,12306],[12204,12305,12306],[12205,12206,12307],[12205,12306,12307],[12206,12207,12308],[12206,12307,12308],[12207,12208,12309],[12207,12308,12309],[12208,12209,12310],[12208,12309,12310],[12209,12210,12311],[12209,12310,12311],[12210,12211,12312],[12210,12311,12312],[12211,12212,12313],[12211,12312,12313],[12212,12213,12314],[12212,12313,12314],[12213,12214,12315],[12213,12314,12315],[12214,12215,12316],[12214,12315,12316],[12215,12216,12317],[12215,12316,12317],[12216,12217,12318],[12216,12317,12318],[12221,12222,12323],[12221,12322,12323],[12222,12223,12324],[12222,12323,12324],[12223,12224,12325],[12223,12324,12325],[12224,12225,12326],[12224,12325,12326],[12225,12226,12327],[12225,12326,12327],[12226,12227,12328],[12226,12327,12328],[12227,12228,12329],[12227,12328,12329],[12228,12229,12330],[12228,12329,12330],[12229,12230,12331],[12229,12330,12331],[12230,12231,12332],[12230,12331,12332],[12234,12235,12336],[12234,12335,12336],[12235,12236,12337],[12235,12336,12337],[12236,12237,12338],[12236,12337,12338],[12237,12238,12339],[12237,12338,12339],[12238,12239,12340],[12238,12339,12340],[12239,12240,12341],[12239,12340,12341],[12240,12241,12342],[12240,12341,12342],[12241,12242,12343],[12241,12342,12343],[12242,12243,12344],[12242,12343,12344],[12243,12244,12345],[12243,12344,12345],[12244,12245,12346],[12244,12345,12346],[12247,12248,12349],[12247,12348,12349],[12248,12249,12350],[12248,12349,12350],[12249,12250,12351],[12249,12350,12351],[12250,12251,12352],[12250,12351,12352],[12251,12252,12353],[12251,12352,12353],[12252,12253,12354],[12252,12353,12354],[12253,12254,12355],[12253,12354,12355],[12254,12255,12356],[12254,12355,12356],[12255,12256,12357],[12255,12356,12357],[12258,12259,12360],[12258,12359,12360],[12259,12260,12361],[12259,12360,12361],[12260,12261,12362],[12260,12361,12362],[12261,12262,12363],[12261,12362,12363],[12265,12266,12367],[12265,12366,12367],[12266,12267,12368],[12266,12367,12368],[12267,12268,12369],[12267,12368,12369],[12269,12270,12371],[12269,12370,12371],[12270,12271,12372],[12270,12371,12372],[12271,12272,12373],[12271,12372,12373],[12272,12273,12374],[12272,12373,12374],[12273,12274,12375],[12273,12374,12375],[12274,12275,12376],[12274,12375,12376],[12276,12277,12378],[12276,12377,12378],[12277,12278,12379],[12277,12378,12379],[12278,12279,12380],[12278,12379,12380],[12279,12280,12381],[12279,12380,12381],[12280,12281,12382],[12280,12381,12382],[12281,12282,12383],[12281,12382,12383],[12282,12283,12384],[12282,12383,12384],[12283,12284,12385],[12283,12384,12385],[12284,12285,12386],[12284,12385,12386],[12285,12286,12387],[12285,12386,12387],[12286,12287,12388],[12286,12387,12388],[12287,12288,12389],[12287,12388,12389],[12288,12289,12390],[12288,12389,12390],[12289,12290,12391],[12289,12390,12391],[12290,12291,12392],[12290,12391,12392],[12291,12292,12393],[12291,12392,12393],[12292,12293,12394],[12292,12393,12394],[12293,12294,12395],[12293,12394,12395],[12294,12295,12396],[12294,12395,12396],[12295,12296,12397],[12295,12396,12397],[12296,12297,12398],[12296,12397,12398],[12297,12298,12399],[12297,12398,12399],[12298,12299,12400],[12298,12399,12400],[12300,12301,12402],[12300,12401,12402],[12301,12302,12403],[12301,12402,12403],[12302,12303,12404],[12302,12403,12404],[12303,12304,12405],[12303,12404,12405],[12304,12305,12406],[12304,12405,12406],[12305,12306,12407],[12305,12406,12407],[12306,12307,12408],[12306,12407,12408],[12307,12308,12409],[12307,12408,12409],[12308,12309,12410],[12308,12409,12410],[12309,12310,12411],[12309,12410,12411],[12310,12311,12412],[12310,12411,12412],[12311,12312,12413],[12311,12412,12413],[12312,12313,12414],[12312,12413,12414],[12313,12314,12415],[12313,12414,12415],[12314,12315,12416],[12314,12415,12416],[12315,12316,12417],[12315,12416,12417],[12316,12317,12418],[12316,12417,12418],[12317,12318,12419],[12317,12418,12419],[12322,12323,12424],[12322,12423,12424],[12323,12324,12425],[12323,12424,12425],[12324,12325,12426],[12324,12425,12426],[12325,12326,12427],[12325,12426,12427],[12326,12327,12428],[12326,12427,12428],[12327,12328,12429],[12327,12428,12429],[12328,12329,12430],[12328,12429,12430],[12329,12330,12431],[12329,12430,12431],[12330,12331,12432],[12330,12431,12432],[12331,12332,12433],[12331,12432,12433],[12332,12333,12434],[12332,12433,12434],[12335,12336,12437],[12335,12436,12437],[12336,12337,12438],[12336,12437,12438],[12337,12338,12439],[12337,12438,12439],[12338,12339,12440],[12338,12439,12440],[12339,12340,12441],[12339,12440,12441],[12340,12341,12442],[12340,12441,12442],[12341,12342,12443],[12341,12442,12443],[12342,12343,12444],[12342,12443,12444],[12343,12344,12445],[12343,12444,12445],[12344,12345,12446],[12344,12445,12446],[12345,12346,12447],[12345,12446,12447],[12348,12349,12450],[12348,12449,12450],[12349,12350,12451],[12349,12450,12451],[12350,12351,12452],[12350,12451,12452],[12351,12352,12453],[12351,12452,12453],[12352,12353,12454],[12352,12453,12454],[12353,12354,12455],[12353,12454,12455],[12354,12355,12456],[12354,12455,12456],[12355,12356,12457],[12355,12456,12457],[12356,12357,12458],[12356,12457,12458],[12359,12360,12461],[12359,12460,12461],[12360,12361,12462],[12360,12461,12462],[12361,12362,12463],[12361,12462,12463],[12366,12367,12468],[12366,12467,12468],[12367,12368,12469],[12367,12468,12469],[12368,12369,12470],[12368,12469,12470],[12370,12371,12472],[12370,12471,12472],[12371,12372,12473],[12371,12472,12473],[12372,12373,12474],[12372,12473,12474],[12373,12374,12475],[12373,12474,12475],[12374,12375,12476],[12374,12475,12476],[12375,12376,12477],[12375,12476,12477],[12377,12378,12479],[12377,12478,12479],[12378,12379,12480],[12378,12479,12480],[12379,12380,12481],[12379,12480,12481],[12380,12381,12482],[12380,12481,12482],[12381,12382,12483],[12381,12482,12483],[12382,12383,12484],[12382,12483,12484],[12383,12384,12485],[12383,12484,12485],[12384,12385,12486],[12384,12485,12486],[12385,12386,12487],[12385,12486,12487],[12386,12387,12488],[12386,12487,12488],[12387,12388,12489],[12387,12488,12489],[12388,12389,12490],[12388,12489,12490],[12389,12390,12491],[12389,12490,12491],[12390,12391,12492],[12390,12491,12492],[12391,12392,12493],[12391,12492,12493],[12392,12393,12494],[12392,12493,12494],[12393,12394,12495],[12393,12494,12495],[12394,12395,12496],[12394,12495,12496],[12395,12396,12497],[12395,12496,12497],[12396,12397,12498],[12396,12497,12498],[12397,12398,12499],[12397,12498,12499],[12398,12399,12500],[12398,12499,12500],[12399,12400,12501],[12399,12500,12501],[12401,12402,12503],[12401,12502,12503],[12402,12403,12504],[12402,12503,12504],[12403,12404,12505],[12403,12504,12505],[12404,12405,12506],[12404,12505,12506],[12405,12406,12507],[12405,12506,12507],[12406,12407,12508],[12406,12507,12508],[12407,12408,12509],[12407,12508,12509],[12408,12409,12510],[12408,12509,12510],[12409,12410,12511],[12409,12510,12511],[12410,12411,12512],[12410,12511,12512],[12411,12412,12513],[12411,12512,12513],[12412,12413,12514],[12412,12513,12514],[12413,12414,12515],[12413,12514,12515],[12414,12415,12516],[12414,12515,12516],[12415,12416,12517],[12415,12516,12517],[12416,12417,12518],[12416,12517,12518],[12417,12418,12519],[12417,12518,12519],[12418,12419,12520],[12418,12519,12520],[12423,12424,12525],[12423,12524,12525],[12424,12425,12526],[12424,12525,12526],[12425,12426,12527],[12425,12526,12527],[12426,12427,12528],[12426,12527,12528],[12427,12428,12529],[12427,12528,12529],[12428,12429,12530],[12428,12529,12530],[12429,12430,12531],[12429,12530,12531],[12430,12431,12532],[12430,12531,12532],[12431,12432,12533],[12431,12532,12533],[12432,12433,12534],[12432,12533,12534],[12433,12434,12535],[12433,12534,12535],[12436,12437,12538],[12436,12537,12538],[12437,12438,12539],[12437,12538,12539],[12438,12439,12540],[12438,12539,12540],[12439,12440,12541],[12439,12540,12541],[12440,12441,12542],[12440,12541,12542],[12441,12442,12543],[12441,12542,12543],[12442,12443,12544],[12442,12543,12544],[12443,12444,12545],[12443,12544,12545],[12444,12445,12546],[12444,12545,12546],[12445,12446,12547],[12445,12546,12547],[12446,12447,12548],[12446,12547,12548],[12449,12450,12551],[12449,12550,12551],[12450,12451,12552],[12450,12551,12552],[12451,12452,12553],[12451,12552,12553],[12452,12453,12554],[12452,12553,12554],[12453,12454,12555],[12453,12554,12555],[12454,12455,12556],[12454,12555,12556],[12455,12456,12557],[12455,12556,12557],[12456,12457,12558],[12456,12557,12558],[12457,12458,12559],[12457,12558,12559],[12458,12459,12560],[12458,12559,12560],[12460,12461,12562],[12460,12561,12562],[12461,12462,12563],[12461,12562,12563],[12462,12463,12564],[12462,12563,12564],[12467,12468,12569],[12467,12568,12569],[12468,12469,12570],[12468,12569,12570],[12469,12470,12571],[12469,12570,12571],[12471,12472,12573],[12471,12572,12573],[12472,12473,12574],[12472,12573,12574],[12473,12474,12575],[12473,12574,12575],[12474,12475,12576],[12474,12575,12576],[12475,12476,12577],[12475,12576,12577],[12476,12477,12578],[12476,12577,12578],[12478,12479,12580],[12478,12579,12580],[12479,12480,12581],[12479,12580,12581],[12480,12481,12582],[12480,12581,12582],[12481,12482,12583],[12481,12582,12583],[12482,12483,12584],[12482,12583,12584],[12483,12484,12585],[12483,12584,12585],[12484,12485,12586],[12484,12585,12586],[12485,12486,12587],[12485,12586,12587],[12486,12487,12588],[12486,12587,12588],[12487,12488,12589],[12487,12588,12589],[12488,12489,12590],[12488,12589,12590],[12489,12490,12591],[12489,12590,12591],[12490,12491,12592],[12490,12591,12592],[12491,12492,12593],[12491,12592,12593],[12492,12493,12594],[12492,12593,12594],[12493,12494,12595],[12493,12594,12595],[12494,12495,12596],[12494,12595,12596],[12495,12496,12597],[12495,12596,12597],[12496,12497,12598],[12496,12597,12598],[12497,12498,12599],[12497,12598,12599],[12498,12499,12600],[12498,12599,12600],[12499,12500,12601],[12499,12600,12601],[12502,12503,12604],[12502,12603,12604],[12503,12504,12605],[12503,12604,12605],[12504,12505,12606],[12504,12605,12606],[12505,12506,12607],[12505,12606,12607],[12506,12507,12608],[12506,12607,12608],[12507,12508,12609],[12507,12608,12609],[12508,12509,12610],[12508,12609,12610],[12509,12510,12611],[12509,12610,12611],[12510,12511,12612],[12510,12611,12612],[12511,12512,12613],[12511,12612,12613],[12512,12513,12614],[12512,12613,12614],[12513,12514,12615],[12513,12614,12615],[12514,12515,12616],[12514,12615,12616],[12515,12516,12617],[12515,12616,12617],[12516,12517,12618],[12516,12617,12618],[12517,12518,12619],[12517,12618,12619],[12518,12519,12620],[12518,12619,12620],[12524,12525,12626],[12524,12625,12626],[12525,12526,12627],[12525,12626,12627],[12526,12527,12628],[12526,12627,12628],[12527,12528,12629],[12527,12628,12629],[12528,12529,12630],[12528,12629,12630],[12529,12530,12631],[12529,12630,12631],[12530,12531,12632],[12530,12631,12632],[12531,12532,12633],[12531,12632,12633],[12532,12533,12634],[12532,12633,12634],[12533,12534,12635],[12533,12634,12635],[12534,12535,12636],[12534,12635,12636],[12537,12538,12639],[12538,12539,12640],[12538,12639,12640],[12539,12540,12641],[12539,12640,12641],[12540,12541,12642],[12540,12641,12642],[12541,12542,12643],[12541,12642,12643],[12542,12543,12644],[12542,12643,12644],[12543,12544,12645],[12543,12644,12645],[12544,12545,12646],[12544,12645,12646],[12545,12546,12647],[12545,12646,12647],[12546,12547,12648],[12546,12647,12648],[12547,12548,12649],[12547,12648,12649],[12550,12551,12652],[12550,12651,12652],[12551,12552,12653],[12551,12652,12653],[12552,12553,12654],[12552,12653,12654],[12553,12554,12655],[12553,12654,12655],[12554,12555,12656],[12554,12655,12656],[12555,12556,12657],[12555,12656,12657],[12556,12557,12658],[12556,12657,12658],[12557,12558,12659],[12557,12658,12659],[12558,12559,12660],[12558,12659,12660],[12559,12560,12661],[12559,12660,12661],[12561,12562,12663],[12561,12662,12663],[12562,12563,12664],[12562,12663,12664],[12563,12564,12665],[12563,12664,12665],[12568,12569,12670],[12568,12669,12670],[12569,12570,12671],[12569,12670,12671],[12570,12571,12672],[12570,12671,12672],[12572,12573,12674],[12572,12673,12674],[12573,12574,12675],[12573,12674,12675],[12574,12575,12676],[12574,12675,12676],[12575,12576,12677],[12575,12676,12677],[12576,12577,12678],[12576,12677,12678],[12577,12578,12679],[12577,12678,12679],[12579,12580,12681],[12579,12680,12681],[12580,12581,12682],[12580,12681,12682],[12581,12582,12683],[12581,12682,12683],[12582,12583,12684],[12582,12683,12684],[12583,12584,12685],[12583,12684,12685],[12584,12585,12686],[12584,12685,12686],[12585,12586,12687],[12585,12686,12687],[12586,12587,12688],[12586,12687,12688],[12587,12588,12689],[12587,12688,12689],[12588,12589,12690],[12588,12689,12690],[12589,12590,12691],[12589,12690,12691],[12590,12591,12692],[12590,12691,12692],[12591,12592,12693],[12591,12692,12693],[12592,12593,12694],[12592,12693,12694],[12593,12594,12695],[12593,12694,12695],[12594,12595,12696],[12594,12695,12696],[12595,12596,12697],[12595,12696,12697],[12596,12597,12698],[12596,12697,12698],[12597,12598,12699],[12597,12698,12699],[12598,12599,12700],[12598,12699,12700],[12599,12600,12701],[12599,12700,12701],[12600,12601,12702],[12600,12701,12702],[12603,12604,12705],[12603,12704,12705],[12604,12605,12706],[12604,12705,12706],[12605,12606,12707],[12605,12706,12707],[12606,12607,12708],[12606,12707,12708],[12607,12608,12709],[12607,12708,12709],[12608,12609,12710],[12608,12709,12710],[12609,12610,12711],[12609,12710,12711],[12610,12611,12712],[12610,12711,12712],[12611,12612,12713],[12611,12712,12713],[12612,12613,12714],[12612,12713,12714],[12613,12614,12715],[12613,12714,12715],[12615,12616,12717],[12615,12716,12717],[12616,12617,12718],[12616,12717,12718],[12617,12618,12719],[12617,12718,12719],[12618,12619,12720],[12618,12719,12720],[12619,12620,12721],[12619,12720,12721],[12625,12626,12727],[12625,12726,12727],[12626,12627,12728],[12626,12727,12728],[12627,12628,12729],[12627,12728,12729],[12628,12629,12730],[12628,12729,12730],[12629,12630,12731],[12629,12730,12731],[12630,12631,12732],[12630,12731,12732],[12631,12632,12733],[12631,12732,12733],[12632,12633,12734],[12632,12733,12734],[12633,12634,12735],[12633,12734,12735],[12634,12635,12736],[12634,12735,12736],[12635,12636,12737],[12635,12736,12737],[12639,12640,12741],[12639,12740,12741],[12640,12641,12742],[12640,12741,12742],[12641,12642,12743],[12641,12742,12743],[12642,12643,12744],[12642,12743,12744],[12643,12644,12745],[12643,12744,12745],[12644,12645,12746],[12644,12745,12746],[12645,12646,12747],[12645,12746,12747],[12646,12647,12748],[12646,12747,12748],[12647,12648,12749],[12647,12748,12749],[12648,12649,12750],[12648,12749,12750],[12651,12652,12753],[12651,12752,12753],[12652,12653,12754],[12652,12753,12754],[12653,12654,12755],[12653,12754,12755],[12654,12655,12756],[12654,12755,12756],[12655,12656,12757],[12655,12756,12757],[12656,12657,12758],[12656,12757,12758],[12657,12658,12759],[12657,12758,12759],[12658,12659,12760],[12658,12759,12760],[12659,12660,12761],[12659,12760,12761],[12660,12661,12762],[12660,12761,12762],[12662,12663,12764],[12662,12763,12764],[12663,12664,12765],[12663,12764,12765],[12664,12665,12766],[12664,12765,12766],[12668,12669,12770],[12668,12769,12770],[12669,12670,12771],[12669,12770,12771],[12670,12671,12772],[12670,12771,12772],[12671,12672,12773],[12671,12772,12773],[12673,12674,12775],[12673,12774,12775],[12674,12675,12776],[12674,12775,12776],[12675,12676,12777],[12675,12776,12777],[12676,12677,12778],[12676,12777,12778],[12677,12678,12779],[12677,12778,12779],[12678,12679,12780],[12678,12779,12780],[12680,12681,12782],[12680,12781,12782],[12681,12682,12783],[12681,12782,12783],[12682,12683,12784],[12682,12783,12784],[12683,12684,12785],[12683,12784,12785],[12684,12685,12786],[12684,12785,12786],[12685,12686,12787],[12685,12786,12787],[12686,12687,12788],[12686,12787,12788],[12687,12688,12789],[12687,12788,12789],[12688,12689,12790],[12688,12789,12790],[12689,12690,12791],[12689,12790,12791],[12690,12691,12792],[12690,12791,12792],[12691,12692,12793],[12691,12792,12793],[12692,12693,12794],[12692,12793,12794],[12693,12694,12795],[12693,12794,12795],[12694,12695,12796],[12694,12795,12796],[12695,12696,12797],[12695,12796,12797],[12696,12697,12798],[12696,12797,12798],[12697,12698,12799],[12697,12798,12799],[12698,12699,12800],[12698,12799,12800],[12699,12700,12801],[12699,12800,12801],[12700,12701,12802],[12700,12801,12802],[12701,12702,12803],[12701,12802,12803],[12704,12705,12806],[12704,12805,12806],[12705,12706,12807],[12705,12806,12807],[12706,12707,12808],[12706,12807,12808],[12707,12708,12809],[12707,12808,12809],[12708,12709,12810],[12708,12809,12810],[12709,12710,12811],[12709,12810,12811],[12710,12711,12812],[12710,12811,12812],[12711,12712,12813],[12711,12812,12813],[12712,12713,12814],[12712,12813,12814],[12713,12714,12815],[12713,12814,12815],[12714,12715,12816],[12714,12815,12816],[12716,12717,12818],[12716,12817,12818],[12717,12718,12819],[12717,12818,12819],[12718,12719,12820],[12718,12819,12820],[12719,12720,12821],[12719,12820,12821],[12720,12721,12822],[12720,12821,12822],[12726,12727,12828],[12726,12827,12828],[12727,12728,12829],[12727,12828,12829],[12728,12729,12830],[12728,12829,12830],[12729,12730,12831],[12729,12830,12831],[12730,12731,12832],[12730,12831,12832],[12731,12732,12833],[12731,12832,12833],[12732,12733,12834],[12732,12833,12834],[12733,12734,12835],[12733,12834,12835],[12734,12735,12836],[12734,12835,12836],[12735,12736,12837],[12735,12836,12837],[12736,12737,12838],[12736,12837,12838],[12740,12741,12842],[12740,12841,12842],[12741,12742,12843],[12741,12842,12843],[12742,12743,12844],[12742,12843,12844],[12743,12744,12845],[12743,12844,12845],[12744,12745,12846],[12744,12845,12846],[12745,12746,12847],[12745,12846,12847],[12746,12747,12848],[12746,12847,12848],[12747,12748,12849],[12747,12848,12849],[12748,12749,12850],[12748,12849,12850],[12749,12750,12851],[12749,12850,12851],[12750,12751,12852],[12750,12851,12852],[12752,12753,12854],[12752,12853,12854],[12753,12754,12855],[12753,12854,12855],[12754,12755,12856],[12754,12855,12856],[12755,12756,12857],[12755,12856,12857],[12756,12757,12858],[12756,12857,12858],[12757,12758,12859],[12757,12858,12859],[12758,12759,12860],[12758,12859,12860],[12759,12760,12861],[12759,12860,12861],[12760,12761,12862],[12760,12861,12862],[12761,12762,12863],[12761,12862,12863],[12763,12764,12865],[12763,12864,12865],[12764,12765,12866],[12764,12865,12866],[12765,12766,12867],[12765,12866,12867],[12769,12770,12871],[12769,12870,12871],[12770,12771,12872],[12770,12871,12872],[12771,12772,12873],[12771,12872,12873],[12772,12773,12874],[12772,12873,12874],[12774,12775,12876],[12774,12875,12876],[12775,12776,12877],[12775,12876,12877],[12776,12777,12878],[12776,12877,12878],[12777,12778,12879],[12777,12878,12879],[12778,12779,12880],[12778,12879,12880],[12779,12780,12881],[12779,12880,12881],[12781,12782,12883],[12781,12882,12883],[12782,12783,12884],[12782,12883,12884],[12783,12784,12885],[12783,12884,12885],[12784,12785,12886],[12784,12885,12886],[12785,12786,12887],[12785,12886,12887],[12786,12787,12888],[12786,12887,12888],[12787,12788,12889],[12787,12888,12889],[12788,12789,12890],[12788,12889,12890],[12789,12790,12891],[12789,12890,12891],[12790,12791,12892],[12790,12891,12892],[12791,12792,12893],[12791,12892,12893],[12792,12793,12894],[12792,12893,12894],[12793,12794,12895],[12793,12894,12895],[12794,12795,12896],[12794,12895,12896],[12795,12796,12897],[12795,12896,12897],[12796,12797,12898],[12796,12897,12898],[12797,12798,12899],[12797,12898,12899],[12798,12799,12900],[12798,12899,12900],[12799,12800,12901],[12799,12900,12901],[12800,12801,12902],[12800,12901,12902],[12801,12802,12903],[12801,12902,12903],[12802,12803,12904],[12802,12903,12904],[12805,12806,12907],[12805,12906,12907],[12806,12807,12908],[12806,12907,12908],[12807,12808,12909],[12807,12908,12909],[12808,12809,12910],[12808,12909,12910],[12809,12810,12911],[12809,12910,12911],[12810,12811,12912],[12810,12911,12912],[12811,12812,12913],[12811,12912,12913],[12812,12813,12914],[12812,12913,12914],[12813,12814,12915],[12813,12914,12915],[12814,12815,12916],[12814,12915,12916],[12817,12818,12919],[12817,12918,12919],[12818,12819,12920],[12818,12919,12920],[12819,12820,12921],[12819,12920,12921],[12820,12821,12922],[12820,12921,12922],[12821,12822,12923],[12821,12922,12923],[12827,12828,12929],[12827,12928,12929],[12828,12829,12930],[12828,12929,12930],[12829,12830,12931],[12829,12930,12931],[12830,12831,12932],[12830,12931,12932],[12831,12832,12933],[12831,12932,12933],[12832,12833,12934],[12832,12933,12934],[12833,12834,12935],[12833,12934,12935],[12834,12835,12936],[12834,12935,12936],[12835,12836,12937],[12835,12936,12937],[12836,12837,12938],[12836,12937,12938],[12837,12838,12939],[12837,12938,12939],[12838,12839,12940],[12838,12939,12940],[12841,12842,12943],[12841,12942,12943],[12842,12843,12944],[12842,12943,12944],[12843,12844,12945],[12843,12944,12945],[12844,12845,12946],[12844,12945,12946],[12845,12846,12947],[12845,12946,12947],[12846,12847,12948],[12846,12947,12948],[12847,12848,12949],[12847,12948,12949],[12848,12849,12950],[12848,12949,12950],[12849,12850,12951],[12849,12950,12951],[12850,12851,12952],[12850,12951,12952],[12851,12852,12953],[12851,12952,12953],[12853,12854,12955],[12853,12954,12955],[12854,12855,12956],[12854,12955,12956],[12855,12856,12957],[12855,12956,12957],[12856,12857,12958],[12856,12957,12958],[12857,12858,12959],[12857,12958,12959],[12858,12859,12960],[12858,12959,12960],[12859,12860,12961],[12859,12960,12961],[12860,12861,12962],[12860,12961,12962],[12861,12862,12963],[12861,12962,12963],[12862,12863,12964],[12862,12963,12964],[12864,12865,12966],[12864,12965,12966],[12865,12866,12967],[12865,12966,12967],[12866,12867,12968],[12866,12967,12968],[12870,12871,12972],[12870,12971,12972],[12871,12872,12973],[12871,12972,12973],[12872,12873,12974],[12872,12973,12974],[12873,12874,12975],[12873,12974,12975],[12875,12876,12977],[12875,12976,12977],[12876,12877,12978],[12876,12977,12978],[12877,12878,12979],[12877,12978,12979],[12878,12879,12980],[12878,12979,12980],[12879,12880,12981],[12879,12980,12981],[12880,12881,12982],[12880,12981,12982],[12882,12883,12984],[12882,12983,12984],[12883,12884,12985],[12883,12984,12985],[12884,12885,12986],[12884,12985,12986],[12885,12886,12987],[12885,12986,12987],[12886,12887,12988],[12886,12987,12988],[12887,12888,12989],[12887,12988,12989],[12888,12889,12990],[12888,12989,12990],[12889,12890,12991],[12889,12990,12991],[12890,12891,12992],[12890,12991,12992],[12891,12892,12993],[12891,12992,12993],[12892,12893,12994],[12892,12993,12994],[12893,12894,12995],[12893,12994,12995],[12894,12895,12996],[12894,12995,12996],[12895,12896,12997],[12895,12996,12997],[12896,12897,12998],[12896,12997,12998],[12897,12898,12999],[12897,12998,12999],[12898,12899,13000],[12898,12999,13000],[12899,12900,13001],[12899,13000,13001],[12900,12901,13002],[12900,13001,13002],[12901,12902,13003],[12901,13002,13003],[12902,12903,13004],[12902,13003,13004],[12903,12904,13005],[12903,13004,13005],[12906,12907,13008],[12906,13007,13008],[12907,12908,13009],[12907,13008,13009],[12908,12909,13010],[12908,13009,13010],[12909,12910,13011],[12909,13010,13011],[12910,12911,13012],[12910,13011,13012],[12911,12912,13013],[12911,13012,13013],[12912,12913,13014],[12912,13013,13014],[12913,12914,13015],[12913,13014,13015],[12914,12915,13016],[12914,13015,13016],[12915,12916,13017],[12915,13016,13017],[12918,12919,13020],[12918,13019,13020],[12919,12920,13021],[12919,13020,13021],[12920,12921,13022],[12920,13021,13022],[12921,12922,13023],[12921,13022,13023],[12922,12923,13024],[12922,13023,13024],[12928,12929,13030],[12928,13029,13030],[12929,12930,13031],[12929,13030,13031],[12930,12931,13032],[12930,13031,13032],[12931,12932,13033],[12931,13032,13033],[12932,12933,13034],[12932,13033,13034],[12933,12934,13035],[12933,13034,13035],[12934,12935,13036],[12934,13035,13036],[12935,12936,13037],[12935,13036,13037],[12936,12937,13038],[12936,13037,13038],[12937,12938,13039],[12937,13038,13039],[12938,12939,13040],[12938,13039,13040],[12939,12940,13041],[12939,13040,13041],[12942,12943,13044],[12942,13043,13044],[12943,12944,13045],[12943,13044,13045],[12944,12945,13046],[12944,13045,13046],[12945,12946,13047],[12945,13046,13047],[12946,12947,13048],[12946,13047,13048],[12947,12948,13049],[12947,13048,13049],[12948,12949,13050],[12948,13049,13050],[12949,12950,13051],[12949,13050,13051],[12950,12951,13052],[12950,13051,13052],[12951,12952,13053],[12951,13052,13053],[12952,12953,13054],[12952,13053,13054],[12954,12955,13056],[12954,13055,13056],[12955,12956,13057],[12955,13056,13057],[12956,12957,13058],[12956,13057,13058],[12957,12958,13059],[12957,13058,13059],[12958,12959,13060],[12958,13059,13060],[12959,12960,13061],[12959,13060,13061],[12960,12961,13062],[12960,13061,13062],[12961,12962,13063],[12961,13062,13063],[12962,12963,13064],[12962,13063,13064],[12963,12964,13065],[12963,13064,13065],[12965,12966,13067],[12965,13066,13067],[12966,12967,13068],[12966,13067,13068],[12971,12972,13073],[12971,13072,13073],[12972,12973,13074],[12972,13073,13074],[12973,12974,13075],[12973,13074,13075],[12974,12975,13076],[12974,13075,13076],[12976,12977,13078],[12976,13077,13078],[12977,12978,13079],[12977,13078,13079],[12978,12979,13080],[12978,13079,13080],[12979,12980,13081],[12979,13080,13081],[12980,12981,13082],[12980,13081,13082],[12981,12982,13083],[12981,13082,13083],[12983,12984,13085],[12983,13084,13085],[12984,12985,13086],[12984,13085,13086],[12985,12986,13087],[12985,13086,13087],[12986,12987,13088],[12986,13087,13088],[12987,12988,13089],[12987,13088,13089],[12988,12989,13090],[12988,13089,13090],[12989,12990,13091],[12989,13090,13091],[12990,12991,13092],[12990,13091,13092],[12991,12992,13093],[12991,13092,13093],[12992,12993,13094],[12992,13093,13094],[12993,12994,13095],[12993,13094,13095],[12994,12995,13096],[12994,13095,13096],[12995,12996,13097],[12995,13096,13097],[12996,12997,13098],[12996,13097,13098],[12997,12998,13099],[12997,13098,13099],[12998,12999,13100],[12998,13099,13100],[12999,13000,13101],[12999,13100,13101],[13000,13001,13102],[13000,13101,13102],[13001,13002,13103],[13001,13102,13103],[13002,13003,13104],[13002,13103,13104],[13003,13004,13105],[13003,13104,13105],[13004,13005,13106],[13004,13105,13106],[13007,13008,13109],[13007,13108,13109],[13008,13009,13110],[13008,13109,13110],[13009,13010,13111],[13009,13110,13111],[13010,13011,13112],[13010,13111,13112],[13011,13012,13113],[13011,13112,13113],[13012,13013,13114],[13012,13113,13114],[13013,13014,13115],[13013,13114,13115],[13014,13015,13116],[13014,13115,13116],[13015,13016,13117],[13015,13116,13117],[13016,13017,13118],[13016,13117,13118],[13018,13019,13120],[13018,13119,13120],[13019,13020,13121],[13019,13120,13121],[13020,13021,13122],[13020,13121,13122],[13021,13022,13123],[13021,13122,13123],[13022,13023,13124],[13022,13123,13124],[13029,13030,13131],[13029,13130,13131],[13030,13031,13132],[13030,13131,13132],[13031,13032,13133],[13031,13132,13133],[13032,13033,13134],[13032,13133,13134],[13033,13034,13135],[13033,13134,13135],[13034,13035,13136],[13034,13135,13136],[13035,13036,13137],[13035,13136,13137],[13036,13037,13138],[13036,13137,13138],[13037,13038,13139],[13037,13138,13139],[13038,13039,13140],[13038,13139,13140],[13039,13040,13141],[13039,13140,13141],[13040,13041,13142],[13040,13141,13142],[13043,13044,13145],[13044,13045,13146],[13044,13145,13146],[13045,13046,13147],[13045,13146,13147],[13046,13047,13148],[13046,13147,13148],[13047,13048,13149],[13047,13148,13149],[13048,13049,13150],[13048,13149,13150],[13049,13050,13151],[13049,13150,13151],[13050,13051,13152],[13050,13151,13152],[13051,13052,13153],[13051,13152,13153],[13052,13053,13154],[13052,13153,13154],[13053,13054,13155],[13053,13154,13155],[13054,13055,13156],[13054,13155,13156],[13055,13056,13157],[13055,13156,13157],[13056,13057,13158],[13056,13157,13158],[13057,13058,13159],[13057,13158,13159],[13058,13059,13160],[13058,13159,13160],[13059,13060,13161],[13059,13160,13161],[13060,13061,13162],[13060,13161,13162],[13061,13062,13163],[13061,13162,13163],[13062,13063,13164],[13062,13163,13164],[13063,13064,13165],[13063,13164,13165],[13064,13065,13166],[13064,13165,13166],[13066,13067,13168],[13066,13167,13168],[13067,13068,13169],[13067,13168,13169],[13072,13073,13174],[13072,13173,13174],[13073,13074,13175],[13073,13174,13175],[13074,13075,13176],[13074,13175,13176],[13075,13076,13177],[13075,13176,13177],[13077,13078,13179],[13077,13178,13179],[13078,13079,13180],[13078,13179,13180],[13079,13080,13181],[13079,13180,13181],[13080,13081,13182],[13080,13181,13182],[13081,13082,13183],[13081,13182,13183],[13082,13083,13184],[13082,13183,13184],[13084,13085,13186],[13084,13185,13186],[13085,13086,13187],[13085,13186,13187],[13086,13087,13188],[13086,13187,13188],[13087,13088,13189],[13087,13188,13189],[13088,13089,13190],[13088,13189,13190],[13089,13090,13191],[13089,13190,13191],[13090,13091,13192],[13090,13191,13192],[13091,13092,13193],[13091,13192,13193],[13092,13093,13194],[13092,13193,13194],[13093,13094,13195],[13093,13194,13195],[13094,13095,13196],[13094,13195,13196],[13095,13096,13197],[13095,13196,13197],[13096,13097,13198],[13096,13197,13198],[13097,13098,13199],[13097,13198,13199],[13098,13099,13200],[13098,13199,13200],[13099,13100,13201],[13099,13200,13201],[13100,13101,13202],[13100,13201,13202],[13101,13102,13203],[13101,13202,13203],[13102,13103,13204],[13102,13203,13204],[13103,13104,13205],[13103,13204,13205],[13104,13105,13206],[13104,13205,13206],[13105,13106,13207],[13105,13206,13207],[13108,13109,13210],[13108,13209,13210],[13109,13110,13211],[13109,13210,13211],[13110,13111,13212],[13110,13211,13212],[13111,13112,13213],[13111,13212,13213],[13112,13113,13214],[13112,13213,13214],[13113,13114,13215],[13113,13214,13215],[13114,13115,13216],[13114,13215,13216],[13115,13116,13217],[13115,13216,13217],[13116,13117,13218],[13116,13217,13218],[13119,13120,13221],[13119,13220,13221],[13120,13121,13222],[13120,13221,13222],[13121,13122,13223],[13121,13222,13223],[13122,13123,13224],[13122,13223,13224],[13123,13124,13225],[13123,13224,13225],[13130,13131,13232],[13130,13231,13232],[13131,13132,13233],[13131,13232,13233],[13132,13133,13234],[13132,13233,13234],[13133,13134,13235],[13133,13234,13235],[13134,13135,13236],[13134,13235,13236],[13135,13136,13237],[13135,13236,13237],[13136,13137,13238],[13136,13237,13238],[13137,13138,13239],[13137,13238,13239],[13138,13139,13240],[13138,13239,13240],[13139,13140,13241],[13139,13240,13241],[13140,13141,13242],[13140,13241,13242],[13141,13142,13243],[13141,13242,13243],[13145,13146,13247],[13145,13246,13247],[13146,13147,13248],[13146,13247,13248],[13147,13148,13249],[13147,13248,13249],[13148,13149,13250],[13148,13249,13250],[13149,13150,13251],[13149,13250,13251],[13150,13151,13252],[13150,13251,13252],[13151,13152,13253],[13151,13252,13253],[13152,13153,13254],[13152,13253,13254],[13153,13154,13255],[13153,13254,13255],[13154,13155,13256],[13154,13255,13256],[13155,13156,13257],[13155,13256,13257],[13156,13157,13258],[13156,13257,13258],[13157,13158,13259],[13157,13258,13259],[13158,13159,13260],[13158,13259,13260],[13159,13160,13261],[13159,13260,13261],[13160,13161,13262],[13160,13261,13262],[13161,13162,13263],[13161,13262,13263],[13162,13163,13264],[13162,13263,13264],[13163,13164,13265],[13163,13264,13265],[13164,13165,13266],[13164,13265,13266],[13165,13166,13267],[13165,13266,13267],[13167,13168,13269],[13167,13268,13269],[13168,13169,13270],[13168,13269,13270],[13173,13174,13275],[13173,13274,13275],[13174,13175,13276],[13174,13275,13276],[13175,13176,13277],[13175,13276,13277],[13176,13177,13278],[13176,13277,13278],[13178,13179,13280],[13178,13279,13280],[13179,13180,13281],[13179,13280,13281],[13180,13181,13282],[13180,13281,13282],[13181,13182,13283],[13181,13282,13283],[13182,13183,13284],[13182,13283,13284],[13185,13186,13287],[13185,13286,13287],[13186,13187,13288],[13186,13287,13288],[13187,13188,13289],[13187,13288,13289],[13188,13189,13290],[13188,13289,13290],[13189,13190,13291],[13189,13290,13291],[13190,13191,13292],[13190,13291,13292],[13191,13192,13293],[13191,13292,13293],[13192,13193,13294],[13192,13293,13294],[13193,13194,13295],[13193,13294,13295],[13194,13195,13296],[13194,13295,13296],[13195,13196,13297],[13195,13296,13297],[13196,13197,13298],[13196,13297,13298],[13197,13198,13299],[13197,13298,13299],[13198,13199,13300],[13198,13299,13300],[13199,13200,13301],[13199,13300,13301],[13200,13201,13302],[13200,13301,13302],[13201,13202,13303],[13201,13302,13303],[13202,13203,13304],[13202,13303,13304],[13203,13204,13305],[13203,13304,13305],[13204,13205,13306],[13204,13305,13306],[13205,13206,13307],[13205,13306,13307],[13206,13207,13308],[13206,13307,13308],[13209,13210,13311],[13209,13310,13311],[13210,13211,13312],[13210,13311,13312],[13211,13212,13313],[13211,13312,13313],[13212,13213,13314],[13212,13313,13314],[13213,13214,13315],[13213,13314,13315],[13214,13215,13316],[13214,13315,13316],[13215,13216,13317],[13215,13316,13317],[13216,13217,13318],[13216,13317,13318],[13217,13218,13319],[13217,13318,13319],[13220,13221,13322],[13220,13321,13322],[13221,13222,13323],[13221,13322,13323],[13222,13223,13324],[13222,13323,13324],[13223,13224,13325],[13223,13324,13325],[13224,13225,13326],[13224,13325,13326],[13231,13232,13333],[13231,13332,13333],[13232,13233,13334],[13232,13333,13334],[13233,13234,13335],[13233,13334,13335],[13234,13235,13336],[13234,13335,13336],[13235,13236,13337],[13235,13336,13337],[13236,13237,13338],[13236,13337,13338],[13237,13238,13339],[13237,13338,13339],[13238,13239,13340],[13238,13339,13340],[13239,13240,13341],[13239,13340,13341],[13240,13241,13342],[13240,13341,13342],[13241,13242,13343],[13241,13342,13343],[13242,13243,13344],[13242,13343,13344],[13246,13247,13348],[13246,13347,13348],[13247,13248,13349],[13247,13348,13349],[13248,13249,13350],[13248,13349,13350],[13249,13250,13351],[13249,13350,13351],[13250,13251,13352],[13250,13351,13352],[13251,13252,13353],[13251,13352,13353],[13252,13253,13354],[13252,13353,13354],[13253,13254,13355],[13253,13354,13355],[13254,13255,13356],[13254,13355,13356],[13255,13256,13357],[13255,13356,13357],[13256,13257,13358],[13256,13357,13358],[13257,13258,13359],[13257,13358,13359],[13258,13259,13360],[13258,13359,13360],[13259,13260,13361],[13259,13360,13361],[13260,13261,13362],[13260,13361,13362],[13261,13262,13363],[13261,13362,13363],[13262,13263,13364],[13262,13363,13364],[13263,13264,13365],[13263,13364,13365],[13264,13265,13366],[13264,13365,13366],[13265,13266,13367],[13265,13366,13367],[13266,13267,13368],[13266,13367,13368],[13267,13268,13369],[13267,13368,13369],[13268,13269,13370],[13268,13369,13370],[13269,13270,13371],[13269,13370,13371],[13273,13274,13375],[13273,13374,13375],[13274,13275,13376],[13274,13375,13376],[13275,13276,13377],[13275,13376,13377],[13276,13277,13378],[13276,13377,13378],[13277,13278,13379],[13277,13378,13379],[13279,13280,13381],[13279,13380,13381],[13280,13281,13382],[13280,13381,13382],[13281,13282,13383],[13281,13382,13383],[13282,13283,13384],[13282,13383,13384],[13283,13284,13385],[13283,13384,13385],[13286,13287,13388],[13286,13387,13388],[13287,13288,13389],[13287,13388,13389],[13288,13289,13390],[13288,13389,13390],[13289,13290,13391],[13289,13390,13391],[13290,13291,13392],[13290,13391,13392],[13291,13292,13393],[13291,13392,13393],[13292,13293,13394],[13292,13393,13394],[13293,13294,13395],[13293,13394,13395],[13294,13295,13396],[13294,13395,13396],[13295,13296,13397],[13295,13396,13397],[13296,13297,13398],[13296,13397,13398],[13297,13298,13399],[13297,13398,13399],[13298,13299,13400],[13298,13399,13400],[13299,13300,13401],[13299,13400,13401],[13300,13301,13402],[13300,13401,13402],[13301,13302,13403],[13301,13402,13403],[13302,13303,13404],[13302,13403,13404],[13303,13304,13405],[13303,13404,13405],[13304,13305,13406],[13304,13405,13406],[13305,13306,13407],[13305,13406,13407],[13306,13307,13408],[13306,13407,13408],[13307,13308,13409],[13307,13408,13409],[13309,13310,13411],[13309,13410,13411],[13310,13311,13412],[13310,13411,13412],[13311,13312,13413],[13311,13412,13413],[13312,13313,13414],[13312,13413,13414],[13313,13314,13415],[13313,13414,13415],[13314,13315,13416],[13314,13415,13416],[13315,13316,13417],[13315,13416,13417],[13316,13317,13418],[13316,13417,13418],[13317,13318,13419],[13317,13418,13419],[13318,13319,13420],[13318,13419,13420],[13321,13322,13423],[13321,13422,13423],[13322,13323,13424],[13322,13423,13424],[13323,13324,13425],[13323,13424,13425],[13324,13325,13426],[13324,13425,13426],[13325,13326,13427],[13325,13426,13427],[100266,100267,852],[100267,852,953],[100267,100268,953],[100268,953,1053],[1053,952,953],[100268,100269,1053],[100269,1053,1154],[100269,100270,1154],[100270,1154,1255],[100270,100271,1255],[100271,1255,1355],[1355,1254,1255],[100271,100272,1355],[100272,1355,1456],[100272,100273,1456],[100273,1456,1557],[100273,100274,1557],[100274,1557,1657],[1657,1556,1557],[100274,100275,1657],[100275,1657,1758],[100275,100276,1758],[100276,1758,1859],[100276,100277,1859],[100277,1859,1960],[100277,100278,1960],[100278,1960,2060],[2060,1959,1960],[100278,100279,2060],[100279,2060,2161],[100279,100280,2161],[100280,2161,2262],[100280,100281,2262],[100281,2262,2363],[100281,100282,2363],[100282,2363,2464],[100282,100283,2464],[100283,2464,2565],[100283,100284,2565],[100284,2565,2666],[100284,100285,2666],[100285,2666,2767],[100285,100286,2767],[100286,2767,2868],[100286,100287,2868],[100287,2868,2969],[100287,100288,2969],[100288,2969,3070],[100288,100289,3070],[100289,3070,3171],[100289,100290,3171],[100290,3171,3272],[100290,100291,3272],[100291,3272,3373],[100291,100292,3373],[100292,3373,3474],[100292,100293,3474],[100293,3474,3575],[100293,100294,3575],[100294,3575,3676],[100294,100295,3676],[100295,3676,3777],[100295,100296,3777],[100296,3777,3878],[100296,100297,3878],[100297,3878,3979],[100297,100298,3979],[100298,3979,4081],[4081,4080,3979],[100298,100299,4081],[100299,4081,4182],[100299,100300,4182],[100300,4182,4283],[100300,4283,4284],[4384,4385,4284],[4283,4284,4384],[100303,100304,100346],[100304,100346,100347],[100304,100305,100347],[100305,100347,100348],[100305,100306,100348],[100306,100348,100349],[100306,100307,100349],[100307,100349,100350],[100307,100308,100350],[100308,100350,100351],[100308,100309,100351],[100309,100351,100352],[100309,100310,100352],[100310,100352,100353],[100310,100311,100353],[100311,100353,100354],[100311,100312,100354],[100312,100354,100355],[100312,100313,100355],[100313,100355,100356],[100313,100314,100356],[100314,100356,100357],[100314,100315,100357],[100315,100357,100358],[100315,100316,100358],[100316,100358,100359],[100316,100317,100359],[100317,100359,100360],[100317,100318,100360],[100318,100360,100361],[100318,100319,100361],[100319,100361,100362],[100319,100320,100362],[100320,100362,100363],[100320,100321,100363],[100321,100363,100364],[100321,100322,100364],[100322,100364,100365],[100322,100323,100365],[100323,100365,100366],[100323,100324,100366],[100324,100366,100367],[100324,100325,100367],[100325,100367,100368],[100325,100326,100368],[100326,100368,100369],[100326,100327,100369],[100327,100369,100370],[100327,100328,100370],[100328,100370,3579],[100328,100329,3579],[100329,3579,3680],[100329,100330,3680],[100330,3680,3780],[3780,3781,3680],[100330,100331,3780],[100331,3780,3881],[100331,100332,3881],[100332,3881,3982],[100332,100333,3982],[100333,3982,4082],[4082,4083,3982],[100333,100334,4082],[100334,4082,4183],[100334,100335,4183],[100335,4183,4284],[100335,4284,4283],[4385,4384,4283],[4284,4283,4385],[100336,100337,44],[100337,44,145],[100337,100338,145],[100338,145,246],[100338,100339,246],[100339,246,347],[100339,100340,347],[100340,347,448],[100340,100341,448],[100341,448,549],[100341,100342,549],[100342,549,650],[100342,100343,650],[100343,650,751],[100343,100344,751],[100344,751,852],[100344,100345,852],[100345,852,953],[100345,100346,953],[100346,953,100303],[100303,952,953],[100346,100347,100303],[100347,100303,100304],[100347,100348,100304],[100348,100304,100305],[100348,100349,100305],[100349,100305,100306],[100349,100350,100306],[100350,100306,100307],[100350,100351,100307],[100351,100307,100308],[100351,100352,100308],[100352,100308,100309],[100352,100353,100309],[100353,100309,100310],[100353,100354,100310],[100354,100310,100311],[100354,100355,100311],[100355,100311,100312],[100355,100356,100312],[100356,100312,100313],[100356,100357,100313],[100357,100313,100314],[100357,100358,100314],[100358,100314,100315],[100358,100359,100315],[100359,100315,100316],[100359,100360,100316],[100360,100316,100317],[100360,100361,100317],[100361,100317,100318],[100361,100362,100318],[100362,100318,100319],[100362,100363,100319],[100363,100319,100320],[100363,100364,100320],[100364,100320,100321],[100364,100365,100321],[100365,100321,100322],[100365,100366,100322],[100366,100322,100323],[100366,100367,100323],[100367,100323,100324],[100367,100368,100324],[100368,100324,100325],[100368,100369,100325],[100369,100325,100326],[100369,100370,100326],[100370,100326,100327],[100370,100327,3478],[100328,3579,3478],[100327,3478,100328],[100371,100372,57],[100372,57,157],[157,158,57],[100372,100373,157],[100373,157,257],[257,258,157],[100373,100374,257],[100374,257,358],[100374,100375,358],[100375,358,458],[458,459,358],[100375,100376,458],[100376,458,559],[100376,100377,559],[100377,559,659],[659,660,559],[100377,100378,659],[100378,659,760],[100378,100379,760],[100379,760,860],[860,861,760],[100379,100380,860],[100380,860,961],[100380,100381,961],[100381,961,1061],[1061,1062,961],[100381,100382,1061],[100382,1061,1162],[100382,100383,1162],[100383,1162,1262],[1262,1263,1162],[100383,100384,1262],[100384,1262,1363],[100384,100385,1363],[100385,1363,1463],[1463,1464,1363],[100385,100386,1463],[100386,1463,1564],[100386,100387,1564],[100387,1564,1665],[100387,100388,1665],[100388,1665,1765],[1765,1766,1665],[100388,100389,1765],[100389,1765,1866],[100389,100390,1866],[100390,1866,1967],[100390,100391,1967],[100391,1967,2067],[2067,2068,1967],[100391,100392,2067],[100392,2067,2168],[100392,100393,2168],[100393,2168,2269],[100393,100394,2269],[100394,2269,2369],[2369,2370,2269],[100394,100395,2369],[100395,2369,2470],[100395,100396,2470],[100396,2470,2571],[100396,100397,2571],[100397,2571,2672],[100397,100398,2672],[100398,2672,2772],[2772,2773,2672],[100398,100399,2772],[100399,2772,2873],[100399,100400,2873],[100400,2873,2974],[100400,100401,2974],[100401,2974,3075],[100401,100402,3075],[100402,3075,3176],[100402,100403,3176],[100403,3176,3276],[3276,3277,3176],[100403,100404,3276],[100404,3276,3377],[100404,100405,3377],[100405,3377,3478],[100405,3478,100327],[3579,100328,100327],[3478,100327,3579],[100410,100411,10145],[100411,10145,10246],[100411,100412,10246],[100412,10246,10347],[100412,100413,10347],[100413,10347,10447],[10447,10346,10347],[100413,100414,10447],[100414,10447,10548],[100414,100415,10548],[100415,10548,10649],[100415,100416,10649],[100416,10649,10750],[100416,100417,10750],[100417,10750,10850],[10850,10749,10750],[100417,100418,10850],[100418,10850,10951],[100418,100419,10951],[100419,10951,11052],[100419,100420,11052],[100420,11052,11153],[100420,100421,11153],[100421,11153,11254],[100421,100422,11254],[100422,11254,11354],[11354,11253,11254],[100422,100423,11354],[100423,11354,11455],[100423,100424,11455],[100424,11455,11556],[100424,100425,11556],[100425,11556,11657],[100425,100426,11657],[100426,11657,11758],[100426,100427,11758],[100427,11758,11859],[100427,100428,11859],[100428,11859,11959],[11959,11858,11859],[100428,100429,11959],[100429,11959,12060],[100429,100430,12060],[100430,12060,12161],[100430,100431,12161],[100431,12161,12262],[100431,100432,12262],[100432,12262,12363],[100432,100433,12363],[100433,12363,12463],[12463,12362,12363],[100433,100434,12463],[100434,12463,12564],[100434,100435,12564],[100435,12564,12665],[100435,100436,12665],[100436,12665,12766],[100436,100437,12766],[100437,12766,12867],[100437,100438,12867],[100438,12867,12968],[100438,100439,12968],[100439,12968,13068],[13068,12967,12968],[100439,100440,13068],[100440,13068,13169],[100440,100441,13169],[100441,13169,13270],[100441,100442,13270],[100442,13270,13371],[100450,100451,100541],[100451,100541,100542],[100451,100452,100542],[100452,100542,100543],[100452,100453,100543],[100453,100543,100544],[100453,100454,100544],[100454,100544,10853],[100454,100455,10853],[100455,10853,10954],[100455,100456,10954],[100456,10954,11055],[100456,100457,11055],[100457,11055,11155],[11155,11156,11055],[100457,100458,11155],[100458,11155,11256],[100458,100459,11256],[100459,11256,11357],[100459,100460,11357],[100460,11357,11458],[100460,100461,11458],[100461,11458,11559],[100461,100462,11559],[100462,11559,11660],[100462,100463,11660],[100463,11660,11761],[100463,100464,11761],[100464,11761,11862],[100464,100465,11862],[100465,11862,11962],[11962,11963,11862],[100465,100466,11962],[100466,11962,12063],[100466,100467,12063],[100467,12063,12164],[100467,100468,12164],[100468,12164,12265],[100468,100469,12265],[100469,12265,12366],[100469,100470,12366],[100470,12366,12467],[100470,100471,12467],[100471,12467,12568],[100471,100472,12568],[100472,12568,12668],[12668,12669,12568],[100472,100473,12668],[100473,12668,12769],[100473,100474,12769],[100474,12769,12870],[100474,100475,12870],[100475,12870,12971],[100475,100476,12971],[100476,12971,13072],[100476,100477,13072],[100477,13072,13173],[100477,100478,13173],[100478,13173,13273],[13273,13274,13173],[100478,100479,13273],[100479,13273,13374],[100480,4290,4291],[4189,4190,4291],[4290,4291,4189],[100480,100481,4290],[100481,4290,4391],[100481,100482,4391],[100482,4391,4492],[100482,100483,4492],[100483,4492,4593],[100483,100484,4593],[100484,4593,4694],[100484,100485,4694],[100485,4694,4795],[100485,100486,4795],[100486,4795,4896],[100486,100487,4896],[100487,4896,4997],[100487,100488,4997],[100488,4997,5097],[5097,4996,4997],[100488,100489,5097],[100489,5097,5198],[100489,100490,5198],[100490,5198,5299],[100490,100491,5299],[100491,5299,5400],[100491,100492,5400],[100492,5400,5501],[100492,100493,5501],[100493,5501,5602],[100493,100494,5602],[100494,5602,5703],[100494,100495,5703],[100495,5703,5804],[100495,100496,5804],[100496,5804,5905],[100496,100497,5905],[100497,5905,6006],[100497,100498,6006],[100498,6006,6107],[100498,100499,6107],[100499,6107,6208],[100499,100500,6208],[100500,6208,6309],[100500,100501,6309],[100501,6309,6409],[6409,6308,6309],[100501,100502,6409],[100502,6409,6510],[100502,100503,6510],[100503,6510,6611],[100503,100504,6611],[100504,6611,6712],[100504,100505,6712],[100505,6712,6813],[100505,100506,6813],[100506,6813,6914],[100506,100507,6914],[100507,6914,7014],[7014,6913,6914],[100507,100508,7014],[100508,7014,7115],[100508,100509,7115],[100509,7115,7216],[100509,100510,7216],[100510,7216,7317],[100510,100511,7317],[100511,7317,7418],[100511,100512,7418],[100512,7418,7519],[100512,100513,7519],[100513,7519,7620],[100513,100514,7620],[100514,7620,7720],[7720,7619,7620],[100514,100515,7720],[100515,7720,7821],[100515,100516,7821],[100516,7821,7922],[100516,100517,7922],[100517,7922,8023],[100517,100518,8023],[100518,8023,8124],[100518,100519,8124],[100519,8124,8225],[100519,100520,8225],[100520,8225,8326],[100520,100521,8326],[100521,8326,8427],[100521,100522,8427],[100522,8427,8528],[100522,100523,8528],[100523,8528,8629],[100523,100524,8629],[100524,8629,8730],[100524,100525,8730],[100525,8730,8831],[100525,100526,8831],[100526,8831,8932],[100526,100527,8932],[100527,8932,9033],[100527,100528,9033],[100528,9033,9134],[100528,100529,9134],[100529,9134,9235],[100529,100530,9235],[100530,9235,9336],[100530,100531,9336],[100531,9336,9437],[100531,100532,9437],[100532,9437,9538],[100532,100533,9538],[100533,9538,9639],[100533,100534,9639],[100534,9639,9740],[100534,100535,9740],[100535,9740,9841],[100535,100536,9841],[100536,9841,9942],[100536,100537,9942],[100537,9942,10043],[100537,100538,10043],[100538,10043,10145],[10145,10144,10043],[100538,100539,10145],[100539,10145,10246],[100539,100540,10246],[100540,10246,10347],[100540,100541,10347],[100541,10347,100450],[100450,10346,10347],[100541,100542,100450],[100542,100450,100451],[100542,100543,100451],[100543,100451,100452],[100543,100544,100452],[100544,100452,100453],[100544,100545,100453],[100545,100453,10853],[100545,100546,10853],[100546,10853,10954],[100546,100547,10954],[100547,10954,11055],[100547,100548,11055],[100548,11055,11156],[100548,100549,11156],[100549,11156,11257],[100549,100550,11257],[100550,11257,11358],[100550,100551,11358],[100551,11358,11459],[100551,100552,11459],[100552,11459,11560],[100552,100553,11560],[100553,11560,11661],[100553,100554,11661],[100554,11661,11762],[100554,100555,11762],[100555,11762,11863],[100555,100556,11863],[100556,11863,11965],[11965,11964,11863],[100556,100557,11965],[100557,11965,12066],[100557,100558,12066],[100558,12066,12167],[100558,100559,12167],[100559,12167,12268],[100559,100560,12268],[100560,12268,12369],[100560,100561,12369],[100561,12369,12470],[100561,100562,12470],[100562,12470,12571],[100562,100563,12571],[100563,12571,12672],[100563,100564,12672],[100564,12672,12773],[100564,100565,12773],[100565,12773,12874],[100565,100566,12874],[100566,12874,12975],[100566,100567,12975],[100567,12975,13076],[100567,100568,13076],[100568,13076,13177],[100568,100569,13177],[100569,13177,13278],[100569,100570,13278],[100570,13278,13379],[100571,4291,4290],[4190,4189,4290],[4291,4290,4190],[100571,100572,4291],[100572,4291,4392],[100572,100573,4392],[100573,4392,4493],[100573,100574,4493],[100574,4493,4594],[100574,100575,4594],[100575,4594,4695],[100575,100576,4695],[100576,4695,4796],[100576,100577,4796],[100577,4796,4897],[100577,100578,4897],[100578,4897,4999],[4999,4898,4897],[100578,100579,4999],[100579,4999,5100],[100579,100580,5100],[100580,5100,5201],[100580,100581,5201],[100581,5201,5302],[100581,100582,5302],[100582,5302,5403],[100582,100583,5403],[100583,5403,5504],[100583,100584,5504],[100584,5504,5605],[100584,100585,5605],[100585,5605,5706],[100585,100586,5706],[100586,5706,5807],[100586,100587,5807],[100587,5807,5908],[100587,100588,5908],[100588,5908,6009],[100588,100589,6009],[100589,6009,6110],[100589,100590,6110],[100590,6110,6211],[100590,100591,6211],[100591,6211,6312],[100591,100592,6312],[100592,6312,6413],[100592,100593,6413],[100593,6413,6514],[100593,100594,6514],[100594,6514,6614],[6614,6615,6514],[100594,100595,6614],[100595,6614,6715],[100595,100596,6715],[100596,6715,6816],[100596,100597,6816],[100597,6816,6917],[100597,100598,6917],[100598,6917,7018],[100598,100599,7018],[100599,7018,7119],[100599,100600,7119],[100600,7119,7220],[100600,100601,7220],[100601,7220,7321],[100601,100602,7321],[100602,7321,7421],[7421,7422,7321],[100602,100603,7421],[100603,7421,7522],[100603,100604,7522],[100604,7522,7623],[100604,100605,7623],[100605,7623,7724],[100605,100606,7724],[100606,7724,7825],[100606,100607,7825],[100607,7825,7926],[100607,100608,7926],[100608,7926,8027],[100608,100609,8027],[100609,8027,8128],[100609,100610,8128],[100610,8128,8229],[100610,100611,8229],[100611,8229,8330],[100611,100612,8330],[100612,8330,8430],[8430,8431,8330],[100612,100613,8430],[100613,8430,8531],[100613,100614,8531],[100614,8531,8632],[100614,100615,8632],[100615,8632,8733],[100615,100616,8733],[100616,8733,8834],[100616,100617,8834],[100617,8834,8935],[100617,100618,8935],[100618,8935,9036],[100618,100619,9036],[100619,9036,9137],[100619,100620,9137],[100620,9137,9238],[100620,100621,9238],[100621,9238,9339],[100621,100622,9339],[100622,9339,9440],[100622,100623,9440],[100623,9440,9542],[9542,9441,9440],[100623,100624,9542],[100624,9542,9643],[100624,100625,9643],[100625,9643,9744],[100625,100626,9744],[100626,9744,9845],[100626,100627,9845],[100627,9845,9946],[100627,100628,9946],[100628,9946,10047],[100628,100629,10047],[100629,10047,10148],[100629,100630,10148],[100630,10148,10249],[100630,100631,10249],[100631,10249,10350],[100631,100632,10350],[100632,10350,10451],[100632,100633,10451],[100633,10451,10552],[100633,100634,10552],[100634,10552,10653],[100634,100635,10653],[100635,10653,10754],[100635,100636,10754],[100636,10754,10855],[100636,100637,10855],[100637,10855,10956],[100637,100638,10956],[100638,10956,11057],[100638,100639,11057],[100639,11057,11158],[100639,100640,11158],[100640,11158,11259],[100640,100641,11259],[100641,11259,11360],[100641,100642,11360],[100642,11360,11461],[100642,100643,11461],[100643,11461,11562],[100643,100644,11562],[100644,11562,11663],[100644,100645,11663],[100645,11663,11764],[100645,100646,11764],[100646,11764,11865],[100646,100647,11865],[100647,11865,11966],[100647,100648,11966],[100648,11966,12067],[100648,100649,12067],[100649,12067,12168],[100649,100650,12168],[100650,12168,12269],[100650,100651,12269],[100651,12269,12370],[100651,100652,12370],[100652,12370,12471],[100652,100653,12471],[100653,12471,12572],[100653,100654,12572],[100654,12572,12673],[100654,100655,12673],[100655,12673,12774],[100655,100656,12774],[100656,12774,12875],[100656,100657,12875],[100657,12875,12976],[100657,100658,12976],[100658,12976,13077],[100658,100659,13077],[100659,13077,13178],[100659,100660,13178],[100660,13178,13279],[100660,100661,13279],[100661,13279,13380],[100662,10154,10153],[10053,10052,10153],[10154,10153,10053],[100662,100663,10154],[100663,10154,10255],[100663,100664,10255],[100664,10255,10356],[100664,100665,10356],[100665,10356,10457],[100665,100666,10457],[100666,10457,10559],[10559,10458,10457],[100666,100667,10559],[100667,10559,10660],[100667,100668,10660],[100668,10660,10761],[100668,100669,10761],[100669,10761,10862],[100669,100670,10862],[100670,10862,10963],[100670,100671,10963],[100671,10963,11064],[100671,100672,11064],[100672,11064,11165],[100672,100673,11165],[100673,11165,11266],[100673,100674,11266],[100674,11266,11367],[100674,100675,11367],[100675,11367,11468],[100675,100676,11468],[100676,11468,11569],[100676,100677,11569],[100677,11569,11670],[100677,100678,11670],[100678,11670,11771],[100678,100679,11771],[100679,11771,11872],[100679,100680,11872],[100680,11872,11973],[100680,100681,11973],[100681,11973,12074],[100681,100682,12074],[100682,12074,12175],[100682,100683,12175],[100683,12175,12276],[100683,100684,12276],[100684,12276,12377],[100684,100685,12377],[100685,12377,12478],[100685,100686,12478],[100686,12478,12579],[100686,100687,12579],[100687,12579,12680],[100687,100688,12680],[100688,12680,12781],[100688,100689,12781],[100689,12781,12882],[100689,100690,12882],[100690,12882,12983],[100690,100691,12983],[100691,12983,13084],[100691,100692,13084],[100692,13084,13185],[100692,100693,13185],[100693,13185,13286],[100693,100694,13286],[100694,13286,13387],[100695,10153,10154],[10052,10053,10154],[10153,10154,10052],[100695,100696,10153],[100696,10153,10254],[100696,100697,10254],[100697,10254,10355],[100697,100698,10355],[100698,10355,10456],[100698,100699,10456],[100699,10456,10557],[100699,100700,10557],[100700,10557,10659],[10659,10658,10557],[100700,100701,10659],[100701,10659,10760],[100701,100702,10760],[100702,10760,10861],[100702,100703,10861],[100703,10861,10962],[100703,100704,10962],[100704,10962,11063],[100704,100705,11063],[100705,11063,11164],[100705,100706,11164],[100706,11164,11265],[100706,100707,11265],[100707,11265,11366],[100707,100708,11366],[100708,11366,11467],[100708,100709,11467],[100709,11467,11568],[100709,100710,11568],[100710,11568,11669],[100710,100711,11669],[100711,11669,11770],[100711,100712,11770],[100712,11770,11871],[100712,100713,11871],[100713,11871,11972],[100713,100714,11972],[100714,11972,12073],[100714,100715,12073],[100715,12073,12174],[100715,100716,12174],[100716,12174,12275],[100716,100717,12275],[100717,12275,12376],[100717,100718,12376],[100718,12376,12477],[100718,100719,12477],[100719,12477,12578],[100719,100720,12578],[100720,12578,12679],[100720,100721,12679],[100721,12679,12780],[100721,100722,12780],[100722,12780,12881],[100722,100723,12881],[100723,12881,12982],[100723,100724,12982],[100724,12982,13083],[100724,100725,13083],[100725,13083,13184],[100725,100726,13184],[100726,13184,13284],[13284,13183,13184],[100726,100727,13284],[100727,13284,13385],[100728,4101,4100],[4000,3999,4100],[4101,4100,4000],[100728,100729,4101],[100729,4101,4202],[100729,100730,4202],[100730,4202,4303],[100730,100731,4303],[100731,4303,4404],[100731,100732,4404],[100732,4404,4505],[100732,100733,4505],[100733,4505,4606],[100733,100734,4606],[100734,4606,4707],[100734,100735,4707],[100735,4707,4808],[100735,100736,4808],[100736,4808,4909],[100736,100737,4909],[100737,4909,5010],[100737,100738,5010],[100738,5010,5111],[100738,100739,5111],[100739,5111,5212],[100739,100740,5212],[100740,5212,5313],[100740,100741,5313],[100741,5313,5414],[100741,100742,5414],[100742,5414,5515],[100742,100743,5515],[100743,5515,5616],[100743,100744,5616],[100744,5616,5717],[100744,100745,5717],[100745,5717,5818],[100745,100746,5818],[100746,5818,5919],[100746,100747,5919],[100747,5919,6020],[100747,100748,6020],[100748,6020,6122],[6122,6021,6020],[100748,100749,6122],[100749,6122,6223],[100749,100750,6223],[100750,6223,6324],[100750,100751,6324],[100751,6324,6425],[100751,100752,6425],[100752,6425,6526],[100752,100753,6526],[100753,6526,6627],[100753,100754,6627],[100754,6627,6728],[100754,100755,6728],[100755,6728,6829],[100755,100756,6829],[100756,6829,6931],[6931,6830,6829],[100756,100757,6931],[100757,6931,7032],[100757,100758,7032],[100758,7032,7133],[100758,100759,7133],[100759,7133,7234],[100759,100760,7234],[100760,7234,7335],[100760,100761,7335],[100761,7335,7436],[100761,100762,7436],[100762,7436,7537],[100762,100763,7537],[100763,7537,7638],[100763,100764,7638],[100764,7638,7739],[100764,100765,7739],[100765,7739,7840],[100765,100766,7840],[100766,7840,7942],[7942,7841,7840],[100766,100767,7942],[100767,7942,8043],[100767,100768,8043],[100768,8043,8144],[100768,100769,8144],[100769,8144,8245],[100769,100770,8245],[100770,8245,8346],[100770,100771,8346],[100771,8346,8447],[100771,100772,8447],[100772,8447,8548],[100772,100773,8548],[100773,8548,8649],[100773,100774,8649],[100774,8649,8750],[100774,100775,8750],[100775,8750,8851],[100775,100776,8851],[100776,8851,8952],[100776,100777,8952],[100777,8952,9053],[100777,100778,9053],[100778,9053,9154],[100778,100779,9154],[100779,9154,9255],[100779,100780,9255],[100780,9255,9356],[100780,100781,9356],[100781,9356,9457],[100781,100782,9457],[100782,9457,9558],[100782,100783,9558],[100783,9558,9659],[100783,100784,9659],[100784,9659,9760],[100784,100785,9760],[100785,9760,9861],[100785,100786,9861],[100786,9861,9962],[100786,100787,9962],[100787,9962,10063],[100787,100788,10063],[100788,10063,10164],[100788,100789,10164],[100789,10164,10264],[10264,10265,10164],[100789,100790,10264],[100790,10264,10365],[100790,100791,10365],[100791,10365,10466],[100791,100792,10466],[100792,10466,10567],[100792,100793,10567],[100793,10567,10668],[100793,100794,10668],[100794,10668,10769],[100794,100795,10769],[100795,10769,10870],[100795,100796,10870],[100796,10870,10971],[100796,100797,10971],[100797,10971,11072],[100797,100798,11072],[100798,11072,11173],[100798,100799,11173],[100799,11173,11274],[100799,100800,11274],[100800,11274,11375],[100800,100801,11375],[100801,11375,11476],[100801,100802,11476],[100802,11476,11577],[100802,100803,11577],[100803,11577,11678],[100803,100804,11678],[100804,11678,11779],[100804,11779,11778],[11880,11879,11778],[11779,11778,11880],[100805,4100,4101],[3999,4000,4101],[4100,4101,3999],[100805,100806,4100],[100806,4100,4200],[4200,4099,4100],[100806,100807,4200],[100807,4200,4301],[100807,100808,4301],[100808,4301,4402],[100808,100809,4402],[100809,4402,4503],[100809,100810,4503],[100810,4503,4604],[100810,100811,4604],[100811,4604,4705],[100811,100812,4705],[100812,4705,4806],[100812,100813,4806],[100813,4806,4907],[100813,100814,4907],[100814,4907,5008],[100814,100815,5008],[100815,5008,5109],[100815,100816,5109],[100816,5109,5210],[100816,100817,5210],[100817,5210,5311],[100817,100818,5311],[100818,5311,5412],[100818,100819,5412],[100819,5412,5513],[100819,100820,5513],[100820,5513,5614],[100820,100821,5614],[100821,5614,5716],[5716,5715,5614],[100821,100822,5716],[100822,5716,5817],[100822,100823,5817],[100823,5817,5918],[100823,100824,5918],[100824,5918,6019],[100824,100825,6019],[100825,6019,6120],[100825,100826,6120],[100826,6120,6221],[100826,100827,6221],[100827,6221,6322],[100827,100828,6322],[100828,6322,6423],[100828,100829,6423],[100829,6423,6524],[100829,100830,6524],[100830,6524,6626],[6626,6625,6524],[100830,100831,6626],[100831,6626,6727],[100831,100832,6727],[100832,6727,6828],[100832,100833,6828],[100833,6828,6929],[100833,100834,6929],[100834,6929,7030],[100834,100835,7030],[100835,7030,7131],[100835,100836,7131],[100836,7131,7232],[100836,100837,7232],[100837,7232,7333],[100837,100838,7333],[100838,7333,7435],[7435,7434,7333],[100838,100839,7435],[100839,7435,7536],[100839,100840,7536],[100840,7536,7637],[100840,100841,7637],[100841,7637,7738],[100841,100842,7738],[100842,7738,7839],[100842,100843,7839],[100843,7839,7940],[100843,100844,7940],[100844,7940,8041],[100844,100845,8041],[100845,8041,8142],[100845,100846,8142],[100846,8142,8243],[100846,100847,8243],[100847,8243,8344],[100847,100848,8344],[100848,8344,8445],[100848,100849,8445],[100849,8445,8546],[100849,100850,8546],[100850,8546,8647],[100850,100851,8647],[100851,8647,8748],[100851,100852,8748],[100852,8748,8849],[100852,100853,8849],[100853,8849,8950],[100853,100854,8950],[100854,8950,9051],[100854,100855,9051],[100855,9051,9152],[100855,100856,9152],[100856,9152,9253],[100856,100857,9253],[100857,9253,9354],[100857,100858,9354],[100858,9354,9455],[100858,100859,9455],[100859,9455,9556],[100859,100860,9556],[100860,9556,9657],[100860,100861,9657],[100861,9657,9758],[100861,100862,9758],[100862,9758,9859],[100862,100863,9859],[100863,9859,9960],[100863,100864,9960],[100864,9960,10061],[100864,100865,10061],[100865,10061,10162],[100865,100866,10162],[100866,10162,10263],[100866,100867,10263],[100867,10263,10364],[100867,100868,10364],[100868,10364,10465],[100868,100869,10465],[100869,10465,10566],[100869,100870,10566],[100870,10566,10667],[100870,100871,10667],[100871,10667,10768],[100871,100872,10768],[100872,10768,10869],[100872,100873,10869],[100873,10869,10970],[100873,100874,10970],[100874,10970,11071],[100874,100875,11071],[100875,11071,11172],[100875,100876,11172],[100876,11172,11273],[100876,100877,11273],[100877,11273,11374],[100877,100878,11374],[100878,11374,11475],[100878,100879,11475],[100879,11475,11576],[100879,100880,11576],[100880,11576,11677],[100880,100881,11677],[100881,11677,11778],[100881,11778,11779],[11879,11880,11779],[11778,11779,11879],[100882,4107,4108],[4006,4007,4108],[4107,4108,4006],[100882,100883,4107],[100883,4107,4208],[100883,100884,4208],[100884,4208,4309],[100884,100885,4309],[100885,4309,4410],[100885,100886,4410],[100886,4410,4511],[100886,100887,4511],[100887,4511,4612],[100887,100888,4612],[100888,4612,4713],[100888,100889,4713],[100889,4713,4814],[100889,100890,4814],[100890,4814,4915],[100890,100891,4915],[100891,4915,5016],[100891,100892,5016],[100892,5016,5117],[100892,100893,5117],[100893,5117,5218],[100893,100894,5218],[100894,5218,5319],[100894,100895,5319],[100895,5319,5420],[100895,100896,5420],[100896,5420,5521],[100896,100897,5521],[100897,5521,5622],[100897,100898,5622],[100898,5622,5723],[100898,100899,5723],[100899,5723,5824],[100899,100900,5824],[100900,5824,5925],[100900,100901,5925],[100901,5925,6026],[100901,100902,6026],[100902,6026,6127],[100902,100903,6127],[100903,6127,6228],[100903,100904,6228],[100904,6228,6329],[100904,100905,6329],[100905,6329,6430],[100905,100906,6430],[100906,6430,6531],[100906,100907,6531],[100907,6531,6632],[100907,100908,6632],[100908,6632,6733],[100908,6733,6734],[6834,6835,6734],[6733,6734,6834],[100909,4108,4107],[4007,4006,4107],[4108,4107,4007],[100909,100910,4108],[100910,4108,4209],[100910,100911,4209],[100911,4209,4310],[100911,100912,4310],[100912,4310,4411],[100912,100913,4411],[100913,4411,4512],[100913,100914,4512],[100914,4512,4613],[100914,100915,4613],[100915,4613,4714],[100915,100916,4714],[100916,4714,4815],[100916,100917,4815],[100917,4815,4916],[100917,100918,4916],[100918,4916,5017],[100918,100919,5017],[100919,5017,5118],[100919,100920,5118],[100920,5118,5219],[100920,100921,5219],[100921,5219,5320],[100921,100922,5320],[100922,5320,5421],[100922,100923,5421],[100923,5421,5522],[100923,100924,5522],[100924,5522,5623],[100924,100925,5623],[100925,5623,5724],[100925,100926,5724],[100926,5724,5825],[100926,100927,5825],[100927,5825,5926],[100927,100928,5926],[100928,5926,6027],[100928,100929,6027],[100929,6027,6128],[100929,100930,6128],[100930,6128,6229],[100930,100931,6229],[100931,6229,6330],[100931,100932,6330],[100932,6330,6431],[100932,100933,6431],[100933,6431,6532],[100933,100934,6532],[100934,6532,6633],[100934,100935,6633],[100935,6633,6734],[100935,6734,6733],[6835,6834,6733],[6734,6733,6835],[100936,100937,4081],[100937,4081,4182],[100937,100938,4182],[100938,4182,4283],[100938,100939,4283],[100939,4283,4384],[100939,100940,4384],[100940,4384,4485],[100940,100941,4485],[100941,4485,4586],[100941,100942,4586],[100942,4586,4687],[100942,100943,4687],[100943,4687,4788],[100943,100944,4788],[100944,4788,4889],[100944,100945,4889],[100945,4889,4990],[100945,100946,4990],[100946,4990,5091],[100946,100947,5091],[100947,5091,5191],[5191,5090,5091],[100947,100948,5191],[100948,5191,5292],[100948,5292,5293],[5393,5394,5293],[5292,5293,5393],[100949,100950,4082],[100950,4082,4183],[100950,100951,4183],[100951,4183,4284],[100951,100952,4284],[100952,4284,4385],[100952,100953,4385],[100953,4385,4486],[100953,100954,4486],[100954,4486,4587],[100954,100955,4587],[100955,4587,4688],[100955,100956,4688],[100956,4688,4789],[100956,100957,4789],[100957,4789,4890],[100957,100958,4890],[100958,4890,4991],[100958,100959,4991],[100959,4991,5092],[100959,100960,5092],[100960,5092,5192],[5192,5193,5092],[100960,100961,5192],[100961,5192,5293],[100961,5293,5292],[5394,5393,5292],[5293,5292,5394],[100962,2441,2442],[2340,2341,2442],[2441,2442,2340],[100962,100963,2441],[100963,2441,2542],[100963,100964,2542],[100964,2542,2643],[100964,100965,2643],[100965,2643,2744],[100965,100966,2744],[100966,2744,2845],[100966,100967,2845],[100967,2845,2946],[100967,100968,2946],[100968,2946,3047],[100968,100969,3047],[100969,3047,3148],[100969,100970,3148],[100970,3148,3249],[100970,100971,3249],[100971,3249,3350],[100971,100972,3350],[100972,3350,3450],[3450,3349,3350],[100972,100973,3450],[100973,3450,3551],[100973,100974,3551],[100974,3551,3652],[100974,100975,3652],[100975,3652,3753],[100975,100976,3753],[100976,3753,3854],[100976,100977,3854],[100977,3854,3955],[100977,100978,3955],[100978,3955,4056],[100978,100979,4056],[100979,4056,4157],[100979,100980,4157],[100980,4157,4258],[100980,100981,4258],[100981,4258,4359],[100981,100982,4359],[100982,4359,4460],[100982,100983,4460],[100983,4460,4560],[4560,4459,4460],[100983,100984,4560],[100984,4560,4661],[100984,100985,4661],[100985,4661,4762],[100985,100986,4762],[100986,4762,4863],[100986,100987,4863],[100987,4863,4964],[100987,100988,4964],[100988,4964,5065],[100988,100989,5065],[100989,5065,5166],[100989,100990,5166],[100990,5166,5267],[100990,100991,5267],[100991,5267,5367],[5367,5266,5267],[100991,100992,5367],[100992,5367,5468],[100992,100993,5468],[100993,5468,5569],[100993,100994,5569],[100994,5569,5670],[100994,100995,5670],[100995,5670,5771],[100995,100996,5771],[100996,5771,5872],[100996,100997,5872],[100997,5872,5973],[100997,100998,5973],[100998,5973,6074],[100998,100999,6074],[100999,6074,6175],[100999,101000,6175],[101000,6175,6275],[6275,6174,6175],[101000,101001,6275],[101001,6275,6376],[101001,101002,6376],[101002,6376,6477],[101002,101003,6477],[101003,6477,6578],[101003,101004,6578],[101004,6578,6679],[101004,101005,6679],[101005,6679,6780],[101005,101006,6780],[101006,6780,6881],[101006,6881,6882],[6982,6983,6882],[6881,6882,6982],[101007,2442,2441],[2341,2340,2441],[2442,2441,2341],[101007,101008,2442],[101008,2442,2543],[101008,101009,2543],[101009,2543,2644],[101009,101010,2644],[101010,2644,2745],[101010,101011,2745],[101011,2745,2847],[2847,2746,2745],[101011,101012,2847],[101012,2847,2948],[101012,101013,2948],[101013,2948,3050],[3050,2949,2948],[101013,101014,3050],[101014,3050,3150],[101014,101015,3150],[101015,3150,3251],[101015,101016,3251],[101016,3251,3352],[101016,101017,3352],[101017,3352,3453],[101017,101018,3453],[101018,3453,3554],[101018,101019,3554],[101019,3554,3655],[101019,101020,3655],[101020,3655,3756],[101020,101021,3756],[101021,3756,3857],[101021,101022,3857],[101022,3857,3958],[101022,101023,3958],[101023,3958,4059],[101023,101024,4059],[101024,4059,4160],[101024,101025,4160],[101025,4160,4261],[101025,101026,4261],[101026,4261,4362],[101026,101027,4362],[101027,4362,4462],[4462,4463,4362],[101027,101028,4462],[101028,4462,4563],[101028,101029,4563],[101029,4563,4664],[101029,101030,4664],[101030,4664,4765],[101030,101031,4765],[101031,4765,4866],[101031,101032,4866],[101032,4866,4967],[101032,101033,4967],[101033,4967,5068],[101033,101034,5068],[101034,5068,5168],[5168,5169,5068],[101034,101035,5168],[101035,5168,5269],[101035,101036,5269],[101036,5269,5370],[101036,101037,5370],[101037,5370,5471],[101037,101038,5471],[101038,5471,5572],[101038,101039,5572],[101039,5572,5672],[5672,5673,5572],[101039,101040,5672],[101040,5672,5773],[101040,101041,5773],[101041,5773,5874],[101041,101042,5874],[101042,5874,5975],[101042,101043,5975],[101043,5975,6076],[101043,101044,6076],[101044,6076,6176],[6176,6177,6076],[101044,101045,6176],[101045,6176,6277],[101045,101046,6277],[101046,6277,6378],[101046,101047,6378],[101047,6378,6479],[101047,101048,6479],[101048,6479,6580],[101048,101049,6580],[101049,6580,6680],[6680,6681,6580],[101049,101050,6680],[101050,6680,6781],[101050,101051,6781],[101051,6781,6882],[101051,6882,6881],[6983,6982,6881],[6882,6881,6983],[101052,2845,2847],[2744,2746,2847],[2845,2847,2744],[101052,101053,2845],[101053,2845,2946],[101053,101054,2946],[101054,2946,3047],[101054,101055,3047],[101055,3047,3150],[101055,101056,3150],[101056,3150,3251],[101056,101057,3251],[101057,3251,3352],[101057,101058,3352],[101058,3352,3453],[101058,101059,3453],[101059,3453,3554],[101059,101060,3554],[101060,3554,3655],[101060,101061,3655],[101061,3655,3756],[101061,101062,3756],[101062,3756,3858],[3858,3857,3756],[101062,101063,3858],[101063,3858,3959],[101063,101064,3959],[101064,3959,4060],[101064,101065,4060],[101065,4060,4161],[101065,101066,4161],[101066,4161,4262],[101066,101067,4262],[101067,4262,4363],[101067,101068,4363],[101068,4363,4464],[101068,101069,4464],[101069,4464,4566],[4566,4565,4464],[101069,101070,4566],[101070,4566,4667],[101070,101071,4667],[101071,4667,4768],[101071,101072,4768],[101072,4768,4869],[101072,101073,4869],[101073,4869,4970],[101073,101074,4970],[101074,4970,5071],[101074,101075,5071],[101075,5071,5172],[101075,101076,5172],[101076,5172,5273],[101076,101077,5273],[101077,5273,5375],[5375,5374,5273],[101077,101078,5375],[101078,5375,5476],[101078,101079,5476],[101079,5476,5577],[101079,101080,5577],[101080,5577,5678],[101080,101081,5678],[101081,5678,5779],[101081,101082,5779],[101082,5779,5880],[101082,101083,5880],[101083,5880,5981],[101083,101084,5981],[101084,5981,6082],[101084,101085,6082],[101085,6082,6183],[101085,101086,6183],[101086,6183,6284],[101086,101087,6284],[101087,6284,6385],[101087,101088,6385],[101088,6385,6486],[101088,101089,6486],[101089,6486,6587],[101089,101090,6587],[101090,6587,6688],[101090,101091,6688],[101091,6688,6789],[101091,101092,6789],[101092,6789,6890],[101092,101093,6890],[101093,6890,6991],[101093,101094,6991],[101094,6991,7092],[101094,101095,7092],[101095,7092,7193],[101095,101096,7193],[101096,7193,7294],[101096,101097,7294],[101097,7294,7395],[101097,101098,7395],[101098,7395,7496],[101098,101099,7496],[101099,7496,7597],[101099,101100,7597],[101100,7597,7698],[101100,7698,7699],[7799,7800,7699],[7698,7699,7799],[101101,2847,2845],[2746,2744,2845],[2847,2845,2746],[101101,101102,2847],[101102,2847,2948],[101102,101103,2948],[101103,2948,3050],[3050,2949,2948],[101103,101104,3050],[101104,3050,3151],[101104,101105,3151],[101105,3151,3252],[101105,101106,3252],[101106,3252,3353],[101106,101107,3353],[101107,3353,3454],[101107,101108,3454],[101108,3454,3556],[3556,3455,3454],[101108,101109,3556],[101109,3556,3657],[101109,101110,3657],[101110,3657,3758],[101110,101111,3758],[101111,3758,3859],[101111,101112,3859],[101112,3859,3961],[3961,3860,3859],[101112,101113,3961],[101113,3961,4062],[101113,101114,4062],[101114,4062,4163],[101114,101115,4163],[101115,4163,4264],[101115,101116,4264],[101116,4264,4365],[101116,101117,4365],[101117,4365,4466],[101117,101118,4466],[101118,4466,4568],[4568,4467,4466],[101118,101119,4568],[101119,4568,4669],[101119,101120,4669],[101120,4669,4770],[101120,101121,4770],[101121,4770,4871],[101121,101122,4871],[101122,4871,4972],[101122,101123,4972],[101123,4972,5073],[101123,101124,5073],[101124,5073,5174],[101124,101125,5174],[101125,5174,5275],[101125,101126,5275],[101126,5275,5377],[5377,5276,5275],[101126,101127,5377],[101127,5377,5478],[101127,101128,5478],[101128,5478,5579],[101128,101129,5579],[101129,5579,5680],[101129,101130,5680],[101130,5680,5781],[101130,101131,5781],[101131,5781,5882],[101131,101132,5882],[101132,5882,5983],[101132,101133,5983],[101133,5983,6084],[101133,101134,6084],[101134,6084,6185],[101134,101135,6185],[101135,6185,6286],[101135,101136,6286],[101136,6286,6387],[101136,101137,6387],[101137,6387,6488],[101137,101138,6488],[101138,6488,6589],[101138,101139,6589],[101139,6589,6690],[101139,101140,6690],[101140,6690,6791],[101140,101141,6791],[101141,6791,6892],[101141,101142,6892],[101142,6892,6993],[101142,101143,6993],[101143,6993,7094],[101143,101144,7094],[101144,7094,7195],[101144,101145,7195],[101145,7195,7296],[101145,101146,7296],[101146,7296,7397],[101146,101147,7397],[101147,7397,7497],[7497,7498,7397],[101147,101148,7497],[101148,7497,7598],[101148,101149,7598],[101149,7598,7699],[101149,7699,7698],[7800,7799,7698],[7699,7698,7800],[101150,101151,81],[101151,81,182],[101151,101152,182],[101152,182,283],[101152,101153,283],[101153,283,384],[101153,101154,384],[101154,384,485],[101154,101155,485],[101155,485,587],[587,586,485],[101155,101156,587],[101156,587,688],[101156,101157,688],[101157,688,789],[101157,101158,789],[101158,789,890],[101158,101159,890],[101159,890,991],[101159,101160,991],[101160,991,1092],[101160,101161,1092],[101161,1092,1193],[101161,101162,1193],[101162,1193,1294],[101162,101163,1294],[101163,1294,1395],[101163,101164,1395],[101164,1395,1497],[1497,1496,1395],[101164,101165,1497],[101165,1497,1598],[101165,101166,1598],[101166,1598,1699],[101166,101167,1699],[101167,1699,1800],[101167,101168,1800],[101168,1800,1901],[101168,101169,1901],[101169,1901,2002],[101169,101170,2002],[101170,2002,2103],[101170,101171,2103],[101171,2103,2204],[101171,101172,2204],[101172,2204,2305],[101172,101173,2305],[101173,2305,2407],[2407,2406,2305],[101173,101174,2407],[101174,2407,2508],[101174,101175,2508],[101175,2508,2609],[101175,101176,2609],[101176,2609,2710],[101176,101177,2710],[101177,2710,2811],[101177,101178,2811],[101178,2811,2912],[101178,101179,2912],[101179,2912,3013],[101179,101180,3013],[101180,3013,3114],[101180,101181,3114],[101181,3114,3216],[3216,3215,3114],[101181,101182,3216],[101182,3216,3317],[101182,101183,3317],[101183,3317,3418],[101183,101184,3418],[101184,3418,3519],[101184,101185,3519],[101185,3519,3620],[101185,101186,3620],[101186,3620,3721],[101186,101187,3721],[101187,3721,3822],[101187,101188,3822],[101188,3822,3923],[101188,101189,3923],[101189,3923,4025],[4025,4024,3923],[101189,101190,4025],[101190,4025,4126],[101190,101191,4126],[101191,4126,4227],[101191,101192,4227],[101192,4227,4328],[101192,101193,4328],[101193,4328,4429],[101193,101194,4429],[101194,4429,4530],[101194,101195,4530],[101195,4530,4631],[101195,101196,4631],[101196,4631,4733],[4733,4732,4631],[101196,101197,4733],[101197,4733,4834],[101197,101198,4834],[101198,4834,4935],[101198,101199,4935],[101199,4935,5036],[101199,101200,5036],[101200,5036,5137],[101200,101201,5137],[101201,5137,5238],[101201,101202,5238],[101202,5238,5339],[101202,101203,5339],[101203,5339,5440],[101203,101204,5440],[101204,5440,5541],[101204,101205,5541],[101205,5541,5642],[101205,101206,5642],[101206,5642,5743],[101206,101207,5743],[101207,5743,5844],[101207,101208,5844],[101208,5844,5945],[101208,101209,5945],[101209,5945,6046],[101209,101210,6046],[101210,6046,6147],[101210,101211,6147],[101211,6147,6248],[101211,101212,6248],[101212,6248,6349],[101212,101213,6349],[101213,6349,6450],[101213,101214,6450],[101214,6450,6551],[101214,101215,6551],[101215,6551,6652],[101215,101216,6652],[101216,6652,6753],[101216,101217,6753],[101217,6753,6854],[101217,101218,6854],[101218,6854,6955],[101218,101219,6955],[101219,6955,7056],[101219,101220,7056],[101220,7056,7157],[101220,101221,7157],[101221,7157,7258],[101221,101222,7258],[101222,7258,7359],[101222,101223,7359],[101223,7359,7460],[101223,101224,7460],[101225,101226,83],[101226,83,184],[101226,101227,184],[101227,184,285],[101227,101228,285],[101228,285,387],[387,286,285],[101228,101229,387],[101229,387,488],[101229,101230,488],[101230,488,589],[101230,101231,589],[101231,589,690],[101231,101232,690],[101232,690,791],[101232,101233,791],[101233,791,892],[101233,101234,892],[101234,892,994],[994,893,892],[101234,101235,994],[101235,994,1095],[101235,101236,1095],[101236,1095,1196],[101236,101237,1196],[101237,1196,1297],[101237,101238,1297],[101238,1297,1398],[101238,101239,1398],[101239,1398,1499],[101239,101240,1499],[101240,1499,1600],[101240,101241,1600],[101241,1600,1702],[1702,1601,1600],[101241,101242,1702],[101242,1702,1803],[101242,101243,1803],[101243,1803,1904],[101243,101244,1904],[101244,1904,2005],[101244,101245,2005],[101245,2005,2106],[101245,101246,2106],[101246,2106,2207],[101246,101247,2207],[101247,2207,2308],[101247,101248,2308],[101248,2308,2410],[2410,2309,2308],[101248,101249,2410],[101249,2410,2511],[101249,101250,2511],[101250,2511,2612],[101250,101251,2612],[101251,2612,2713],[101251,101252,2713],[101252,2713,2814],[101252,101253,2814],[101253,2814,2915],[101253,101254,2915],[101254,2915,3016],[101254,101255,3016],[101255,3016,3117],[101255,101256,3117],[101256,3117,3218],[101256,101257,3218],[101257,3218,3320],[3320,3219,3218],[101257,101258,3320],[101258,3320,3421],[101258,101259,3421],[101259,3421,3522],[101259,101260,3522],[101260,3522,3623],[101260,101261,3623],[101261,3623,3724],[101261,101262,3724],[101262,3724,3825],[101262,101263,3825],[101263,3825,3926],[101263,101264,3926],[101264,3926,4027],[101264,101265,4027],[101265,4027,4128],[101265,101266,4128],[101266,4128,4229],[101266,101267,4229],[101267,4229,4331],[4331,4230,4229],[101267,101268,4331],[101268,4331,4432],[101268,101269,4432],[101269,4432,4533],[101269,101270,4533],[101270,4533,4634],[101270,101271,4634],[101271,4634,4735],[101271,101272,4735],[101272,4735,4836],[101272,101273,4836],[101273,4836,4937],[101273,101274,4937],[101274,4937,5038],[101274,101275,5038],[101275,5038,5139],[101275,101276,5139],[101276,5139,5240],[101276,101277,5240],[101277,5240,5341],[101277,101278,5341],[101278,5341,5442],[101278,101279,5442],[101279,5442,5543],[101279,101280,5543],[101280,5543,5644],[101280,101281,5644],[101281,5644,5745],[101281,101282,5745],[101282,5745,5846],[101282,101283,5846],[101283,5846,5947],[101283,101284,5947],[101284,5947,6048],[101284,101285,6048],[101285,6048,6149],[101285,101286,6149],[101286,6149,6250],[101286,101287,6250],[101287,6250,6351],[101287,101288,6351],[101288,6351,6452],[101288,101289,6452],[101289,6452,6553],[101289,101290,6553],[101290,6553,6654],[101290,101291,6654],[101291,6654,6755],[101291,101292,6755],[101292,6755,6856],[101292,101293,6856],[101293,6856,6957],[101293,101294,6957],[101294,6957,7058],[101294,101295,7058],[101295,7058,7158],[7158,7159,7058],[101295,101296,7158],[101296,7158,7259],[101296,101297,7259],[101297,7259,7360],[101297,101298,7360],[101298,7360,7461],[101298,101299,7461],[101300,6926,6927],[6825,6826,6927],[6926,6927,6825],[101300,101301,6926],[101301,6926,7027],[101301,101302,7027],[101302,7027,7128],[101302,101303,7128],[101303,7128,7229],[101303,101304,7229],[101304,7229,7330],[101304,101305,7330],[101305,7330,7431],[101305,101306,7431],[101306,7431,7532],[101306,101307,7532],[101307,7532,7633],[101307,101308,7633],[101308,7633,7734],[101308,101309,7734],[101309,7734,7835],[101309,101310,7835],[101310,7835,7936],[101310,101311,7936],[101311,7936,8037],[101311,101312,8037],[101312,8037,8138],[101312,101313,8138],[101313,8138,8239],[101313,101314,8239],[101314,8239,8340],[101314,101315,8340],[101315,8340,8441],[101315,101316,8441],[101316,8441,8542],[101316,101317,8542],[101317,8542,8643],[101317,101318,8643],[101318,8643,8744],[101318,101319,8744],[101319,8744,8845],[101319,101320,8845],[101320,8845,8946],[101320,101321,8946],[101321,8946,9047],[101321,101322,9047],[101322,9047,9148],[101322,101323,9148],[101323,9148,9249],[101323,101324,9249],[101324,9249,9350],[101324,101325,9350],[101325,9350,9451],[101325,101326,9451],[101326,9451,9552],[101326,101327,9552],[101327,9552,9653],[101327,101328,9653],[101328,9653,9754],[101328,101329,9754],[101329,9754,9855],[101329,101330,9855],[101330,9855,9956],[101330,101331,9956],[101331,9956,10057],[101331,101332,10057],[101332,10057,10158],[101332,101333,10158],[101333,10158,10259],[101333,101334,10259],[101334,10259,10360],[101334,10360,10361],[10461,10462,10361],[10360,10361,10461],[101335,6927,6926],[6826,6825,6926],[6927,6926,6826],[101335,101336,6927],[101336,6927,7028],[101336,101337,7028],[101337,7028,7129],[101337,101338,7129],[101338,7129,7230],[101338,101339,7230],[101339,7230,7331],[101339,101340,7331],[101340,7331,7432],[101340,101341,7432],[101341,7432,7533],[101341,101342,7533],[101342,7533,7634],[101342,101343,7634],[101343,7634,7735],[101343,101344,7735],[101344,7735,7836],[101344,101345,7836],[101345,7836,7937],[101345,101346,7937],[101346,7937,8038],[101346,101347,8038],[101347,8038,8139],[101347,101348,8139],[101348,8139,8240],[101348,101349,8240],[101349,8240,8341],[101349,101350,8341],[101350,8341,8442],[101350,101351,8442],[101351,8442,8543],[101351,101352,8543],[101352,8543,8644],[101352,101353,8644],[101353,8644,8745],[101353,101354,8745],[101354,8745,8846],[101354,101355,8846],[101355,8846,8947],[101355,101356,8947],[101356,8947,9048],[101356,101357,9048],[101357,9048,9149],[101357,101358,9149],[101358,9149,9250],[101358,101359,9250],[101359,9250,9351],[101359,101360,9351],[101360,9351,9452],[101360,101361,9452],[101361,9452,9553],[101361,101362,9553],[101362,9553,9654],[101362,101363,9654],[101363,9654,9755],[101363,101364,9755],[101364,9755,9856],[101364,101365,9856],[101365,9856,9957],[101365,101366,9957],[101366,9957,10058],[101366,101367,10058],[101367,10058,10159],[101367,101368,10159],[101368,10159,10260],[101368,101369,10260],[101369,10260,10361],[101369,10361,10360],[10462,10461,10360],[10361,10360,10462],[101370,3673,3674],[3572,3573,3674],[3673,3674,3572],[101370,101371,3673],[101371,3673,3773],[3773,3672,3673],[101371,101372,3773],[101372,3773,3874],[101372,101373,3874],[101373,3874,3975],[101373,101374,3975],[101374,3975,4075],[4075,3974,3975],[101374,101375,4075],[101375,4075,4176],[101375,101376,4176],[101376,4176,4277],[101376,101377,4277],[101377,4277,4377],[4377,4276,4277],[101377,101378,4377],[101378,4377,4478],[101378,101379,4478],[101379,4478,4579],[101379,101380,4579],[101380,4579,4680],[101380,101381,4680],[101381,4680,4780],[4780,4679,4680],[101381,101382,4780],[101382,4780,4881],[101382,101383,4881],[101383,4881,4982],[101383,101384,4982],[101384,4982,5083],[101384,101385,5083],[101385,5083,5183],[5183,5082,5083],[101385,101386,5183],[101386,5183,5284],[101386,101387,5284],[101387,5284,5385],[101387,101388,5385],[101388,5385,5486],[101388,101389,5486],[101389,5486,5587],[101389,101390,5587],[101390,5587,5688],[101390,101391,5688],[101391,5688,5788],[5788,5687,5688],[101391,101392,5788],[101392,5788,5889],[101392,101393,5889],[101393,5889,5990],[101393,101394,5990],[101394,5990,6091],[101394,101395,6091],[101395,6091,6192],[101395,101396,6192],[101396,6192,6293],[101396,101397,6293],[101397,6293,6394],[101397,101398,6394],[101398,6394,6495],[101398,101399,6495],[101399,6495,6596],[101399,101400,6596],[101400,6596,6697],[101400,101401,6697],[101401,6697,6798],[101401,101402,6798],[101402,6798,6898],[6898,6797,6798],[101402,101403,6898],[101403,6898,6999],[101403,101404,6999],[101404,6999,7100],[101404,101405,7100],[101405,7100,7201],[101405,101406,7201],[101406,7201,7302],[101406,101407,7302],[101407,7302,7403],[101407,101408,7403],[101408,7403,7504],[101408,101409,7504],[101409,7504,7605],[101409,101410,7605],[101410,7605,7706],[101410,101411,7706],[101411,7706,7807],[101411,101412,7807],[101412,7807,7908],[101412,101413,7908],[101413,7908,8009],[101413,101414,8009],[101414,8009,8110],[101414,101415,8110],[101415,8110,8211],[101415,101416,8211],[101416,8211,8312],[101416,101417,8312],[101417,8312,8413],[101417,101418,8413],[101418,8413,8514],[101418,101419,8514],[101419,8514,8615],[101419,101420,8615],[101420,8615,8716],[101420,101421,8716],[101421,8716,8818],[8818,8817,8716],[101421,101422,8818],[101422,8818,8919],[101422,101423,8919],[101423,8919,9020],[101423,101424,9020],[101424,9020,9121],[101424,101425,9121],[101425,9121,9222],[101425,101426,9222],[101426,9222,9323],[101426,101427,9323],[101427,9323,9424],[101427,101428,9424],[101428,9424,9525],[101428,9525,9526],[9626,9627,9526],[9525,9526,9626],[101429,3674,3673],[3573,3572,3673],[3674,3673,3573],[101429,101430,3674],[101430,3674,3775],[101430,101431,3775],[101431,3775,3876],[101431,101432,3876],[101432,3876,3976],[3976,3977,3876],[101432,101433,3976],[101433,3976,4077],[101433,101434,4077],[101434,4077,4178],[101434,101435,4178],[101435,4178,4279],[101435,101436,4279],[101436,4279,4380],[101436,101437,4380],[101437,4380,4481],[101437,101438,4481],[101438,4481,4582],[101438,101439,4582],[101439,4582,4682],[4682,4683,4582],[101439,101440,4682],[101440,4682,4783],[101440,101441,4783],[101441,4783,4884],[101441,101442,4884],[101442,4884,4985],[101442,101443,4985],[101443,4985,5086],[101443,101444,5086],[101444,5086,5187],[101444,101445,5187],[101445,5187,5288],[101445,101446,5288],[101446,5288,5389],[101446,101447,5389],[101447,5389,5490],[101447,101448,5490],[101448,5490,5591],[101448,101449,5591],[101449,5591,5691],[5691,5692,5591],[101449,101450,5691],[101450,5691,5792],[101450,101451,5792],[101451,5792,5893],[101451,101452,5893],[101452,5893,5994],[101452,101453,5994],[101453,5994,6095],[101453,101454,6095],[101454,6095,6196],[101454,101455,6196],[101455,6196,6297],[101455,101456,6297],[101456,6297,6398],[101456,101457,6398],[101457,6398,6499],[101457,101458,6499],[101458,6499,6600],[101458,101459,6600],[101459,6600,6701],[101459,101460,6701],[101460,6701,6802],[101460,101461,6802],[101461,6802,6903],[101461,101462,6903],[101462,6903,7004],[101462,101463,7004],[101463,7004,7104],[7104,7105,7004],[101463,101464,7104],[101464,7104,7205],[101464,101465,7205],[101465,7205,7306],[101465,101466,7306],[101466,7306,7407],[101466,101467,7407],[101467,7407,7508],[101467,101468,7508],[101468,7508,7609],[101468,101469,7609],[101469,7609,7710],[101469,101470,7710],[101470,7710,7811],[101470,101471,7811],[101471,7811,7912],[101471,101472,7912],[101472,7912,8012],[8012,8013,7912],[101472,101473,8012],[101473,8012,8113],[101473,101474,8113],[101474,8113,8214],[101474,101475,8214],[101475,8214,8315],[101475,101476,8315],[101476,8315,8416],[101476,101477,8416],[101477,8416,8517],[101477,101478,8517],[101478,8517,8618],[101478,101479,8618],[101479,8618,8719],[101479,101480,8719],[101480,8719,8820],[101480,101481,8820],[101481,8820,8921],[101481,101482,8921],[101482,8921,9022],[101482,101483,9022],[101483,9022,9123],[101483,101484,9123],[101484,9123,9223],[9223,9224,9123],[101484,101485,9223],[101485,9223,9324],[101485,101486,9324],[101486,9324,9425],[101486,101487,9425],[101487,9425,9526],[101487,9526,9525],[9627,9626,9525],[9526,9525,9627],[101488,5893,5894],[5792,5793,5894],[5893,5894,5792],[101488,101489,5893],[101489,5893,5994],[101489,101490,5994],[101490,5994,6095],[101490,101491,6095],[101491,6095,6196],[101491,101492,6196],[101492,6196,6297],[101492,101493,6297],[101493,6297,6398],[101493,101494,6398],[101494,6398,6499],[101494,101495,6499],[101495,6499,6600],[101495,101496,6600],[101496,6600,6701],[101496,101497,6701],[101497,6701,6802],[101497,101498,6802],[101498,6802,6903],[101498,101499,6903],[101499,6903,7004],[101499,101500,7004],[101500,7004,7105],[101500,101501,7105],[101501,7105,7206],[101501,101502,7206],[101502,7206,7307],[101502,101503,7307],[101503,7307,7408],[101503,101504,7408],[101504,7408,7510],[7510,7509,7408],[101504,101505,7510],[101505,7510,7611],[101505,101506,7611],[101506,7611,7712],[101506,101507,7712],[101507,7712,7813],[101507,101508,7813],[101508,7813,7914],[101508,101509,7914],[101509,7914,8015],[101509,101510,8015],[101510,8015,8117],[8117,8116,8015],[101510,101511,8117],[101511,8117,8218],[101511,101512,8218],[101512,8218,8319],[101512,101513,8319],[101513,8319,8420],[101513,101514,8420],[101514,8420,8521],[101514,101515,8521],[101515,8521,8623],[8623,8622,8521],[101515,101516,8623],[101516,8623,8724],[101516,101517,8724],[101517,8724,8825],[101517,101518,8825],[101519,5894,5893],[5793,5792,5893],[5894,5893,5793],[101519,101520,5894],[101520,5894,5995],[101520,101521,5995],[101521,5995,6096],[101521,101522,6096],[101522,6096,6197],[101522,101523,6197],[101523,6197,6298],[101523,101524,6298],[101524,6298,6399],[101524,101525,6399],[101525,6399,6500],[101525,101526,6500],[101526,6500,6601],[101526,101527,6601],[101527,6601,6702],[101527,101528,6702],[101528,6702,6803],[101528,101529,6803],[101529,6803,6905],[6905,6804,6803],[101529,101530,6905],[101530,6905,7006],[101530,101531,7006],[101531,7006,7107],[101531,101532,7107],[101532,7107,7208],[101532,101533,7208],[101533,7208,7309],[101533,101534,7309],[101534,7309,7410],[101534,101535,7410],[101535,7410,7511],[101535,101536,7511],[101536,7511,7612],[101536,101537,7612],[101537,7612,7713],[101537,101538,7713],[101538,7713,7815],[7815,7714,7713],[101538,101539,7815],[101539,7815,7916],[101539,101540,7916],[101540,7916,8017],[101540,101541,8017],[101541,8017,8118],[101541,101542,8118],[101542,8118,8219],[101542,101543,8219],[101543,8219,8320],[101543,101544,8320],[101544,8320,8421],[101544,101545,8421],[101545,8421,8523],[8523,8422,8421],[101545,101546,8523],[101546,8523,8624],[101546,101547,8624],[101547,8624,8725],[101547,101548,8725],[101548,8725,8826],[101548,101549,8826],[101550,8909,8910],[8808,8809,8910],[8909,8910,8808],[101550,101551,8909],[101551,8909,9010],[101551,101552,9010],[101552,9010,9111],[101552,101553,9111],[101553,9111,9212],[101553,101554,9212],[101554,9212,9313],[101554,101555,9313],[101555,9313,9415],[9415,9414,9313],[101555,101556,9415],[101556,9415,9516],[101556,101557,9516],[101557,9516,9617],[101557,101558,9617],[101558,9617,9718],[101558,101559,9718],[101559,9718,9819],[101559,101560,9819],[101560,9819,9920],[101560,101561,9920],[101561,9920,10021],[101561,101562,10021],[101562,10021,10122],[101562,101563,10122],[101563,10122,10223],[101563,101564,10223],[101564,10223,10324],[101564,101565,10324],[101565,10324,10425],[101565,101566,10425],[101566,10425,10526],[101566,101567,10526],[101567,10526,10627],[101567,101568,10627],[101568,10627,10729],[10729,10728,10627],[101568,101569,10729],[101569,10729,10830],[101569,101570,10830],[101570,10830,10931],[101570,101571,10931],[101571,10931,11032],[101571,101572,11032],[101572,11032,11133],[101572,101573,11133],[101573,11133,11234],[101573,101574,11234],[101574,11234,11335],[101574,101575,11335],[101575,11335,11436],[101575,101576,11436],[101576,11436,11537],[101576,101577,11537],[101577,11537,11639],[11639,11638,11537],[101577,101578,11639],[101578,11639,11740],[101578,101579,11740],[101579,11740,11841],[101579,101580,11841],[101580,11841,11942],[101580,101581,11942],[101581,11942,12043],[101581,101582,12043],[101582,12043,12144],[101582,101583,12144],[101583,12144,12245],[101583,101584,12245],[101584,12245,12346],[101584,101585,12346],[101585,12346,12447],[101585,101586,12447],[101586,12447,12548],[101586,101587,12548],[101587,12548,12649],[101587,101588,12649],[101588,12649,12751],[12751,12750,12649],[101588,101589,12751],[101589,12751,12852],[101589,101590,12852],[101590,12852,12953],[101590,12953,12954],[13054,13055,12954],[12953,12954,13054],[101591,8910,8909],[8809,8808,8909],[8910,8909,8809],[101591,101592,8910],[101592,8910,9011],[101592,101593,9011],[101593,9011,9112],[101593,101594,9112],[101594,9112,9214],[9214,9113,9112],[101594,101595,9214],[101595,9214,9315],[101595,101596,9315],[101596,9315,9416],[101596,101597,9416],[101597,9416,9517],[101597,101598,9517],[101598,9517,9618],[101598,101599,9618],[101599,9618,9719],[101599,101600,9719],[101600,9719,9820],[101600,101601,9820],[101601,9820,9921],[101601,101602,9921],[101602,9921,10022],[101602,101603,10022],[101603,10022,10124],[10124,10023,10022],[101603,101604,10124],[101604,10124,10225],[101604,101605,10225],[101605,10225,10326],[101605,101606,10326],[101606,10326,10427],[101606,101607,10427],[101607,10427,10528],[101607,101608,10528],[101608,10528,10629],[101608,101609,10629],[101609,10629,10730],[101609,101610,10730],[101610,10730,10831],[101610,101611,10831],[101611,10831,10932],[101611,101612,10932],[101612,10932,11033],[101612,101613,11033],[101613,11033,11135],[11135,11034,11033],[101613,101614,11135],[101614,11135,11236],[101614,101615,11236],[101615,11236,11337],[101615,101616,11337],[101616,11337,11438],[101616,101617,11438],[101617,11438,11539],[101617,101618,11539],[101618,11539,11640],[101618,101619,11640],[101619,11640,11741],[101619,101620,11741],[101620,11741,11842],[101620,101621,11842],[101621,11842,11943],[101621,101622,11943],[101622,11943,12044],[101622,101623,12044],[101623,12044,12145],[101623,101624,12145],[101624,12145,12247],[12247,12146,12145],[101624,101625,12247],[101625,12247,12348],[101625,101626,12348],[101626,12348,12449],[101626,101627,12449],[101627,12449,12550],[101627,101628,12550],[101628,12550,12651],[101628,101629,12651],[101629,12651,12752],[101629,101630,12752],[101630,12752,12853],[101630,101631,12853],[101631,12853,12954],[101631,12954,12953],[13055,13054,12953],[12954,12953,13055],[101632,9326,9327],[9225,9226,9327],[9326,9327,9225],[101632,101633,9326],[101633,9326,9427],[101633,101634,9427],[101634,9427,9528],[101634,101635,9528],[101635,9528,9629],[101635,101636,9629],[101636,9629,9730],[101636,101637,9730],[101637,9730,9831],[101637,101638,9831],[101638,9831,9932],[101638,101639,9932],[101639,9932,10033],[101639,101640,10033],[101640,10033,10134],[101640,101641,10134],[101641,10134,10235],[101641,101642,10235],[101642,10235,10337],[10337,10336,10235],[101642,101643,10337],[101643,10337,10438],[101643,101644,10438],[101644,10438,10539],[101644,101645,10539],[101645,10539,10640],[101645,101646,10640],[101646,10640,10741],[101646,101647,10741],[101647,10741,10842],[101647,101648,10842],[101648,10842,10943],[101648,101649,10943],[101649,10943,11044],[101649,101650,11044],[101650,11044,11145],[101650,101651,11145],[101651,11145,11246],[101651,101652,11246],[101652,11246,11347],[101652,101653,11347],[101653,11347,11448],[101653,101654,11448],[101654,11448,11549],[101654,101655,11549],[101655,11549,11650],[101655,101656,11650],[101656,11650,11751],[101656,101657,11751],[101657,11751,11852],[101657,101658,11852],[101658,11852,11953],[101658,101659,11953],[101659,11953,12054],[101659,101660,12054],[101660,12054,12155],[101660,101661,12155],[101661,12155,12256],[101661,101662,12256],[101662,12256,12357],[101662,101663,12357],[101663,12357,12459],[12459,12458,12357],[101663,101664,12459],[101664,12459,12560],[101664,101665,12560],[101665,12560,12661],[101665,101666,12661],[101666,12661,12762],[101666,101667,12762],[101667,12762,12863],[101667,101668,12863],[101668,12863,12964],[101668,101669,12964],[101669,12964,13065],[101669,101670,13065],[101670,13065,13166],[101670,13166,13167],[13267,13268,13167],[13166,13167,13267],[101671,9327,9326],[9226,9225,9326],[9327,9326,9226],[101671,101672,9327],[101672,9327,9428],[101672,101673,9428],[101673,9428,9529],[101673,101674,9529],[101674,9529,9630],[101674,101675,9630],[101675,9630,9732],[9732,9631,9630],[101675,101676,9732],[101676,9732,9833],[101676,101677,9833],[101677,9833,9934],[101677,101678,9934],[101678,9934,10035],[101678,101679,10035],[101679,10035,10136],[101679,101680,10136],[101680,10136,10237],[101680,101681,10237],[101681,10237,10338],[101681,101682,10338],[101682,10338,10439],[101682,101683,10439],[101683,10439,10540],[101683,101684,10540],[101684,10540,10642],[10642,10541,10540],[101684,101685,10642],[101685,10642,10743],[101685,101686,10743],[101686,10743,10844],[101686,101687,10844],[101687,10844,10945],[101687,101688,10945],[101688,10945,11046],[101688,101689,11046],[101689,11046,11147],[101689,101690,11147],[101690,11147,11248],[101690,101691,11248],[101691,11248,11349],[101691,101692,11349],[101692,11349,11450],[101692,101693,11450],[101693,11450,11551],[101693,101694,11551],[101694,11551,11652],[101694,101695,11652],[101695,11652,11753],[101695,101696,11753],[101696,11753,11854],[101696,101697,11854],[101697,11854,11955],[101697,101698,11955],[101698,11955,12056],[101698,101699,12056],[101699,12056,12157],[101699,101700,12157],[101700,12157,12258],[101700,101701,12258],[101701,12258,12359],[101701,101702,12359],[101702,12359,12460],[101702,101703,12460],[101703,12460,12561],[101703,101704,12561],[101704,12561,12662],[101704,101705,12662],[101705,12662,12763],[101705,101706,12763],[101706,12763,12864],[101706,101707,12864],[101707,12864,12965],[101707,101708,12965],[101708,12965,13066],[101708,101709,13066],[101709,13066,13167],[101709,13167,13166],[13268,13267,13166],[13167,13166,13268],[101710,12614,12615],[12513,12514,12615],[12614,12615,12513],[101710,101711,12614],[101711,12614,12715],[101711,101712,12715],[101712,12715,12816],[101712,101713,12816],[101713,12816,12916],[12916,12815,12816],[101713,101714,12916],[101714,12916,13017],[101714,101715,13017],[101715,13017,13118],[101715,101716,13118],[101716,13118,13218],[13218,13117,13118],[101716,101717,13218],[101717,13218,13319],[101717,101718,13319],[101718,13319,13420],[101719,12615,12614],[12514,12513,12614],[12615,12614,12514],[101719,101720,12615],[101720,12615,12716],[101720,101721,12716],[101721,12716,12817],[101721,101722,12817],[101722,12817,12918],[101722,101723,12918],[101723,12918,13018],[13018,13019,12918],[101723,101724,13018],[101724,13018,13119],[101724,101725,13119],[101725,13119,13220],[101725,101726,13220],[101726,13220,13321],[101726,101727,13321],[101727,13321,13422],[101728,9377,9378],[9276,9277,9378],[9377,9378,9276],[101728,101729,9377],[101729,9377,9478],[101729,101730,9478],[101730,9478,9578],[9578,9477,9478],[101730,101731,9578],[101731,9578,9679],[101731,101732,9679],[101732,9679,9779],[9779,9678,9679],[101732,101733,9779],[101733,9779,9880],[101733,101734,9880],[101734,9880,9981],[101734,101735,9981],[101735,9981,10081],[10081,9980,9981],[101735,101736,10081],[101736,10081,10182],[101736,101737,10182],[101737,10182,10283],[101737,101738,10283],[101738,10283,10383],[10383,10282,10283],[101738,101739,10383],[101739,10383,10484],[101739,101740,10484],[101740,10484,10585],[101740,101741,10585],[101741,10585,10685],[10685,10584,10585],[101741,101742,10685],[101742,10685,10786],[101742,101743,10786],[101743,10786,10887],[101743,101744,10887],[101744,10887,10987],[10987,10886,10887],[101744,101745,10987],[101745,10987,11088],[101745,101746,11088],[101746,11088,11189],[101746,101747,11189],[101747,11189,11290],[101747,101748,11290],[101748,11290,11391],[101748,101749,11391],[101749,11391,11492],[101749,101750,11492],[101750,11492,11592],[11592,11491,11492],[101750,101751,11592],[101751,11592,11693],[101751,101752,11693],[101752,11693,11794],[101752,101753,11794],[101753,11794,11895],[101753,101754,11895],[101754,11895,11996],[101754,101755,11996],[101755,11996,12097],[101755,101756,12097],[101756,12097,12198],[101756,101757,12198],[101757,12198,12299],[101757,101758,12299],[101758,12299,12400],[101758,101759,12400],[101759,12400,12501],[101759,101760,12501],[101760,12501,12601],[12601,12500,12501],[101760,101761,12601],[101761,12601,12702],[101761,101762,12702],[101762,12702,12803],[101762,101763,12803],[101763,12803,12904],[101763,101764,12904],[101764,12904,13005],[101764,101765,13005],[101765,13005,13106],[101765,101766,13106],[101766,13106,13207],[101766,101767,13207],[101767,13207,13308],[101767,101768,13308],[101768,13308,13409],[101769,9378,9377],[9277,9276,9377],[9378,9377,9277],[101769,101770,9378],[101770,9378,9479],[101770,101771,9479],[101771,9479,9579],[9579,9580,9479],[101771,101772,9579],[101772,9579,9680],[101772,101773,9680],[101773,9680,9781],[101773,101774,9781],[101774,9781,9881],[9881,9882,9781],[101774,101775,9881],[101775,9881,9982],[101775,101776,9982],[101776,9982,10083],[101776,101777,10083],[101777,10083,10183],[10183,10184,10083],[101777,101778,10183],[101778,10183,10284],[101778,101779,10284],[101779,10284,10385],[101779,101780,10385],[101780,10385,10485],[10485,10486,10385],[101780,101781,10485],[101781,10485,10586],[101781,101782,10586],[101782,10586,10687],[101782,101783,10687],[101783,10687,10788],[101783,101784,10788],[101784,10788,10888],[10888,10889,10788],[101784,101785,10888],[101785,10888,10989],[101785,101786,10989],[101786,10989,11090],[101786,101787,11090],[101787,11090,11191],[101787,101788,11191],[101788,11191,11291],[11291,11292,11191],[101788,101789,11291],[101789,11291,11392],[101789,101790,11392],[101790,11392,11493],[101790,101791,11493],[101791,11493,11594],[101791,101792,11594],[101792,11594,11695],[101792,101793,11695],[101793,11695,11796],[101793,101794,11796],[101794,11796,11897],[101794,101795,11897],[101795,11897,11997],[11997,11998,11897],[101795,101796,11997],[101796,11997,12098],[101796,101797,12098],[101797,12098,12199],[101797,101798,12199],[101798,12199,12300],[101798,101799,12300],[101799,12300,12401],[101799,101800,12401],[101800,12401,12502],[101800,101801,12502],[101801,12502,12603],[101801,101802,12603],[101802,12603,12704],[101802,101803,12704],[101803,12704,12805],[101803,101804,12805],[101804,12805,12906],[101804,101805,12906],[101805,12906,13007],[101805,101806,13007],[101806,13007,13108],[101806,101807,13108],[101807,13108,13209],[101807,101808,13209],[101808,13209,13309],[13309,13310,13209],[101808,101809,13309],[101809,13309,13410],[101810,101811,12],[101811,12,113],[101811,101812,113],[101812,113,214],[101812,101813,214],[101813,214,315],[101813,101814,315],[101814,315,416],[101814,101815,416],[101815,416,516],[516,415,416],[101815,101816,516],[101816,516,617],[101816,101817,617],[101817,617,718],[101817,101818,718],[101818,718,819],[101818,101819,819],[101819,819,920],[101819,101820,920],[101820,920,1021],[101820,101821,1021],[101821,1021,1122],[101821,101822,1122],[101822,1122,1223],[101822,101823,1223],[101823,1223,1324],[101823,101824,1324],[101824,1324,1425],[101824,101825,1425],[101825,1425,1526],[101825,101826,1526],[101826,1526,1627],[101826,101827,1627],[101827,1627,1728],[101827,101828,1728],[101828,1728,1829],[101828,101829,1829],[101829,1829,1930],[101829,101830,1930],[101830,1930,2030],[2030,1929,1930],[101830,101831,2030],[101831,2030,2131],[101831,101832,2131],[101832,2131,2232],[101832,101833,2232],[101833,2232,2333],[101833,101834,2333],[101834,2333,2434],[101834,101835,2434],[101835,2434,2535],[101835,101836,2535],[101836,2535,2636],[101836,101837,2636],[101837,2636,2737],[101837,101838,2737],[101838,2737,2838],[101838,2838,2839],[2939,2940,2839],[2838,2839,2939],[101839,101840,14],[101840,14,115],[101840,101841,115],[101841,115,216],[101841,101842,216],[101842,216,317],[101842,101843,317],[101843,317,418],[101843,101844,418],[101844,418,518],[518,519,418],[101844,101845,518],[101845,518,619],[101845,101846,619],[101846,619,720],[101846,101847,720],[101847,720,821],[101847,101848,821],[101848,821,922],[101848,101849,922],[101849,922,1023],[101849,101850,1023],[101850,1023,1124],[101850,101851,1124],[101851,1124,1225],[101851,101852,1225],[101852,1225,1326],[101852,101853,1326],[101853,1326,1427],[101853,101854,1427],[101854,1427,1528],[101854,101855,1528],[101855,1528,1629],[101855,101856,1629],[101856,1629,1730],[101856,101857,1730],[101857,1730,1831],[101857,101858,1831],[101858,1831,1932],[101858,101859,1932],[101859,1932,2032],[2032,2033,1932],[101859,101860,2032],[101860,2032,2133],[101860,101861,2133],[101861,2133,2234],[101861,101862,2234],[101862,2234,2335],[101862,101863,2335],[101863,2335,2436],[101863,101864,2436],[101864,2436,2537],[101864,101865,2537],[101865,2537,2638],[101865,101866,2638],[101866,2638,2739],[101866,101867,2739],[101867,2739,2839],[2839,2840,2739],[101867,2839,2838],[2940,2939,2838],[2839,2838,2940],[101868,4040,4041],[3939,3940,4041],[4040,4041,3939],[101868,101869,4040],[101869,4040,4141],[101869,101870,4141],[101870,4141,4242],[101870,101871,4242],[101871,4242,4343],[101871,101872,4343],[101872,4343,4445],[4445,4444,4343],[101872,101873,4445],[101873,4445,4546],[101873,101874,4546],[101874,4546,4647],[101874,101875,4647],[101875,4647,4748],[101875,101876,4748],[101876,4748,4850],[4850,4849,4748],[101876,101877,4850],[101877,4850,4951],[101877,101878,4951],[101878,4951,5052],[101878,101879,5052],[101879,5052,5153],[101879,101880,5153],[101880,5153,5255],[5255,5254,5153],[101880,101881,5255],[101881,5255,5356],[101881,101882,5356],[101882,5356,5457],[101882,101883,5457],[101883,5457,5558],[101883,101884,5558],[101884,5558,5660],[5660,5659,5558],[101884,101885,5660],[101885,5660,5761],[101885,101886,5761],[101886,5761,5862],[101886,101887,5862],[101887,5862,5963],[101887,101888,5963],[101888,5963,6064],[101888,101889,6064],[101889,6064,6166],[6166,6165,6064],[101889,101890,6166],[101890,6166,6267],[101890,101891,6267],[101891,6267,6368],[101891,101892,6368],[101892,6368,6469],[101892,101893,6469],[101893,6469,6570],[101893,101894,6570],[101894,6570,6671],[101894,101895,6671],[101895,6671,6773],[6773,6772,6671],[101895,101896,6773],[101896,6773,6874],[101896,101897,6874],[101897,6874,6975],[101897,101898,6975],[101898,6975,7076],[101898,101899,7076],[101899,7076,7177],[101899,101900,7177],[101900,7177,7278],[101900,101901,7278],[101901,7278,7379],[101901,101902,7379],[101902,7379,7480],[101902,101903,7480],[101903,7480,7581],[101903,101904,7581],[101904,7581,7682],[101904,101905,7682],[101905,7682,7783],[101905,101906,7783],[101906,7783,7884],[101906,101907,7884],[101907,7884,7985],[101907,101908,7985],[101908,7985,8086],[101908,101909,8086],[101909,8086,8187],[101909,101910,8187],[101910,8187,8289],[8289,8288,8187],[101910,101911,8289],[101911,8289,8390],[101911,101912,8390],[101912,8390,8491],[101912,101913,8491],[101913,8491,8592],[101913,101914,8592],[101914,8592,8693],[101914,101915,8693],[101915,8693,8794],[101915,101916,8794],[101916,8794,8895],[101916,101917,8895],[101917,8895,8996],[101917,101918,8996],[101918,8996,9097],[101918,101919,9097],[101919,9097,9198],[101919,101920,9198],[101920,9198,9299],[101920,101921,9299],[101921,9299,9400],[101921,101922,9400],[101922,9400,9501],[101922,101923,9501],[101923,9501,9602],[101923,101924,9602],[101924,9602,9703],[101924,101925,9703],[101925,9703,9804],[101925,101926,9804],[101926,9804,9905],[101926,101927,9905],[101927,9905,10006],[101927,101928,10006],[101928,10006,10108],[10108,10107,10006],[101928,101929,10108],[101929,10108,10209],[101929,101930,10209],[101930,10209,10310],[101930,101931,10310],[101931,10310,10411],[101931,101932,10411],[101932,10411,10512],[101932,101933,10512],[101933,10512,10613],[101933,101934,10613],[101934,10613,10714],[101934,101935,10714],[101935,10714,10815],[101935,101936,10815],[101936,10815,10916],[101936,101937,10916],[101937,10916,11018],[11018,11017,10916],[101937,101938,11018],[101938,11018,11119],[101938,101939,11119],[101939,11119,11220],[101939,101940,11220],[101940,11220,11321],[101940,101941,11321],[101941,11321,11422],[101941,101942,11422],[101942,11422,11523],[101942,101943,11523],[101943,11523,11624],[101943,101944,11624],[101944,11624,11726],[11726,11725,11624],[101944,101945,11726],[101945,11726,11827],[101945,101946,11827],[101946,11827,11928],[101946,101947,11928],[101947,11928,12029],[101947,101948,12029],[101948,12029,12130],[101948,101949,12130],[101949,12130,12231],[101949,101950,12231],[101950,12231,12333],[12333,12332,12231],[101950,101951,12333],[101951,12333,12434],[101951,101952,12434],[101952,12434,12535],[101952,101953,12535],[101953,12535,12636],[101953,101954,12636],[101954,12636,12737],[101954,101955,12737],[101955,12737,12839],[12839,12838,12737],[101955,101956,12839],[101956,12839,12940],[101956,101957,12940],[101957,12940,13041],[101957,101958,13041],[101958,13041,13142],[101958,101959,13142],[101959,13142,13243],[101959,101960,13243],[101960,13243,13345],[13345,13344,13243],[101961,4041,4040],[3940,3939,4040],[4041,4040,3940],[101961,101962,4041],[101962,4041,4142],[101962,101963,4142],[101963,4142,4244],[4244,4143,4142],[101963,101964,4244],[101964,4244,4345],[101964,101965,4345],[101965,4345,4446],[101965,101966,4446],[101966,4446,4548],[4548,4447,4446],[101966,101967,4548],[101967,4548,4649],[101967,101968,4649],[101968,4649,4751],[4751,4650,4649],[101968,101969,4751],[101969,4751,4852],[101969,101970,4852],[101970,4852,4954],[4954,4853,4852],[101970,101971,4954],[101971,4954,5055],[101971,101972,5055],[101972,5055,5156],[101972,101973,5156],[101973,5156,5258],[5258,5157,5156],[101973,101974,5258],[101974,5258,5359],[101974,101975,5359],[101975,5359,5460],[101975,101976,5460],[101976,5460,5562],[5562,5461,5460],[101976,101977,5562],[101977,5562,5663],[101977,101978,5663],[101978,5663,5764],[101978,101979,5764],[101979,5764,5866],[5866,5765,5764],[101979,101980,5866],[101980,5866,5967],[101980,101981,5967],[101981,5967,6068],[101981,101982,6068],[101982,6068,6169],[101982,101983,6169],[101983,6169,6271],[6271,6170,6169],[101983,101984,6271],[101984,6271,6372],[101984,101985,6372],[101985,6372,6473],[101985,101986,6473],[101986,6473,6574],[101986,101987,6574],[101987,6574,6675],[101987,101988,6675],[101988,6675,6776],[101988,101989,6776],[101989,6776,6877],[101989,101990,6877],[101990,6877,6978],[101990,101991,6978],[101991,6978,7080],[7080,6979,6978],[101991,101992,7080],[101992,7080,7181],[101992,101993,7181],[101993,7181,7282],[101993,101994,7282],[101994,7282,7383],[101994,101995,7383],[101995,7383,7484],[101995,101996,7484],[101996,7484,7585],[101996,101997,7585],[101997,7585,7686],[101997,101998,7686],[101998,7686,7787],[101998,101999,7787],[101999,7787,7888],[101999,102000,7888],[102000,7888,7989],[102000,102001,7989],[102001,7989,8090],[102001,102002,8090],[102002,8090,8191],[102002,102003,8191],[102003,8191,8292],[102003,102004,8292],[102004,8292,8392],[8392,8393,8292],[102004,102005,8392],[102005,8392,8493],[102005,102006,8493],[102006,8493,8594],[102006,102007,8594],[102007,8594,8695],[102007,102008,8695],[102008,8695,8796],[102008,102009,8796],[102009,8796,8897],[102009,102010,8897],[102010,8897,8998],[102010,102011,8998],[102011,8998,9099],[102011,102012,9099],[102012,9099,9200],[102012,102013,9200],[102013,9200,9301],[102013,102014,9301],[102014,9301,9402],[102014,102015,9402],[102015,9402,9503],[102015,102016,9503],[102016,9503,9604],[102016,102017,9604],[102017,9604,9706],[9706,9605,9604],[102017,102018,9706],[102018,9706,9807],[102018,102019,9807],[102019,9807,9908],[102019,102020,9908],[102020,9908,10009],[102020,102021,10009],[102021,10009,10110],[102021,102022,10110],[102022,10110,10211],[102022,102023,10211],[102023,10211,10312],[102023,102024,10312],[102024,10312,10413],[102024,102025,10413],[102025,10413,10514],[102025,102026,10514],[102026,10514,10615],[102026,102027,10615],[102027,10615,10716],[102027,102028,10716],[102028,10716,10818],[10818,10717,10716],[102028,102029,10818],[102029,10818,10919],[102029,102030,10919],[102030,10919,11020],[102030,102031,11020],[102031,11020,11121],[102031,102032,11121],[102032,11121,11222],[102032,102033,11222],[102033,11222,11323],[102033,102034,11323],[102034,11323,11424],[102034,102035,11424],[102035,11424,11526],[11526,11425,11424],[102035,102036,11526],[102036,11526,11627],[102036,102037,11627],[102037,11627,11728],[102037,102038,11728],[102038,11728,11829],[102038,102039,11829],[102039,11829,11930],[102039,102040,11930],[102040,11930,12032],[12032,11931,11930],[102040,102041,12032],[102041,12032,12133],[102041,102042,12133],[102042,12133,12234],[102042,102043,12234],[102043,12234,12335],[102043,102044,12335],[102044,12335,12436],[102044,102045,12436],[102045,12436,12537],[102045,102046,12537],[102046,12537,12639],[12639,12538,12537],[102046,102047,12639],[102047,12639,12740],[102047,102048,12740],[102048,12740,12841],[102048,102049,12841],[102049,12841,12942],[102049,102050,12942],[102050,12942,13043],[102050,102051,13043],[102051,13043,13145],[13145,13044,13043],[102051,102052,13145],[102052,13145,13246],[102052,102053,13246],[102053,13246,13347],[102054,102055,87],[102055,87,189],[189,188,87],[102055,102056,189],[102056,189,290],[102056,102057,290],[102057,290,391],[102057,102058,391],[102058,391,493],[493,492,391],[102058,102059,493],[102059,493,594],[102059,102060,594],[102060,594,695],[102060,102061,695],[102061,695,797],[797,796,695],[102061,102062,797],[102062,797,898],[102062,102063,898],[102063,898,999],[102063,102064,999],[102064,999,1101],[1101,1100,999],[102064,102065,1101],[102065,1101,1202],[102065,102066,1202],[102066,1202,1303],[102066,102067,1303],[102067,1303,1404],[102067,102068,1404],[102068,1404,1506],[1506,1505,1404],[102068,102069,1506],[102069,1506,1607],[102069,102070,1607],[102070,1607,1708],[102070,102071,1708],[102071,1708,1810],[1810,1809,1708],[102071,102072,1810],[102072,1810,1911],[102072,102073,1911],[102073,1911,2012],[102073,102074,2012],[102074,2012,2113],[102074,102075,2113],[102075,2113,2214],[102075,102076,2214],[102076,2214,2316],[2316,2315,2214],[102076,102077,2316],[102077,2316,2417],[102077,102078,2417],[102078,2417,2518],[102078,102079,2518],[102079,2518,2619],[102079,102080,2619],[102080,2619,2720],[102080,102081,2720],[102081,2720,2821],[102081,102082,2821],[102082,2821,2922],[102082,102083,2922],[102083,2922,3023],[102083,102084,3023],[102084,3023,3124],[102084,102085,3124],[102085,3124,3225],[102085,102086,3225],[102086,3225,3326],[102086,102087,3326],[102087,3326,3427],[102087,102088,3427],[102088,3427,3528],[102088,102089,3528],[102089,3528,3629],[102089,102090,3629],[102090,3629,3730],[102090,102091,3730],[102091,3730,3831],[102091,102092,3831],[102092,3831,3932],[102092,102093,3932],[102093,3932,4033],[102093,102094,4033],[102094,4033,4134],[102094,102095,4134],[102095,4134,4235],[102095,102096,4235],[102096,4235,4336],[102096,102097,4336],[102097,4336,4436],[4436,4335,4336],[102097,102098,4436],[102098,4436,4537],[102098,102099,4537],[102099,4537,4638],[102099,102100,4638],[102100,4638,4739],[102100,102101,4739],[102101,4739,4840],[102101,102102,4840],[102102,4840,4941],[102102,102103,4941],[102103,4941,5042],[102103,102104,5042],[102104,5042,5143],[102104,102105,5143],[102105,5143,5243],[5243,5142,5143],[102105,102106,5243],[102106,5243,5344],[102106,102107,5344],[102107,5344,5445],[102107,102108,5445],[102108,5445,5546],[102108,102109,5546],[102109,5546,5647],[102109,102110,5647],[102110,5647,5748],[102110,102111,5748],[102111,5748,5848],[5848,5747,5748],[102111,102112,5848],[102112,5848,5949],[102112,102113,5949],[102113,5949,6050],[102113,102114,6050],[102114,6050,6151],[102114,102115,6151],[102115,6151,6252],[102115,102116,6252],[102116,6252,6353],[102116,102117,6353],[102117,6353,6454],[102117,102118,6454],[102118,6454,6555],[102118,102119,6555],[102119,6555,6656],[102119,102120,6656],[102120,6656,6757],[102120,102121,6757],[102121,6757,6858],[102121,102122,6858],[102122,6858,6959],[102122,102123,6959],[102123,6959,7060],[102123,102124,7060],[102124,7060,7161],[102124,102125,7161],[102125,7161,7262],[102125,102126,7262],[102126,7262,7363],[102126,102127,7363],[102127,7363,7464],[102127,102128,7464],[102128,7464,7565],[102128,102129,7565],[102129,7565,7666],[102129,102130,7666],[102130,7666,7767],[102130,102131,7767],[102131,7767,7868],[102131,102132,7868],[102132,7868,7970],[7970,7969,7868],[102132,102133,7970],[102133,7970,8071],[102133,102134,8071],[102134,8071,8172],[102134,102135,8172],[102135,8172,8273],[102135,102136,8273],[102136,8273,8374],[102136,102137,8374],[102137,8374,8476],[8476,8475,8374],[102137,102138,8476],[102138,8476,8577],[102138,102139,8577],[102139,8577,8678],[102139,102140,8678],[102140,8678,8779],[102140,102141,8779],[102141,8779,8881],[8881,8880,8779],[102141,102142,8881],[102142,8881,8982],[102142,102143,8982],[102143,8982,9083],[102143,102144,9083],[102144,9083,9184],[102144,102145,9184],[102145,9184,9286],[9286,9285,9184],[102145,102146,9286],[102146,9286,9387],[102146,102147,9387],[102147,9387,9488],[102147,102148,9488],[102148,9488,9589],[102148,102149,9589],[102149,9589,9691],[9691,9690,9589],[102149,102150,9691],[102150,9691,9792],[102150,102151,9792],[102151,9792,9893],[102151,102152,9893],[102152,9893,9994],[102152,102153,9994],[102153,9994,10095],[102153,102154,10095],[102154,10095,10197],[10197,10196,10095],[102154,102155,10197],[102155,10197,10298],[102155,102156,10298],[102156,10298,10399],[102156,102157,10399],[102157,10399,10500],[102157,102158,10500],[102158,10500,10601],[102158,102159,10601],[102159,10601,10702],[102159,102160,10702],[102160,10702,10803],[102160,102161,10803],[102161,10803,10904],[102161,102162,10904],[102162,10904,11005],[102162,102163,11005],[102163,11005,11106],[102163,102164,11106],[102164,11106,11207],[102164,102165,11207],[102165,11207,11309],[11309,11308,11207],[102165,102166,11309],[102166,11309,11410],[102166,102167,11410],[102167,11410,11511],[102167,102168,11511],[102168,11511,11611],[11611,11510,11511],[102168,102169,11611],[102169,11611,11712],[102169,102170,11712],[102170,11712,11813],[102170,102171,11813],[102171,11813,11914],[102171,102172,11914],[102172,11914,12015],[102172,102173,12015],[102173,12015,12116],[102173,102174,12116],[102174,12116,12217],[102174,102175,12217],[102175,12217,12318],[102175,102176,12318],[102176,12318,12419],[102176,102177,12419],[102177,12419,12520],[102177,102178,12520],[102178,12520,12620],[12620,12519,12520],[102178,102179,12620],[102179,12620,12721],[102179,102180,12721],[102180,12721,12822],[102180,102181,12822],[102181,12822,12923],[102181,102182,12923],[102182,12923,13024],[102182,102183,13024],[102183,13024,13124],[13124,13023,13024],[102183,102184,13124],[102184,13124,13225],[102184,102185,13225],[102185,13225,13326],[102185,102186,13326],[102186,13326,13427]],\"grid\":{\"positions\":[[0,0,0.9873729446807987],[0.01,0,0.9874571389251906],[0.02,0,0.987605431825491],[0.03,0,0.9877776714649309],[0.04,0,0.9879262096426003],[0.05,0,0.9879947535140127],[0.06,0,0.9879402323868448],[0.07,0,0.9877304415291885],[0.08,0,0.9873771053039724],[0.09,0,0.9869285785134757],[0.1,0,0.9864902254463804],[0.11,0,0.9861774362146141],[0.12,0,0.9861369262874387],[0.13,0,0],[0.14,0,0.955462522198139],[0.15,0,0.9516062816090893],[0.16,0,0.9480897571359221],[0.17,0,0.9448975247011947],[0.18,0,0.9421170601987389],[0.19,0,0.9397110862913529],[0.2,0,0.937625939146803],[0.21,0,0.9358311246295328],[0.22,0,0.9343101773548148],[0.23,0,0.9330689665665401],[0.24,0,0.9320934819961446],[0.25,0,0.9313797604350562],[0.26,0,0.9308941517404647],[0.27,0,0.9306042605166416],[0.28,0,0.930456781129203],[0.29,0,0.9303978291310424],[0.3,0,0.9303687791446452],[0.31,0,0.9303107352695033],[0.32,0,0.9301691771811811],[0.33,0,0.9298826939481344],[0.34,0,0.9293792904250393],[0.35000000000000003,0,0.9285604831548204],[0.36,0,0.9272579431761425],[0.37,0,0.9252638870174632],[0.38,0,0.9222120126577464],[0.39,0,0.917785763730819],[0.4,0,0.9115087505361414],[0.41000000000000003,0,0.9033010793701298],[0.42,0,0.8933984854742842],[0.43,0,0.8834423567392495],[0.44,0,0.8759729013948774],[0.45,0,0.6416290777632856],[0.46,0,0.6368586300404763],[0.47000000000000003,0,0.6327632752540852],[0.48,0,0.6276901061088254],[0.49,0,0.6224269421259054],[0.5,0,0.6178851841189152],[0.51,0,0.6122477683898698],[0.52,0,0.6074272231921473],[0.53,0,0.6014771366910631],[0.54,0,0.5949242485094369],[0.55,0,0.588861863756928],[0.56,0,0.5806798230282166],[0.5700000000000001,0,0.6067613594158269],[0.58,0,0.5863166047684664],[0.59,0,0.5680888172558103],[0.6,0,0.5520738959354883],[0.61,0,0.5383865956299447],[0.62,0,0.5263916115488574],[0.63,0,0.5154460646468999],[0.64,0,0.504957650409704],[0.65,0,0.49450861202255963],[0.66,0,0.4838028083111615],[0.67,0,0.47264333004754083],[0.68,0,0.4609049484379087],[0.6900000000000001,0,0.4485223124924803],[0.7000000000000001,0,0.4354355158865979],[0.71,0,0.4216304560361424],[0.72,0,0.407056555537038],[0.73,0,0.3916682255308696],[0.74,0,0.37539271705573224],[0.75,0,0.358088953476901],[0.76,0,0.33963998315831856],[0.77,0,0.31982261960263414],[0.78,0,0.2983772350249678],[0.79,0,0.2744533540140452],[0.8,0,0.24660268428116344],[0.81,0,0.21423553670972256],[0.8200000000000001,0,0.22603521814252506],[0.8300000000000001,0,0.1738642947527637],[0.84,0,0.1526981013615698],[0.85,0,0.13093195405730607],[0.86,0,0.10694296729885355],[0.87,0,0.07819533083113941],[0.88,0,0.06841660903306897],[0.89,0,0],[0.9,0,0],[0.91,0,0],[0.92,0,0],[0.93,0,0],[0.9400000000000001,0,0],[0.9500000000000001,0,0],[0.96,0,0],[0.97,0,0],[0.98,0,0],[0.99,0,0],[1,0,0],[0,0.007575757575757576,0.987139639513759],[0.01,0.007575757575757576,0.9872158744890395],[0.02,0.007575757575757576,0.9873455046318087],[0.03,0.007575757575757576,0.9874961617713968],[0.04,0.007575757575757576,0.9876113077614154],[0.05,0.007575757575757576,0.9876470594005009],[0.06,0.007575757575757576,0.9875426679108197],[0.07,0.007575757575757576,0.9872808625143181],[0.08,0.007575757575757576,0.986843555377724],[0.09,0.007575757575757576,0.9862958433836215],[0.1,0.007575757575757576,0.9857132471087611],[0.11,0.007575757575757576,0.9852505861273206],[0.12,0.007575757575757576,0.9850194856263754],[0.13,0.007575757575757576,0],[0.14,0.007575757575757576,0.9532792109124595],[0.15,0.007575757575757576,0.9502060454182559],[0.16,0.007575757575757576,0.9470224217870966],[0.17,0.007575757575757576,0.9440167555501235],[0.18,0.007575757575757576,0.941309698077667],[0.19,0.007575757575757576,0.9389384568614734],[0.2,0.007575757575757576,0.9368598337835623],[0.21,0.007575757575757576,0.9350542169670211],[0.22,0.007575757575757576,0.9335368585888657],[0.23,0.007575757575757576,0.9322865786664756],[0.24,0.007575757575757576,0.9313293928778056],[0.25,0.007575757575757576,0.9306257489106219],[0.26,0.007575757575757576,0.9301724412716307],[0.27,0.007575757575757576,0.9299112013025054],[0.28,0.007575757575757576,0.9298019359240033],[0.29,0.007575757575757576,0.9297800786182423],[0.3,0.007575757575757576,0.9297844249284213],[0.31,0.007575757575757576,0.9297581540568429],[0.32,0.007575757575757576,0.9296350043052088],[0.33,0.007575757575757576,0.9293586527287734],[0.34,0.007575757575757576,0.9288518602292504],[0.35000000000000003,0.007575757575757576,0.9279973438530209],[0.36,0.007575757575757576,0.9266686281351036],[0.37,0.007575757575757576,0.9245550580262618],[0.38,0.007575757575757576,0.92145712325896],[0.39,0.007575757575757576,0.9167845173942586],[0.4,0.007575757575757576,0.9104229116957361],[0.41000000000000003,0.007575757575757576,0.9018105473091312],[0.42,0.007575757575757576,0.8916726432492769],[0.43,0.007575757575757576,0.8810756854921602],[0.44,0.007575757575757576,0.8726683504916432],[0.45,0.007575757575757576,0],[0.46,0.007575757575757576,0],[0.47000000000000003,0.007575757575757576,0],[0.48,0.007575757575757576,0],[0.49,0.007575757575757576,0],[0.5,0.007575757575757576,0],[0.51,0.007575757575757576,0],[0.52,0.007575757575757576,0],[0.53,0.007575757575757576,0],[0.54,0.007575757575757576,0],[0.55,0.007575757575757576,0],[0.56,0.007575757575757576,0.6171425311181974],[0.5700000000000001,0.007575757575757576,0.6009261496504428],[0.58,0.007575757575757576,0.5830740573702062],[0.59,0.007575757575757576,0.5657036010422816],[0.6,0.007575757575757576,0.5505317101542992],[0.61,0.007575757575757576,0.5372776571457937],[0.62,0.007575757575757576,0.5256349843869437],[0.63,0.007575757575757576,0.5148851796175415],[0.64,0.007575757575757576,0.5045463887006891],[0.65,0.007575757575757576,0.4942041034131034],[0.66,0.007575757575757576,0.483578040239311],[0.67,0.007575757575757576,0.47248520879278855],[0.68,0.007575757575757576,0.46081378228546077],[0.6900000000000001,0.007575757575757576,0.44846694309962953],[0.7000000000000001,0.007575757575757576,0.43544647189003916],[0.71,0.007575757575757576,0.4216682036782099],[0.72,0.007575757575757576,0.4071453866393204],[0.73,0.007575757575757576,0.3918103947666042],[0.74,0.007575757575757576,0.37556470335613046],[0.75,0.007575757575757576,0.35836335649698825],[0.76,0.007575757575757576,0.33995193520189587],[0.77,0.007575757575757576,0.3202852585919568],[0.78,0.007575757575757576,0.29896067747045973],[0.79,0.007575757575757576,0.2753074011878671],[0.8,0.007575757575757576,0.2480081863726573],[0.81,0.007575757575757576,0.216751134230805],[0.8200000000000001,0.007575757575757576,0],[0.8300000000000001,0.007575757575757576,0.17565015167566803],[0.84,0.007575757575757576,0.15495786625449426],[0.85,0.007575757575757576,0.13346931554757768],[0.86,0.007575757575757576,0.11153253479554787],[0.87,0.007575757575757576,0.08822547124295316],[0.88,0.007575757575757576,0.06991873582489833],[0.89,0.007575757575757576,0],[0.9,0.007575757575757576,0],[0.91,0.007575757575757576,0],[0.92,0.007575757575757576,0],[0.93,0.007575757575757576,0],[0.9400000000000001,0.007575757575757576,0],[0.9500000000000001,0.007575757575757576,0],[0.96,0.007575757575757576,0],[0.97,0.007575757575757576,0],[0.98,0.007575757575757576,0],[0.99,0.007575757575757576,0],[1,0.007575757575757576,0],[0,0.015151515151515152,0.986718726285603],[0.01,0.015151515151515152,0.9867765110061586],[0.02,0.015151515151515152,0.9868776270805222],[0.03,0.015151515151515152,0.9869773915953569],[0.04,0.015151515151515152,0.9870413205013229],[0.05,0.015151515151515152,0.9869970024682468],[0.06,0.015151515151515152,0.9868157908325359],[0.07,0.015151515151515152,0.9864284832510086],[0.08,0.015151515151515152,0.9858581633129988],[0.09,0.015151515151515152,0.9850985694148034],[0.1,0.015151515151515152,0.9842931134547093],[0.11,0.015151515151515152,0.9836028043864573],[0.12,0.015151515151515152,0.9832122776513811],[0.13,0.015151515151515152,0],[0.14,0.015151515151515152,0.9501827541710876],[0.15,0.015151515151515152,0.9478372763230272],[0.16,0.015151515151515152,0.9451334804199708],[0.17,0.015151515151515152,0.9423557019138024],[0.18,0.015151515151515152,0.9397954804591393],[0.19,0.015151515151515152,0.9374586550349429],[0.2,0.015151515151515152,0.9353783260457343],[0.21,0.015151515151515152,0.9335659154069164],[0.22,0.015151515151515152,0.9320152072564427],[0.23,0.015151515151515152,0.9307765094735091],[0.24,0.015151515151515152,0.9298101610355882],[0.25,0.015151515151515152,0.9291474599518386],[0.26,0.015151515151515152,0.9287243365643554],[0.27,0.015151515151515152,0.9285248047398229],[0.28,0.015151515151515152,0.9284750620917757],[0.29,0.015151515151515152,0.9285186947866726],[0.3,0.015151515151515152,0.9285895269387752],[0.31,0.015151515151515152,0.9286129023688512],[0.32,0.015151515151515152,0.9285350862525338],[0.33,0.015151515151515152,0.9282753542142257],[0.34,0.015151515151515152,0.9277551195235221],[0.35000000000000003,0.015151515151515152,0.9268744082222277],[0.36,0.015151515151515152,0.9254143618454314],[0.37,0.015151515151515152,0.9232321776211926],[0.38,0.015151515151515152,0.9198068899861787],[0.39,0.015151515151515152,0.9150203832595603],[0.4,0.015151515151515152,0.9080753572713649],[0.41000000000000003,0.015151515151515152,0.8992307966628237],[0.42,0.015151515151515152,0.8882536510257463],[0.43,0.015151515151515152,0.8771092327325878],[0.44,0.015151515151515152,0.8676800815938716],[0.45,0.015151515151515152,0.6370699977991799],[0.46,0.015151515151515152,0.6316165331974182],[0.47000000000000003,0.015151515151515152,0.6270695863489508],[0.48,0.015151515151515152,0.6216024311101556],[0.49,0.015151515151515152,0.6161130101771354],[0.5,0.015151515151515152,0.6115118954133181],[0.51,0.015151515151515152,0.6059462825292461],[0.52,0.015151515151515152,0.6012677171824766],[0.53,0.015151515151515152,0.5956261423199716],[0.54,0.015151515151515152,0.589579553914693],[0.55,0.015151515151515152,0.6260168639015513],[0.56,0.015151515151515152,0.6114795992114157],[0.5700000000000001,0.015151515151515152,0.5951359356310966],[0.58,0.015151515151515152,0.5778683312767968],[0.59,0.015151515151515152,0.5619775187967104],[0.6,0.015151515151515152,0.5476954529754094],[0.61,0.015151515151515152,0.5353228692694458],[0.62,0.015151515151515152,0.5241760666466015],[0.63,0.015151515151515152,0.5138216901746948],[0.64,0.015151515151515152,0.5037342383385232],[0.65,0.015151515151515152,0.49358255443069216],[0.66,0.015151515151515152,0.4831151290665726],[0.67,0.015151515151515152,0.47215270845034407],[0.68,0.015151515151515152,0.4605757042067359],[0.6900000000000001,0.015151515151515152,0.44835856605859115],[0.7000000000000001,0.015151515151515152,0.43539041382017085],[0.71,0.015151515151515152,0.4217311719657466],[0.72,0.015151515151515152,0.40727843395850616],[0.73,0.015151515151515152,0.3920224601270107],[0.74,0.015151515151515152,0.3759260161560364],[0.75,0.015151515151515152,0.3587845573997894],[0.76,0.015151515151515152,0.3406203590945851],[0.77,0.015151515151515152,0.32108011588800206],[0.78,0.015151515151515152,0.30010030081363426],[0.79,0.015151515151515152,0.2768285409159728],[0.8,0.015151515151515152,0.2501114825252925],[0.81,0.015151515151515152,0.21981899055902307],[0.8200000000000001,0.015151515151515152,0.2227511012812268],[0.8300000000000001,0.015151515151515152,0.17751639806868358],[0.84,0.015151515151515152,0.15999160082249247],[0.85,0.015151515151515152,0.13780644921023077],[0.86,0.015151515151515152,0.11561760813824234],[0.87,0.015151515151515152,0.09367612279500746],[0.88,0.015151515151515152,0.0708124508836937],[0.89,0.015151515151515152,0],[0.9,0.015151515151515152,0],[0.91,0.015151515151515152,0],[0.92,0.015151515151515152,0],[0.93,0.015151515151515152,0],[0.9400000000000001,0.015151515151515152,0],[0.9500000000000001,0.015151515151515152,0],[0.96,0.015151515151515152,0],[0.97,0.015151515151515152,0],[0.98,0.015151515151515152,0],[0.99,0.015151515151515152,0],[1,0.015151515151515152,0],[0,0.022727272727272728,0.9861803711011484],[0.01,0.022727272727272728,0.9862184206182523],[0.02,0.022727272727272728,0.9862700187042761],[0.03,0.022727272727272728,0.9863150888772498],[0.04,0.022727272727272728,0.9862855818047589],[0.05,0.022727272727272728,0.9861553765228366],[0.06,0.022727272727272728,0.9858274674811043],[0.07,0.022727272727272728,0.985302974997545],[0.08,0.022727272727272728,0.984494545029796],[0.09,0.022727272727272728,0.983492865803917],[0.1,0.022727272727272728,0.9823902841413913],[0.11,0.022727272727272728,0.9814860410111904],[0.12,0.022727272727272728,0.9810303529291816],[0.13,0.022727272727272728,0],[0.14,0.022727272727272728,0.9466515793531541],[0.15,0.022727272727272728,0.9449616329259022],[0.16,0.022727272727272728,0.9426221754265557],[0.17,0.022727272727272728,0.9401592562492898],[0.18,0.022727272727272728,0.9376886088006015],[0.19,0.022727272727272728,0.9354030488717815],[0.2,0.022727272727272728,0.9333010227115695],[0.21,0.022727272727272728,0.931434784932903],[0.22,0.022727272727272728,0.9298645584582587],[0.23,0.022727272727272728,0.9285722769824583],[0.24,0.022727272727272728,0.9276229088091521],[0.25,0.022727272727272728,0.9269544376997232],[0.26,0.022727272727272728,0.9265845545223486],[0.27,0.022727272727272728,0.9264325104778972],[0.28,0.022727272727272728,0.9264575740763525],[0.29,0.022727272727272728,0.9265819057113855],[0.3,0.022727272727272728,0.9267264774610582],[0.31,0.022727272727272728,0.9268302027899404],[0.32,0.022727272727272728,0.926799612698385],[0.33,0.022727272727272728,0.9265749596917875],[0.34,0.022727272727272728,0.9260533842896991],[0.35000000000000003,0.022727272727272728,0.9250958680406827],[0.36,0.022727272727272728,0.9235730092101186],[0.37,0.022727272727272728,0.9211065221720618],[0.38,0.022727272727272728,0.9175526258404562],[0.39,0.022727272727272728,0.9121832457893921],[0.4,0.022727272727272728,0.9050169467373792],[0.41000000000000003,0.022727272727272728,0.8952658519424258],[0.42,0.022727272727272728,0.8838453881638473],[0.43,0.022727272727272728,0.8716152311257035],[0.44,0.022727272727272728,0.861503662279159],[0.45,0.022727272727272728,0],[0.46,0.022727272727272728,0],[0.47000000000000003,0.022727272727272728,0],[0.48,0.022727272727272728,0],[0.49,0.022727272727272728,0],[0.5,0.022727272727272728,0],[0.51,0.022727272727272728,0],[0.52,0.022727272727272728,0],[0.53,0.022727272727272728,0],[0.54,0.022727272727272728,0],[0.55,0.022727272727272728,0.6219267581764182],[0.56,0.022727272727272728,0.6051468046126105],[0.5700000000000001,0.022727272727272728,0.5882514974877593],[0.58,0.022727272727272728,0.5720638696089348],[0.59,0.022727272727272728,0.5571879139087185],[0.6,0.022727272727272728,0.5442181292874131],[0.61,0.022727272727272728,0.5326627963537812],[0.62,0.022727272727272728,0.5222153110772323],[0.63,0.022727272727272728,0.5122819653828248],[0.64,0.022727272727272728,0.5025361641488604],[0.65,0.022727272727272728,0.49264452048966784],[0.66,0.022727272727272728,0.48237382777536547],[0.67,0.022727272727272728,0.4715822385520155],[0.68,0.022727272727272728,0.4601823748412897],[0.6900000000000001,0.022727272727272728,0.44806011160986153],[0.7000000000000001,0.022727272727272728,0.4352756369687394],[0.71,0.022727272727272728,0.42169207915358],[0.72,0.022727272727272728,0.40738800920397744],[0.73,0.022727272727272728,0.3922826436893935],[0.74,0.022727272727272728,0.3762840422030189],[0.75,0.022727272727272728,0.3594259593684403],[0.76,0.022727272727272728,0.3413935843319534],[0.77,0.022727272727272728,0.32227004153069816],[0.78,0.022727272727272728,0.3016081438991054],[0.79,0.022727272727272728,0.2789098335619953],[0.8,0.022727272727272728,0.2530893321311195],[0.81,0.022727272727272728,0.22310707491813703],[0.8200000000000001,0.022727272727272728,0],[0.8300000000000001,0.022727272727272728,0],[0.84,0.022727272727272728,0.17106018576056972],[0.85,0.022727272727272728,0.14397252842749583],[0.86,0.022727272727272728,0.12026005459993984],[0.87,0.022727272727272728,0.09742188296113477],[0.88,0.022727272727272728,0.07351784752313831],[0.89,0.022727272727272728,0],[0.9,0.022727272727272728,0],[0.91,0.022727272727272728,0],[0.92,0.022727272727272728,0],[0.93,0.022727272727272728,0],[0.9400000000000001,0.022727272727272728,0],[0.9500000000000001,0.022727272727272728,0],[0.96,0.022727272727272728,0],[0.97,0.022727272727272728,0],[0.98,0.022727272727272728,0],[0.99,0.022727272727272728,0],[1,0.022727272727272728,0],[0,0.030303030303030304,0.9855947826318969],[0.01,0.030303030303030304,0.9856024552739999],[0.02,0.030303030303030304,0.9856106059488945],[0.03,0.030303030303030304,0.9855674017219777],[0.04,0.030303030303030304,0.985456460367753],[0.05,0.030303030303030304,0.9851761556213589],[0.06,0.030303030303030304,0.9847212161762515],[0.07,0.030303030303030304,0.98395383588994],[0.08,0.030303030303030304,0.982924416863026],[0.09,0.030303030303030304,0.9815702973554591],[0.1,0.030303030303030304,0.9801627749146313],[0.11,0.030303030303030304,0.9791124873435526],[0.12,0.030303030303030304,0.9791680906184184],[0.13,0.030303030303030304,0.9765932159507734],[0.14,0.030303030303030304,0.943158465303136],[0.15,0.030303030303030304,0.9417880369166638],[0.16,0.030303030303030304,0.939874828145003],[0.17,0.030303030303030304,0.9375412132412555],[0.18,0.030303030303030304,0.9352240911935469],[0.19,0.030303030303030304,0.932904856568086],[0.2,0.030303030303030304,0.930758476939521],[0.21,0.030303030303030304,0.9288273231020732],[0.22,0.030303030303030304,0.9271550249278393],[0.23,0.030303030303030304,0.925828177806501],[0.24,0.030303030303030304,0.9248065707930758],[0.25,0.030303030303030304,0.9241462682251254],[0.26,0.030303030303030304,0.9237692714396002],[0.27,0.030303030303030304,0.9236632210685047],[0.28,0.030303030303030304,0.9237431672320415],[0.29,0.030303030303030304,0.9239357962671658],[0.3,0.030303030303030304,0.9241695014404507],[0.31,0.030303030303030304,0.9243385943440262],[0.32,0.030303030303030304,0.9243859141651896],[0.33,0.030303030303030304,0.9241932665602575],[0.34,0.030303030303030304,0.9236716266050009],[0.35000000000000003,0.030303030303030304,0.9226834927396871],[0.36,0.030303030303030304,0.9209860667882875],[0.37,0.030303030303030304,0.9184032315703994],[0.38,0.030303030303030304,0.9143923339791046],[0.39,0.030303030303030304,0.9087997150988618],[0.4,0.030303030303030304,0.9008359857968183],[0.41000000000000003,0.030303030303030304,0.8906839082132696],[0.42,0.030303030303030304,0.8781403847145517],[0.43,0.030303030303030304,0.8651048697624537],[0.44,0.030303030303030304,0.8535949304743958],[0.45,0.030303030303030304,0.9016465281245263],[0.46,0.030303030303030304,0.6307567229578396],[0.47000000000000003,0.030303030303030304,0.62415177901329],[0.48,0.030303030303030304,0.616507979235068],[0.49,0.030303030303030304,0.6091567576635392],[0.5,0.030303030303030304,0.6032550819717405],[0.51,0.030303030303030304,0.596465414731259],[0.52,0.030303030303030304,0.5910814499522615],[0.53,0.030303030303030304,0.5847691544796553],[0.54,0.030303030303030304,0.6252416879035225],[0.55,0.030303030303030304,0.6128624030317004],[0.56,0.030303030303030304,0.5971208857783559],[0.5700000000000001,0.030303030303030304,0.5808847681833205],[0.58,0.030303030303030304,0.5656686430434856],[0.59,0.030303030303030304,0.5521807093150823],[0.6,0.030303030303030304,0.5402415292917507],[0.61,0.030303030303030304,0.529645072092801],[0.62,0.030303030303030304,0.519780417449196],[0.63,0.030303030303030304,0.5103597852122576],[0.64,0.030303030303030304,0.5009657662165308],[0.65,0.030303030303030304,0.4913460293291829],[0.66,0.030303030303030304,0.4813208681067742],[0.67,0.030303030303030304,0.4707366718539928],[0.68,0.030303030303030304,0.4594913310059803],[0.6900000000000001,0.030303030303030304,0.44759463944493577],[0.7000000000000001,0.030303030303030304,0.4349037858841741],[0.71,0.030303030303030304,0.4215402974930311],[0.72,0.030303030303030304,0.407367933628643],[0.73,0.030303030303030304,0.3924232923071204],[0.74,0.030303030303030304,0.3766929705616191],[0.75,0.030303030303030304,0.35997476168630693],[0.76,0.030303030303030304,0.3423746003639377],[0.77,0.030303030303030304,0.3235408220367597],[0.78,0.030303030303030304,0.30348969295100964],[0.79,0.030303030303030304,0.2817207867040638],[0.8,0.030303030303030304,0.2569382559707507],[0.81,0.030303030303030304,0.2282253388833846],[0.8200000000000001,0.030303030303030304,0.2323088164896829],[0.8300000000000001,0.030303030303030304,0.15592631656869643],[0.84,0.030303030303030304,0.17558845381655425],[0.85,0.030303030303030304,0.14817541931586903],[0.86,0.030303030303030304,0.12449502348721836],[0.87,0.030303030303030304,0.10292654637046364],[0.88,0.030303030303030304,0.0818302542304867],[0.89,0.030303030303030304,0.06486748805087952],[0.9,0.030303030303030304,0],[0.91,0.030303030303030304,0],[0.92,0.030303030303030304,0],[0.93,0.030303030303030304,0],[0.9400000000000001,0.030303030303030304,0],[0.9500000000000001,0.030303030303030304,0],[0.96,0.030303030303030304,0],[0.97,0.030303030303030304,0],[0.98,0.030303030303030304,0],[0.99,0.030303030303030304,0],[1,0.030303030303030304,0],[0,0.03787878787878788,0.9849816929747764],[0.01,0.03787878787878788,0.9849668602251576],[0.02,0.03787878787878788,0.9849085853137367],[0.03,0.03787878787878788,0.9848005037839616],[0.04,0.03787878787878788,0.9845540553869621],[0.05,0.03787878787878788,0.9841668880414977],[0.06,0.03787878787878788,0.9834860677400946],[0.07,0.03787878787878788,0.9825434974882286],[0.08,0.03787878787878788,0.9811578168045111],[0.09,0.03787878787878788,0.9794908867045969],[0.1,0.03787878787878788,0.9776377688391555],[0.11,0.03787878787878788,0.9760535493245945],[0.12,0.03787878787878788,0],[0.13,0.03787878787878788,0.9389328460318753],[0.14,0.03787878787878788,0.9395502606736825],[0.15,0.03787878787878788,0.9387214492212448],[0.16,0.03787878787878788,0.9369155413445397],[0.17,0.03787878787878788,0.9348485696104059],[0.18,0.03787878787878788,0.9324780222528664],[0.19,0.03787878787878788,0.9301719971555813],[0.2,0.03787878787878788,0.9279116106943401],[0.21,0.03787878787878788,0.9258567750139616],[0.22,0.03787878787878788,0.9240863458412312],[0.23,0.03787878787878788,0.9226155165480393],[0.24,0.03787878787878788,0.9215325141442392],[0.25,0.03787878787878788,0.9207795376353374],[0.26,0.03787878787878788,0.9203828081273131],[0.27,0.03787878787878788,0.9202616234912426],[0.28,0.03787878787878788,0.9203627677562256],[0.29,0.03787878787878788,0.9206094751685755],[0.3,0.03787878787878788,0.9208921818273446],[0.31,0.03787878787878788,0.9211492484425823],[0.32,0.03787878787878788,0.9212451140770002],[0.33,0.03787878787878788,0.9211135261600509],[0.34,0.03787878787878788,0.9206007018991533],[0.35000000000000003,0.03787878787878788,0.9195578508474467],[0.36,0.03787878787878788,0.9177845843866291],[0.37,0.03787878787878788,0.9149261180167959],[0.38,0.03787878787878788,0.9107123459437807],[0.39,0.03787878787878788,0.9045505501658585],[0.4,0.03787878787878788,0.8962142591506383],[0.41000000000000003,0.03787878787878788,0.8851815483628276],[0.42,0.03787878787878788,0.871950684174019],[0.43,0.03787878787878788,0.8575763977148475],[0.44,0.03787878787878788,0.8443405430721382],[0.45,0.03787878787878788,0],[0.46,0.03787878787878788,0],[0.47000000000000003,0.03787878787878788,0],[0.48,0.03787878787878788,0],[0.49,0.03787878787878788,0],[0.5,0.03787878787878788,0],[0.51,0.03787878787878788,0],[0.52,0.03787878787878788,0],[0.53,0.03787878787878788,0],[0.54,0.03787878787878788,0.6207999495293781],[0.55,0.03787878787878788,0.6051659233606487],[0.56,0.03787878787878788,0.5890372029448744],[0.5700000000000001,0.03787878787878788,0.5734585951106671],[0.58,0.03787878787878788,0.5594038724642126],[0.59,0.03787878787878788,0.5470156608281764],[0.6,0.03787878787878788,0.5361665189698428],[0.61,0.03787878787878788,0.5262702738381921],[0.62,0.03787878787878788,0.5170642372135275],[0.63,0.03787878787878788,0.5080609762014486],[0.64,0.03787878787878788,0.49901649083724736],[0.65,0.03787878787878788,0.4896925526278753],[0.66,0.03787878787878788,0.4798930861647203],[0.67,0.03787878787878788,0.4695222862920286],[0.68,0.03787878787878788,0.45851316599879605],[0.6900000000000001,0.03787878787878788,0.44674761983413813],[0.7000000000000001,0.03787878787878788,0.4343259141898557],[0.71,0.03787878787878788,0.42108201674372214],[0.72,0.03787878787878788,0.40714564556278443],[0.73,0.03787878787878788,0.3924279801362802],[0.74,0.03787878787878788,0.37687272355707135],[0.75,0.03787878787878788,0.3605504873399309],[0.76,0.03787878787878788,0.34318538185759684],[0.77,0.03787878787878788,0.3249144112997431],[0.78,0.03787878787878788,0.3055075094633245],[0.79,0.03787878787878788,0.2848094631935325],[0.8,0.03787878787878788,0.2628962969677613],[0.81,0.03787878787878788,0.23981812860630658],[0.8200000000000001,0.03787878787878788,0.22171779338993558],[0.8300000000000001,0.03787878787878788,0],[0.84,0.03787878787878788,0.17774058202874068],[0.85,0.03787878787878788,0.15153680375374332],[0.86,0.03787878787878788,0.12812103499931904],[0.87,0.03787878787878788,0.10683882875746523],[0.88,0.03787878787878788,0.08641220018844056],[0.89,0.03787878787878788,0.06524210538555421],[0.9,0.03787878787878788,0],[0.91,0.03787878787878788,0],[0.92,0.03787878787878788,0],[0.93,0.03787878787878788,0],[0.9400000000000001,0.03787878787878788,0],[0.9500000000000001,0.03787878787878788,0],[0.96,0.03787878787878788,0],[0.97,0.03787878787878788,0],[0.98,0.03787878787878788,0],[0.99,0.03787878787878788,0],[1,0.03787878787878788,0],[0,0.045454545454545456,0.9842942267870998],[0.01,0.045454545454545456,0.9842448279790119],[0.02,0.045454545454545456,0.984145540726149],[0.03,0.045454545454545456,0.9839310609336371],[0.04,0.045454545454545456,0.9836042243413112],[0.05,0.045454545454545456,0.9830246464527717],[0.06,0.045454545454545456,0.9822179665524873],[0.07,0.045454545454545456,0.9809670195740956],[0.08,0.045454545454545456,0.9793708376499259],[0.09,0.045454545454545456,0.9772793693290347],[0.1,0.045454545454545456,0.9750949593208627],[0.11,0.045454545454545456,0.9730845846771996],[0.12,0.045454545454545456,0.9779227574738001],[0.13,0.045454545454545456,0.9371154978319448],[0.14,0.045454545454545456,0.9369063824989348],[0.15,0.045454545454545456,0.9357780213803045],[0.16,0.045454545454545456,0.9342054179467439],[0.17,0.045454545454545456,0.9320105864040932],[0.18,0.045454545454545456,0.92974562126756],[0.19,0.045454545454545456,0.9272732544325536],[0.2,0.045454545454545456,0.9249204571490913],[0.21,0.045454545454545456,0.9227075223969897],[0.22,0.045454545454545456,0.920751027990846],[0.23,0.045454545454545456,0.9191476864610297],[0.24,0.045454545454545456,0.9178851543196628],[0.25,0.045454545454545456,0.9170297814813029],[0.26,0.045454545454545456,0.9165207346692221],[0.27,0.045454545454545456,0.9163396142851787],[0.28,0.045454545454545456,0.9164168809294776],[0.29,0.045454545454545456,0.9166537687859587],[0.3,0.045454545454545456,0.9169879085831207],[0.31,0.045454545454545456,0.9172726804020479],[0.32,0.045454545454545456,0.9174493239074941],[0.33,0.045454545454545456,0.9173464931694719],[0.34,0.045454545454545456,0.9168670244969757],[0.35000000000000003,0.045454545454545456,0.9157967050427025],[0.36,0.045454545454545456,0.91391611631223],[0.37,0.045454545454545456,0.9109045229898852],[0.38,0.045454545454545456,0.9063770995844429],[0.39,0.045454545454545456,0.8998829217786086],[0.4,0.045454545454545456,0.8910210639436275],[0.41000000000000003,0.045454545454545456,0.879434239695819],[0.42,0.045454545454545456,0.8653944307528674],[0.43,0.045454545454545456,0.8499723255276055],[0.44,0.045454545454545456,0.8350430102800159],[0.45,0.045454545454545456,0.6386643801343684],[0.46,0.045454545454545456,0.6280433196302129],[0.47000000000000003,0.045454545454545456,0.6195917742146738],[0.48,0.045454545454545456,0.6099155296204779],[0.49,0.045454545454545456,0.6007332375952178],[0.5,0.045454545454545456,0.5934511574786991],[0.51,0.045454545454545456,0.5851520699759952],[0.52,0.045454545454545456,0.5786003822963831],[0.53,0.045454545454545456,0.6261734246879216],[0.54,0.045454545454545456,0.61275003292845],[0.55,0.045454545454545456,0.59700704849533],[0.56,0.045454545454545456,0.5810572348964304],[0.5700000000000001,0.045454545454545456,0.5663474831924538],[0.58,0.045454545454545456,0.5533299789703044],[0.59,0.045454545454545456,0.5420372254395229],[0.6,0.045454545454545456,0.5319538657520144],[0.61,0.045454545454545456,0.5227988476867746],[0.62,0.045454545454545456,0.5140434401550538],[0.63,0.045454545454545456,0.505451673989342],[0.64,0.045454545454545456,0.49671454456516595],[0.65,0.045454545454545456,0.48762569530145794],[0.66,0.045454545454545456,0.47807281271018776],[0.67,0.045454545454545456,0.4679201738408613],[0.68,0.045454545454545456,0.4570863664452631],[0.6900000000000001,0.045454545454545456,0.4455998751613115],[0.7000000000000001,0.045454545454545456,0.4333060700196203],[0.71,0.045454545454545456,0.4203599823035502],[0.72,0.045454545454545456,0.4066098302617852],[0.73,0.045454545454545456,0.39213007767453695],[0.74,0.045454545454545456,0.3769135719130645],[0.75,0.045454545454545456,0.36080336129486146],[0.76,0.045454545454545456,0.34392193864895326],[0.77,0.045454545454545456,0.32602261213316863],[0.78,0.045454545454545456,0.30721026247900407],[0.79,0.045454545454545456,0.2875032612515509],[0.8,0.045454545454545456,0.2665702035493164],[0.81,0.045454545454545456,0.2450260539460017],[0.8200000000000001,0.045454545454545456,0.22332954887740192],[0.8300000000000001,0.045454545454545456,0.22650588789403955],[0.84,0.045454545454545456,0.17937011528228064],[0.85,0.045454545454545456,0.15430953331138617],[0.86,0.045454545454545456,0.1315626529852722],[0.87,0.045454545454545456,0.11071712801240736],[0.88,0.045454545454545456,0.08983344113477942],[0.89,0.045454545454545456,0.06748393914357448],[0.9,0.045454545454545456,0.06189617725414124],[0.91,0.045454545454545456,0],[0.92,0.045454545454545456,0],[0.93,0.045454545454545456,0],[0.9400000000000001,0.045454545454545456,0],[0.9500000000000001,0.045454545454545456,0],[0.96,0.045454545454545456,0],[0.97,0.045454545454545456,0],[0.98,0.045454545454545456,0],[0.99,0.045454545454545456,0],[1,0.045454545454545456,0],[0,0.05303030303030303,0.9833862916559999],[0.01,0.05303030303030303,0.9833196431476555],[0.02,0.05303030303030303,0.9831505294664611],[0.03,0.05303030303030303,0.982884602478032],[0.04,0.05303030303030303,0.9824085945241103],[0.05,0.05303030303030303,0.9817451649459717],[0.06,0.05303030303030303,0.980691671286947],[0.07,0.05303030303030303,0.9793196258190346],[0.08,0.05303030303030303,0.9773713347822672],[0.09,0.05303030303030303,0.9750965846362141],[0.1,0.05303030303030303,0.9725557130482562],[0.11,0.05303030303030303,0.9703777521985579],[0.12,0.05303030303030303,0],[0.13,0.05303030303030303,0.9348882821490037],[0.14,0.05303030303030303,0.934285252039504],[0.15,0.05303030303030303,0.9332410094107976],[0.16,0.05303030303030303,0.9314089132888868],[0.17,0.05303030303030303,0.9293972146980636],[0.18,0.05303030303030303,0.9268994824063931],[0.19,0.05303030303030303,0.924421974478558],[0.2,0.05303030303030303,0.921859652573056],[0.21,0.05303030303030303,0.9194777140721531],[0.22,0.05303030303030303,0.9173364200272773],[0.23,0.05303030303030303,0.9155018138660733],[0.24,0.05303030303030303,0.9140668359030867],[0.25,0.05303030303030303,0.9130078117221524],[0.26,0.05303030303030303,0.9123503391225254],[0.27,0.05303030303030303,0.9120466078387982],[0.28,0.05303030303030303,0.9120261936034453],[0.29,0.05303030303030303,0.9122380032340764],[0.3,0.05303030303030303,0.9125380849947891],[0.31,0.05303030303030303,0.9128738952564538],[0.32,0.05303030303030303,0.9130612039960024],[0.33,0.05303030303030303,0.9130266968691018],[0.34,0.05303030303030303,0.912548612030956],[0.35000000000000003,0.05303030303030303,0.9114835571528213],[0.36,0.05303030303030303,0.9095105113624633],[0.37,0.05303030303030303,0.9063872343533491],[0.38,0.05303030303030303,0.9015898697039462],[0.39,0.05303030303030303,0.8948912500558901],[0.4,0.05303030303030303,0.8855664001430266],[0.41000000000000003,0.05303030303030303,0.8737036743885009],[0.42,0.05303030303030303,0.858990828491867],[0.43,0.05303030303030303,0.842865660036598],[0.44,0.05303030303030303,0.8267598144925554],[0.45,0.05303030303030303,0],[0.46,0.05303030303030303,0],[0.47000000000000003,0.05303030303030303,0],[0.48,0.05303030303030303,0],[0.49,0.05303030303030303,0],[0.5,0.05303030303030303,0],[0.51,0.05303030303030303,0],[0.52,0.05303030303030303,0],[0.53,0.05303030303030303,0.6229516596312544],[0.54,0.05303030303030303,0.6056343520734],[0.55,0.05303030303030303,0.5890554525924545],[0.56,0.05303030303030303,0.573508399515986],[0.5700000000000001,0.05303030303030303,0.5596645026474683],[0.58,0.05303030303030303,0.5476780810201582],[0.59,0.05303030303030303,0.5371904042817566],[0.6,0.05303030303030303,0.5278656324404748],[0.61,0.05303030303030303,0.5191735312861334],[0.62,0.05303030303030303,0.5108606014963295],[0.63,0.05303030303030303,0.502551283172538],[0.64,0.05303030303030303,0.49404834969754285],[0.65,0.05303030303030303,0.4851963977984613],[0.66,0.05303030303030303,0.47582338189481105],[0.67,0.05303030303030303,0.4658725106555549],[0.68,0.05303030303030303,0.4552846641011289],[0.6900000000000001,0.05303030303030303,0.4439484119896768],[0.7000000000000001,0.05303030303030303,0.4319751613407686],[0.71,0.05303030303030303,0.419190726652411],[0.72,0.05303030303030303,0.40574499452627805],[0.73,0.05303030303030303,0.3915448302081561],[0.74,0.05303030303030303,0.37656612645309645],[0.75,0.05303030303030303,0.36087756727003356],[0.76,0.05303030303030303,0.3442707309509645],[0.77,0.05303030303030303,0.3268447299767368],[0.78,0.05303030303030303,0.3085059616894641],[0.79,0.05303030303030303,0.28921213260833345],[0.8,0.05303030303030303,0.2690798140506856],[0.81,0.05303030303030303,0.2475220488207704],[0.8200000000000001,0.05303030303030303,0.22510080223025225],[0.8300000000000001,0.05303030303030303,0],[0.84,0.05303030303030303,0.18069022878499869],[0.85,0.05303030303030303,0.15756318252118773],[0.86,0.05303030303030303,0.13542932822438425],[0.87,0.05303030303030303,0.11475905504608028],[0.88,0.05303030303030303,0.09517629163361406],[0.89,0.05303030303030303,0.07546793786922744],[0.9,0.05303030303030303,0.05940767484113511],[0.91,0.05303030303030303,0],[0.92,0.05303030303030303,0],[0.93,0.05303030303030303,0],[0.9400000000000001,0.05303030303030303,0],[0.9500000000000001,0.05303030303030303,0],[0.96,0.05303030303030303,0],[0.97,0.05303030303030303,0],[0.98,0.05303030303030303,0],[0.99,0.05303030303030303,0],[1,0.05303030303030303,0],[0,0.06060606060606061,0.982062404885667],[0.01,0.06060606060606061,0.981962809682331],[0.02,0.06060606060606061,0.9817682611815007],[0.03,0.06060606060606061,0.9813990424738446],[0.04,0.06060606060606061,0.9808745380466626],[0.05,0.06060606060606061,0.9800268337596515],[0.06,0.06060606060606061,0.9789119350553475],[0.07,0.06060606060606061,0.9772743172713034],[0.08,0.06060606060606061,0.9752589589142528],[0.09,0.06060606060606061,0.9726842030825306],[0.1,0.06060606060606061,0.970060062365772],[0.11,0.06060606060606061,0.9676873860837931],[0.12,0.06060606060606061,0.9834997792470362],[0.13,0.06060606060606061,0.9325309662222947],[0.14,0.06060606060606061,0.9319510271117588],[0.15,0.06060606060606061,0.9305745424002576],[0.16,0.06060606060606061,0.9289416290549057],[0.17,0.06060606060606061,0.9266111818459422],[0.18,0.06060606060606061,0.9242197784238646],[0.19,0.06060606060606061,0.9214813344713343],[0.2,0.06060606060606061,0.9188329089593736],[0.21,0.06060606060606061,0.9162377434175428],[0.22,0.06060606060606061,0.9138757821798933],[0.23,0.06060606060606061,0.9118341523517941],[0.24,0.06060606060606061,0.9101448236419144],[0.25,0.06060606060606061,0.9088749295708346],[0.26,0.06060606060606061,0.9080097651446382],[0.27,0.06060606060606061,0.9075222806473042],[0.28,0.06060606060606061,0.9073863594860241],[0.29,0.06060606060606061,0.9074790949061985],[0.3,0.06060606060606061,0.9077636411406795],[0.31,0.06060606060606061,0.9080542957692356],[0.32,0.06060606060606061,0.9082920688926464],[0.33,0.06060606060606061,0.9082516416101749],[0.34,0.06060606060606061,0.907823849623563],[0.35000000000000003,0.06060606060606061,0.9067118229170656],[0.36,0.06060606060606061,0.9047385818552262],[0.37,0.06060606060606061,0.9014226951303781],[0.38,0.06060606060606061,0.8966183605805709],[0.39,0.06060606060606061,0.8895398109680047],[0.4,0.06060606060606061,0.8803246777051479],[0.41000000000000003,0.06060606060606061,0.8679987986290425],[0.42,0.06060606060606061,0.853320999351117],[0.43,0.06060606060606061,0.8364069286564882],[0.44,0.06060606060606061,0.8191314873161979],[0.45,0.06060606060606061,0.6320636784729876],[0.46,0.06060606060606061,0.6219898423839122],[0.47000000000000003,0.06060606060606061,0.6138363994619462],[0.48,0.06060606060606061,0.604342979204113],[0.49,0.06060606060606061,0.5951737896253325],[0.5,0.06060606060606061,0.587787896123365],[0.51,0.06060606060606061,0.5792130668067464],[0.52,0.06060606060606061,0.6285124621825844],[0.53,0.06060606060606061,0.6138912114725025],[0.54,0.06060606060606061,0.5974094386388509],[0.55,0.06060606060606061,0.581151358284457],[0.56,0.06060606060606061,0.5664274725615307],[0.5700000000000001,0.06060606060606061,0.5535327247271565],[0.58,0.06060606060606061,0.5424089870513011],[0.59,0.06060606060606061,0.5326685680032099],[0.6,0.06060606060606061,0.5238256554816049],[0.61,0.06060606060606061,0.5155786469262624],[0.62,0.06060606060606061,0.5075073798558778],[0.63,0.06060606060606061,0.4994209465074314],[0.64,0.06060606060606061,0.49110381228807565],[0.65,0.06060606060606061,0.4823840995509131],[0.66,0.06060606060606061,0.47320159875536527],[0.67,0.06060606060606061,0.4634298252418475],[0.68,0.06060606060606061,0.45300841963959704],[0.6900000000000001,0.06060606060606061,0.44196286572150034],[0.7000000000000001,0.06060606060606061,0.430142152844355],[0.71,0.06060606060606061,0.41769933335255915],[0.72,0.06060606060606061,0.40448066876262795],[0.73,0.06060606060606061,0.39056966216529543],[0.74,0.06060606060606061,0.37595470582559254],[0.75,0.06060606060606061,0.3605135815666849],[0.76,0.06060606060606061,0.34433809492477807],[0.77,0.06060606060606061,0.32725741663351626],[0.78,0.06060606060606061,0.3092583955915668],[0.79,0.06060606060606061,0.29043989918072965],[0.8,0.06060606060606061,0.27040515754636685],[0.81,0.06060606060606061,0.24916453607781894],[0.8200000000000001,0.06060606060606061,0.22634252300508362],[0.8300000000000001,0.06060606060606061,0.1883678922508329],[0.84,0.06060606060606061,0.1816153607566267],[0.85,0.06060606060606061,0.16257236266083727],[0.86,0.06060606060606061,0.1401130859630365],[0.87,0.06060606060606061,0.11920564629676424],[0.88,0.06060606060606061,0.09932146088564653],[0.89,0.06060606060606061,0.08005130837701953],[0.9,0.06060606060606061,0.059884326299157256],[0.91,0.06060606060606061,0],[0.92,0.06060606060606061,0],[0.93,0.06060606060606061,0],[0.9400000000000001,0.06060606060606061,0],[0.9500000000000001,0.06060606060606061,0],[0.96,0.06060606060606061,0],[0.97,0.06060606060606061,0],[0.98,0.06060606060606061,0],[0.99,0.06060606060606061,0],[1,0.06060606060606061,0],[0,0.06818181818181818,0.9800988090409548],[0.01,0.06818181818181818,0.979991666008403],[0.02,0.06818181818181818,0.9797356629502234],[0.03,0.06818181818181818,0.9793454030718457],[0.04,0.06818181818181818,0.9786943834751418],[0.05,0.06818181818181818,0.9778249309974613],[0.06,0.06818181818181818,0.9765231058475038],[0.07,0.06818181818181818,0.9748906667045059],[0.08,0.06818181818181818,0.9726685888440159],[0.09,0.06818181818181818,0.9701414315022041],[0.1,0.06818181818181818,0.9673752831301006],[0.11,0.06818181818181818,0.9650128805027592],[0.12,0.06818181818181818,0],[0.13,0.06818181818181818,0.930297720222717],[0.14,0.06818181818181818,0.9294509315693952],[0.15,0.06818181818181818,0.9282071235950884],[0.16,0.06818181818181818,0.9261676190244104],[0.17,0.06818181818181818,0.9240155438445365],[0.18,0.06818181818181818,0.9212969473841799],[0.19,0.06818181818181818,0.9185914784326035],[0.2,0.06818181818181818,0.9157110129613266],[0.21,0.06818181818181818,0.9129710592412198],[0.22,0.06818181818181818,0.9104052795386044],[0.23,0.06818181818181818,0.9081199392471242],[0.24,0.06818181818181818,0.9062056302291437],[0.25,0.06818181818181818,0.9046871419034873],[0.26,0.06818181818181818,0.9035876716339855],[0.27,0.06818181818181818,0.9029141121725295],[0.28,0.06818181818181818,0.9025828267535674],[0.29,0.06818181818181818,0.9025852456462915],[0.3,0.06818181818181818,0.9027509927737397],[0.31,0.06818181818181818,0.9030405956916767],[0.32,0.06818181818181818,0.9032316640214626],[0.33,0.06818181818181818,0.903231829006425],[0.34,0.06818181818181818,0.9027719270226404],[0.35000000000000003,0.06818181818181818,0.9016876385376484],[0.36,0.06818181818181818,0.89959484931612],[0.37,0.06818181818181818,0.8963257519393446],[0.38,0.06818181818181818,0.8912367363956499],[0.39,0.06818181818181818,0.8844102546387154],[0.4,0.06818181818181818,0.874859441431757],[0.41000000000000003,0.06818181818181818,0.8631177790707971],[0.42,0.06818181818181818,0.8482627346505633],[0.43,0.06818181818181818,0.8313470187646385],[0.44,0.06818181818181818,0.8124819380817465],[0.45,0.06818181818181818,0],[0.46,0.06818181818181818,0],[0.47000000000000003,0.06818181818181818,0],[0.48,0.06818181818181818,0],[0.49,0.06818181818181818,0],[0.5,0.06818181818181818,0],[0.51,0.06818181818181818,0],[0.52,0.06818181818181818,0.6232784882175235],[0.53,0.06818181818181818,0.6058779578858577],[0.54,0.06818181818181818,0.5892142572249989],[0.55,0.06818181818181818,0.5737226584576762],[0.56,0.06818181818181818,0.5598905383418413],[0.5700000000000001,0.06818181818181818,0.5479673650877462],[0.58,0.06818181818181818,0.5376032834898546],[0.59,0.06818181818181818,0.5284019015129294],[0.6,0.06818181818181818,0.520001020093037],[0.61,0.06818181818181818,0.511971616310855],[0.62,0.06818181818181818,0.5041089945432176],[0.63,0.06818181818181818,0.4961378629345515],[0.64,0.06818181818181818,0.48790880305088824],[0.65,0.06818181818181818,0.4793281586032441],[0.66,0.06818181818181818,0.47024346950002377],[0.67,0.06818181818181818,0.46062882522814474],[0.68,0.06818181818181818,0.4504206229553346],[0.6900000000000001,0.06818181818181818,0.43952118915538463],[0.7000000000000001,0.06818181818181818,0.42802568744988584],[0.71,0.06818181818181818,0.41576495343622333],[0.72,0.06818181818181818,0.40287544599523023],[0.73,0.06818181818181818,0.3892638546382818],[0.74,0.06818181818181818,0.37491134189814124],[0.75,0.06818181818181818,0.3598720009601578],[0.76,0.06818181818181818,0.343972747935012],[0.77,0.06818181818181818,0.3272484850911999],[0.78,0.06818181818181818,0.3096554782285953],[0.79,0.06818181818181818,0.29098092727698227],[0.8,0.06818181818181818,0.2713737046313547],[0.81,0.06818181818181818,0.25008672755714073],[0.8200000000000001,0.06818181818181818,0.2274793210273846],[0.8300000000000001,0.06818181818181818,0],[0.84,0.06818181818181818,0],[0.85,0.06818181818181818,0.17295368255404253],[0.86,0.06818181818181818,0.1462098638959447],[0.87,0.06818181818181818,0.12359173900106184],[0.88,0.06818181818181818,0.1035980802623098],[0.89,0.06818181818181818,0.08360547655915901],[0.9,0.06818181818181818,0.06237415268386198],[0.91,0.06818181818181818,0],[0.92,0.06818181818181818,0],[0.93,0.06818181818181818,0],[0.9400000000000001,0.06818181818181818,0],[0.9500000000000001,0.06818181818181818,0],[0.96,0.06818181818181818,0],[0.97,0.06818181818181818,0],[0.98,0.06818181818181818,0],[0.99,0.06818181818181818,0],[1,0.06818181818181818,0],[0,0.07575757575757576,0.977354401455059],[0.01,0.07575757575757576,0.9772202813893258],[0.02,0.07575757575757576,0.9769601830239752],[0.03,0.07575757575757576,0.97649034572485],[0.04,0.07575757575757576,0.9758414533715538],[0.05,0.07575757575757576,0.9748496962178763],[0.06,0.07575757575757576,0.973589101649051],[0.07,0.07575757575757576,0.9718291748217363],[0.08,0.07575757575757576,0.9697328590688106],[0.09,0.07575757575757576,0.9671557466156985],[0.1,0.07575757575757576,0.9645966880659178],[0.11,0.07575757575757576,0.9623591841359134],[0.12,0.07575757575757576,0.971411734496443],[0.13,0.07575757575757576,0.9279618955764578],[0.14,0.07575757575757576,0.9271126944049535],[0.15,0.07575757575757576,0.9254221296759935],[0.16,0.07575757575757576,0.9235257826704941],[0.17,0.07575757575757576,0.920955647023827],[0.18,0.07575757575757576,0.9183593373562706],[0.19,0.07575757575757576,0.9153868532562339],[0.2,0.07575757575757576,0.9124722542680268],[0.21,0.07575757575757576,0.9095484024223182],[0.22,0.07575757575757576,0.9068066877317599],[0.23,0.07575757575757576,0.9043287452658337],[0.24,0.07575757575757576,0.9021812963020818],[0.25,0.07575757575757576,0.9004324911123118],[0.26,0.07575757575757576,0.89912100443825],[0.27,0.07575757575757576,0.8982154639567155],[0.28,0.07575757575757576,0.8977423574143704],[0.29,0.07575757575757576,0.897564924990508],[0.3,0.07575757575757576,0.8976745037362264],[0.31,0.07575757575757576,0.8978627879344456],[0.32,0.07575757575757576,0.8980573224826822],[0.33,0.07575757575757576,0.8980114921643706],[0.34,0.07575757575757576,0.8975575280956205],[0.35000000000000003,0.07575757575757576,0.8964074444725618],[0.36,0.07575757575757576,0.8943141933063967],[0.37,0.07575757575757576,0.8908692204235298],[0.38,0.07575757575757576,0.8859430332523321],[0.39,0.07575757575757576,0.8788702418028658],[0.4,0.07575757575757576,0.8699769494467607],[0.41000000000000003,0.07575757575757576,0.8583538289178199],[0.42,0.07575757575757576,0.8447447947655617],[0.43,0.07575757575757576,0.8283132952926386],[0.44,0.07575757575757576,0.7466967852611134],[0.45,0.07575757575757576,0.7387059636933443],[0.46,0.07575757575757576,0.7323132871723673],[0.47000000000000003,0.07575757575757576,0.6113305511417746],[0.48,0.07575757575757576,0.6012898631710848],[0.49,0.07575757575757576,0.5916589432585081],[0.5,0.07575757575757576,0.5839478677249618],[0.51,0.07575757575757576,0.624550739074082],[0.52,0.07575757575757576,0.61231845381446],[0.53,0.07575757575757576,0.5968682768863062],[0.54,0.07575757575757576,0.5812266656012697],[0.55,0.07575757575757576,0.566744611311115],[0.56,0.07575757575757576,0.5540182368480512],[0.5700000000000001,0.07575757575757576,0.5429316563805021],[0.58,0.07575757575757576,0.5332202840703335],[0.59,0.07575757575757576,0.5244827678983826],[0.6,0.07575757575757576,0.516323279184072],[0.61,0.07575757575757576,0.5085001800597149],[0.62,0.07575757575757576,0.5006973130131548],[0.63,0.07575757575757576,0.492787285854967],[0.64,0.07575757575757576,0.4846238647458825],[0.65,0.07575757575757576,0.47606959327138476],[0.66,0.07575757575757576,0.4671017202000526],[0.67,0.07575757575757576,0.4575979280390021],[0.68,0.07575757575757576,0.44751845564799864],[0.6900000000000001,0.07575757575757576,0.4368710032397177],[0.7000000000000001,0.07575757575757576,0.42551619012066905],[0.71,0.07575757575757576,0.4135809527448679],[0.72,0.07575757575757576,0.4009168881614882],[0.73,0.07575757575757576,0.3875909037383052],[0.74,0.07575757575757576,0.3735887530063035],[0.75,0.07575757575757576,0.35879418312231565],[0.76,0.07575757575757576,0.34327564977268943],[0.77,0.07575757575757576,0.32688358516037563],[0.78,0.07575757575757576,0.3095272878127609],[0.79,0.07575757575757576,0.2913103442899989],[0.8,0.07575757575757576,0.27171767350309795],[0.81,0.07575757575757576,0.25081923832841024],[0.8200000000000001,0.07575757575757576,0.22818722643890033],[0.8300000000000001,0.07575757575757576,0.23944158115308764],[0.84,0.07575757575757576,0.16556799875035844],[0.85,0.07575757575757576,0.17614807050724102],[0.86,0.07575757575757576,0.14997773895509517],[0.87,0.07575757575757576,0.12755437183346457],[0.88,0.07575757575757576,0.10749485602551928],[0.89,0.07575757575757576,0.08885681551725066],[0.9,0.07575757575757576,0.07015555764304822],[0.91,0.07575757575757576,0.054964401381407395],[0.92,0.07575757575757576,0],[0.93,0.07575757575757576,0],[0.9400000000000001,0.07575757575757576,0],[0.9500000000000001,0.07575757575757576,0],[0.96,0.07575757575757576,0],[0.97,0.07575757575757576,0],[0.98,0.07575757575757576,0],[0.99,0.07575757575757576,0],[1,0.07575757575757576,0],[0,0.08333333333333334,0.9737872421046361],[0.01,0.08333333333333334,0.9736549876064516],[0.02,0.08333333333333334,0.9733499086050617],[0.03,0.08333333333333334,0.9728922258124929],[0.04,0.08333333333333334,0.9721665400493021],[0.05,0.08333333333333334,0.9712254911405899],[0.06,0.08333333333333334,0.9698921730400657],[0.07,0.08333333333333334,0.968276174373189],[0.08,0.08333333333333334,0.9661845971779528],[0.09,0.08333333333333334,0.963885923859727],[0.1,0.08333333333333334,0.961486925700274],[0.11,0.08333333333333334,0.9596014278813151],[0.12,0.08333333333333334,0],[0.13,0.08333333333333334,0.9256186128976172],[0.14,0.08333333333333334,0.9243686382167957],[0.15,0.08333333333333334,0.9226617885604506],[0.16,0.08333333333333334,0.9202449346132091],[0.17,0.08333333333333334,0.9177793974510524],[0.18,0.08333333333333334,0.9148421476655968],[0.19,0.08333333333333334,0.9119203686328399],[0.2,0.08333333333333334,0.9088244525437231],[0.21,0.08333333333333334,0.9058179603150004],[0.22,0.08333333333333334,0.9029362379364687],[0.23,0.08333333333333334,0.9002850833743169],[0.24,0.08333333333333334,0.8979595778362057],[0.25,0.08333333333333334,0.8960211562241547],[0.26,0.08333333333333334,0.8944948107872798],[0.27,0.08333333333333334,0.8934378138705907],[0.28,0.08333333333333334,0.8927624245226589],[0.29,0.08333333333333334,0.8924979136811637],[0.3,0.08333333333333334,0.8924642333065778],[0.31,0.08333333333333334,0.8926217996453263],[0.32,0.08333333333333334,0.8927431922024839],[0.33,0.08333333333333334,0.892671246461064],[0.34,0.08333333333333334,0.8921805543795988],[0.35000000000000003,0.08333333333333334,0.8909530199332458],[0.36,0.08333333333333334,0.8887936845368926],[0.37,0.08333333333333334,0.8853030789072999],[0.38,0.08333333333333334,0.8802583676795471],[0.39,0.08333333333333334,0.8735158320815171],[0.4,0.08333333333333334,0.8647078511632835],[0.41000000000000003,0.08333333333333334,0.8543919629726688],[0.42,0.08333333333333334,0.8422818855503249],[0.43,0.08333333333333334,0.8294565146094425],[0.44,0.08333333333333334,0],[0.45,0.08333333333333334,0],[0.46,0.08333333333333334,0],[0.47000000000000003,0.08333333333333334,0],[0.48,0.08333333333333334,0],[0.49,0.08333333333333334,0],[0.5,0.08333333333333334,0],[0.51,0.08333333333333334,0.61915466103364],[0.52,0.08333333333333334,0.6037900693985576],[0.53,0.08333333333333334,0.5885043862515809],[0.54,0.08333333333333334,0.5737910371934214],[0.55,0.08333333333333334,0.5604650383790633],[0.56,0.08333333333333334,0.5487042027344713],[0.5700000000000001,0.08333333333333334,0.5384271996888783],[0.58,0.08333333333333334,0.5292464072786683],[0.59,0.08333333333333334,0.5208360020335382],[0.6,0.08333333333333334,0.512907282193394],[0.61,0.08333333333333334,0.5051351476873943],[0.62,0.08333333333333334,0.49739438435277106],[0.63,0.08333333333333334,0.4894854440802757],[0.64,0.08333333333333334,0.4813083422067075],[0.65,0.08333333333333334,0.4728117029044205],[0.66,0.08333333333333334,0.4638600356707861],[0.67,0.08333333333333334,0.45445206503714786],[0.68,0.08333333333333334,0.44451494930009255],[0.6900000000000001,0.08333333333333334,0.4339671980919282],[0.7000000000000001,0.08333333333333334,0.4228781792208974],[0.71,0.08333333333333334,0.41108856120393783],[0.72,0.08333333333333334,0.39870850031790883],[0.73,0.08333333333333334,0.3856485655255349],[0.74,0.08333333333333334,0.37187846878621145],[0.75,0.08333333333333334,0.35745005394141605],[0.76,0.08333333333333334,0.3421926338946299],[0.77,0.08333333333333334,0.32612533329782767],[0.78,0.08333333333333334,0.30919065309710325],[0.79,0.08333333333333334,0.29112613455399217],[0.8,0.08333333333333334,0.2720496568442825],[0.81,0.08333333333333334,0.2511644725019746],[0.8200000000000001,0.08333333333333334,0.22876552856376042],[0.8300000000000001,0.08333333333333334,0],[0.84,0.08333333333333334,0],[0.85,0.08333333333333334,0.17695486394081877],[0.86,0.08333333333333334,0.15253514977155638],[0.87,0.08333333333333334,0.13067451029246108],[0.88,0.08333333333333334,0.11117142787936833],[0.89,0.08333333333333334,0.09260925045706266],[0.9,0.08333333333333334,0.07432794664301058],[0.91,0.08333333333333334,0.055772573370747994],[0.92,0.08333333333333334,0],[0.93,0.08333333333333334,0],[0.9400000000000001,0.08333333333333334,0],[0.9500000000000001,0.08333333333333334,0],[0.96,0.08333333333333334,0],[0.97,0.08333333333333334,0],[0.98,0.08333333333333334,0],[0.99,0.08333333333333334,0],[1,0.08333333333333334,0],[0,0.09090909090909091,0.9695270043247485],[0.01,0.09090909090909091,0.9693749006060067],[0.02,0.09090909090909091,0.9690808533183158],[0.03,0.09090909090909091,0.9685743174151242],[0.04,0.09090909090909091,0.9678914928524871],[0.05,0.09090909090909091,0.96690662426584],[0.06,0.09090909090909091,0.9656970928520896],[0.07,0.09090909090909091,0.9641058322955754],[0.08,0.09090909090909091,0.9622811418951804],[0.09,0.09090909090909091,0.9601537485008531],[0.1,0.09090909090909091,0.9581388191288736],[0.11,0.09090909090909091,0.9565457292692366],[0.12,0.09090909090909091,0.9536724868961449],[0.13,0.09090909090909091,0.9230158877121737],[0.14,0.09090909090909091,0.9215211080628188],[0.15,0.09090909090909091,0.9192284913712094],[0.16,0.09090909090909091,0.9167561115947771],[0.17,0.09090909090909091,0.9138322330040073],[0.18,0.09090909090909091,0.9109365102605269],[0.19,0.09090909090909091,0.9077895579442021],[0.2,0.09090909090909091,0.9046786283954424],[0.21,0.09090909090909091,0.9015672028528194],[0.22,0.09090909090909091,0.8985849168181969],[0.23,0.09090909090909091,0.8958274413111929],[0.24,0.09090909090909091,0.893364903363772],[0.25,0.09090909090909091,0.8912723987134625],[0.26,0.09090909090909091,0.8896234603423312],[0.27,0.09090909090909091,0.8883888665033666],[0.28,0.09090909090909091,0.8876319809482338],[0.29,0.09090909090909091,0.8872149517108612],[0.3,0.09090909090909091,0.8871411675697347],[0.31,0.09090909090909091,0.8872053842868357],[0.32,0.09090909090909091,0.8872874807214208],[0.33,0.09090909090909091,0.887187478224733],[0.34,0.09090909090909091,0.8865727879840735],[0.35000000000000003,0.09090909090909091,0.8853655325783905],[0.36,0.09090909090909091,0.8829669741180237],[0.37,0.09090909090909091,0.879526436404584],[0.38,0.09090909090909091,0.8743554395637179],[0.39,0.09090909090909091,0.8677563499698397],[0.4,0.09090909090909091,0.8595057765236296],[0.41000000000000003,0.09090909090909091,0.849978740001063],[0.42,0.09090909090909091,0.8400434019233588],[0.43,0.09090909090909091,0.8306140700484068],[0.44,0.09090909090909091,0.7632020225633646],[0.45,0.09090909090909091,0.7575820233274099],[0.46,0.09090909090909091,0.7508391599344514],[0.47000000000000003,0.09090909090909091,0.7452202591735707],[0.48,0.09090909090909091,0.6095902269843663],[0.49,0.09090909090909091,0.5989168879359951],[0.5,0.09090909090909091,0.6202346249103151],[0.51,0.09090909090909091,0.608935193743748],[0.52,0.09090909090909091,0.5949762077162395],[0.53,0.09090909090909091,0.5805821451311022],[0.54,0.09090909090909091,0.5670247644614446],[0.55,0.09090909090909091,0.5547689950264549],[0.56,0.09090909090909091,0.5439755843427322],[0.5700000000000001,0.09090909090909091,0.534338728535266],[0.58,0.09090909090909091,0.525620481914322],[0.59,0.09090909090909091,0.5174989062652783],[0.6,0.09090909090909091,0.509673833827466],[0.61,0.09090909090909091,0.5019957660163047],[0.62,0.09090909090909091,0.4942294453322682],[0.63,0.09090909090909091,0.48630877766716757],[0.64,0.09090909090909091,0.4781342051139859],[0.65,0.09090909090909091,0.46959616247671054],[0.66,0.09090909090909091,0.4606989151960137],[0.67,0.09090909090909091,0.4513226507522117],[0.68,0.09090909090909091,0.4414464090155856],[0.6900000000000001,0.09090909090909091,0.4310619098812485],[0.7000000000000001,0.09090909090909091,0.4200427212543442],[0.71,0.09090909090909091,0.408492500387032],[0.72,0.09090909090909091,0.3962699935032303],[0.73,0.09090909090909091,0.3834258783657107],[0.74,0.09090909090909091,0.36995067878024107],[0.75,0.09090909090909091,0.35572330761599213],[0.76,0.09090909090909091,0.3408229409533564],[0.77,0.09090909090909091,0.32508711472495866],[0.78,0.09090909090909091,0.3084421787367345],[0.79,0.09090909090909091,0.2909334625195307],[0.8,0.09090909090909091,0.2720527074882114],[0.81,0.09090909090909091,0.2518134074830776],[0.8200000000000001,0.09090909090909091,0.22943208205405613],[0.8300000000000001,0.09090909090909091,0.22581484834163756],[0.84,0.09090909090909091,0.1792797492177331],[0.85,0.09090909090909091,0.1771630368630746],[0.86,0.09090909090909091,0.15432821061864488],[0.87,0.09090909090909091,0.1334804842810686],[0.88,0.09090909090909091,0.11433721077573558],[0.89,0.09090909090909091,0.09606590104757837],[0.9,0.09090909090909091,0.07737416506716223],[0.91,0.09090909090909091,0.05710874760423383],[0.92,0.09090909090909091,0],[0.93,0.09090909090909091,0],[0.9400000000000001,0.09090909090909091,0],[0.9500000000000001,0.09090909090909091,0],[0.96,0.09090909090909091,0],[0.97,0.09090909090909091,0],[0.98,0.09090909090909091,0],[0.99,0.09090909090909091,0],[1,0.09090909090909091,0],[0,0.09848484848484848,0.9648026933442224],[0.01,0.09848484848484848,0.9646549663107312],[0.02,0.09848484848484848,0.964329294383879],[0.03,0.09848484848484848,0.9638480865238329],[0.04,0.09848484848484848,0.9631305744770915],[0.05,0.09848484848484848,0.9622307536007287],[0.06,0.09848484848484848,0.9610384539491275],[0.07,0.09848484848484848,0.9596525505713939],[0.08,0.09848484848484848,0.9579717657382115],[0.09,0.09848484848484848,0.9562038753161629],[0.1,0.09848484848484848,0.9544690332473478],[0.11,0.09848484848484848,0.953227434685372],[0.12,0.09848484848484848,0],[0.13,0.09848484848484848,0.9201900195946324],[0.14,0.09848484848484848,0.9181184132965257],[0.15,0.09848484848484848,0.9155223980244483],[0.16,0.09848484848484848,0.9124596726540141],[0.17,0.09848484848484848,0.9094372503946251],[0.18,0.09848484848484848,0.9062170678367261],[0.19,0.09848484848484848,0.9030458926381806],[0.2,0.09848484848484848,0.8998174454868121],[0.21,0.09848484848484848,0.896650768319019],[0.22,0.09848484848484848,0.8936166629992303],[0.23,0.09848484848484848,0.8907744316839652],[0.24,0.09848484848484848,0.8882336833660244],[0.25,0.09848484848484848,0.8860638417046715],[0.26,0.09848484848484848,0.8842963293910349],[0.27,0.09848484848484848,0.8830134759607384],[0.28,0.09848484848484848,0.8821308843997805],[0.29,0.09848484848484848,0.8816937559555551],[0.3,0.09848484848484848,0.8815275547972046],[0.31,0.09848484848484848,0.8815689282444429],[0.32,0.09848484848484848,0.881622659918122],[0.33,0.09848484848484848,0.8814082920603596],[0.34,0.09848484848484848,0.8808581165136318],[0.35000000000000003,0.09848484848484848,0.8793254223548035],[0.36,0.09848484848484848,0.8771183943865256],[0.37,0.09848484848484848,0.8731873161237753],[0.38,0.09848484848484848,0.8683653690857114],[0.39,0.09848484848484848,0.8615501904376534],[0.4,0.09848484848484848,0.8539162365785021],[0.41000000000000003,0.09848484848484848,0.845281949764372],[0.42,0.09848484848484848,0.8365578767301551],[0.43,0.09848484848484848,0],[0.44,0.09848484848484848,0],[0.45,0.09848484848484848,0],[0.46,0.09848484848484848,0],[0.47000000000000003,0.09848484848484848,0],[0.48,0.09848484848484848,0],[0.49,0.09848484848484848,0],[0.5,0.09848484848484848,0.6145996710877761],[0.51,0.09848484848484848,0.6006066271841722],[0.52,0.09848484848484848,0.5867900256156391],[0.53,0.09848484848484848,0.5733310487012068],[0.54,0.09848484848484848,0.5608531435599656],[0.55,0.09848484848484848,0.5496728630253581],[0.56,0.09848484848484848,0.5396514204013498],[0.5700000000000001,0.09848484848484848,0.5306280336144173],[0.58,0.09848484848484848,0.5222862659658416],[0.59,0.09848484848484848,0.5143734433344523],[0.6,0.09848484848484848,0.506699272780855],[0.61,0.09848484848484848,0.49902110062530974],[0.62,0.09848484848484848,0.4912824581136829],[0.63,0.09848484848484848,0.48333502691401264],[0.64,0.09848484848484848,0.4751123540707501],[0.65,0.09848484848484848,0.46659199768229975],[0.66,0.09848484848484848,0.4576491398931954],[0.67,0.09848484848484848,0.4483027451686279],[0.68,0.09848484848484848,0.43847585520210397],[0.6900000000000001,0.09848484848484848,0.42810206831522957],[0.7000000000000001,0.09848484848484848,0.41723861364291126],[0.71,0.09848484848484848,0.4057354039847363],[0.72,0.09848484848484848,0.39369237801796064],[0.73,0.09848484848484848,0.3810258308133735],[0.74,0.09848484848484848,0.36770315142399856],[0.75,0.09848484848484848,0.35379026454352525],[0.76,0.09848484848484848,0.3391113124938198],[0.77,0.09848484848484848,0.3237287037415415],[0.78,0.09848484848484848,0.30754915569932895],[0.79,0.09848484848484848,0.29039157158362616],[0.8,0.09848484848484848,0.2723625337643256],[0.81,0.09848484848484848,0.2527018229650574],[0.8200000000000001,0.09848484848484848,0.23109812457577722],[0.8300000000000001,0.09848484848484848,0],[0.84,0.09848484848484848,0],[0.85,0.09848484848484848,0.17710718760276725],[0.86,0.09848484848484848,0.15600472639254637],[0.87,0.09848484848484848,0.13612537008817463],[0.88,0.09848484848484848,0.1175278768751757],[0.89,0.09848484848484848,0.09953050269116252],[0.9,0.09848484848484848,0.08078611430810251],[0.91,0.09848484848484848,0.059939017504210684],[0.92,0.09848484848484848,0],[0.93,0.09848484848484848,0],[0.9400000000000001,0.09848484848484848,0],[0.9500000000000001,0.09848484848484848,0],[0.96,0.09848484848484848,0],[0.97,0.09848484848484848,0],[0.98,0.09848484848484848,0],[0.99,0.09848484848484848,0],[1,0.09848484848484848,0],[0,0.10606060606060606,0.9599276114855255],[0.01,0.10606060606060606,0.9597628617584506],[0.02,0.10606060606060606,0.9594434686845058],[0.03,0.10606060606060606,0.9589280418939133],[0.04,0.10606060606060606,0.9582516068110887],[0.05,0.10606060606060606,0.9573459850872539],[0.06,0.10606060606060606,0.9562801928793678],[0.07,0.10606060606060606,0.9549813499163065],[0.08,0.10606060606060606,0.9535654164707983],[0.09,0.10606060606060606,0.952027263762746],[0.1,0.10606060606060606,0.950647460195812],[0.11,0.10606060606060606,0.9496625240557139],[0.12,0.10606060606060606,0.9153968230514876],[0.13,0.10606060606060606,0.9171045128775285],[0.14,0.10606060606060606,0.9144196638253428],[0.15,0.10606060606060606,0.9111230363067249],[0.16,0.10606060606060606,0.9077218825145853],[0.17,0.10606060606060606,0.9042376692487402],[0.18,0.10606060606060606,0.9008829830999759],[0.19,0.10606060606060606,0.897525915949873],[0.2,0.10606060606060606,0.8942277445078602],[0.21,0.10606060606060606,0.8910199932894584],[0.22,0.10606060606060606,0.8879241103237079],[0.23,0.10606060606060606,0.8850627999367914],[0.24,0.10606060606060606,0.882478570120382],[0.25,0.10606060606060606,0.8802575755752894],[0.26,0.10606060606060606,0.8784791431249692],[0.27,0.10606060606060606,0.8771196258728338],[0.28,0.10606060606060606,0.8762527183420352],[0.29,0.10606060606060606,0.8757457366517492],[0.3,0.10606060606060606,0.8755948026299507],[0.31,0.10606060606060606,0.8756099286056679],[0.32,0.10606060606060606,0.8756047205248245],[0.33,0.10606060606060606,0.8754584277854784],[0.34,0.10606060606060606,0.8746238036448535],[0.35000000000000003,0.10606060606060606,0.8733384651667189],[0.36,0.10606060606060606,0.8704981820507458],[0.37,0.10606060606060606,0.8670800256517247],[0.38,0.10606060606060606,0.861481611642517],[0.39,0.10606060606060606,0.8554562786052128],[0.4,0.10606060606060606,0.8477588268766061],[0.41000000000000003,0.10606060606060606,0.8405341053119337],[0.42,0.10606060606060606,0.8338509954173783],[0.43,0.10606060606060606,0.7054739059014811],[0.44,0.10606060606060606,0.7026842721192439],[0.45,0.10606060606060606,0.6992254861851089],[0.46,0.10606060606060606,0.6935837757361415],[0.47000000000000003,0.10606060606060606,0.6924775554541219],[0.48,0.10606060606060606,0.6000425727408737],[0.49,0.10606060606060606,0.6122908450004847],[0.5,0.10606060606060606,0.6037132997152288],[0.51,0.10606060606060606,0.5917964452956315],[0.52,0.10606060606060606,0.578965828113442],[0.53,0.10606060606060606,0.5666333632825478],[0.54,0.10606060606060606,0.5552557662965142],[0.55,0.10606060606060606,0.5449824114589175],[0.56,0.10606060606060606,0.5357031912353698],[0.5700000000000001,0.10606060606060606,0.5271631701256966],[0.58,0.10606060606060606,0.5191599340833264],[0.59,0.10606060606060606,0.5114687488295566],[0.6,0.10606060606060606,0.503866400815882],[0.61,0.10606060606060606,0.4962761944082899],[0.62,0.10606060606060606,0.48851798760548604],[0.63,0.10606060606060606,0.48056014643649136],[0.64,0.10606060606060606,0.4723342142305207],[0.65,0.10606060606060606,0.46374275120102043],[0.66,0.10606060606060606,0.45481127568329693],[0.67,0.10606060606060606,0.4454229198841375],[0.68,0.10606060606060606,0.4355735476629501],[0.6900000000000001,0.10606060606060606,0.4252544971284503],[0.7000000000000001,0.10606060606060606,0.4143506687148759],[0.71,0.10606060606060606,0.40296713781827326],[0.72,0.10606060606060606,0.3909686010380399],[0.73,0.10606060606060606,0.37841265453274053],[0.74,0.10606060606060606,0.3652988346579308],[0.75,0.10606060606060606,0.35151203282188903],[0.76,0.10606060606060606,0.3371671976116454],[0.77,0.10606060606060606,0.3220862995683542],[0.78,0.10606060606060606,0.30629412153247565],[0.79,0.10606060606060606,0.2898227461344739],[0.8,0.10606060606060606,0.2724748345147794],[0.81,0.10606060606060606,0.25468744377885344],[0.8200000000000001,0.10606060606060606,0.23677290417888486],[0.8300000000000001,0.10606060606060606,0.22243531633389477],[0.84,0.10606060606060606,0.16815551057206904],[0.85,0.10606060606060606,0.17694558610737954],[0.86,0.10606060606060606,0.1578437823545808],[0.87,0.10606060606060606,0.13899666063062954],[0.88,0.10606060606060606,0.12080497615607336],[0.89,0.10606060606060606,0.1032645929584218],[0.9,0.10606060606060606,0.0858728658863665],[0.91,0.10606060606060606,0.06796456373536297],[0.92,0.10606060606060606,0.053106208908788755],[0.93,0.10606060606060606,0.05417975721686997],[0.9400000000000001,0.10606060606060606,0],[0.9500000000000001,0.10606060606060606,0],[0.96,0.10606060606060606,0],[0.97,0.10606060606060606,0],[0.98,0.10606060606060606,0],[0.99,0.10606060606060606,0],[1,0.10606060606060606,0],[0,0.11363636363636365,0.9551805089826971],[0.01,0.11363636363636365,0.9550107715938143],[0.02,0.11363636363636365,0.9546601483779624],[0.03,0.11363636363636365,0.9541466502161305],[0.04,0.11363636363636365,0.953440401407451],[0.05,0.11363636363636365,0.9525849560330049],[0.06,0.11363636363636365,0.9515430730459655],[0.07,0.11363636363636365,0.9503908582399633],[0.08,0.11363636363636365,0.9491083787714758],[0.09,0.11363636363636365,0.9478345670630665],[0.1,0.11363636363636365,0.9466837678706362],[0.11,0.11363636363636365,0.9459470409897021],[0.12,0.11363636363636365,0],[0.13,0.11363636363636365,0.913604063610518],[0.14,0.11363636363636365,0.9101806978911215],[0.15,0.11363636363636365,0.9063091903149262],[0.16,0.11363636363636365,0.9023129751002976],[0.17,0.11363636363636365,0.8985077919099049],[0.18,0.11363636363636365,0.8948591790289101],[0.19,0.11363636363636365,0.8913494823012815],[0.2,0.11363636363636365,0.8879722276768544],[0.21,0.11363636363636365,0.8846808624487246],[0.22,0.11363636363636365,0.8815887519180148],[0.23,0.11363636363636365,0.8786874172850803],[0.24,0.11363636363636365,0.8761035776182903],[0.25,0.11363636363636365,0.8738895260596979],[0.26,0.11363636363636365,0.8720844104769645],[0.27,0.11363636363636365,0.8707693945675927],[0.28,0.11363636363636365,0.8698646554405016],[0.29,0.11363636363636365,0.8694126966997042],[0.3,0.11363636363636365,0.8692432483710196],[0.31,0.11363636363636365,0.8692691728974604],[0.32,0.11363636363636365,0.8693122153757347],[0.33,0.11363636363636365,0.8690026587605849],[0.34,0.11363636363636365,0.8683804143298158],[0.35000000000000003,0.11363636363636365,0.8665541848010441],[0.36,0.11363636363636365,0.8642383343938949],[0.37,0.11363636363636365,0.859847517318469],[0.38,0.11363636363636365,0.8551433042583485],[0.39,0.11363636363636365,0.8482238171495089],[0.4,0.11363636363636365,0.8417452199709146],[0.41000000000000003,0.11363636363636365,0.8351595312644904],[0.42,0.11363636363636365,0.8314711255032563],[0.43,0.11363636363636365,0],[0.44,0.11363636363636365,0],[0.45,0.11363636363636365,0],[0.46,0.11363636363636365,0],[0.47000000000000003,0.11363636363636365,0],[0.48,0.11363636363636365,0],[0.49,0.11363636363636365,0.6062153240646138],[0.5,0.11363636363636365,0.5953813514787591],[0.51,0.11363636363636365,0.5835772038632823],[0.52,0.11363636363636365,0.5717812447118733],[0.53,0.11363636363636365,0.5604524258485785],[0.54,0.11363636363636365,0.5500975643162378],[0.55,0.11363636363636365,0.5406491799380937],[0.56,0.11363636363636365,0.531968972781447],[0.5700000000000001,0.11363636363636365,0.5238893933669015],[0.58,0.11363636363636365,0.516183412838683],[0.59,0.11363636363636365,0.5086617800178777],[0.6,0.11363636363636365,0.5012094119556995],[0.61,0.11363636363636365,0.49364022872555224],[0.62,0.11363636363636365,0.4859320052143151],[0.63,0.11363636363636365,0.477969762636137],[0.64,0.11363636363636365,0.46969559415428114],[0.65,0.11363636363636365,0.46110923311327967],[0.66,0.11363636363636365,0.4520883763208602],[0.67,0.11363636363636365,0.442670489810795],[0.68,0.11363636363636365,0.4327843189743233],[0.6900000000000001,0.11363636363636365,0.4223774161322116],[0.7000000000000001,0.11363636363636365,0.41151890624941917],[0.71,0.11363636363636365,0.400066263117037],[0.72,0.11363636363636365,0.3881377275288852],[0.73,0.11363636363636365,0.37565443094501993],[0.74,0.11363636363636365,0.3626024444072456],[0.75,0.11363636363636365,0.3490666852791604],[0.76,0.11363636363636365,0.3348721904331501],[0.77,0.11363636363636365,0.3201486675146109],[0.78,0.11363636363636365,0.3047662245898443],[0.79,0.11363636363636365,0.28872942940904833],[0.8,0.11363636363636365,0.2722183194166713],[0.81,0.11363636363636365,0.2551661788283465],[0.8200000000000001,0.11363636363636365,0.23830360915888477],[0.8300000000000001,0.11363636363636365,0.22215396991185932],[0.84,0.11363636363636365,0],[0.85,0.11363636363636365,0.1768277208984882],[0.86,0.11363636363636365,0.16081560440936019],[0.87,0.11363636363636365,0.14219883055502872],[0.88,0.11363636363636365,0.12416965135576406],[0.89,0.11363636363636365,0.10683749779877685],[0.9,0.11363636363636365,0.0897546448082768],[0.91,0.11363636363636365,0.07248678962037625],[0.92,0.11363636363636365,0.054250666327928625],[0.93,0.11363636363636365,0],[0.9400000000000001,0.11363636363636365,0],[0.9500000000000001,0.11363636363636365,0],[0.96,0.11363636363636365,0],[0.97,0.11363636363636365,0],[0.98,0.11363636363636365,0],[0.99,0.11363636363636365,0],[1,0.11363636363636365,0],[0,0.12121212121212122,0.9507791606616126],[0.01,0.12121212121212122,0.9505900136742014],[0.02,0.12121212121212122,0.950216074627829],[0.03,0.12121212121212122,0.9496602771126448],[0.04,0.12121212121212122,0.9489410713246275],[0.05,0.12121212121212122,0.9480588348058603],[0.06,0.12121212121212122,0.947055824139937],[0.07,0.12121212121212122,0.9459370072644799],[0.08,0.12121212121212122,0.944778043732402],[0.09,0.12121212121212122,0.9436315927363497],[0.1,0.12121212121212122,0.9426748275519081],[0.11,0.12121212121212122,0.9420909749757369],[0.12,0.12121212121212122,0.9031379520929849],[0.13,0.12121212121212122,0.9097870613971824],[0.14,0.12121212121212122,0.9055609207570356],[0.15,0.12121212121212122,0.9009860219059349],[0.16,0.12121212121212122,0.8964763397373311],[0.17,0.12121212121212122,0.8922612212445298],[0.18,0.12121212121212122,0.8883326716833728],[0.19,0.12121212121212122,0.8846721549018641],[0.2,0.12121212121212122,0.8811489756872313],[0.21,0.12121212121212122,0.8778475309098153],[0.22,0.12121212121212122,0.8746863196333531],[0.23,0.12121212121212122,0.871810472728628],[0.24,0.12121212121212122,0.8692217618133862],[0.25,0.12121212121212122,0.8670167884982349],[0.26,0.12121212121212122,0.8652604756045023],[0.27,0.12121212121212122,0.8639343677169373],[0.28,0.12121212121212122,0.8631057574523637],[0.29,0.12121212121212122,0.862642671309964],[0.3,0.12121212121212122,0.8625361073251339],[0.31,0.12121212121212122,0.8625839214941933],[0.32,0.12121212121212122,0.8625917388647883],[0.33,0.12121212121212122,0.8624087230482391],[0.34,0.12121212121212122,0.8614714242886621],[0.35000000000000003,0.12121212121212122,0.8600287996345418],[0.36,0.12121212121212122,0.8569153419686459],[0.37,0.12121212121212122,0.8533251461123301],[0.38,0.12121212121212122,0.8474552913902671],[0.39,0.12121212121212122,0.8416508620348906],[0.4,0.12121212121212122,0.8344549544515731],[0.41000000000000003,0.12121212121212122,0.8285639739002436],[0.42,0.12121212121212122,0.6663306611398505],[0.43,0.12121212121212122,0.6511802932114299],[0.44,0.12121212121212122,0.6368512187795711],[0.45,0.12121212121212122,0.6277482055821252],[0.46,0.12121212121212122,0.614757574935826],[0.47000000000000003,0.12121212121212122,0.6045341096720322],[0.48,0.12121212121212122,0.593000643216634],[0.49,0.12121212121212122,0.5979101005615581],[0.5,0.12121212121212122,0.5868649874473635],[0.51,0.12121212121212122,0.5759292036683029],[0.52,0.12121212121212122,0.5649739220678889],[0.53,0.12121212121212122,0.5547600492938676],[0.54,0.12121212121212122,0.5452696485989771],[0.55,0.12121212121212122,0.5365381811797107],[0.56,0.12121212121212122,0.5284101347424023],[0.5700000000000001,0.12121212121212122,0.5207054546563217],[0.58,0.12121212121212122,0.5132675973022292],[0.59,0.12121212121212122,0.5059478487415616],[0.6,0.12121212121212122,0.49857781051434225],[0.61,0.12121212121212122,0.49111711774739836],[0.62,0.12121212121212122,0.48342050871921005],[0.63,0.12121212121212122,0.47546102351388486],[0.64,0.12121212121212122,0.46719298447400237],[0.65,0.12121212121212122,0.45851575367663594],[0.66,0.12121212121212122,0.44947484366467844],[0.67,0.12121212121212122,0.43995747379804107],[0.68,0.12121212121212122,0.42997671509616175],[0.6900000000000001,0.12121212121212122,0.41954000234508104],[0.7000000000000001,0.12121212121212122,0.4085432249527615],[0.71,0.12121212121212122,0.3971180485205832],[0.72,0.12121212121212122,0.38513368758420824],[0.73,0.12121212121212122,0.37267767877563196],[0.74,0.12121212121212122,0.3597565688219063],[0.75,0.12121212121212122,0.3462723125748685],[0.76,0.12121212121212122,0.3323740575092291],[0.77,0.12121212121212122,0.3178593840394714],[0.78,0.12121212121212122,0.30284755096966276],[0.79,0.12121212121212122,0.2872774907655041],[0.8,0.12121212121212122,0.2711630901269647],[0.81,0.12121212121212122,0.2547480317167413],[0.8200000000000001,0.12121212121212122,0.23807149319174073],[0.8300000000000001,0.12121212121212122,0.22157659208573482],[0.84,0.12121212121212122,0.18219207032061557],[0.85,0.12121212121212122,0.17053105745536437],[0.86,0.12121212121212122,0.16718062595197564],[0.87,0.12121212121212122,0.1460501469361884],[0.88,0.12121212121212122,0.12728947735070362],[0.89,0.12121212121212122,0.1100008337469216],[0.9,0.12121212121212122,0.09327459614282405],[0.91,0.12121212121212122,0.0758523036076448],[0.92,0.12121212121212122,0.05684419614643785],[0.93,0.12121212121212122,0.06558547920130643],[0.9400000000000001,0.12121212121212122,0.06092118594025574],[0.9500000000000001,0.12121212121212122,0],[0.96,0.12121212121212122,0],[0.97,0.12121212121212122,0],[0.98,0.12121212121212122,0],[0.99,0.12121212121212122,0],[1,0.12121212121212122,0],[0,0.12878787878787878,0.9468271545204284],[0.01,0.12878787878787878,0.9466120331065652],[0.02,0.12878787878787878,0.9462005156616088],[0.03,0.12878787878787878,0.9455885742337982],[0.04,0.12878787878787878,0.944816327064322],[0.05,0.12878787878787878,0.943888175970687],[0.06,0.12878787878787878,0.9428459352247247],[0.07,0.12878787878787878,0.9417185632686293],[0.08,0.12878787878787878,0.9405653504117032],[0.09,0.12878787878787878,0.9394802929132784],[0.1,0.12878787878787878,0.9386471993295289],[0.11,0.12878787878787878,0.9382065853045587],[0.12,0.12878787878787878,0],[0.13,0.12878787878787878,0.9055975572182995],[0.14,0.12878787878787878,0.9005034796702325],[0.15,0.12878787878787878,0.8952845874353602],[0.16,0.12878787878787878,0.8902779428609637],[0.17,0.12878787878787878,0.8856642186070607],[0.18,0.12878787878787878,0.8815031644514524],[0.19,0.12878787878787878,0.8776166193250282],[0.2,0.12878787878787878,0.8740456519245816],[0.21,0.12878787878787878,0.8706270600051679],[0.22,0.12878787878787878,0.8674949892348862],[0.23,0.12878787878787878,0.8645801074161215],[0.24,0.12878787878787878,0.8620209054239263],[0.25,0.12878787878787878,0.8598424167846268],[0.26,0.12878787878787878,0.8580907077587667],[0.27,0.12878787878787878,0.8568339913038805],[0.28,0.12878787878787878,0.8559945564664784],[0.29,0.12878787878787878,0.8556116847675496],[0.3,0.12878787878787878,0.8555005858242626],[0.31,0.12878787878787878,0.8555939557997527],[0.32,0.12878787878787878,0.8556388274511364],[0.33,0.12878787878787878,0.855361183926268],[0.34,0.12878787878787878,0.8545976435432097],[0.35000000000000003,0.12878787878787878,0.8527248711156692],[0.36,0.12878787878787878,0.8501068379983343],[0.37,0.12878787878787878,0.845624041463921],[0.38,0.12878787878787878,0.8406686038207776],[0.39,0.12878787878787878,0.8338816548656819],[0.4,0.12878787878787878,0.827827843891951],[0.41000000000000003,0.12878787878787878,0.8219341831149285],[0.42,0.12878787878787878,0],[0.43,0.12878787878787878,0],[0.44,0.12878787878787878,0],[0.45,0.12878787878787878,0],[0.46,0.12878787878787878,0],[0.47000000000000003,0.12878787878787878,0],[0.48,0.12878787878787878,0.5912986912568063],[0.49,0.12878787878787878,0.5865162831345487],[0.5,0.12878787878787878,0.5781367414098729],[0.51,0.12878787878787878,0.568345598016027],[0.52,0.12878787878787878,0.5586791253355998],[0.53,0.12878787878787878,0.5493617209899566],[0.54,0.12878787878787878,0.5407146642611367],[0.55,0.12878787878787878,0.5325943720126647],[0.56,0.12878787878787878,0.5249231503943634],[0.5700000000000001,0.12878787878787878,0.5175670088610723],[0.58,0.12878787878787878,0.5103723979004036],[0.59,0.12878787878787878,0.5032018366943024],[0.6,0.12878787878787878,0.49598124363918616],[0.61,0.12878787878787878,0.4885599878546094],[0.62,0.12878787878787878,0.48092047952531214],[0.63,0.12878787878787878,0.47297035542138166],[0.64,0.12878787878787878,0.4646423795801572],[0.65,0.12878787878787878,0.45595702652363623],[0.66,0.12878787878787878,0.4467891566287683],[0.67,0.12878787878787878,0.4371969201203012],[0.68,0.12878787878787878,0.4271218910688555],[0.6900000000000001,0.12878787878787878,0.4165277335011527],[0.7000000000000001,0.12878787878787878,0.40551183963934156],[0.71,0.12878787878787878,0.39393966586531315],[0.72,0.12878787878787878,0.38196578301490336],[0.73,0.12878787878787878,0.3695140376190039],[0.74,0.12878787878787878,0.3566002454341771],[0.75,0.12878787878787878,0.343322055143428],[0.76,0.12878787878787878,0.32950131906181307],[0.77,0.12878787878787878,0.3153194761219682],[0.78,0.12878787878787878,0.3005683686981902],[0.79,0.12878787878787878,0.285355309226842],[0.8,0.12878787878787878,0.26965514988560063],[0.81,0.12878787878787878,0.2535195240711824],[0.8200000000000001,0.12878787878787878,0.23714786739673496],[0.8300000000000001,0.12878787878787878,0.2206662020785865],[0.84,0.12878787878787878,0],[0.85,0.12878787878787878,0],[0.86,0.12878787878787878,0.16825805657373216],[0.87,0.12878787878787878,0.14805917540686836],[0.88,0.12878787878787878,0.1297310620963316],[0.89,0.12878787878787878,0.11264422848204625],[0.9,0.12878787878787878,0.09632929097452277],[0.91,0.12878787878787878,0.0802069788373849],[0.92,0.12878787878787878,0.06369770168047983],[0.93,0.12878787878787878,0.050030372355367794],[0.9400000000000001,0.12878787878787878,0],[0.9500000000000001,0.12878787878787878,0],[0.96,0.12878787878787878,0],[0.97,0.12878787878787878,0],[0.98,0.12878787878787878,0],[0.99,0.12878787878787878,0],[1,0.12878787878787878,0],[0,0.13636363636363635,0.9433221479375811],[0.01,0.13636363636363635,0.9430876325948375],[0.02,0.13636363636363635,0.9426038690361496],[0.03,0.13636363636363635,0.9419402536590216],[0.04,0.13636363636363635,0.9410633900770393],[0.05,0.13636363636363635,0.9400636447289474],[0.06,0.13636363636363635,0.9389130295548509],[0.07,0.13636363636363635,0.9377027758766519],[0.08,0.13636363636363635,0.9364516224968631],[0.09,0.13636363636363635,0.9353644774541992],[0.1,0.13636363636363635,0.9346437216171071],[0.11,0.13636363636363635,0.9345624537597208],[0.12,0.13636363636363635,0.9419560738518391],[0.13,0.13636363636363635,0.9007376594099422],[0.14,0.13636363636363635,0.8950142040489116],[0.15,0.13636363636363635,0.8892545780864722],[0.16,0.13636363636363635,0.8838143757248335],[0.17,0.13636363636363635,0.878903585404871],[0.18,0.13636363636363635,0.8744498977289284],[0.19,0.13636363636363635,0.8704650333892943],[0.2,0.13636363636363635,0.8667299421467952],[0.21,0.13636363636363635,0.8633340060799386],[0.22,0.13636363636363635,0.8601252504207086],[0.23,0.13636363636363635,0.857255097314988],[0.24,0.13636363636363635,0.8546866229183323],[0.25,0.13636363636363635,0.8525243432705865],[0.26,0.13636363636363635,0.8508136282836614],[0.27,0.13636363636363635,0.8495412340312913],[0.28,0.13636363636363635,0.8487669848245285],[0.29,0.13636363636363635,0.8483537363812812],[0.3,0.13636363636363635,0.8483081111797282],[0.31,0.13636363636363635,0.8483704931678145],[0.32,0.13636363636363635,0.8484470216244986],[0.33,0.13636363636363635,0.8481615083080098],[0.34,0.13636363636363635,0.8473024941973661],[0.35000000000000003,0.13636363636363635,0.8455485895155832],[0.36,0.13636363636363635,0.8425527045229375],[0.37,0.13636363636363635,0.8385026082222611],[0.38,0.13636363636363635,0.832862535579235],[0.39,0.13636363636363635,0.8269742312719128],[0.4,0.13636363636363635,0.8206624319596555],[0.41000000000000003,0.13636363636363635,0.8159500917941139],[0.42,0.13636363636363635,0.665008978837422],[0.43,0.13636363636363635,0.6590699579894965],[0.44,0.13636363636363635,0.6531309362426551],[0.45,0.13636363636363635,0.6481817509542229],[0.46,0.13636363636363635,0.5955032777630999],[0.47000000000000003,0.13636363636363635,0.5881652671072208],[0.48,0.13636363636363635,0.5839487037703497],[0.49,0.13636363636363635,0.5778583206568773],[0.5,0.13636363636363635,0.5700140743555933],[0.51,0.13636363636363635,0.561480529935103],[0.52,0.13636363636363635,0.5526941854572615],[0.53,0.13636363636363635,0.5443402840622151],[0.54,0.13636363636363635,0.5363370512242147],[0.55,0.13636363636363635,0.5287599226788593],[0.56,0.13636363636363635,0.521490195161587],[0.5700000000000001,0.13636363636363635,0.5144151503616494],[0.58,0.13636363636363635,0.5074295282777137],[0.59,0.13636363636363635,0.5004297638550548],[0.6,0.13636363636363635,0.49328352154651584],[0.61,0.13636363636363635,0.4859593954001242],[0.62,0.13636363636363635,0.4783338081748476],[0.63,0.13636363636363635,0.4703678637789347],[0.64,0.13636363636363635,0.4620360136007391],[0.65,0.13636363636363635,0.4532269587626928],[0.66,0.13636363636363635,0.4440097026453396],[0.67,0.13636363636363635,0.43427598126571226],[0.68,0.13636363636363635,0.42406125103340353],[0.6900000000000001,0.13636363636363635,0.4133960009078921],[0.7000000000000001,0.13636363636363635,0.40219076646342355],[0.71,0.13636363636363635,0.39061321906118457],[0.72,0.13636363636363635,0.37853740085248594],[0.73,0.13636363636363635,0.36608697989760747],[0.74,0.13636363636363635,0.35327134970070945],[0.75,0.13636363636363635,0.3400070232547917],[0.76,0.13636363636363635,0.32646711600901096],[0.77,0.13636363636363635,0.31240372115228987],[0.78,0.13636363636363635,0.2980113436446742],[0.79,0.13636363636363635,0.2830670816550971],[0.8,0.13636363636363635,0.267701384792971],[0.81,0.13636363636363635,0.25186833631236377],[0.8200000000000001,0.13636363636363635,0.23574343346690632],[0.8300000000000001,0.13636363636363635,0.21950080495551771],[0.84,0.13636363636363635,0.21768235225463922],[0.85,0.13636363636363635,0.17555073197318782],[0.86,0.13636363636363635,0.1677907719538755],[0.87,0.13636363636363635,0.148993294799678],[0.88,0.13636363636363635,0.13131202025094268],[0.89,0.13636363636363635,0.11472216360900869],[0.9,0.13636363636363635,0.09878845254115107],[0.91,0.13636363636363635,0.08301472116343317],[0.92,0.13636363636363635,0.06691731064901094],[0.93,0.13636363636363635,0.050589740857444665],[0.9400000000000001,0.13636363636363635,0],[0.9500000000000001,0.13636363636363635,0],[0.96,0.13636363636363635,0],[0.97,0.13636363636363635,0],[0.98,0.13636363636363635,0],[0.99,0.13636363636363635,0],[1,0.13636363636363635,0],[0,0.14393939393939395,0.940193364904471],[0.01,0.14393939393939395,0.9399048554342673],[0.02,0.14393939393939395,0.9393909311896173],[0.03,0.14393939393939395,0.9385937135053614],[0.04,0.14393939393939395,0.9376528246839027],[0.05,0.14393939393939395,0.9364805081034688],[0.06,0.14393939393939395,0.9352187827365428],[0.07,0.14393939393939395,0.9337941880928267],[0.08,0.14393939393939395,0.932394596637381],[0.09,0.14393939393939395,0.9311350500152741],[0.1,0.14393939393939395,0.9306196585756864],[0.11,0.14393939393939395,0.9317882184893775],[0.12,0.14393939393939395,0],[0.13,0.14393939393939395,0.8955573297418514],[0.14,0.14393939393939395,0.8891486807784861],[0.15,0.14393939393939395,0.8830087880770285],[0.16,0.14393939393939395,0.8772270881880786],[0.17,0.14393939393939395,0.8720036538182323],[0.18,0.14393939393939395,0.8673816646674296],[0.19,0.14393939393939395,0.8631959719996125],[0.2,0.14393939393939395,0.859468703450431],[0.21,0.14393939393939395,0.8559741273071402],[0.22,0.14393939393939395,0.8528308737218203],[0.23,0.14393939393939395,0.8499221133841491],[0.24,0.14393939393939395,0.8473903552974081],[0.25,0.14393939393939395,0.8452352383242417],[0.26,0.14393939393939395,0.8435102146166489],[0.27,0.14393939393939395,0.8422716875043866],[0.28,0.14393939393939395,0.8414461978145071],[0.29,0.14393939393939395,0.8410766055399268],[0.3,0.14393939393939395,0.8409559795381966],[0.31,0.14393939393939395,0.8410740114250719],[0.32,0.14393939393939395,0.841036380739094],[0.33,0.14393939393939395,0.840826061123228],[0.34,0.14393939393939395,0.8398066058215435],[0.35000000000000003,0.14393939393939395,0.8381095499067088],[0.36,0.14393939393939395,0.8350165287289251],[0.37,0.14393939393939395,0.8308872623395601],[0.38,0.14393939393939395,0.8254888644096867],[0.39,0.14393939393939395,0.8194727337978625],[0.4,0.14393939393939395,0.8142278377883458],[0.41000000000000003,0.14393939393939395,0.8113985361437746],[0.42,0.14393939393939395,0],[0.43,0.14393939393939395,0],[0.44,0.14393939393939395,0],[0.45,0.14393939393939395,0],[0.46,0.14393939393939395,0],[0.47000000000000003,0.14393939393939395,0],[0.48,0.14393939393939395,0.5748466448980707],[0.49,0.14393939393939395,0.5695840152558826],[0.5,0.14393939393939395,0.5628039506022373],[0.51,0.14393939393939395,0.5550260502009943],[0.52,0.14393939393939395,0.5472578093115411],[0.53,0.14393939393939395,0.5395453063929274],[0.54,0.14393939393939395,0.5321640457711077],[0.55,0.14393939393939395,0.525009528229097],[0.56,0.14393939393939395,0.5180610687131082],[0.5700000000000001,0.14393939393939395,0.5112383824248486],[0.58,0.14393939393939395,0.504432968273057],[0.59,0.14393939393939395,0.4975454397637613],[0.6,0.14393939393939395,0.49051632532387995],[0.61,0.14393939393939395,0.4832157483539874],[0.62,0.14393939393939395,0.47561574570280907],[0.63,0.14393939393939395,0.46764194333190684],[0.64,0.14393939393939395,0.4592110654312236],[0.65,0.14393939393939395,0.4503681167528888],[0.66,0.14393939393939395,0.440982878635782],[0.67,0.14393939393939395,0.4311421063349473],[0.68,0.14393939393939395,0.42080070495649347],[0.6900000000000001,0.14393939393939395,0.4099460930506851],[0.7000000000000001,0.14393939393939395,0.39870521036966633],[0.71,0.14393939393939395,0.38695545404853915],[0.72,0.14393939393939395,0.3748870437962535],[0.73,0.14393939393939395,0.36242560588110345],[0.74,0.14393939393939395,0.3496115982369102],[0.75,0.14393939393939395,0.33655047398308635],[0.76,0.14393939393939395,0.3230474982178485],[0.77,0.14393939393939395,0.30933214038190165],[0.78,0.14393939393939395,0.2950861836560092],[0.79,0.14393939393939395,0.2805353228904498],[0.8,0.14393939393939395,0.2654016740198475],[0.81,0.14393939393939395,0.24992669217194896],[0.8200000000000001,0.14393939393939395,0.23404285189891144],[0.8300000000000001,0.14393939393939395,0.21809927000086907],[0.84,0.14393939393939395,0],[0.85,0.14393939393939395,0],[0.86,0.14393939393939395,0.16669925424778181],[0.87,0.14393939393939395,0.14920645698541146],[0.88,0.14393939393939395,0.13241413548049638],[0.89,0.14393939393939395,0.11621757811980744],[0.9,0.14393939393939395,0.10064469164796325],[0.91,0.14393939393939395,0.08498541417816044],[0.92,0.14393939393939395,0.06862845013373861],[0.93,0.14393939393939395,0.05123310645235318],[0.9400000000000001,0.14393939393939395,0],[0.9500000000000001,0.14393939393939395,0],[0.96,0.14393939393939395,0],[0.97,0.14393939393939395,0],[0.98,0.14393939393939395,0],[0.99,0.14393939393939395,0],[1,0.14393939393939395,0],[0,0.15151515151515152,0.9372802130469062],[0.01,0.15151515151515152,0.9369856949348332],[0.02,0.15151515151515152,0.9363457848785449],[0.03,0.15151515151515152,0.9355191627266651],[0.04,0.15151515151515152,0.9343749859440735],[0.05,0.15151515151515152,0.93311992869292],[0.06,0.15151515151515152,0.931592485462952],[0.07,0.15151515151515152,0.9299855916063129],[0.08,0.15151515151515152,0.9282130985272066],[0.09,0.15151515151515152,0.9266448521847841],[0.1,0.15151515151515152,0.9254881595162148],[0.11,0.15151515151515152,0.9237946877640253],[0.12,0.15151515151515152,0.8934260936908223],[0.13,0.15151515151515152,0.8890161352917247],[0.14,0.15151515151515152,0.8830234705763632],[0.15,0.15151515151515152,0.8766306911676304],[0.16,0.15151515151515152,0.8705875685581913],[0.17,0.15151515151515152,0.86507847439189],[0.18,0.15151515151515152,0.8601942065408967],[0.19,0.15151515151515152,0.8559625238020403],[0.2,0.15151515151515152,0.8521367875084296],[0.21,0.15151515151515152,0.84873606347871],[0.22,0.15151515151515152,0.8455495028832034],[0.23,0.15151515151515152,0.8427153061156443],[0.24,0.15151515151515152,0.8401677345336258],[0.25,0.15151515151515152,0.8380177844566945],[0.26,0.15151515151515152,0.8362970456120364],[0.27,0.15151515151515152,0.8350010308598376],[0.28,0.15151515151515152,0.8341854060475754],[0.29,0.15151515151515152,0.8337169691352366],[0.3,0.15151515151515152,0.8336182083244782],[0.31,0.15151515151515152,0.8335831996777097],[0.32,0.15151515151515152,0.8336309499093331],[0.33,0.15151515151515152,0.8331441876892743],[0.34,0.15151515151515152,0.8323600916135372],[0.35000000000000003,0.15151515151515152,0.8302343633951283],[0.36,0.15151515151515152,0.8275535337449575],[0.37,0.15151515151515152,0.8230303963603058],[0.38,0.15151515151515152,0.8180459371044437],[0.39,0.15151515151515152,0.8120620152335509],[0.4,0.15151515151515152,0.8065998430606746],[0.41000000000000003,0.15151515151515152,0.6383352499148979],[0.42,0.15151515151515152,0.6301698102128522],[0.43,0.15151515151515152,0.6203716038728587],[0.44,0.15151515151515152,0.6105740105934219],[0.45,0.15151515151515152,0.6040424652191609],[0.46,0.15151515151515152,0.5800820109294887],[0.47000000000000003,0.15151515151515152,0.5670978417930428],[0.48,0.15151515151515152,0.5666199183670768],[0.49,0.15151515151515152,0.5624295010533094],[0.5,0.15151515151515152,0.5561838756943163],[0.51,0.15151515151515152,0.549343537756806],[0.52,0.15151515151515152,0.5421428774028441],[0.53,0.15151515151515152,0.5351007688968175],[0.54,0.15151515151515152,0.5281253809679871],[0.55,0.15151515151515152,0.521332887957364],[0.56,0.15151515151515152,0.5146554211590981],[0.5700000000000001,0.15151515151515152,0.5080197258149003],[0.58,0.15151515151515152,0.5013612277845942],[0.59,0.15151515151515152,0.4945943022075307],[0.6,0.15151515151515152,0.4876073267587945],[0.61,0.15151515151515152,0.48036208032413846],[0.62,0.15151515151515152,0.47274982412510413],[0.63,0.15151515151515152,0.46471343117472486],[0.64,0.15151515151515152,0.45625033076647215],[0.65,0.15151515151515152,0.44723601661721607],[0.66,0.15151515151515152,0.43777243243801284],[0.67,0.15151515151515152,0.42775355326578973],[0.68,0.15151515151515152,0.41724854863999195],[0.6900000000000001,0.15151515151515152,0.40630715566529896],[0.7000000000000001,0.15151515151515152,0.3948627917916316],[0.71,0.15151515151515152,0.3831127118894221],[0.72,0.15151515151515152,0.37093837534555346],[0.73,0.15151515151515152,0.3584905286158638],[0.74,0.15151515151515152,0.34577962735891976],[0.75,0.15151515151515152,0.3327251653700255],[0.76,0.15151515151515152,0.31952449259024857],[0.77,0.15151515151515152,0.30586731143054036],[0.78,0.15151515151515152,0.2920431472597987],[0.79,0.15151515151515152,0.2776403335012966],[0.8,0.15151515151515152,0.2629802283632988],[0.81,0.15151515151515152,0.2477073330973761],[0.8200000000000001,0.15151515151515152,0.23227598056703674],[0.8300000000000001,0.15151515151515152,0.21657377253689758],[0.84,0.15151515151515152,0.16024816501967465],[0.85,0.15151515151515152,0.15120177422709538],[0.86,0.15151515151515152,0.16527478906261822],[0.87,0.15151515151515152,0.14918987079612173],[0.88,0.15151515151515152,0.13314814324624968],[0.89,0.15151515151515152,0.11751215086314153],[0.9,0.15151515151515152,0.10201968943278092],[0.91,0.15151515151515152,0.08655975334495877],[0.92,0.15151515151515152,0.06998506623783712],[0.93,0.15151515151515152,0.05155566106710897],[0.9400000000000001,0.15151515151515152,0.06616569816999426],[0.9500000000000001,0.15151515151515152,0],[0.96,0.15151515151515152,0],[0.97,0.15151515151515152,0],[0.98,0.15151515151515152,0],[0.99,0.15151515151515152,0],[1,0.15151515151515152,0],[0,0.1590909090909091,0.9344446131628514],[0.01,0.1590909090909091,0.9340721801600158],[0.02,0.1590909090909091,0.9334408776655558],[0.03,0.1590909090909091,0.932415636582443],[0.04,0.1590909090909091,0.9312488179828775],[0.05,0.1590909090909091,0.9297190863966136],[0.06,0.1590909090909091,0.9280765973336335],[0.07,0.1590909090909091,0.926093900534529],[0.08,0.1590909090909091,0.9240547430668231],[0.09,0.1590909090909091,0.9219955691043775],[0.1,0.1590909090909091,0.9204515176334526],[0.11,0.1590909090909091,0],[0.12,0.1590909090909091,0.8902651963706552],[0.13,0.1590909090909091,0.8839862823530344],[0.14,0.1590909090909091,0.8772377211213374],[0.15,0.1590909090909091,0.8704966375381048],[0.16,0.1590909090909091,0.8639678790001861],[0.17,0.1590909090909091,0.8579945924790419],[0.18,0.1590909090909091,0.8528865455340919],[0.19,0.1590909090909091,0.8485254483846527],[0.2,0.1590909090909091,0.8448230598835844],[0.21,0.1590909090909091,0.841418587601088],[0.22,0.1590909090909091,0.8383638734217466],[0.23,0.1590909090909091,0.8355132308071472],[0.24,0.1590909090909091,0.8330104167542517],[0.25,0.1590909090909091,0.830846570726245],[0.26,0.1590909090909091,0.8290831301569186],[0.27,0.1590909090909091,0.8277719020972676],[0.28,0.1590909090909091,0.8268527410059104],[0.29,0.1590909090909091,0.8263647580034625],[0.3,0.1590909090909091,0.8261123643637924],[0.31,0.1590909090909091,0.8260958069668742],[0.32,0.1590909090909091,0.82587770649161],[0.33,0.1590909090909091,0.8255728546308347],[0.34,0.1590909090909091,0.8242929338227107],[0.35000000000000003,0.1590909090909091,0.8227007761937395],[0.36,0.1590909090909091,0.8193234511295604],[0.37,0.1590909090909091,0.8157330857519398],[0.38,0.1590909090909091,0.8102812572115895],[0.39,0.1590909090909091,0.8053112865540076],[0.4,0.1590909090909091,0.8002690305090061],[0.41000000000000003,0.1590909090909091,0],[0.42,0.1590909090909091,0],[0.43,0.1590909090909091,0],[0.44,0.1590909090909091,0],[0.45,0.1590909090909091,0],[0.46,0.1590909090909091,0],[0.47000000000000003,0.1590909090909091,0.564235942885823],[0.48,0.1590909090909091,0.5611233946016914],[0.49,0.1590909090909091,0.556315636500069],[0.5,0.1590909090909091,0.5505928090477888],[0.51,0.1590909090909091,0.5441006481030157],[0.52,0.1590909090909091,0.5375553572780196],[0.53,0.1590909090909091,0.530856206531188],[0.54,0.1590909090909091,0.5242762030613438],[0.55,0.1590909090909091,0.5177408061224763],[0.56,0.1590909090909091,0.5112599066985468],[0.5700000000000001,0.1590909090909091,0.5047927001258088],[0.58,0.1590909090909091,0.4982486188496555],[0.59,0.1590909090909091,0.4915495952488609],[0.6,0.1590909090909091,0.48463250871876207],[0.61,0.1590909090909091,0.47737908421924413],[0.62,0.1590909090909091,0.46974309142599924],[0.63,0.1590909090909091,0.4616689223486201],[0.64,0.1590909090909091,0.45305440585497636],[0.65,0.1590909090909091,0.4439780543998647],[0.66,0.1590909090909091,0.434301766853987],[0.67,0.1590909090909091,0.42415409763182343],[0.68,0.1590909090909091,0.4134976716144114],[0.6900000000000001,0.1590909090909091,0.40235546488106444],[0.7000000000000001,0.1590909090909091,0.3908745621525862],[0.71,0.1590909090909091,0.37895051426756576],[0.72,0.1590909090909091,0.36679713822935667],[0.73,0.1590909090909091,0.35434242078416134],[0.74,0.1590909090909091,0.3416395986032641],[0.75,0.1590909090909091,0.32880165121193605],[0.76,0.1590909090909091,0.31560845138430493],[0.77,0.1590909090909091,0.30234836261908304],[0.78,0.1590909090909091,0.288589094512124],[0.79,0.1590909090909091,0.27472071125398845],[0.8,0.1590909090909091,0.2602105943071073],[0.81,0.1590909090909091,0.24557696206930252],[0.8200000000000001,0.1590909090909091,0.2303821331415347],[0.8300000000000001,0.1590909090909091,0.21516374054383353],[0.84,0.1590909090909091,0],[0.85,0.1590909090909091,0],[0.86,0.1590909090909091,0.16401984330656877],[0.87,0.1590909090909091,0.14926118775967068],[0.88,0.1590909090909091,0.1339758299397269],[0.89,0.1590909090909091,0.11850127789289677],[0.9,0.1590909090909091,0.10341517935458513],[0.91,0.1590909090909091,0.08802012542282087],[0.92,0.1590909090909091,0.07167648385508532],[0.93,0.1590909090909091,0.05305534085264673],[0.9400000000000001,0.1590909090909091,0],[0.9500000000000001,0.1590909090909091,0],[0.96,0.1590909090909091,0],[0.97,0.1590909090909091,0],[0.98,0.1590909090909091,0],[0.99,0.1590909090909091,0],[1,0.1590909090909091,0],[0,0.16666666666666669,0.9314693352215472],[0.01,0.16666666666666669,0.9311200399836554],[0.02,0.16666666666666669,0.9303343545915668],[0.03,0.16666666666666669,0.929346488589242],[0.04,0.16666666666666669,0.9279254867815675],[0.05,0.16666666666666669,0.9263764932255756],[0.06,0.16666666666666669,0.9243953017308635],[0.07,0.16666666666666669,0.9222558888063804],[0.08,0.16666666666666669,0.9197557616670282],[0.09,0.16666666666666669,0.9173688877432729],[0.1,0.16666666666666669,0.9153340004292294],[0.11,0.16666666666666669,0.8730277570153163],[0.12,0.16666666666666669,0.8862168891911465],[0.13,0.16666666666666669,0.8792016441554004],[0.14,0.16666666666666669,0.8719709882851367],[0.15,0.16666666666666669,0.8645651189681576],[0.16,0.16666666666666669,0.857322592647149],[0.17,0.16666666666666669,0.8506104744098304],[0.18,0.16666666666666669,0.845005298777167],[0.19,0.16666666666666669,0.84085368850613],[0.2,0.16666666666666669,0.837249819778972],[0.21,0.16666666666666669,0.8340776168852166],[0.22,0.16666666666666669,0.8310459411731382],[0.23,0.16666666666666669,0.8282915649059084],[0.24,0.16666666666666669,0.8257671267605278],[0.25,0.16666666666666669,0.8235898326942361],[0.26,0.16666666666666669,0.8217977127836376],[0.27,0.16666666666666669,0.8203949374000125],[0.28,0.16666666666666669,0.8194329516404614],[0.29,0.16666666666666669,0.8188060971766898],[0.3,0.16666666666666669,0.818508316184194],[0.31,0.16666666666666669,0.8182886779033021],[0.32,0.16666666666666669,0.8181080372423186],[0.33,0.16666666666666669,0.817424256564993],[0.34,0.16666666666666669,0.8164823875407206],[0.35000000000000003,0.16666666666666669,0.8142347959779825],[0.36,0.16666666666666669,0.811778695101024],[0.37,0.16666666666666669,0.8074823709847718],[0.38,0.16666666666666669,0.8035110877968197],[0.39,0.16666666666666669,0.7984892495436837],[0.4,0.16666666666666669,0.7948674949812615],[0.41000000000000003,0.16666666666666669,0.6436628236100207],[0.42,0.16666666666666669,0.6318736400379125],[0.43,0.16666666666666669,0.6177296465206438],[0.44,0.16666666666666669,0.6035867853376097],[0.45,0.16666666666666669,0.5941593408530742],[0.46,0.16666666666666669,0],[0.47000000000000003,0.16666666666666669,0.5603006355827282],[0.48,0.16666666666666669,0.5557963763195106],[0.49,0.16666666666666669,0.5510698425338441],[0.5,0.16666666666666669,0.5454134087308261],[0.51,0.16666666666666669,0.5395214864402644],[0.52,0.16666666666666669,0.533224078124469],[0.53,0.16666666666666669,0.5269442279856211],[0.54,0.16666666666666669,0.5205733876612413],[0.55,0.16666666666666669,0.5142492987775313],[0.56,0.16666666666666669,0.5079344168080837],[0.5700000000000001,0.16666666666666669,0.5015723931991871],[0.58,0.16666666666666669,0.49511965033144767],[0.59,0.16666666666666669,0.48848927754009924],[0.6,0.16666666666666669,0.48157865075573447],[0.61,0.16666666666666669,0.4743325673083397],[0.62,0.16666666666666669,0.46665509603615096],[0.63,0.16666666666666669,0.45846711315932015],[0.64,0.16666666666666669,0.44979539960595744],[0.65,0.16666666666666669,0.4404997655289776],[0.66,0.16666666666666669,0.4307270747783034],[0.67,0.16666666666666669,0.42036835899410374],[0.68,0.16666666666666669,0.40953917616484486],[0.6900000000000001,0.16666666666666669,0.39829880929910894],[0.7000000000000001,0.16666666666666669,0.3866120620832465],[0.71,0.16666666666666669,0.3746926162482225],[0.72,0.16666666666666669,0.36243210152272337],[0.73,0.16666666666666669,0.3499957020308766],[0.74,0.16666666666666669,0.33739421197198094],[0.75,0.16666666666666669,0.3245445631623233],[0.76,0.16666666666666669,0.31166915416553476],[0.77,0.16666666666666669,0.29840694300276827],[0.78,0.16666666666666669,0.2851555609509291],[0.79,0.16666666666666669,0.27135656056915],[0.8,0.16666666666666669,0.25757083881000553],[0.81,0.16666666666666669,0.24315847506809313],[0.8200000000000001,0.16666666666666669,0.22888204064762616],[0.8300000000000001,0.16666666666666669,0.21406826995403883],[0.84,0.16666666666666669,0.2264579397267383],[0.85,0.16666666666666669,0.16651794956684865],[0.86,0.16666666666666669,0.16316241101762616],[0.87,0.16666666666666669,0.150133426379079],[0.88,0.16666666666666669,0.13486481417106938],[0.89,0.16666666666666669,0.1196528461819667],[0.9,0.16666666666666669,0.10443981567855926],[0.91,0.16666666666666669,0.08966394426453095],[0.92,0.16666666666666669,0.07433927706935362],[0.93,0.16666666666666669,0.05854767394871708],[0.9400000000000001,0.16666666666666669,0.045082123384377774],[0.9500000000000001,0.16666666666666669,0.07515432448521814],[0.96,0.16666666666666669,0],[0.97,0.16666666666666669,0],[0.98,0.16666666666666669,0],[0.99,0.16666666666666669,0],[1,0.16666666666666669,0],[0,0.17424242424242425,0.928270523353822],[0.01,0.17424242424242425,0.9278426750685389],[0.02,0.17424242424242425,0.9271226854364345],[0.03,0.17424242424242425,0.9259334823298636],[0.04,0.17424242424242425,0.9245761658890956],[0.05,0.17424242424242425,0.9227454761091483],[0.06,0.17424242424242425,0.92073911276373],[0.07,0.17424242424242425,0.9182187659573269],[0.08,0.17424242424242425,0.9155220219237139],[0.09,0.17424242424242425,0.9126494708252795],[0.1,0.17424242424242425,0.9102041668532191],[0.11,0.17424242424242425,0],[0.12,0.17424242424242425,0.882268556827312],[0.13,0.17424242424242425,0.8749029470087016],[0.14,0.17424242424242425,0.8670662582278539],[0.15,0.17424242424242425,0.8590247031497742],[0.16,0.17424242424242425,0.8507122831163149],[0.17,0.17424242424242425,0.842053759746606],[0.18,0.17424242424242425,0.8361848459747292],[0.19,0.17424242424242425,0.8325601357341379],[0.2,0.17424242424242425,0.8295323033949006],[0.21,0.17424242424242425,0.8264987430484174],[0.22,0.17424242424242425,0.8236272754185657],[0.23,0.17424242424242425,0.820849380344471],[0.24,0.17424242424242425,0.8183333619555573],[0.25,0.17424242424242425,0.8161129033775408],[0.26,0.17424242424242425,0.8142451486828891],[0.27,0.17424242424242425,0.8127917595389929],[0.28,0.17424242424242425,0.8117078955735895],[0.29,0.17424242424242425,0.811007986119223],[0.3,0.17424242424242425,0.8105658637509989],[0.31,0.17424242424242425,0.8102709131641228],[0.32,0.17424242424242425,0.8098795353568559],[0.33,0.17424242424242425,0.809249070961174],[0.34,0.17424242424242425,0.8079116700126234],[0.35000000000000003,0.17424242424242425,0.8061653987642716],[0.36,0.17424242424242425,0.8031505257001825],[0.37,0.17424242424242425,0.8001395305086678],[0.38,0.17424242424242425,0.7959108859068815],[0.39,0.17424242424242425,0.7926349386123914],[0.4,0.17424242424242425,0.7896547594990384],[0.41000000000000003,0.17424242424242425,0],[0.42,0.17424242424242425,0],[0.43,0.17424242424242425,0],[0.44,0.17424242424242425,0],[0.45,0.17424242424242425,0],[0.46,0.17424242424242425,0.5539654837869754],[0.47000000000000003,0.17424242424242425,0.5530515768448281],[0.48,0.17424242424242425,0.5501746426181005],[0.49,0.17424242424242425,0.545826976714385],[0.5,0.17424242424242425,0.5408875248670455],[0.51,0.17424242424242425,0.5351997185275265],[0.52,0.17424242424242425,0.5293632652593316],[0.53,0.17424242424242425,0.5232281648577425],[0.54,0.17424242424242425,0.5170929244129487],[0.55,0.17424242424242425,0.5109033783132322],[0.56,0.17424242424242425,0.5046880746644392],[0.5700000000000001,0.17424242424242425,0.49842556282326755],[0.58,0.17424242424242425,0.49202682503502404],[0.59,0.17424242424242425,0.4854211195571477],[0.6,0.17424242424242425,0.4785312260547299],[0.61,0.17424242424242425,0.4712455995561834],[0.62,0.17424242424242425,0.4634960262305413],[0.63,0.17424242424242425,0.45524816921713673],[0.64,0.17424242424242425,0.44637987125897666],[0.65,0.17424242424242425,0.4370108436060794],[0.66,0.17424242424242425,0.42699200053766445],[0.67,0.17424242424242425,0.4165031872982904],[0.68,0.17424242424242425,0.40550677902029786],[0.6900000000000001,0.17424242424242425,0.39406865819360437],[0.7000000000000001,0.17424242424242425,0.38234358057397816],[0.71,0.17424242424242425,0.3702485355617221],[0.72,0.17424242424242425,0.35800785478567104],[0.73,0.17424242424242425,0.345551784654329],[0.74,0.17424242424242425,0.33294028460822045],[0.75,0.17424242424242425,0.32029036600490446],[0.76,0.17424242424242425,0.30737187590051196],[0.77,0.17424242424242425,0.2945211510018717],[0.78,0.17424242424242425,0.28125344255509577],[0.79,0.17424242424242425,0.26810867764564705],[0.8,0.17424242424242425,0.2544312558814341],[0.81,0.17424242424242425,0.2410369810859171],[0.8200000000000001,0.17424242424242425,0.22739020497213003],[0.8300000000000001,0.17424242424242425,0.21488875949051953],[0.84,0.17424242424242425,0.2045835901304923],[0.85,0.17424242424242425,0],[0.86,0.17424242424242425,0],[0.87,0.17424242424242425,0.1530692243759631],[0.88,0.17424242424242425,0.13621131155833602],[0.89,0.17424242424242425,0.12028602787786766],[0.9,0.17424242424242425,0.10542377554360005],[0.91,0.17424242424242425,0.09052653785384997],[0.92,0.17424242424242425,0.07586884587843795],[0.93,0.17424242424242425,0.060349820903754486],[0.9400000000000001,0.17424242424242425,0.0447800837011679],[0.9500000000000001,0.17424242424242425,0],[0.96,0.17424242424242425,0],[0.97,0.17424242424242425,0],[0.98,0.17424242424242425,0],[0.99,0.17424242424242425,0],[1,0.17424242424242425,0],[0,0.18181818181818182,0.9247276269358261],[0.01,0.18181818181818182,0.9243460638340981],[0.02,0.18181818181818182,0.9235042111407212],[0.03,0.18181818181818182,0.922415244496754],[0.04,0.18181818181818182,0.9208546268410134],[0.05,0.18181818181818182,0.9190963773377281],[0.06,0.18181818181818182,0.9168106455420242],[0.07,0.18181818181818182,0.9142487930777143],[0.08,0.18181818181818182,0.911164379450591],[0.09,0.18181818181818182,0.9080523757742698],[0.1,0.18181818181818182,0.9051594032637491],[0.11,0.18181818181818182,0.9264075535050973],[0.12,0.18181818181818182,0.8786415797777547],[0.13,0.18181818181818182,0.8709927019903193],[0.14,0.18181818181818182,0.8628939536165132],[0.15,0.18181818181818182,0.8541674180437724],[0.16,0.18181818181818182,0.844270693964812],[0.17,0.18181818181818182,0.8312940742054447],[0.18,0.18181818181818182,0.824852095230505],[0.19,0.18181818181818182,0.8240688142733436],[0.2,0.18181818181818182,0.8216610404619638],[0.21,0.18181818181818182,0.8188921974397053],[0.22,0.18181818181818182,0.8159770276102225],[0.23,0.18181818181818182,0.8131873872262718],[0.24,0.18181818181818182,0.8105910368469259],[0.25,0.18181818181818182,0.8082880853273444],[0.26,0.18181818181818182,0.8063572738951675],[0.27,0.18181818181818182,0.8047882928536589],[0.28,0.18181818181818182,0.8036305865065907],[0.29,0.18181818181818182,0.8028179035968781],[0.3,0.18181818181818182,0.8022601408129506],[0.31,0.18181818181818182,0.8018771099527465],[0.32,0.18181818181818182,0.8013437576463243],[0.33,0.18181818181818182,0.8006077530877497],[0.34,0.18181818181818182,0.7992875940435824],[0.35000000000000003,0.18181818181818182,0.7973586885288517],[0.36,0.18181818181818182,0.7949468940487375],[0.37,0.18181818181818182,0.7918647339590643],[0.38,0.18181818181818182,0.7890950397571361],[0.39,0.18181818181818182,0.7862558845601098],[0.4,0.18181818181818182,0.7846680734212852],[0.41000000000000003,0.18181818181818182,0.6167349978664661],[0.42,0.18181818181818182,0.6082877010265062],[0.43,0.18181818181818182,0.5984234089458518],[0.44,0.18181818181818182,0.5888558275375161],[0.45,0.18181818181818182,0.5811087474308981],[0.46,0.18181818181818182,0.5478279500813732],[0.47000000000000003,0.18181818181818182,0.547090208187344],[0.48,0.18181818181818182,0.5447357375852805],[0.49,0.18181818181818182,0.5412824986027192],[0.5,0.18181818181818182,0.536614254585615],[0.51,0.18181818181818182,0.5314744150391141],[0.52,0.18181818181818182,0.5257354949093633],[0.53,0.18181818181818182,0.5198744271415],[0.54,0.18181818181818182,0.5138197901651805],[0.55,0.18181818181818182,0.5077349254966249],[0.56,0.18181818181818182,0.5016034564520385],[0.5700000000000001,0.18181818181818182,0.4953741347113439],[0.58,0.18181818181818182,0.4890106138661423],[0.59,0.18181818181818182,0.48241652937424817],[0.6,0.18181818181818182,0.47549150451371647],[0.61,0.18181818181818182,0.4681621888896628],[0.62,0.18181818181818182,0.4603444034979095],[0.63,0.18181818181818182,0.451939658530468],[0.64,0.18181818181818182,0.4430060955099774],[0.65,0.18181818181818182,0.43338905392984955],[0.66,0.18181818181818182,0.423283166570707],[0.67,0.18181818181818182,0.4125723163414933],[0.68,0.18181818181818182,0.40142018872265967],[0.6900000000000001,0.18181818181818182,0.3898854354085646],[0.7000000000000001,0.18181818181818182,0.3779643547539303],[0.71,0.18181818181818182,0.3658743249817934],[0.72,0.18181818181818182,0.3535165644504248],[0.73,0.18181818181818182,0.34106244984412715],[0.74,0.18181818181818182,0.328520450511398],[0.75,0.18181818181818182,0.31581489492529474],[0.76,0.18181818181818182,0.3031769351025879],[0.77,0.18181818181818182,0.29025032516819343],[0.78,0.18181818181818182,0.2774863759245371],[0.79,0.18181818181818182,0.2643195060142789],[0.8,0.18181818181818182,0.2514435860548878],[0.81,0.18181818181818182,0.2381948801031291],[0.8200000000000001,0.18181818181818182,0.2256546028759726],[0.8300000000000001,0.18181818181818182,0.21358524157635378],[0.84,0.18181818181818182,0.2033044905886258],[0.85,0.18181818181818182,0.13582809854140449],[0.86,0.18181818181818182,0.1268417896310419],[0.87,0.18181818181818182,0.15272279697980903],[0.88,0.18181818181818182,0.136123356853271],[0.89,0.18181818181818182,0.12065342596029757],[0.9,0.18181818181818182,0.10538147745050672],[0.91,0.18181818181818182,0.09106104277157662],[0.92,0.18181818181818182,0.07610605654158473],[0.93,0.18181818181818182,0.0607380754893784],[0.9400000000000001,0.18181818181818182,0.04409669494592273],[0.9500000000000001,0.18181818181818182,0],[0.96,0.18181818181818182,0],[0.97,0.18181818181818182,0],[0.98,0.18181818181818182,0],[0.99,0.18181818181818182,0],[1,0.18181818181818182,0],[0,0.1893939393939394,0.9209412525438264],[0.01,0.1893939393939394,0.9205182124227798],[0.02,0.1893939393939394,0.9197508801815885],[0.03,0.1893939393939394,0.9185535563822864],[0.04,0.1893939393939394,0.9170933011492124],[0.05,0.1893939393939394,0.9151704610900644],[0.06,0.1893939393939394,0.9129439694019741],[0.07,0.1893939393939394,0.9101289878787953],[0.08,0.1893939393939394,0.9069676257661893],[0.09,0.1893939393939394,0.9034647329345773],[0.1,0.1893939393939394,0.9001458569180366],[0.11,0.1893939393939394,0],[0.12,0.1893939393939394,0.8754831435536041],[0.13,0.1893939393939394,0.8678296413568333],[0.14,0.1893939393939394,0.8594266363907492],[0.15,0.1893939393939394,0.8506811797151222],[0.16,0.1893939393939394,0.841328152143921],[0.17,0.1893939393939394,0.8310769140377945],[0.18,0.1893939393939394,0.8190994418649432],[0.19,0.1893939393939394,0.8171307687504918],[0.2,0.1893939393939394,0.8143660545782769],[0.21,0.1893939393939394,0.8113112416073133],[0.22,0.1893939393939394,0.8082434546128408],[0.23,0.1893939393939394,0.8052787277732987],[0.24,0.1893939393939394,0.8025340164605237],[0.25,0.1893939393939394,0.8001257798877128],[0.26,0.1893939393939394,0.7980544430507837],[0.27,0.1893939393939394,0.7964105290044172],[0.28,0.1893939393939394,0.7951398408551685],[0.29,0.1893939393939394,0.79422136935158],[0.3,0.1893939393939394,0.7936232492695464],[0.31,0.1893939393939394,0.7930388784594666],[0.32,0.1893939393939394,0.7925822030960634],[0.33,0.1893939393939394,0.7915572822611354],[0.34,0.1893939393939394,0.7904278197334756],[0.35000000000000003,0.1893939393939394,0.7883952249749114],[0.36,0.1893939393939394,0.7863081842581645],[0.37,0.1893939393939394,0.7838313620269655],[0.38,0.1893939393939394,0.7817180466948698],[0.39,0.1893939393939394,0.7801302939898751],[0.4,0.1893939393939394,0.7792558014521223],[0.41000000000000003,0.1893939393939394,0],[0.42,0.1893939393939394,0],[0.43,0.1893939393939394,0],[0.44,0.1893939393939394,0],[0.45,0.1893939393939394,0],[0.46,0.1893939393939394,0.5417526647239483],[0.47000000000000003,0.1893939393939394,0.5418254991522018],[0.48,0.1893939393939394,0.5403269280424736],[0.49,0.1893939393939394,0.5371904674771859],[0.5,0.1893939393939394,0.533115223279342],[0.51,0.1893939393939394,0.5280469952825648],[0.52,0.1893939393939394,0.522617505024731],[0.53,0.1893939393939394,0.5167724796197968],[0.54,0.1893939393939394,0.5108396623250528],[0.55,0.1893939393939394,0.5047995883395981],[0.56,0.1893939393939394,0.49868545595683805],[0.5700000000000001,0.1893939393939394,0.4924863757475731],[0.58,0.1893939393939394,0.48610799583146913],[0.59,0.1893939393939394,0.4794802026894368],[0.6,0.1893939393939394,0.4725144959719154],[0.61,0.1893939393939394,0.4651031451017766],[0.62,0.1893939393939394,0.45716478182667514],[0.63,0.1893939393939394,0.44868378763053907],[0.64,0.1893939393939394,0.43952641673152537],[0.65,0.1893939393939394,0.4298490211613884],[0.66,0.1893939393939394,0.41949375316998233],[0.67,0.1893939393939394,0.4086848908240051],[0.68,0.1893939393939394,0.39737871248679335],[0.6900000000000001,0.1893939393939394,0.3856767800479901],[0.7000000000000001,0.1893939393939394,0.3737304468511805],[0.71,0.1893939393939394,0.36147355580799684],[0.72,0.1893939393939394,0.34913092954201846],[0.73,0.1893939393939394,0.3366333564833939],[0.74,0.1893939393939394,0.32404912261564456],[0.75,0.1893939393939394,0.3114898528977227],[0.76,0.1893939393939394,0.29875096035374116],[0.77,0.1893939393939394,0.28616712444446557],[0.78,0.1893939393939394,0.27330843723654485],[0.79,0.1893939393939394,0.2607209748895475],[0.8,0.1893939393939394,0.24782664398824628],[0.81,0.1893939393939394,0.2354212135393754],[0.8200000000000001,0.1893939393939394,0.22298194515632125],[0.8300000000000001,0.1893939393939394,0.2116873580603528],[0.84,0.1893939393939394,0.20140422175020906],[0.85,0.1893939393939394,0],[0.86,0.1893939393939394,0],[0.87,0.1893939393939394,0.15115811611295743],[0.88,0.1893939393939394,0.13545622482425687],[0.89,0.1893939393939394,0.11986328465626744],[0.9,0.1893939393939394,0.10526110870397729],[0.91,0.1893939393939394,0.090420906368536],[0.92,0.1893939393939394,0.07601276340705351],[0.93,0.1893939393939394,0.06008395041956139],[0.9400000000000001,0.1893939393939394,0.04317623825388099],[0.9500000000000001,0.1893939393939394,0],[0.96,0.1893939393939394,0],[0.97,0.1893939393939394,0],[0.98,0.1893939393939394,0],[0.99,0.1893939393939394,0],[1,0.1893939393939394,0],[0,0.19696969696969696,0.9170233146146758],[0.01,0.19696969696969696,0.9166158147301249],[0.02,0.19696969696969696,0.9158306190475434],[0.03,0.19696969696969696,0.9146774172079655],[0.04,0.19696969696969696,0.913174124436043],[0.05,0.19696969696969696,0.9113125191895985],[0.06,0.19696969696969696,0.9089834243398616],[0.07,0.19696969696969696,0.9061980908452374],[0.08,0.19696969696969696,0.9028230096171022],[0.09,0.19696969696969696,0.8991795045842169],[0.1,0.19696969696969696,0.8954991494453419],[0.11,0.19696969696969696,0.8572815692851582],[0.12,0.19696969696969696,0.873042614277241],[0.13,0.19696969696969696,0.8651589896845406],[0.14,0.19696969696969696,0.85680630270826],[0.15,0.19696969696969696,0.8478467658019038],[0.16,0.19696969696969696,0.8388510121343614],[0.17,0.19696969696969696,0.8309677319370947],[0.18,0.19696969696969696,0.815424325549005],[0.19,0.19696969696969696,0.8112012949851485],[0.2,0.19696969696969696,0.8074411417541092],[0.21,0.19696969696969696,0.8038742595147615],[0.22,0.19696969696969696,0.8004775343264967],[0.23,0.19696969696969696,0.7972237815255891],[0.24,0.19696969696969696,0.7942854372257493],[0.25,0.19696969696969696,0.7916558027403695],[0.26,0.19696969696969696,0.7894815055953264],[0.27,0.19696969696969696,0.7876874329162245],[0.28,0.19696969696969696,0.7863305122733968],[0.29,0.19696969696969696,0.7853588352508449],[0.3,0.19696969696969696,0.7845894989916147],[0.31,0.19696969696969696,0.7841268388516982],[0.32,0.19696969696969696,0.7833020250063099],[0.33,0.19696969696969696,0.7826654968980633],[0.34,0.19696969696969696,0.7810064317630405],[0.35000000000000003,0.19696969696969696,0.779659948958839],[0.36,0.19696969696969696,0.7772943864528956],[0.37,0.19696969696969696,0.7758150608443871],[0.38,0.19696969696969696,0.7742050680435824],[0.39,0.19696969696969696,0.7737596993064652],[0.4,0.19696969696969696,0.7735932466746968],[0.41000000000000003,0.19696969696969696,0.6062093231127543],[0.42,0.19696969696969696,0.5962807861211218],[0.43,0.19696969696969696,0.5848507757321529],[0.44,0.19696969696969696,0.5739549037919072],[0.45,0.19696969696969696,0.5652874792590412],[0.46,0.19696969696969696,0.5376567231414534],[0.47000000000000003,0.19696969696969696,0.5383383990459609],[0.48,0.19696969696969696,0.5369348523756443],[0.49,0.19696969696969696,0.5341926124593623],[0.5,0.19696969696969696,0.5300837062789263],[0.51,0.19696969696969696,0.5252833392738283],[0.52,0.19696969696969696,0.5197896643729087],[0.53,0.19696969696969696,0.5140769090703756],[0.54,0.19696969696969696,0.5081322710497398],[0.55,0.19696969696969696,0.5021062277901989],[0.56,0.19696969696969696,0.49600116327212546],[0.5700000000000001,0.19696969696969696,0.4897576772158245],[0.58,0.19696969696969696,0.48334180651755965],[0.59,0.19696969696969696,0.4766520701417219],[0.6,0.19696969696969696,0.46958760008879985],[0.61,0.19696969696969696,0.4620718790243158],[0.62,0.19696969696969696,0.45402820403593286],[0.63,0.19696969696969696,0.4453559672586501],[0.64,0.19696969696969696,0.4361352133367081],[0.65,0.19696969696969696,0.426208041318931],[0.66,0.19696969696969696,0.41580197497336274],[0.67,0.19696969696969696,0.4047947873829032],[0.68,0.19696969696969696,0.3933818328380185],[0.6900000000000001,0.19696969696969696,0.38161373685915123],[0.7000000000000001,0.19696969696969696,0.36950611719914306],[0.71,0.19696969696969696,0.3572700515132138],[0.72,0.19696969696969696,0.3448118606008598],[0.73,0.19696969696969696,0.3323044228906498],[0.74,0.19696969696969696,0.319751584297404],[0.75,0.19696969696969696,0.3070996973370598],[0.76,0.19696969696969696,0.29456391045674035],[0.77,0.19696969696969696,0.2818559427171712],[0.78,0.19696969696969696,0.26937961141992506],[0.79,0.19696969696969696,0.2567066288973438],[0.8,0.19696969696969696,0.24441515206532993],[0.81,0.19696969696969696,0.23200386086271838],[0.8200000000000001,0.19696969696969696,0.22029586690993314],[0.8300000000000001,0.19696969696969696,0.20907832270262183],[0.84,0.19696969696969696,0.19923817315087958],[0.85,0.19696969696969696,0.14599109224299425],[0.86,0.19696969696969696,0.13763244437904085],[0.87,0.19696969696969696,0.14937422825975222],[0.88,0.19696969696969696,0.13389540520282076],[0.89,0.19696969696969696,0.11900155640788664],[0.9,0.19696969696969696,0.10396978971475104],[0.91,0.19696969696969696,0.08981538798345413],[0.92,0.19696969696969696,0.07487319623354376],[0.93,0.19696969696969696,0.05948175820855736],[0.9400000000000001,0.19696969696969696,0.042425238305013525],[0.9500000000000001,0.19696969696969696,0.07215768897818378],[0.96,0.19696969696969696,0],[0.97,0.19696969696969696,0],[0.98,0.19696969696969696,0],[0.99,0.19696969696969696,0],[1,0.19696969696969696,0],[0,0.20454545454545456,0.913191784299074],[0.01,0.20454545454545456,0.9128158757586404],[0.02,0.20454545454545456,0.9119726413095072],[0.03,0.20454545454545456,0.9108897970921337],[0.04,0.20454545454545456,0.9093360541688611],[0.05,0.20454545454545456,0.9075239023465076],[0.06,0.20454545454545456,0.9051990555505904],[0.07,0.20454545454545456,0.9023787914636463],[0.08,0.20454545454545456,0.8989857308744217],[0.09,0.20454545454545456,0.8951043380928098],[0.1,0.20454545454545456,0.8910384763423944],[0.11,0.20454545454545456,0],[0.12,0.20454545454545456,0.8711829249604124],[0.13,0.20454545454545456,0.863225480893385],[0.14,0.20454545454545456,0.8544296534216871],[0.15,0.20454545454545456,0.8450869545261444],[0.16,0.20454545454545456,0.8350985350614042],[0.17,0.20454545454545456,0.8259327219380831],[0.18,0.20454545454545456,0.8133423138448576],[0.19,0.20454545454545456,0.8050860394447641],[0.2,0.20454545454545456,0.8005022082895579],[0.21,0.20454545454545456,0.7966408519092284],[0.22,0.20454545454545456,0.7928076792355647],[0.23,0.20454545454545456,0.7892530393516541],[0.24,0.20454545454545456,0.7859475681113715],[0.25,0.20454545454545456,0.7831411312676213],[0.26,0.20454545454545456,0.780728619940947],[0.27,0.20454545454545456,0.778844868409309],[0.28,0.20454545454545456,0.7773810546120449],[0.29,0.20454545454545456,0.7762922248540713],[0.3,0.20454545454545456,0.7755964479674493],[0.31,0.20454545454545456,0.7748313622750028],[0.32,0.20454545454545456,0.7743934803944892],[0.33,0.20454545454545456,0.7731312768130341],[0.34,0.20454545454545456,0.7722960869589627],[0.35000000000000003,0.20454545454545456,0.7701435731550609],[0.36,0.20454545454545456,0.7690235626910181],[0.37,0.20454545454545456,0.767131290011565],[0.38,0.20454545454545456,0.7670166559026645],[0.39,0.20454545454545456,0.7669168399163828],[0.4,0.20454545454545456,0.7677911975151197],[0.41000000000000003,0.20454545454545456,0],[0.42,0.20454545454545456,0],[0.43,0.20454545454545456,0],[0.44,0.20454545454545456,0],[0.45,0.20454545454545456,0.5367336304858166],[0.46,0.20454545454545456,0.5373166571845459],[0.47000000000000003,0.20454545454545456,0.5367961449304647],[0.48,0.20454545454545456,0.5350807051942892],[0.49,0.20454545454545456,0.5319421005428352],[0.5,0.20454545454545456,0.5278645320737082],[0.51,0.20454545454545456,0.5228604780254386],[0.52,0.20454545454545456,0.5174528382865173],[0.53,0.20454545454545456,0.5116544099493608],[0.54,0.20454545454545456,0.5057255556232355],[0.55,0.20454545454545456,0.49967486797786886],[0.56,0.20454545454545456,0.4935076739263611],[0.5700000000000001,0.20454545454545456,0.48721967608040373],[0.58,0.20454545454545456,0.4807105955472293],[0.59,0.20454545454545456,0.4739093780233167],[0.6,0.20454545454545456,0.46673332220412944],[0.61,0.20454545454545456,0.45907520494236953],[0.62,0.20454545454545456,0.4508647236376269],[0.63,0.20454545454545456,0.44209483281850936],[0.64,0.20454545454545456,0.43264086323840184],[0.65,0.20454545454545456,0.4226770085951814],[0.66,0.20454545454545456,0.41204648747862815],[0.67,0.20454545454545456,0.40099437385232733],[0.68,0.20454545454545456,0.389469453778441],[0.6900000000000001,0.20454545454545456,0.37758835817583447],[0.7000000000000001,0.20454545454545456,0.36549154914536003],[0.71,0.20454545454545456,0.35311886429523487],[0.72,0.20454545454545456,0.3406887105405288],[0.73,0.20454545454545456,0.3281311288777321],[0.74,0.20454545454545456,0.31552388411032317],[0.75,0.20454545454545456,0.30296835037643965],[0.76,0.20454545454545456,0.2903095672305294],[0.77,0.20454545454545456,0.27783764844321274],[0.78,0.20454545454545456,0.2652533869276008],[0.79,0.20454545454545456,0.25297086661570883],[0.8,0.20454545454545456,0.24063997447288882],[0.81,0.20454545454545456,0.2287858098671521],[0.8200000000000001,0.20454545454545456,0.21712383440535954],[0.8300000000000001,0.20454545454545456,0.20647024311987194],[0.84,0.20454545454545456,0.19684765587543396],[0.85,0.20454545454545456,0],[0.86,0.20454545454545456,0],[0.87,0.20454545454545456,0.14725036812097392],[0.88,0.20454545454545456,0.132310627468047],[0.89,0.20454545454545456,0.11716962977950354],[0.9,0.20454545454545456,0.10278297268980097],[0.91,0.20454545454545456,0.08809524056930264],[0.92,0.20454545454545456,0.07381395587618042],[0.93,0.20454545454545456,0.05815813340643303],[0.9400000000000001,0.20454545454545456,0.04168919118964649],[0.9500000000000001,0.20454545454545456,0],[0.96,0.20454545454545456,0],[0.97,0.20454545454545456,0],[0.98,0.20454545454545456,0],[0.99,0.20454545454545456,0],[1,0.20454545454545456,0],[0,0.21212121212121213,0.9096704805127512],[0.01,0.21212121212121213,0.9091859072786275],[0.02,0.21212121212121213,0.9084881119039563],[0.03,0.21212121212121213,0.9071759373200863],[0.04,0.21212121212121213,0.9058187886917204],[0.05,0.21212121212121213,0.9038386773573638],[0.06,0.21212121212121213,0.901658481065756],[0.07,0.21212121212121213,0.8988007364007505],[0.08,0.21212121212121213,0.8954118507971756],[0.09,0.21212121212121213,0.891392632578009],[0.1,0.21212121212121213,0.8869847388545461],[0.11,0.21212121212121213,0.8748314569271719],[0.12,0.21212121212121213,0.8691245013900126],[0.13,0.21212121212121213,0.8614516007017867],[0.14,0.21212121212121213,0.8527809007037841],[0.15,0.21212121212121213,0.8424203467824679],[0.16,0.21212121212121213,0.8294160681284195],[0.17,0.21212121212121213,0.8103768810995187],[0.18,0.21212121212121213,0.7924699047969648],[0.19,0.21212121212121213,0.7954750419535892],[0.2,0.21212121212121213,0.7935316060983484],[0.21,0.21212121212121213,0.7897240334461951],[0.22,0.21212121212121213,0.7856190293706893],[0.23,0.21212121212121213,0.7814929413440983],[0.24,0.21212121212121213,0.7778748738799957],[0.25,0.21212121212121213,0.7746725190649022],[0.26,0.21212121212121213,0.7721195765409344],[0.27,0.21212121212121213,0.7700367134201629],[0.28,0.21212121212121213,0.7684885987310621],[0.29,0.21212121212121213,0.7673855135964948],[0.3,0.21212121212121213,0.7664945309862856],[0.31,0.21212121212121213,0.7659951649331452],[0.32,0.21212121212121213,0.7650439258010533],[0.33,0.21212121212121213,0.7645043907953276],[0.34,0.21212121212121213,0.7627494359921632],[0.35000000000000003,0.21212121212121213,0.7618512084643201],[0.36,0.21212121212121213,0.7597381424979514],[0.37,0.21212121212121213,0.7594587233359862],[0.38,0.21212121212121213,0.7589290609566621],[0.39,0.21212121212121213,0.7603135730766921],[0.4,0.21212121212121213,0.7614878035338504],[0.41000000000000003,0.21212121212121213,0.5992540794822936],[0.42,0.21212121212121213,0.5922073572387938],[0.43,0.21212121212121213,0.5836490562864829],[0.44,0.21212121212121213,0.5750148715614111],[0.45,0.21212121212121213,0.5389341435068852],[0.46,0.21212121212121213,0.5383027563438056],[0.47000000000000003,0.21212121212121213,0.5367749816961871],[0.48,0.21212121212121213,0.534134801369294],[0.49,0.21212121212121213,0.5305614107042179],[0.5,0.21212121212121213,0.5260338438509655],[0.51,0.21212121212121213,0.5209494787195063],[0.52,0.21212121212121213,0.5153534503877482],[0.53,0.21212121212121213,0.5095490374971345],[0.54,0.21212121212121213,0.5035508515440901],[0.55,0.21212121212121213,0.49743573753304304],[0.56,0.21212121212121213,0.49121583715955275],[0.5700000000000001,0.21212121212121213,0.4848115748045728],[0.58,0.21212121212121213,0.4781898573172464],[0.59,0.21212121212121213,0.4712569913862016],[0.6,0.21212121212121213,0.46391033530783876],[0.61,0.21212121212121213,0.456095660517242],[0.62,0.21212121212121213,0.4477363262059843],[0.63,0.21212121212121213,0.4387562397687894],[0.64,0.21212121212121213,0.42923991733208144],[0.65,0.21212121212121213,0.41904418618348493],[0.66,0.21212121212121213,0.4084038085132822],[0.67,0.21212121212121213,0.3971963415068914],[0.68,0.21212121212121213,0.3856226802861108],[0.6900000000000001,0.21212121212121213,0.37372272506359616],[0.7000000000000001,0.21212121212121213,0.361513669465252],[0.71,0.21212121212121213,0.3491949859247333],[0.72,0.21212121212121213,0.33667256845992133],[0.73,0.21212121212121213,0.32411740174005305],[0.74,0.21212121212121213,0.3115306798761695],[0.75,0.21212121212121213,0.29888316840496854],[0.76,0.21212121212121213,0.2863679420196761],[0.77,0.21212121212121213,0.2737830286166405],[0.78,0.21212121212121213,0.261442372810122],[0.79,0.21212121212121213,0.24911246182898852],[0.8,0.21212121212121213,0.23714797308718105],[0.81,0.21212121212121213,0.22534060950041457],[0.8200000000000001,0.21212121212121213,0.214154513026675],[0.8300000000000001,0.21212121212121213,0.20366669027549444],[0.84,0.21212121212121213,0.19444118382277126],[0.85,0.21212121212121213,0],[0.86,0.21212121212121213,0.13295720382207496],[0.87,0.21212121212121213,0.1452002351180249],[0.88,0.21212121212121213,0.13021781972473934],[0.89,0.21212121212121213,0.11551873082122706],[0.9,0.21212121212121213,0.10065067525389704],[0.91,0.21212121212121213,0.08652085956989998],[0.92,0.21212121212121213,0.07184445074814878],[0.93,0.21212121212121213,0.056830956866216115],[0.9400000000000001,0.21212121212121213,0.04042656817611057],[0.9500000000000001,0.21212121212121213,0],[0.96,0.21212121212121213,0],[0.97,0.21212121212121213,0],[0.98,0.21212121212121213,0],[0.99,0.21212121212121213,0],[1,0.21212121212121213,0],[0,0.2196969696969697,0.9064235452015137],[0.01,0.2196969696969697,0.9060759044931332],[0.02,0.2196969696969697,0.9050193549218721],[0.03,0.2196969696969697,0.9040262837033282],[0.04,0.2196969696969697,0.9022329109690215],[0.05,0.2196969696969697,0.9005784153949565],[0.06,0.2196969696969697,0.8981546454978071],[0.07,0.2196969696969697,0.8955232074025725],[0.08,0.2196969696969697,0.892061919699578],[0.09,0.2196969696969697,0.887930011694507],[0.1,0.2196969696969697,0.8826195103316179],[0.11,0.2196969696969697,0.8751271614434518],[0.12,0.2196969696969697,0.8681497172445753],[0.13,0.2196969696969697,0.8606650263728026],[0.14,0.2196969696969697,0.8517601769356177],[0.15,0.2196969696969697,0.8417436010771643],[0.16,0.2196969696969697,0.8293122126741952],[0.17,0.2196969696969697,0.8132750335449583],[0.18,0.2196969696969697,0],[0.19,0.2196969696969697,0.7920565020040118],[0.2,0.2196969696969697,0.788790732371584],[0.21,0.2196969696969697,0.7841692698682412],[0.22,0.2196969696969697,0.7790536094988582],[0.23,0.2196969696969697,0.7743613557773525],[0.24,0.2196969696969697,0.7700885459982528],[0.25,0.2196969696969697,0.7666196844573578],[0.26,0.2196969696969697,0.7637222758491866],[0.27,0.2196969696969697,0.7615408533070138],[0.28,0.2196969696969697,0.7598746623348799],[0.29,0.2196969696969697,0.7586597213431284],[0.3,0.2196969696969697,0.7578841270023812],[0.31,0.2196969696969697,0.7570450389438471],[0.32,0.2196969696969697,0.7565866486205415],[0.33,0.2196969696969697,0.7552757598891642],[0.34,0.2196969696969697,0.7545441600795733],[0.35000000000000003,0.2196969696969697,0.7525118968080582],[0.36,0.2196969696969697,0.7518757634451091],[0.37,0.2196969696969697,0.7506287405132618],[0.38,0.2196969696969697,0.7516654404053713],[0.39,0.2196969696969697,0.7528026804867497],[0.4,0.2196969696969697,0.7549413803653839],[0.41000000000000003,0.2196969696969697,0],[0.42,0.2196969696969697,0],[0.43,0.2196969696969697,0],[0.44,0.2196969696969697,0],[0.45,0.2196969696969697,0.5421042493479262],[0.46,0.2196969696969697,0.54034115013906],[0.47000000000000003,0.2196969696969697,0.5375401008964968],[0.48,0.2196969696969697,0.5339100996426136],[0.49,0.2196969696969697,0.5295542614915739],[0.5,0.2196969696969697,0.5246318225061866],[0.51,0.2196969696969697,0.5192124851253176],[0.52,0.2196969696969697,0.5135248082261602],[0.53,0.2196969696969697,0.5075912330078778],[0.54,0.2196969696969697,0.5015272676572563],[0.55,0.2196969696969697,0.4953477098758481],[0.56,0.2196969696969697,0.4890066568324132],[0.5700000000000001,0.2196969696969697,0.4825017293006968],[0.58,0.2196969696969697,0.4757313421389026],[0.59,0.2196969696969697,0.4686235002306546],[0.6,0.2196969696969697,0.4611211957457955],[0.61,0.2196969696969697,0.4531142229624531],[0.62,0.2196969696969697,0.4445691394165457],[0.63,0.2196969696969697,0.4354751101619024],[0.64,0.2196969696969697,0.4257384201646559],[0.65,0.2196969696969697,0.4155288759888627],[0.66,0.2196969696969697,0.4047027499430329],[0.67,0.2196969696969697,0.3934993335094501],[0.68,0.2196969696969697,0.3818629816114913],[0.6900000000000001,0.2196969696969697,0.3699035148590112],[0.7000000000000001,0.2196969696969697,0.3577493674170655],[0.71,0.2196969696969697,0.3453353652698204],[0.72,0.2196969696969697,0.3328716588982723],[0.73,0.2196969696969697,0.32028726651138145],[0.74,0.2196969696969697,0.30766638554386694],[0.75,0.2196969696969697,0.29510563435210346],[0.76,0.2196969696969697,0.2824917497809143],[0.77,0.2196969696969697,0.27007539552782156],[0.78,0.2196969696969697,0.25767607469151943],[0.79,0.2196969696969697,0.24557690977326696],[0.8,0.2196969696969697,0.23366050210275996],[0.81,0.2196969696969697,0.22218626264838348],[0.8200000000000001,0.2196969696969697,0.2111770265688508],[0.8300000000000001,0.2196969696969697,0.20106420176358208],[0.84,0.2196969696969697,0.192116599468789],[0.85,0.2196969696969697,0],[0.86,0.2196969696969697,0],[0.87,0.2196969696969697,0.14312055127711854],[0.88,0.2196969696969697,0.12842940239835288],[0.89,0.2196969696969697,0.11336146045100207],[0.9,0.2196969696969697,0.09877248720646348],[0.91,0.2196969696969697,0.08416771644001358],[0.92,0.2196969696969697,0.07001058531964699],[0.93,0.2196969696969697,0.05500148193934809],[0.9400000000000001,0.2196969696969697,0.03924056595093899],[0.9500000000000001,0.2196969696969697,0],[0.96,0.2196969696969697,0],[0.97,0.2196969696969697,0],[0.98,0.2196969696969697,0],[0.99,0.2196969696969697,0],[1,0.2196969696969697,0],[0,0.2272727272727273,0.9035259212338536],[0.01,0.2272727272727273,0.9028757608686686],[0.02,0.2272727272727273,0.902188176487681],[0.03,0.2272727272727273,0.9005247689184451],[0.04,0.2272727272727273,0.8992376288006079],[0.05,0.2272727272727273,0.8970042647065463],[0.06,0.2272727272727273,0.8950129532163635],[0.07,0.2272727272727273,0.892155172122878],[0.08,0.2272727272727273,0.8890210178141504],[0.09,0.2272727272727273,0.8849250939170564],[0.1,0.2272727272727273,0.8800429246357752],[0.11,0.2272727272727273,0.8738350071012566],[0.12,0.2272727272727273,0.8673455665155385],[0.13,0.2272727272727273,0.8597536017554646],[0.14,0.2272727272727273,0.8516714390087688],[0.15,0.2272727272727273,0.8421525204953249],[0.16,0.2272727272727273,0.8317241583892976],[0.17,0.2272727272727273,0.8194178327701969],[0.18,0.2272727272727273,0.7860135008408562],[0.19,0.2272727272727273,0.7712568505297935],[0.2,0.2272727272727273,0.78633251832542],[0.21,0.2272727272727273,0.7796848319210192],[0.22,0.2272727272727273,0.7734385147012273],[0.23,0.2272727272727273,0.7676948722954893],[0.24,0.2272727272727273,0.7629334817112023],[0.25,0.2272727272727273,0.7589110937458676],[0.26,0.2272727272727273,0.7558361598459571],[0.27,0.2272727272727273,0.7534110568145069],[0.28,0.2272727272727273,0.7516641495846927],[0.29,0.2272727272727273,0.7504299098388385],[0.3,0.2272727272727273,0.7494590453314147],[0.31,0.2272727272727273,0.7488755513707082],[0.32,0.2272727272727273,0.7478752321622721],[0.33,0.2272727272727273,0.7472432828822093],[0.34,0.2272727272727273,0.7455192018464212],[0.35000000000000003,0.2272727272727273,0.7446200795049864],[0.36,0.2272727272727273,0.7428373593036317],[0.37,0.2272727272727273,0.7429331936938297],[0.38,0.2272727272727273,0.7432784713590715],[0.39,0.2272727272727273,0.7455439623065288],[0.4,0.2272727272727273,0.7477438850338788],[0.41000000000000003,0.2272727272727273,0.5877368610793013],[0.42,0.2272727272727273,0.5808184163638164],[0.43,0.2272727272727273,0.5726717409292431],[0.44,0.2272727272727273,0.5646972366303942],[0.45,0.2272727272727273,0.5466838296605356],[0.46,0.2272727272727273,0.543117811872924],[0.47000000000000003,0.2272727272727273,0.5387261273833294],[0.48,0.2272727272727273,0.5339515437293815],[0.49,0.2272727272727273,0.5287726996750307],[0.5,0.2272727272727273,0.5233195080004326],[0.51,0.2272727272727273,0.5176286318892496],[0.52,0.2272727272727273,0.5117296274538763],[0.53,0.2272727272727273,0.5057013664267597],[0.54,0.2272727272727273,0.4995505642743394],[0.55,0.2272727272727273,0.4932576193450896],[0.56,0.2272727272727273,0.48683317971936285],[0.5700000000000001,0.2272727272727273,0.4801759399779204],[0.58,0.2272727272727273,0.473253420721347],[0.59,0.2272727272727273,0.46599040154235294],[0.6,0.2272727272727273,0.45828236928672106],[0.61,0.2272727272727273,0.4501152162201045],[0.62,0.2272727272727273,0.44140610681127257],[0.63,0.2272727272727273,0.432122470316551],[0.64,0.2272727272727273,0.42233773811430586],[0.65,0.2272727272727273,0.41193749083561104],[0.66,0.2272727272727273,0.4011410286943894],[0.67,0.2272727272727273,0.3898333338972039],[0.68,0.2272727272727273,0.37819853884061355],[0.6900000000000001,0.2272727272727273,0.36626988892448986],[0.7000000000000001,0.2272727272727273,0.35405133010204837],[0.71,0.2272727272727273,0.34173351870520213],[0.72,0.2272727272727273,0.3292166484337845],[0.73,0.2272727272727273,0.3166700409534331],[0.74,0.2272727272727273,0.30409526064101844],[0.75,0.2272727272727273,0.29147771803050404],[0.76,0.2272727272727273,0.2790021975959245],[0.77,0.2272727272727273,0.26651952383533845],[0.78,0.2272727272727273,0.2542922826053152],[0.79,0.2272727272727273,0.24221769841755839],[0.8,0.2272727272727273,0.2305147885646508],[0.81,0.2272727272727273,0.21920457350447498],[0.8200000000000001,0.2272727272727273,0.2084842752920663],[0.8300000000000001,0.2272727272727273,0.19865251605275244],[0.84,0.2272727272727273,0.1899499952085164],[0.85,0.2272727272727273,0.17526619172151192],[0.86,0.2272727272727273,0.13790237290465523],[0.87,0.2272727272727273,0.1413329927626576],[0.88,0.2272727272727273,0.12683103711330937],[0.89,0.2272727272727273,0.11172309551004361],[0.9,0.2272727272727273,0.09652886232171826],[0.91,0.2272727272727273,0.08205688805316327],[0.92,0.2272727272727273,0.06771436459905905],[0.93,0.2272727272727273,0.053345945839748714],[0.9400000000000001,0.2272727272727273,0.03813040535948096],[0.9500000000000001,0.2272727272727273,0.06541558921417387],[0.96,0.2272727272727273,0],[0.97,0.2272727272727273,0],[0.98,0.2272727272727273,0],[0.99,0.2272727272727273,0],[1,0.2272727272727273,0],[0,0.23484848484848486,0.9004403867156074],[0.01,0.23484848484848486,0.9000679677810031],[0.02,0.23484848484848486,0.8986698312453492],[0.03,0.23484848484848486,0.897648906737424],[0.04,0.23484848484848486,0.8954561653405092],[0.05,0.23484848484848486,0.8938763120327596],[0.06,0.23484848484848486,0.8912998810370505],[0.07,0.23484848484848486,0.888949731792644],[0.08,0.23484848484848486,0.8856965737818834],[0.09,0.23484848484848486,0.8820831633190458],[0.1,0.23484848484848486,0.8774406406337456],[0.11,0.23484848484848486,0.8721426424060947],[0.12,0.23484848484848486,0.8657862205035285],[0.13,0.23484848484848486,0.8589985892985288],[0.14,0.23484848484848486,0.8510400962754497],[0.15,0.23484848484848486,0.8430886234016814],[0.16,0.23484848484848486,0.8348811066057289],[0.17,0.23484848484848486,0.8286587969159627],[0.18,0.23484848484848486,0],[0.19,0.23484848484848486,0.8057218817888802],[0.2,0.23484848484848486,0.7846550647818317],[0.21,0.23484848484848486,0.7760139449159168],[0.22,0.23484848484848486,0.768259562328002],[0.23,0.23484848484848486,0.7617195845227205],[0.24,0.23484848484848486,0.7561655047685012],[0.25,0.23484848484848486,0.7518231510747765],[0.26,0.23484848484848486,0.7483507061511505],[0.27,0.23484848484848486,0.7458134355530807],[0.28,0.23484848484848486,0.7439266602187118],[0.29,0.23484848484848486,0.7425788663713274],[0.3,0.23484848484848486,0.7416788208030809],[0.31,0.23484848484848486,0.7407529545063744],[0.32,0.23484848484848486,0.7401087421915655],[0.33,0.23484848484848486,0.7387205575843828],[0.34,0.23484848484848486,0.7377077875047164],[0.35000000000000003,0.23484848484848486,0.7357296911146373],[0.36,0.23484848484848486,0.7348812236327564],[0.37,0.23484848484848486,0.7340673679860923],[0.38,0.23484848484848486,0.7353167884917857],[0.39,0.23484848484848486,0.7373552784582901],[0.4,0.23484848484848486,0.74021344145744],[0.41000000000000003,0.23484848484848486,0],[0.42,0.23484848484848486,0],[0.43,0.23484848484848486,0],[0.44,0.23484848484848486,0],[0.45,0.23484848484848486,0.5527110179923413],[0.46,0.23484848484848486,0.5461112422499794],[0.47000000000000003,0.23484848484848486,0.5400164236550267],[0.48,0.23484848484848486,0.5339140107406447],[0.49,0.23484848484848486,0.527974904825769],[0.5,0.23484848484848486,0.5219772666615116],[0.51,0.23484848484848486,0.5159675853467454],[0.52,0.23484848484848486,0.5098886813023775],[0.53,0.23484848484848486,0.5037333474512402],[0.54,0.23484848484848486,0.49747051806805365],[0.55,0.23484848484848486,0.49110297876244013],[0.56,0.23484848484848486,0.48453482419368865],[0.5700000000000001,0.23484848484848486,0.47776421918332895],[0.58,0.23484848484848486,0.4706918810705787],[0.59,0.23484848484848486,0.4632475758962484],[0.6,0.23484848484848486,0.45540596839505065],[0.61,0.23484848484848486,0.4470530225730765],[0.62,0.23484848484848486,0.4382014380042052],[0.63,0.23484848484848486,0.42882855652688345],[0.64,0.23484848484848486,0.41888192704948835],[0.65,0.23484848484848486,0.4085102955291946],[0.66,0.23484848484848486,0.3975918693046725],[0.67,0.23484848484848486,0.3863395810955863],[0.68,0.23484848484848486,0.3747019875371987],[0.6900000000000001,0.23484848484848486,0.36276506080871845],[0.7000000000000001,0.23484848484848486,0.3506541954862895],[0.71,0.23484848484848486,0.33828907478923853],[0.72,0.23484848484848486,0.32587844044864034],[0.73,0.23484848484848486,0.313346952603688],[0.74,0.23484848484848486,0.30078376478876545],[0.75,0.23484848484848486,0.2882865169128439],[0.76,0.23484848484848486,0.2757593117681014],[0.77,0.23484848484848486,0.2634435447834491],[0.78,0.23484848484848486,0.25120816271755275],[0.79,0.23484848484848486,0.23929384743212262],[0.8,0.23484848484848486,0.22769787233723765],[0.81,0.23484848484848486,0.2165823183608341],[0.8200000000000001,0.23484848484848486,0.20610932566194345],[0.8300000000000001,0.23484848484848486,0.19649342605414566],[0.84,0.23484848484848486,0.18823004646545094],[0.85,0.23484848484848486,0.18156570061588834],[0.86,0.23484848484848486,0],[0.87,0.23484848484848486,0.1399715273472634],[0.88,0.23484848484848486,0.12657350131210082],[0.89,0.23484848484848486,0.11049741572299722],[0.9,0.23484848484848486,0.09474394706714423],[0.91,0.23484848484848486,0.0797799785166079],[0.92,0.23484848484848486,0.06564101845617959],[0.93,0.23484848484848486,0.05159667007470879],[0.9400000000000001,0.23484848484848486,0.037262022083408466],[0.9500000000000001,0.23484848484848486,0],[0.96,0.23484848484848486,0],[0.97,0.23484848484848486,0],[0.98,0.23484848484848486,0],[0.99,0.23484848484848486,0],[1,0.23484848484848486,0],[0,0.24242424242424243,0.897163977922043],[0.01,0.24242424242424243,0.8963247437689283],[0.02,0.24242424242424243,0.895572058301663],[0.03,0.24242424242424243,0.8934996584487522],[0.04,0.24242424242424243,0.8921796458450302],[0.05,0.24242424242424243,0.8896427241281544],[0.06,0.24242424242424243,0.8877863070669858],[0.07,0.24242424242424243,0.884976052255386],[0.08,0.24242424242424243,0.8822673949301434],[0.09,0.24242424242424243,0.8786529812060266],[0.1,0.24242424242424243,0.8746116839047346],[0.11,0.24242424242424243,0.869506382227653],[0.12,0.24242424242424243,0.8638850900043398],[0.13,0.24242424242424243,0.8570832957569506],[0.14,0.24242424242424243,0.8500655148870366],[0.15,0.24242424242424243,0.8424224864066483],[0.16,0.24242424242424243,0.8358630888246987],[0.17,0.24242424242424243,0.8310260379974229],[0.18,0.24242424242424243,0.8100523049288917],[0.19,0.24242424242424243,0.8033898248928497],[0.2,0.24242424242424243,0.7825829364341836],[0.21,0.24242424242424243,0.7723371028784827],[0.22,0.24242424242424243,0.7635449551348179],[0.23,0.24242424242424243,0.7560524015025831],[0.24,0.24242424242424243,0.7500112089773028],[0.25,0.24242424242424243,0.7451147185622764],[0.26,0.24242424242424243,0.7414403584765615],[0.27,0.24242424242424243,0.7386420425671273],[0.28,0.24242424242424243,0.7366549409525838],[0.29,0.24242424242424243,0.7352436832256968],[0.3,0.24242424242424243,0.7341322419397526],[0.31,0.24242424242424243,0.7333258612675102],[0.32,0.24242424242424243,0.7321442839379788],[0.33,0.24242424242424243,0.7310972411461268],[0.34,0.24242424242424243,0.7291650129183358],[0.35000000000000003,0.24242424242424243,0.7276764970381953],[0.36,0.24242424242424243,0.7258398789041947],[0.37,0.24242424242424243,0.7254782716438164],[0.38,0.24242424242424243,0.7262415655781708],[0.39,0.24242424242424243,0.7287616888603511],[0.4,0.24242424242424243,0.7319607323836346],[0.41000000000000003,0.24242424242424243,0.5751332966729212],[0.42,0.24242424242424243,0.5693337297226282],[0.43,0.24242424242424243,0.5625926679066969],[0.44,0.24242424242424243,0.567058510477863],[0.45,0.24242424242424243,0.5569193534548178],[0.46,0.24242424242424243,0.5485491736246814],[0.47000000000000003,0.24242424242424243,0.540781235278069],[0.48,0.24242424242424243,0.5337164390754285],[0.49,0.24242424242424243,0.5269113032840906],[0.5,0.24242424242424243,0.5204726106358142],[0.51,0.24242424242424243,0.5141296073737162],[0.52,0.24242424242424243,0.5078649022685511],[0.53,0.24242424242424243,0.5015694048069497],[0.54,0.24242424242424243,0.49522093766127556],[0.55,0.24242424242424243,0.4887193570621296],[0.56,0.24242424242424243,0.4820724043672361],[0.5700000000000001,0.24242424242424243,0.47516077322993877],[0.58,0.24242424242424243,0.4679589892116524],[0.59,0.24242424242424243,0.4604058835735212],[0.6,0.24242424242424243,0.4523989840736202],[0.61,0.24242424242424243,0.44395884858953205],[0.62,0.24242424242424243,0.43499548481284733],[0.63,0.24242424242424243,0.4255206414543393],[0.64,0.24242424242424243,0.4155874363357518],[0.65,0.24242424242424243,0.40511576916770636],[0.66,0.24242424242424243,0.39429135136210663],[0.67,0.24242424242424243,0.38301702687668815],[0.68,0.24242424242424243,0.3714406189500413],[0.6900000000000001,0.24242424242424243,0.359604595183625],[0.7000000000000001,0.24242424242424243,0.3474841220305518],[0.71,0.24242424242424243,0.3352768741996893],[0.72,0.24242424242424243,0.32286651627270646],[0.73,0.24242424242424243,0.3104299571340878],[0.74,0.24242424242424243,0.2979643457329482],[0.75,0.24242424242424243,0.28546306884396144],[0.76,0.24242424242424243,0.273112000766353],[0.77,0.24242424242424243,0.26077262140082724],[0.78,0.24242424242424243,0.2487052576941761],[0.79,0.24242424242424243,0.23683508401627076],[0.8,0.24242424242424243,0.22537409258549704],[0.81,0.24242424242424243,0.21439714950081679],[0.8200000000000001,0.24242424242424243,0.20406096274106458],[0.8300000000000001,0.24242424242424243,0.19464640611142503],[0.84,0.24242424242424243,0.18651369272210738],[0.85,0.24242424242424243,0.18017168570021191],[0.86,0.24242424242424243,0.12525477780591024],[0.87,0.24242424242424243,0.11391567941340505],[0.88,0.24242424242424243,0.129485758863936],[0.89,0.24242424242424243,0.11024166791008277],[0.9,0.24242424242424243,0.0931859117755243],[0.91,0.24242424242424243,0.07778600865762508],[0.92,0.24242424242424243,0.06363060230076943],[0.93,0.24242424242424243,0.050028491164385125],[0.9400000000000001,0.24242424242424243,0.03641739042883148],[0.9500000000000001,0.24242424242424243,0],[0.96,0.24242424242424243,0],[0.97,0.24242424242424243,0],[0.98,0.24242424242424243,0],[0.99,0.24242424242424243,0],[1,0.24242424242424243,0],[0,0.25,0.8929479087360855],[0.01,0.25,0.8925407901622291],[0.02,0.25,0.8908854799409873],[0.03,0.25,0.8898034511833525],[0.04,0.25,0.8873077417923263],[0.05,0.25,0.885749983741138],[0.06,0.25,0.8830775731368938],[0.07,0.25,0.8809598796756473],[0.08,0.25,0.8779685714499678],[0.09,0.25,0.8748906026583221],[0.1,0.25,0.8708804015892103],[0.11,0.25,0.8663861022161258],[0.12,0.25,0.8607404397276524],[0.13,0.25,0.8546325925300542],[0.14,0.25,0.8474577826324045],[0.15,0.25,0.8405550396893898],[0.16,0.25,0.8342276147728067],[0.17,0.25,0.830703365099937],[0.18,0.25,0],[0.19,0.25,0.7999011986497206],[0.2,0.25,0.7789028499573404],[0.21,0.25,0.7685200526507256],[0.22,0.25,0.7589794270792105],[0.23,0.25,0.7508686879139153],[0.24,0.25,0.7441710598069956],[0.25,0.25,0.738952042042045],[0.26,0.25,0.7348983317893338],[0.27,0.25,0.7319519973253497],[0.28,0.25,0.729792645874619],[0.29,0.25,0.7282294092080853],[0.3,0.25,0.7270813610596741],[0.31,0.25,0.7259016322021904],[0.32,0.25,0.7247999608251603],[0.33,0.25,0.7230057620462175],[0.34,0.25,0.7212021694985323],[0.35000000000000003,0.25,0.71870929880014],[0.36,0.25,0.7168636307685174],[0.37,0.25,0.71566266316239],[0.38,0.25,0.7163687719388157],[0.39,0.25,0.7189777470525922],[0.4,0.25,0.7227210930147593],[0.41000000000000003,0.25,0],[0.42,0.25,0],[0.43,0.25,0],[0.44,0.25,0.5692479573848438],[0.45,0.25,0.5599283490338662],[0.46,0.25,0.5500846375511963],[0.47000000000000003,0.25,0.5412412503735603],[0.48,0.25,0.5330029952824562],[0.49,0.25,0.5256297004805874],[0.5,0.25,0.5186485104810444],[0.51,0.25,0.5120512092858134],[0.52,0.25,0.5055739724414914],[0.53,0.25,0.49916134109124577],[0.54,0.25,0.4926750724566556],[0.55,0.25,0.48610749128483594],[0.56,0.25,0.4793253027782939],[0.5700000000000001,0.25,0.4723400718473868],[0.58,0.25,0.4650468310329743],[0.59,0.25,0.4573874168154831],[0.6,0.25,0.44934636985518733],[0.61,0.25,0.44080964578345094],[0.62,0.25,0.43182119197814595],[0.63,0.25,0.4223473922433449],[0.64,0.25,0.4123750610580526],[0.65,0.25,0.4020192746979317],[0.66,0.25,0.3911874480450588],[0.67,0.25,0.3800434506872403],[0.68,0.25,0.3685602092379896],[0.6900000000000001,0.25,0.3567776798967993],[0.7000000000000001,0.25,0.3448460071582402],[0.71,0.25,0.332648837617279],[0.72,0.25,0.32041614258606804],[0.73,0.25,0.30805158643911357],[0.74,0.25,0.2956596559582116],[0.75,0.25,0.28333089167652975],[0.76,0.25,0.2709748002418681],[0.77,0.25,0.2588345501735083],[0.78,0.25,0.2467725358417306],[0.79,0.25,0.2350421374124813],[0.8,0.25,0.22362795921472184],[0.81,0.25,0.2127289814363239],[0.8200000000000001,0.25,0.20244146152958042],[0.8300000000000001,0.25,0.19301974694049964],[0.84,0.25,0.18484077951906402],[0.85,0.25,0.1783379762691581],[0.86,0.25,0],[0.87,0.25,0],[0.88,0.25,0.12881300904410772],[0.89,0.25,0.10920172613779311],[0.9,0.25,0.09159228739104076],[0.91,0.25,0.07603642247635431],[0.92,0.25,0.0618724869294809],[0.93,0.25,0.04862624846216823],[0.9400000000000001,0.25,0.03539029244379947],[0.9500000000000001,0.25,0],[0.96,0.25,0],[0.97,0.25,0],[0.98,0.25,0],[0.99,0.25,0],[1,0.25,0],[0,0.25757575757575757,0.8881029926026485],[0.01,0.25757575757575757,0.8872057011014745],[0.02,0.25757575757575757,0.8864438294055368],[0.03,0.25757575757575757,0.8842450928625964],[0.04,0.25757575757575757,0.8829346865063992],[0.05,0.25757575757575757,0.880326971327006],[0.06,0.25757575757575757,0.878581495598107],[0.07,0.25757575757575757,0.8758932709576935],[0.08,0.25757575757575757,0.8734944453352598],[0.09,0.25757575757575757,0.8702642121801308],[0.1,0.25757575757575757,0.8667513672567266],[0.11,0.25757575757575757,0.8622052482603544],[0.12,0.25757575757575757,0.857127690707383],[0.13,0.25757575757575757,0.8507846404021051],[0.14,0.25757575757575757,0.8441146528631146],[0.15,0.25757575757575757,0.836775285342571],[0.16,0.25757575757575757,0.830090398394467],[0.17,0.25757575757575757,0.849719761112732],[0.18,0.25757575757575757,0.8447245705136214],[0.19,0.25757575757575757,0.795267899387704],[0.2,0.25757575757575757,0.7760062936754825],[0.21,0.25757575757575757,0.7651524302527208],[0.22,0.25757575757575757,0.7547908442575642],[0.23,0.25757575757575757,0.7459517803923582],[0.24,0.25757575757575757,0.7387818204361569],[0.25,0.25757575757575757,0.7330936730839798],[0.26,0.25757575757575757,0.7288085881608029],[0.27,0.25757575757575757,0.7255951217027121],[0.28,0.25757575757575757,0.7232827256911751],[0.29,0.25757575757575757,0.7215740599899012],[0.3,0.25757575757575757,0.7201584004409878],[0.31,0.25757575757575757,0.7188937959090607],[0.32,0.25757575757575757,0.7172101143500604],[0.33,0.25757575757575757,0.7153100876367701],[0.34,0.25757575757575757,0.7125494309658645],[0.35000000000000003,0.25757575757575757,0.7097173706441599],[0.36,0.25757575757575757,0.7066235273694759],[0.37,0.25757575757575757,0.7047217854414218],[0.38,0.25757575757575757,0.7047716767523065],[0.39,0.25757575757575757,0.7074193377440063],[0.4,0.25757575757575757,0.7119458250514228],[0.41000000000000003,0.25757575757575757,0.5766117642687132],[0.42,0.25757575757575757,0.5697006346301456],[0.43,0.25757575757575757,0.5616609135425494],[0.44,0.25757575757575757,0.5756720931259751],[0.45,0.25757575757575757,0.5638505808844543],[0.46,0.25757575757575757,0.5518533962280626],[0.47000000000000003,0.25757575757575757,0.5410812925146802],[0.48,0.25757575757575757,0.5320370912451592],[0.49,0.25757575757575757,0.5238690916287977],[0.5,0.25757575757575757,0.516566176689405],[0.51,0.25757575757575757,0.5096441952761364],[0.52,0.25757575757575757,0.5030116755710037],[0.53,0.25757575757575757,0.4964349573879916],[0.54,0.25757575757575757,0.48986948964140475],[0.55,0.25757575757575757,0.48316274777048007],[0.56,0.25757575757575757,0.4763420380789866],[0.5700000000000001,0.25757575757575757,0.4692681814877457],[0.58,0.25757575757575757,0.46194499339307926],[0.59,0.25757575757575757,0.45429350995668694],[0.6,0.25757575757575757,0.4462195162063027],[0.61,0.25757575757575757,0.4377365006818269],[0.62,0.25757575757575757,0.4287575487454849],[0.63,0.25757575757575757,0.4193259449754191],[0.64,0.25757575757575757,0.4094773906504491],[0.65,0.25757575757575757,0.3991653425573007],[0.66,0.25757575757575757,0.3885207584021531],[0.67,0.25757575757575757,0.37747911756027897],[0.68,0.25757575757575757,0.3661225443245517],[0.6900000000000001,0.25757575757575757,0.35454234995240796],[0.7000000000000001,0.25757575757575757,0.34265404575312663],[0.71,0.25757575757575757,0.3307029575757408],[0.72,0.25757575757575757,0.3185228374580977],[0.73,0.25757575757575757,0.3063271416111051],[0.74,0.25757575757575757,0.2940836378241173],[0.75,0.25757575757575757,0.2818058814395258],[0.76,0.25757575757575757,0.2696676371785378],[0.77,0.25757575757575757,0.2575273883117394],[0.78,0.25757575757575757,0.2456480784145332],[0.79,0.25757575757575757,0.2339204730612861],[0.8,0.25757575757575757,0.2225855127817996],[0.81,0.25757575757575757,0.21164385059868587],[0.8200000000000001,0.25757575757575757,0.20131593699992423],[0.8300000000000001,0.25757575757575757,0.19170153532823325],[0.84,0.25757575757575757,0.18326929283141322],[0.85,0.25757575757575757,0.1763220573134855],[0.86,0.25757575757575757,0.09243187336359134],[0.87,0.25757575757575757,0.07739595629023194],[0.88,0.25757575757575757,0.127181665022041],[0.89,0.25757575757575757,0.10770751643845321],[0.9,0.25757575757575757,0.0901920298085775],[0.91,0.25757575757575757,0.07450914422090626],[0.92,0.25757575757575757,0.06061783718742565],[0.93,0.25757575757575757,0.04760319634332674],[0.9400000000000001,0.25757575757575757,0.034895886511888435],[0.9500000000000001,0.25757575757575757,0],[0.96,0.25757575757575757,0],[0.97,0.25757575757575757,0],[0.98,0.25757575757575757,0],[0.99,0.25757575757575757,0],[1,0.25757575757575757,0],[0,0.26515151515151514,0.8821481710551671],[0.01,0.26515151515151514,0.881790070493053],[0.02,0.26515151515151514,0.8802493374424025],[0.03,0.26515151515151514,0.8792665178176704],[0.04,0.26515151515151514,0.8769132485977293],[0.05,0.26515151515151514,0.8754626428154473],[0.06,0.26515151515151514,0.8729506118079963],[0.07,0.26515151515151514,0.8710094879603043],[0.08,0.26515151515151514,0.8682664256278705],[0.09,0.26515151515151514,0.8655059281613775],[0.1,0.26515151515151514,0.8618609265442461],[0.11,0.26515151515151514,0.8577791757808055],[0.12,0.26515151515151514,0.8524847746751407],[0.13,0.26515151515151514,0.8466584058579498],[0.14,0.26515151515151514,0.8395779082615996],[0.15,0.26515151515151514,0.8325254825372592],[0.16,0.26515151515151514,0.825444352650581],[0.17,0.26515151515151514,0],[0.18,0.26515151515151514,0],[0.19,0.26515151515151514,0.7899351584206373],[0.2,0.26515151515151514,0],[0.21,0.26515151515151514,0.7624495500902589],[0.22,0.26515151515151514,0.7507760546151583],[0.23,0.26515151515151514,0.7412673090701077],[0.24,0.26515151515151514,0.7336050343705389],[0.25,0.26515151515151514,0.7276095178411637],[0.26,0.26515151515151514,0.7229935742772309],[0.27,0.26515151515151514,0.7195923598598214],[0.28,0.26515151515151514,0.71705120901662],[0.29,0.26515151515151514,0.7151297723019097],[0.3,0.26515151515151514,0.7135218206198954],[0.31,0.26515151515151514,0.7118258512530716],[0.32,0.26515151515151514,0.7099032315275806],[0.33,0.26515151515151514,0.7071851939521425],[0.34,0.26515151515151514,0.7039280081989914],[0.35000000000000003,0.26515151515151514,0.6996651935102993],[0.36,0.26515151515151514,0.6953663970546875],[0.37,0.26515151515151514,0.6916041284729039],[0.38,0.26515151515151514,0.6903578761760869],[0.39,0.26515151515151514,0.693619921093998],[0.4,0.26515151515151514,0.6987271918915695],[0.41000000000000003,0.26515151515151514,0],[0.42,0.26515151515151514,0],[0.43,0.26515151515151514,0],[0.44,0.26515151515151514,0.5967639402463952],[0.45,0.26515151515151514,0.5703350739600518],[0.46,0.26515151515151514,0.5529897202598417],[0.47000000000000003,0.26515151515151514,0.5405625906202554],[0.48,0.26515151515151514,0.5303445302725875],[0.49,0.26515151515151514,0.5218044728543894],[0.5,0.26515151515151514,0.5140631254695089],[0.51,0.26515151515151514,0.5069702035115512],[0.52,0.26515151515151514,0.5001310565534285],[0.53,0.26515151515151514,0.49345031978009984],[0.54,0.26515151515151514,0.4867306666214755],[0.55,0.26515151515151514,0.47998690557771434],[0.56,0.26515151515151514,0.47306043372758416],[0.5700000000000001,0.26515151515151514,0.466016717216995],[0.58,0.26515151515151514,0.4587202296799023],[0.59,0.26515151515151514,0.45114277745944276],[0.6,0.26515151515151514,0.44320532366631576],[0.61,0.26515151515151514,0.43478778940140683],[0.62,0.26515151515151514,0.42593022018205956],[0.63,0.26515151515151514,0.4166226741393263],[0.64,0.26515151515151514,0.4068851471997964],[0.65,0.26515151515151514,0.3967966326878895],[0.66,0.26515151515151514,0.3862899403627976],[0.67,0.26515151515151514,0.37544625952818866],[0.68,0.26515151515151514,0.36429399999940704],[0.6900000000000001,0.26515151515151514,0.3527993313036467],[0.7000000000000001,0.26515151515151514,0.3411990820890638],[0.71,0.26515151515151514,0.3292903737736371],[0.72,0.26515151515151514,0.31737526979871067],[0.73,0.26515151515151514,0.3052876484184144],[0.74,0.26515151515151514,0.29318256918285757],[0.75,0.26515151515151514,0.2811108375814498],[0.76,0.26515151515151514,0.26900305342339076],[0.77,0.26515151515151514,0.257083551137906],[0.78,0.26515151515151514,0.24519692056605766],[0.79,0.26515151515151514,0.23359934295873358],[0.8,0.26515151515151514,0.22220118753412885],[0.81,0.26515151515151514,0.21124458595531265],[0.8200000000000001,0.26515151515151514,0.2006770859375341],[0.8300000000000001,0.26515151515151514,0.1908367155430205],[0.84,0.26515151515151514,0.18187990285030786],[0.85,0.26515151515151514,0.17432421878290563],[0.86,0.26515151515151514,0],[0.87,0.26515151515151514,0],[0.88,0.26515151515151514,0.125346276419919],[0.89,0.26515151515151514,0.10632222094086324],[0.9,0.26515151515151514,0.0889054789960518],[0.91,0.26515151515151514,0.07357212205770702],[0.92,0.26515151515151514,0.059738911500948455],[0.93,0.26515151515151514,0.04709668510043734],[0.9400000000000001,0.26515151515151514,0.0347614132094808],[0.9500000000000001,0.26515151515151514,0],[0.96,0.26515151515151514,0],[0.97,0.26515151515151514,0],[0.98,0.26515151515151514,0],[0.99,0.26515151515151514,0],[1,0.26515151515151514,0],[0,0.2727272727272727,0.8757884604961589],[0.01,0.2727272727272727,0.8751087806751292],[0.02,0.2727272727272727,0.8745769258412588],[0.03,0.2727272727272727,0.8728323544643987],[0.04,0.2727272727272727,0.8717530710046081],[0.05,0.2727272727272727,0.8695332991805286],[0.06,0.2727272727272727,0.8679501433927088],[0.07,0.2727272727272727,0.8655366020363677],[0.08,0.2727272727272727,0.8633143621485506],[0.09,0.2727272727272727,0.860325678044915],[0.1,0.2727272727272727,0.8570626286588321],[0.11,0.2727272727272727,0.8527534710058713],[0.12,0.2727272727272727,0.8479267864461958],[0.13,0.2727272727272727,0.8417010367319894],[0.14,0.2727272727272727,0.835094285207062],[0.15,0.2727272727272727,0.8276190061856985],[0.16,0.2727272727272727,0.8207231469017364],[0.17,0.2727272727272727,0.8510657120435456],[0.18,0.2727272727272727,0.8482125530822255],[0.19,0.2727272727272727,0.7840616736457724],[0.2,0.2727272727272727,0.7866426692191963],[0.21,0.2727272727272727,0.7570387031979442],[0.22,0.2727272727272727,0.746013041411477],[0.23,0.2727272727272727,0.7364912501960088],[0.24,0.2727272727272727,0.7286190263105069],[0.25,0.2727272727272727,0.7223210596120347],[0.26,0.2727272727272727,0.7175001344932989],[0.27,0.2727272727272727,0.7138174126504313],[0.28,0.2727272727272727,0.7110864883067183],[0.29,0.2727272727272727,0.7088955188149517],[0.3,0.2727272727272727,0.7069809468567281],[0.31,0.2727272727272727,0.7049631174706139],[0.32,0.2727272727272727,0.7024351308554135],[0.33,0.2727272727272727,0.6991963582241225],[0.34,0.2727272727272727,0.694744377471622],[0.35000000000000003,0.2727272727272727,0.6892368366581536],[0.36,0.2727272727272727,0.6823086684536666],[0.37,0.2727272727272727,0.6758359451674103],[0.38,0.2727272727272727,0.6714197235924282],[0.39,0.2727272727272727,0.6769126390274509],[0.4,0.2727272727272727,0.6826873366333855],[0.41000000000000003,0.2727272727272727,0.5660938141978724],[0.42,0.2727272727272727,0.5607032016370993],[0.43,0.2727272727272727,0.5542047546412179],[0.44,0.2727272727272727,0.594049735187546],[0.45,0.2727272727272727,0.5688119831120132],[0.46,0.2727272727272727,0.5515210493992064],[0.47000000000000003,0.2727272727272727,0.538404006904976],[0.48,0.2727272727272727,0.5280710252702698],[0.49,0.2727272727272727,0.5191213213874183],[0.5,0.2727272727272727,0.5112773565840459],[0.51,0.2727272727272727,0.5039542755176104],[0.52,0.2727272727272727,0.49700620796342115],[0.53,0.2727272727272727,0.49015396547210033],[0.54,0.2727272727272727,0.48337351513788474],[0.55,0.2727272727272727,0.4764897490206379],[0.56,0.2727272727272727,0.4696069108367702],[0.5700000000000001,0.2727272727272727,0.4625643897847909],[0.58,0.2727272727272727,0.45544714334212016],[0.59,0.2727272727272727,0.44809121180096123],[0.6,0.2727272727272727,0.4403779953125112],[0.61,0.2727272727272727,0.43217300305619055],[0.62,0.2727272727272727,0.4234490112011272],[0.63,0.2727272727272727,0.41429701932333485],[0.64,0.2727272727272727,0.4047885887941924],[0.65,0.2727272727272727,0.39488711488900596],[0.66,0.2727272727272727,0.38464869192487217],[0.67,0.2727272727272727,0.3740227443495081],[0.68,0.2727272727272727,0.3629899466336916],[0.6900000000000001,0.2727272727272727,0.35178101910327847],[0.7000000000000001,0.2727272727272727,0.3402125301559424],[0.71,0.2727272727272727,0.32864626388230733],[0.72,0.2727272727272727,0.3167883188786771],[0.73,0.2727272727272727,0.3049471481650956],[0.74,0.2727272727272727,0.29300198748066986],[0.75,0.2727272727272727,0.28102693866536865],[0.76,0.2727272727272727,0.26914673853018506],[0.77,0.2727272727272727,0.2572361134322716],[0.78,0.2727272727272727,0.24553241529144415],[0.79,0.2727272727272727,0.23388511232639558],[0.8,0.2727272727272727,0.22254133621146777],[0.81,0.2727272727272727,0.21137708287899],[0.8200000000000001,0.2727272727272727,0.20067724133664308],[0.8300000000000001,0.2727272727272727,0.19033070246770276],[0.84,0.2727272727272727,0.1809075381684938],[0.85,0.2727272727272727,0.17246147917475693],[0.86,0.2727272727272727,0.130806638776857],[0.87,0.2727272727272727,0.12066676429001824],[0.88,0.2727272727272727,0.12350199493246244],[0.89,0.2727272727272727,0.10498109290071664],[0.9,0.2727272727272727,0.08812803336141041],[0.91,0.2727272727272727,0.0729547976989681],[0.92,0.2727272727272727,0.05944930015064638],[0.93,0.2727272727272727,0.04688571668168523],[0.9400000000000001,0.2727272727272727,0.03475299280977211],[0.9500000000000001,0.2727272727272727,0],[0.96,0.2727272727272727,0],[0.97,0.2727272727272727,0],[0.98,0.2727272727272727,0],[0.99,0.2727272727272727,0],[1,0.2727272727272727,0],[0,0.28030303030303033,0.8688474125501836],[0.01,0.28030303030303033,0.8687436742528611],[0.02,0.28030303030303033,0.8679071818624392],[0.03,0.28030303030303033,0.8673973942535118],[0.04,0.28030303030303033,0.8657909541210819],[0.05,0.28030303030303033,0.8646241555913732],[0.06,0.28030303030303033,0.8625804022874057],[0.07,0.28030303030303033,0.8607729096754291],[0.08,0.28030303030303033,0.8582679547654035],[0.09,0.28030303030303033,0.8556169518880533],[0.1,0.28030303030303033,0.8521046906452073],[0.11,0.28030303030303033,0.8481602723212764],[0.12,0.28030303030303033,0.842938653223339],[0.13,0.28030303030303033,0.8372116448742385],[0.14,0.28030303030303033,0.8300804067855836],[0.15,0.28030303030303033,0.8229885378694924],[0.16,0.28030303030303033,0.81574630923984],[0.17,0.28030303030303033,0],[0.18,0.28030303030303033,0],[0.19,0.28030303030303033,0.7778678973319484],[0.2,0.28030303030303033,0],[0.21,0.28030303030303033,0.7512765402330192],[0.22,0.28030303030303033,0.7410596955713973],[0.23,0.28030303030303033,0.7317057073577944],[0.24,0.28030303030303033,0.7237285014470972],[0.25,0.28030303030303033,0.7172806805426046],[0.26,0.28030303030303033,0.7121777087410222],[0.27,0.28030303030303033,0.7083291703888435],[0.28,0.28030303030303033,0.7052794211189108],[0.29,0.28030303030303033,0.7028777578159511],[0.3,0.28030303030303033,0.7005761205900545],[0.31,0.28030303030303033,0.6981765539392412],[0.32,0.28030303030303033,0.6951286110029047],[0.33,0.28030303030303033,0.691145618253521],[0.34,0.28030303030303033,0.6858112704549071],[0.35000000000000003,0.28030303030303033,0.6784981370769916],[0.36,0.28030303030303033,0.6683924610785656],[0.37,0.28030303030303033,0],[0.38,0.28030303030303033,0.6558321225999463],[0.39,0.28030303030303033,0.6597481479072618],[0.4,0.28030303030303033,0.6639263610543162],[0.41000000000000003,0.28030303030303033,0],[0.42,0.28030303030303033,0],[0.43,0.28030303030303033,0.5904972501043497],[0.44,0.28030303030303033,0.5780162504266771],[0.45,0.28030303030303033,0.5615959881034375],[0.46,0.28030303030303033,0.5470327174268179],[0.47000000000000003,0.28030303030303033,0.5350918365012434],[0.48,0.28030303030303033,0.5248635735754892],[0.49,0.28030303030303033,0.5160764389079642],[0.5,0.28030303030303033,0.5080689367563814],[0.51,0.28030303030303033,0.5006922445650914],[0.52,0.28030303030303033,0.49357325174642624],[0.53,0.28030303030303033,0.48663814753829426],[0.54,0.28030303030303033,0.4796821143685367],[0.55,0.28030303030303033,0.4728055278222604],[0.56,0.28030303030303033,0.46584485102118156],[0.5700000000000001,0.28030303030303033,0.45900769880695047],[0.58,0.28030303030303033,0.4521258212416323],[0.59,0.28030303030303033,0.44523301636335466],[0.6,0.28030303030303033,0.4379806110001374],[0.61,0.28030303030303033,0.4300471847133721],[0.62,0.28030303030303033,0.42143118253283796],[0.63,0.28030303030303033,0.4124566565701566],[0.64,0.28030303030303033,0.403146852590623],[0.65,0.28030303030303033,0.393570387333727],[0.66,0.28030303030303033,0.3836028793712172],[0.67,0.28030303030303033,0.37319368481196374],[0.68,0.28030303030303033,0.36239520827004285],[0.6900000000000001,0.28030303030303033,0.351146517228027],[0.7000000000000001,0.28030303030303033,0.3399459363137915],[0.71,0.28030303030303033,0.32837789810658063],[0.72,0.28030303030303033,0.3168802208455428],[0.73,0.28030303030303033,0.3051237020931598],[0.74,0.28030303030303033,0.2933772816015742],[0.75,0.28030303030303033,0.2815939766991078],[0.76,0.28030303030303033,0.2697666560273091],[0.77,0.28030303030303033,0.25806512232551293],[0.78,0.28030303030303033,0.24633705698235048],[0.79,0.28030303030303033,0.23481069389513803],[0.8,0.28030303030303033,0.22332304686558344],[0.81,0.28030303030303033,0.21213814362664854],[0.8200000000000001,0.28030303030303033,0.2010316648612832],[0.8300000000000001,0.28030303030303033,0.1904382312040098],[0.84,0.28030303030303033,0.18020122784145554],[0.85,0.28030303030303033,0.1709161648473236],[0.86,0.28030303030303033,0],[0.87,0.28030303030303033,0],[0.88,0.28030303030303033,0.12157902601342642],[0.89,0.28030303030303033,0.10393512743616429],[0.9,0.28030303030303033,0.08758398213310023],[0.91,0.28030303030303033,0.07287274005225325],[0.92,0.28030303030303033,0.059480088656559835],[0.93,0.28030303030303033,0.04698482096750709],[0.9400000000000001,0.28030303030303033,0.03470895170542485],[0.9500000000000001,0.28030303030303033,0],[0.96,0.28030303030303033,0],[0.97,0.28030303030303033,0],[0.98,0.28030303030303033,0],[0.99,0.28030303030303033,0],[1,0.28030303030303033,0],[0,0.2878787878787879,0.8619605524437914],[0.01,0.2878787878787879,0.8618702622428013],[0.02,0.2878787878787879,0.8621439479737681],[0.03,0.2878787878787879,0.8615763207724509],[0.04,0.2878787878787879,0.8610674465762463],[0.05,0.2878787878787879,0.8596307508135137],[0.06,0.2878787878787879,0.858250434600063],[0.07,0.2878787878787879,0.8561942644219828],[0.08,0.2878787878787879,0.8540063982966217],[0.09,0.2878787878787879,0.8511169681907687],[0.1,0.2878787878787879,0.8478584097453076],[0.11,0.2878787878787879,0.8435372999290178],[0.12,0.2878787878787879,0.8387249062052815],[0.13,0.2878787878787879,0.8324323297127525],[0.14,0.2878787878787879,0.8257974178562559],[0.15,0.2878787878787879,0.8181620989605247],[0.16,0.2878787878787879,0.8110457297338554],[0.17,0.2878787878787879,0.7426300528518324],[0.18,0.2878787878787879,0.7397530985412808],[0.19,0.2878787878787879,0.7708683284960908],[0.2,0.2878787878787879,0.7710861870544463],[0.21,0.2878787878787879,0.7466276044819404],[0.22,0.2878787878787879,0.7362506940306903],[0.23,0.2878787878787879,0.7269682730546512],[0.24,0.2878787878787879,0.7189750071770518],[0.25,0.2878787878787879,0.7123270542729009],[0.26,0.2878787878787879,0.7071140073583151],[0.27,0.2878787878787879,0.7029389329507943],[0.28,0.2878787878787879,0.6997591548621132],[0.29,0.2878787878787879,0.6969260521662942],[0.3,0.2878787878787879,0.6944331358268854],[0.31,0.2878787878787879,0.6914736978467595],[0.32,0.2878787878787879,0.6880715613207284],[0.33,0.2878787878787879,0.6834110603325317],[0.34,0.2878787878787879,0.6774795319855441],[0.35000000000000003,0.2878787878787879,0.6696977497924821],[0.36,0.2878787878787879,0.6597243335587863],[0.37,0.2878787878787879,0],[0.38,0.2878787878787879,0.640240788504622],[0.39,0.2878787878787879,0.6416459203364396],[0.4,0.2878787878787879,0.6432203188147646],[0.41000000000000003,0.2878787878787879,0.5543351648469027],[0.42,0.2878787878787879,0.5503147788868356],[0.43,0.2878787878787879,0.5804465791048625],[0.44,0.2878787878787879,0.567202194318481],[0.45,0.2878787878787879,0.553910321964292],[0.46,0.2878787878787879,0.5417421634819006],[0.47000000000000003,0.2878787878787879,0.5308315411394393],[0.48,0.2878787878787879,0.5212638271633699],[0.49,0.2878787878787879,0.5125198140300855],[0.5,0.2878787878787879,0.5045935864668478],[0.51,0.2878787878787879,0.49708457966966657],[0.52,0.2878787878787879,0.4898913760880895],[0.53,0.2878787878787879,0.4827657941661968],[0.54,0.2878787878787879,0.4757601539462092],[0.55,0.2878787878787879,0.4687037053097721],[0.56,0.2878787878787879,0.46186480102277905],[0.5700000000000001,0.2878787878787879,0.4551129872691134],[0.58,0.2878787878787879,0.4487712909388327],[0.59,0.2878787878787879,0.4426181132172926],[0.6,0.2878787878787879,0.43636907842461364],[0.61,0.2878787878787879,0.4286363843163109],[0.62,0.2878787878787879,0.4200235023555987],[0.63,0.2878787878787879,0.4110099088108801],[0.64,0.2878787878787879,0.4020047734646828],[0.65,0.2878787878787879,0.39274294851133956],[0.66,0.2878787878787879,0.38321069368015115],[0.67,0.2878787878787879,0.3731857962399786],[0.68,0.2878787878787879,0.36221679445121047],[0.6900000000000001,0.2878787878787879,0.3512059870492859],[0.7000000000000001,0.2878787878787879,0.33983609629473016],[0.71,0.2878787878787879,0.32872249098065265],[0.72,0.2878787878787879,0.317219757938623],[0.73,0.2878787878787879,0.30579812762159636],[0.74,0.2878787878787879,0.29416577260540844],[0.75,0.2878787878787879,0.2825177190029483],[0.76,0.2878787878787879,0.2708843575723974],[0.77,0.2878787878787879,0.25919299116465083],[0.78,0.2878787878787879,0.2476264007630854],[0.79,0.2878787878787879,0.2360168488236386],[0.8,0.2878787878787879,0.22459063289366013],[0.81,0.2878787878787879,0.21312260087326917],[0.8200000000000001,0.2878787878787879,0.20195508350340363],[0.8300000000000001,0.2878787878787879,0.1907404638194288],[0.84,0.2878787878787879,0.1801219856536504],[0.85,0.2878787878787879,0.1696220746034365],[0.86,0.2878787878787879,0.12084917497530633],[0.87,0.2878787878787879,0.10826038799512855],[0.88,0.2878787878787879,0.11975606533433583],[0.89,0.2878787878787879,0.10304863102008885],[0.9,0.2878787878787879,0.08742535192228648],[0.91,0.2878787878787879,0.0730687039848529],[0.92,0.2878787878787879,0.059838983824995196],[0.93,0.2878787878787879,0.04727594281283551],[0.9400000000000001,0.2878787878787879,0.03477056854904868],[0.9500000000000001,0.2878787878787879,0],[0.96,0.2878787878787879,0],[0.97,0.2878787878787879,0],[0.98,0.2878787878787879,0],[0.99,0.2878787878787879,0],[1,0.2878787878787879,0],[0,0.29545454545454547,0.8549402728026644],[0.01,0.29545454545454547,0.8553981806318391],[0.02,0.29545454545454547,0.8564236686002957],[0.03,0.29545454545454547,0.8570491171845795],[0.04,0.29545454545454547,0.8566222186563262],[0.05,0.29545454545454547,0.8558438176315813],[0.06,0.29545454545454547,0.8543421734567],[0.07,0.29545454545454547,0.8525660121651881],[0.08,0.29545454545454547,0.8502003114849601],[0.09,0.29545454545454547,0.8474608241694328],[0.1,0.29545454545454547,0.8438863918707866],[0.11,0.29545454545454547,0.8398365002395404],[0.12,0.29545454545454547,0.8344780360781838],[0.13,0.29545454545454547,0.8286490027326274],[0.14,0.29545454545454547,0.8213485577857323],[0.15,0.29545454545454547,0.8140845620360426],[0.16,0.29545454545454547,0.8065203550493003],[0.17,0.29545454545454547,0],[0.18,0.29545454545454547,0],[0.19,0.29545454545454547,0.7652089135961341],[0.2,0.29545454545454547,0.7669066848184007],[0.21,0.29545454545454547,0],[0.22,0.29545454545454547,0.7311135901382927],[0.23,0.29545454545454547,0.722117601955037],[0.24,0.29545454545454547,0.7141644213874747],[0.25,0.29545454545454547,0.7075385712951012],[0.26,0.29545454545454547,0.7020613506797504],[0.27,0.29545454545454547,0.6978437864776865],[0.28,0.29545454545454547,0.6942304086697643],[0.29,0.29545454545454547,0.6913558974778273],[0.3,0.29545454545454547,0.6882572858146818],[0.31,0.29545454545454547,0.685241594113659],[0.32,0.29545454545454547,0.6811121936243395],[0.33,0.29545454545454547,0.6762907747059224],[0.34,0.29545454545454547,0.6697609927083383],[0.35000000000000003,0.29545454545454547,0.6620959292078121],[0.36,0.29545454545454547,0.6543061030482827],[0.37,0.29545454545454547,0.6200878456384928],[0.38,0.29545454545454547,0.6238510203630743],[0.39,0.29545454545454547,0.6233652877381483],[0.4,0.29545454545454547,0.6211256384906387],[0.41000000000000003,0.29545454545454547,0],[0.42,0.29545454545454547,0],[0.43,0.29545454545454547,0.5680741591935545],[0.44,0.29545454545454547,0.5572865934423598],[0.45,0.29545454545454547,0.5465687990419268],[0.46,0.29545454545454547,0.536104930803151],[0.47000000000000003,0.29545454545454547,0.5264178889225561],[0.48,0.29545454545454547,0.517214706910847],[0.49,0.29545454545454547,0.5087114685214587],[0.5,0.29545454545454547,0.5007153270185909],[0.51,0.29545454545454547,0.4931759080806085],[0.52,0.29545454545454547,0.4858105503389704],[0.53,0.29545454545454547,0.47859659182670744],[0.54,0.29545454545454547,0.47134098999592916],[0.55,0.29545454545454547,0.46427529427253994],[0.56,0.29545454545454547,0.45726497534488736],[0.5700000000000001,0.29545454545454547,0.4508123394512319],[0.58,0.29545454545454547,0.4449545461466717],[0.59,0.29545454545454547,0.4402676508618065],[0.6,0.29545454545454547,0.43618415879355366],[0.61,0.29545454545454547,0.4286150908097258],[0.62,0.29545454545454547,0.4189477724905917],[0.63,0.29545454545454547,0.40993451912976936],[0.64,0.29545454545454547,0.4010605190554485],[0.65,0.29545454545454547,0.39239906446982986],[0.66,0.29545454545454547,0.38351963828195534],[0.67,0.29545454545454547,0.37417835700943125],[0.68,0.29545454545454547,0.3629189998985899],[0.6900000000000001,0.29545454545454547,0.35126823866372503],[0.7000000000000001,0.29545454545454547,0.34028967461193427],[0.71,0.29545454545454547,0.3290055590250816],[0.72,0.29545454545454547,0.31799755535725627],[0.73,0.29545454545454547,0.3065868374641611],[0.74,0.29545454545454547,0.2952231357687443],[0.75,0.29545454545454547,0.283708876707307],[0.76,0.29545454545454547,0.27214578945141965],[0.77,0.29545454545454547,0.2606220662042871],[0.78,0.29545454545454547,0.24901990004464747],[0.79,0.29545454545454547,0.23751646163785958],[0.8,0.29545454545454547,0.22591586366951433],[0.81,0.29545454545454547,0.21447740418478314],[0.8200000000000001,0.29545454545454547,0.20287170842092753],[0.8300000000000001,0.29545454545454547,0.19161274801139974],[0.84,0.29545454545454547,0.18033027163119106],[0.85,0.29545454545454547,0.17001483071601986],[0.86,0.29545454545454547,0.16092656110824136],[0.87,0.29545454545454547,0],[0.88,0.29545454545454547,0.11795897727747007],[0.89,0.29545454545454547,0.10241103717676861],[0.9,0.29545454545454547,0.08750958482335275],[0.91,0.29545454545454547,0.07348233673951107],[0.92,0.29545454545454547,0.060362386970997994],[0.93,0.29545454545454547,0.0476550831907174],[0.9400000000000001,0.29545454545454547,0.035055206134259644],[0.9500000000000001,0.29545454545454547,0],[0.96,0.29545454545454547,0],[0.97,0.29545454545454547,0],[0.98,0.29545454545454547,0],[0.99,0.29545454545454547,0],[1,0.29545454545454547,0],[0,0.30303030303030304,0.8478913336949853],[0.01,0.30303030303030304,0.8482743222826911],[0.02,0.30303030303030304,0.8520646378244435],[0.03,0.30303030303030304,0.8533423271249103],[0.04,0.30303030303030304,0.8534802255728198],[0.05,0.30303030303030304,0.8527249732938496],[0.06,0.30303030303030304,0.8514018503407306],[0.07,0.30303030303030304,0.8495328140459457],[0.08,0.30303030303030304,0.8472048713694813],[0.09,0.30303030303030304,0.8442411904406478],[0.1,0.30303030303030304,0.840790498933176],[0.11,0.30303030303030304,0.836282716034819],[0.12,0.30303030303030304,0.8312717392404352],[0.13,0.30303030303030304,0.8247622430176598],[0.14,0.30303030303030304,0.8179222135672931],[0.15,0.30303030303030304,0.8100248807442813],[0.16,0.30303030303030304,0.8025376456181941],[0.17,0.30303030303030304,0.7648228850095578],[0.18,0.30303030303030304,0.7618276401252233],[0.19,0.30303030303030304,0.7599620416594425],[0.2,0.30303030303030304,0.7618736167880186],[0.21,0.30303030303030304,0.7091331015114154],[0.22,0.30303030303030304,0.7253292489407577],[0.23,0.30303030303030304,0.7169561589590241],[0.24,0.30303030303030304,0.7093454145110407],[0.25,0.30303030303030304,0.7026508755014018],[0.26,0.30303030303030304,0.697254905153391],[0.27,0.30303030303030304,0.6926654543776176],[0.28,0.30303030303030304,0.6891253182786868],[0.29,0.30303030303030304,0.6856458260746632],[0.3,0.30303030303030304,0.682719251927656],[0.31,0.30303030303030304,0.6789125430385532],[0.32,0.30303030303030304,0.6750142347886139],[0.33,0.30303030303030304,0.6694076451550468],[0.34,0.30303030303030304,0.6628698986481518],[0.35000000000000003,0.30303030303030304,0.6538178272248187],[0.36,0.30303030303030304,0.6823984864766967],[0.37,0.30303030303030304,0.6140622353220806],[0.38,0.30303030303030304,0.6116513477930379],[0.39,0.30303030303030304,0.6064222264235839],[0.4,0.30303030303030304,0.5959992303131603],[0.41000000000000003,0.30303030303030304,0.5725393433636178],[0.42,0.30303030303030304,0.5555300914132175],[0.43,0.30303030303030304,0.5547252029404912],[0.44,0.30303030303030304,0.5481415792391904],[0.45,0.30303030303030304,0.5396196486633469],[0.46,0.30303030303030304,0.5308287915239479],[0.47000000000000003,0.30303030303030304,0.5218793941660127],[0.48,0.30303030303030304,0.5131734966908261],[0.49,0.30303030303030304,0.504425763322794],[0.5,0.30303030303030304,0.4964560591411623],[0.51,0.30303030303030304,0.4888107358982235],[0.52,0.30303030303030304,0.4813586295546848],[0.53,0.30303030303030304,0.4738898235079396],[0.54,0.30303030303030304,0.46652944862437523],[0.55,0.30303030303030304,0.45910193502754],[0.56,0.30303030303030304,0.4520642243389582],[0.5700000000000001,0.30303030303030304,0.44540695858396806],[0.58,0.30303030303030304,0.44010121805424945],[0.59,0.30303030303030304,0.43713987579549624],[0.6,0.30303030303030304,0.43991197069548504],[0.61,0.30303030303030304,0.43045330888606653],[0.62,0.30303030303030304,0.4179379396294509],[0.63,0.30303030303030304,0.408376954657229],[0.64,0.30303030303030304,0.4001711579994291],[0.65,0.30303030303030304,0.39209165254253453],[0.66,0.30303030303030304,0.38446921425435787],[0.67,0.30303030303030304,0.3776124886967144],[0.68,0.30303030303030304,0.36373615232993867],[0.6900000000000001,0.30303030303030304,0.35183434737080255],[0.7000000000000001,0.30303030303030304,0.34034114354344003],[0.71,0.30303030303030304,0.3296669659988736],[0.72,0.30303030303030304,0.3185477102160851],[0.73,0.30303030303030304,0.30759024205289887],[0.74,0.30303030303030304,0.2962641564956507],[0.75,0.30303030303030304,0.28493010595830237],[0.76,0.30303030303030304,0.273503630794666],[0.77,0.30303030303030304,0.26199435112981895],[0.78,0.30303030303030304,0.25051623375480014],[0.79,0.30303030303030304,0.2389216772290504],[0.8,0.30303030303030304,0.2273827814452464],[0.81,0.30303030303030304,0.21565156125252521],[0.8200000000000001,0.30303030303030304,0.20405866796310362],[0.8300000000000001,0.30303030303030304,0.19218936693724303],[0.84,0.30303030303030304,0.18076844541476905],[0.85,0.30303030303030304,0.16953797588926323],[0.86,0.30303030303030304,0.1594417234750341],[0.87,0.30303030303030304,0.10993716749694554],[0.88,0.30303030303030304,0.11625885212204742],[0.89,0.30303030303030304,0.10212726328851457],[0.9,0.30303030303030304,0.08781836396764242],[0.91,0.30303030303030304,0.0740370093556767],[0.92,0.30303030303030304,0.0607776634044493],[0.93,0.30303030303030304,0.04786263466634559],[0.9400000000000001,0.30303030303030304,0.03490511631236755],[0.9500000000000001,0.30303030303030304,0],[0.96,0.30303030303030304,0],[0.97,0.30303030303030304,0],[0.98,0.30303030303030304,0],[0.99,0.30303030303030304,0],[1,0.30303030303030304,0],[0,0.3106060606060606,0.8507296646031458],[0.01,0.3106060606060606,0.8480618665541376],[0.02,0.3106060606060606,0.8504299144466118],[0.03,0.3106060606060606,0.8513906695397317],[0.04,0.3106060606060606,0.851388940708205],[0.05,0.3106060606060606,0.8505443766820899],[0.06,0.3106060606060606,0.8491526643610032],[0.07,0.3106060606060606,0.8471661678993199],[0.08,0.3106060606060606,0.8446918985169778],[0.09,0.3106060606060606,0.8417027730107416],[0.1,0.3106060606060606,0.8379145133346864],[0.11,0.3106060606060606,0.8336085348144251],[0.12,0.3106060606060606,0.8279990350947573],[0.13,0.3106060606060606,0.8219118712609221],[0.14,0.3106060606060606,0.8143684067620985],[0.15,0.3106060606060606,0.8068326547283836],[0.16,0.3106060606060606,0.7989138315563821],[0.17,0.3106060606060606,0],[0.18,0.3106060606060606,0],[0.19,0.3106060606060606,0.7550072803151819],[0.2,0.3106060606060606,0.7565464729159378],[0.21,0.3106060606060606,0],[0.22,0.3106060606060606,0.7192371723006641],[0.23,0.3106060606060606,0.7116953808437587],[0.24,0.3106060606060606,0.7043756154397957],[0.25,0.3106060606060606,0.6979468358373628],[0.26,0.3106060606060606,0.6923192855001992],[0.27,0.3106060606060606,0.6878887667698586],[0.28,0.3106060606060606,0.6838109804831412],[0.29,0.3106060606060606,0.6806373354234914],[0.3,0.3106060606060606,0.6769086394612933],[0.31,0.3106060606060606,0.6736563492834154],[0.32,0.3106060606060606,0.6689163582391042],[0.33,0.3106060606060606,0.6640953214209787],[0.34,0.3106060606060606,0.6574601823983344],[0.35000000000000003,0.3106060606060606,0.6499411276150846],[0.36,0.3106060606060606,0],[0.37,0.3106060606060606,0.6073956579518],[0.38,0.3106060606060606,0.6020169557889005],[0.39,0.3106060606060606,0.5944071121987544],[0.4,0.3106060606060606,0.5836636519481095],[0.41000000000000003,0.3106060606060606,0.5687224461129958],[0.42,0.3106060606060606,0.552245043462739],[0.43,0.3106060606060606,0.5474394601033274],[0.44,0.3106060606060606,0.5411056413674412],[0.45,0.3106060606060606,0.5338737529579841],[0.46,0.3106060606060606,0.5259523158433705],[0.47000000000000003,0.3106060606060606,0.517901209841062],[0.48,0.3106060606060606,0.5090695465214004],[0.49,0.3106060606060606,0.49949455279389865],[0.5,0.3106060606060606,0.4915710877979812],[0.51,0.3106060606060606,0.483982528960888],[0.52,0.3106060606060606,0.47636875175114257],[0.53,0.3106060606060606,0.4687639633614855],[0.54,0.3106060606060606,0.4609994661156973],[0.55,0.3106060606060606,0.4533820469894507],[0.56,0.3106060606060606,0.44572360994698307],[0.5700000000000001,0.3106060606060606,0.43871472070587514],[0.58,0.3106060606060606,0.4325195986712942],[0.59,0.3106060606060606,0.4284704798666534],[0.6,0.3106060606060606,0],[0.61,0.3106060606060606,0.4218151601632779],[0.62,0.3106060606060606,0.41330735014034936],[0.63,0.3106060606060606,0.4058814429786568],[0.64,0.3106060606060606,0.39848186198580565],[0.65,0.3106060606060606,0.39147064224060757],[0.66,0.3106060606060606,0.38450405870742255],[0.67,0.3106060606060606,0.37838837368043277],[0.68,0.3106060606060606,0.363292540545093],[0.6900000000000001,0.3106060606060606,0.3513737032153143],[0.7000000000000001,0.3106060606060606,0.34061017105793573],[0.71,0.3106060606060606,0.3297284556724573],[0.72,0.3106060606060606,0.3192692308546454],[0.73,0.3106060606060606,0.308240848786828],[0.74,0.3106060606060606,0.2972661737751141],[0.75,0.3106060606060606,0.28600171330677493],[0.76,0.3106060606060606,0.2746717111228562],[0.77,0.3106060606060606,0.2632841420067127],[0.78,0.3106060606060606,0.2517786302363188],[0.79,0.3106060606060606,0.24026209839593388],[0.8,0.3106060606060606,0.22856431966407648],[0.81,0.3106060606060606,0.21686029901061826],[0.8200000000000001,0.3106060606060606,0.204838669851848],[0.8300000000000001,0.3106060606060606,0.19290831382572682],[0.84,0.3106060606060606,0.18065921966039475],[0.85,0.3106060606060606,0.16890004398466263],[0.86,0.3106060606060606,0.15745782092985958],[0.87,0.3106060606060606,0],[0.88,0.3106060606060606,0.1151080499384278],[0.89,0.3106060606060606,0.10263155393534448],[0.9,0.3106060606060606,0.08849184922937356],[0.91,0.3106060606060606,0.0744756769003851],[0.92,0.3106060606060606,0.06090804517426277],[0.93,0.3106060606060606,0.04761462573212469],[0.9400000000000001,0.3106060606060606,0.034700936369602725],[0.9500000000000001,0.3106060606060606,0],[0.96,0.3106060606060606,0],[0.97,0.3106060606060606,0],[0.98,0.3106060606060606,0],[0.99,0.3106060606060606,0],[1,0.3106060606060606,0],[0,0.3181818181818182,0.8565838372726808],[0.01,0.3181818181818182,0.8917450305193283],[0.02,0.3181818181818182,0.8506208864193084],[0.03,0.3181818181818182,0.850754953052036],[0.04,0.3181818181818182,0.850208705978265],[0.05,0.3181818181818182,0.8491525028212796],[0.06,0.3181818181818182,0.8474093248540091],[0.07,0.3181818181818182,0.845276772748838],[0.08,0.3181818181818182,0.8426110333841048],[0.09,0.3181818181818182,0.839377621181244],[0.1,0.3181818181818182,0.8356420659093773],[0.11,0.3181818181818182,0.830868663432009],[0.12,0.3181818181818182,0.8255795636798661],[0.13,0.3181818181818182,0.8188170180562164],[0.14,0.3181818181818182,0.8117225093099172],[0.15,0.3181818181818182,0.8036847099516838],[0.16,0.3181818181818182,0.7959930870881282],[0.17,0.3181818181818182,0.8337330077908466],[0.18,0.3181818181818182,0],[0.19,0.3181818181818182,0.7505801637257886],[0.2,0.3181818181818182,0.7517348391191178],[0.21,0.3181818181818182,0.7077922764979747],[0.22,0.3181818181818182,0.7133578865524657],[0.23,0.3181818181818182,0.7064626970301586],[0.24,0.3181818181818182,0.699620621728064],[0.25,0.3181818181818182,0.6931607340465531],[0.26,0.3181818181818182,0.6877471299503439],[0.27,0.3181818181818182,0.6829028347513003],[0.28,0.3181818181818182,0.6791612575618113],[0.29,0.3181818181818182,0.6752538164585717],[0.3,0.3181818181818182,0.672226059869871],[0.31,0.3181818181818182,0.6680543283564242],[0.32,0.3181818181818182,0.6644147468555004],[0.33,0.3181818181818182,0.6591006262677608],[0.34,0.3181818181818182,0.6540215538731624],[0.35000000000000003,0.3181818181818182,0.6481642550493305],[0.36,0.3181818181818182,0.5717307175449274],[0.37,0.3181818181818182,0.6018677718554042],[0.38,0.3181818181818182,0.5944723699561079],[0.39,0.3181818181818182,0.5856588284734736],[0.4,0.3181818181818182,0.5750238096493712],[0.41000000000000003,0.3181818181818182,0.5630871732823407],[0.42,0.3181818181818182,0.5471972574529853],[0.43,0.3181818181818182,0.541564770451274],[0.44,0.3181818181818182,0.5356071032563936],[0.45,0.3181818181818182,0.5289234835317123],[0.46,0.3181818181818182,0.5220510963650536],[0.47000000000000003,0.3181818181818182,0.5144761366194209],[0.48,0.3181818181818182,0.5060668677762349],[0.49,0.3181818181818182,0.49250327364139135],[0.5,0.3181818181818182,0.48601696646233417],[0.51,0.3181818181818182,0.47866192362512683],[0.52,0.3181818181818182,0.4709759525989979],[0.53,0.3181818181818182,0.46303488614999083],[0.54,0.3181818181818182,0.45505120663798415],[0.55,0.3181818181818182,0.44678614335471983],[0.56,0.3181818181818182,0.43869302887734213],[0.5700000000000001,0.3181818181818182,0.43050658106611],[0.58,0.3181818181818182,0.42293323469861077],[0.59,0.3181818181818182,0.41596425956915384],[0.6,0.3181818181818182,0.4341330799336914],[0.61,0.3181818181818182,0.4125100357702308],[0.62,0.3181818181818182,0.40785590452399895],[0.63,0.3181818181818182,0.4021846241913771],[0.64,0.3181818181818182,0.3963839542127511],[0.65,0.3181818181818182,0.38995593398301853],[0.66,0.3181818181818182,0.3838632211320032],[0.67,0.3181818181818182,0.37822869148943944],[0.68,0.3181818181818182,0.3624759503189715],[0.6900000000000001,0.3181818181818182,0.35095040809730144],[0.7000000000000001,0.3181818181818182,0.33997914541888125],[0.71,0.3181818181818182,0.3299025910270435],[0.72,0.3181818181818182,0.3192858140106617],[0.73,0.3181818181818182,0.3088187074934057],[0.74,0.3181818181818182,0.2978205379978458],[0.75,0.3181818181818182,0.2867890242900245],[0.76,0.3181818181818182,0.275555611143516],[0.77,0.3181818181818182,0.2642079774291045],[0.78,0.3181818181818182,0.252796689999215],[0.79,0.3181818181818182,0.24122527787535794],[0.8,0.3181818181818182,0.22956625833964914],[0.81,0.3181818181818182,0.21763054374298701],[0.8200000000000001,0.3181818181818182,0.20559146826757904],[0.8300000000000001,0.3181818181818182,0.19309583284260332],[0.84,0.3181818181818182,0.18059295214492133],[0.85,0.3181818181818182,0.16775909870155975],[0.86,0.3181818181818182,0.15518621816190253],[0.87,0.3181818181818182,0.12152192279029382],[0.88,0.3181818181818182,0.1077727546542533],[0.89,0.3181818181818182,0.10525106660979544],[0.9,0.3181818181818182,0.08934062396475964],[0.91,0.3181818181818182,0.0746229591324552],[0.92,0.3181818181818182,0.0603216937657106],[0.93,0.3181818181818182,0.04618975967184195],[0.9400000000000001,0.3181818181818182,0.03467593161961047],[0.9500000000000001,0.3181818181818182,0],[0.96,0.3181818181818182,0],[0.97,0.3181818181818182,0],[0.98,0.3181818181818182,0],[0.99,0.3181818181818182,0],[1,0.3181818181818182,0],[0,0.32575757575757575,0.8626997775134678],[0.01,0.32575757575757575,0],[0.02,0.32575757575757575,0.8510720634377089],[0.03,0.32575757575757575,0.8506729471869352],[0.04,0.32575757575757575,0.8497656763104643],[0.05,0.32575757575757575,0.8481409254742479],[0.06,0.32575757575757575,0.8461335317623315],[0.07,0.32575757575757575,0.8436125612680677],[0.08,0.32575757575757575,0.8407107631750038],[0.09,0.32575757575757575,0.8373740750978804],[0.1,0.32575757575757575,0.8332859075475455],[0.11,0.32575757575757575,0.8287169698188763],[0.12,0.32575757575757575,0.822855480223777],[0.13,0.32575757575757575,0.8164958581300746],[0.14,0.32575757575757575,0.8088263948154697],[0.15,0.32575757575757575,0.8012674956541253],[0.16,0.32575757575757575,0.7937173274742366],[0.17,0.32575757575757575,0],[0.18,0.32575757575757575,0],[0.19,0.32575757575757575,0.7466882224962643],[0.2,0.32575757575757575,0.7474298945811757],[0.21,0.32575757575757575,0],[0.22,0.32575757575757575,0.7077969449254974],[0.23,0.32575757575757575,0.7016331148408455],[0.24,0.32575757575757575,0.6949626010293308],[0.25,0.32575757575757575,0.6887508779909657],[0.26,0.32575757575757575,0.6830597679228265],[0.27,0.32575757575757575,0.6784864186788384],[0.28,0.32575757575757575,0.6741472568733262],[0.29,0.32575757575757575,0.6709110371916697],[0.3,0.32575757575757575,0.6670070313725676],[0.31,0.32575757575757575,0.6640594827392654],[0.32,0.32575757575757575,0.6596466251787194],[0.33,0.32575757575757575,0.6559276034014923],[0.34,0.32575757575757575,0.6509481850041248],[0.35000000000000003,0.32575757575757575,0],[0.36,0.32575757575757575,0],[0.37,0.32575757575757575,0.597476863878001],[0.38,0.32575757575757575,0.5885212486145491],[0.39,0.32575757575757575,0.578631332077948],[0.4,0.32575757575757575,0.5678789284820631],[0.41000000000000003,0.32575757575757575,0.555858392715131],[0.42,0.32575757575757575,0.5409465952176058],[0.43,0.32575757575757575,0.5363209337454244],[0.44,0.32575757575757575,0.5308012549923788],[0.45,0.32575757575757575,0.5249791787213862],[0.46,0.32575757575757575,0.5186817228942597],[0.47000000000000003,0.32575757575757575,0.5125704008516584],[0.48,0.32575757575757575,0.5062505504991872],[0.49,0.32575757575757575,0.4879824280903896],[0.5,0.32575757575757575,0.48083538077301385],[0.51,0.32575757575757575,0.4731971724644597],[0.52,0.32575757575757575,0.4651987662136819],[0.53,0.32575757575757575,0.4570139357681549],[0.54,0.32575757575757575,0.44848042373769836],[0.55,0.32575757575757575,0.4398764747514246],[0.56,0.32575757575757575,0.4308028775089422],[0.5700000000000001,0.32575757575757575,0.42173143816689485],[0.58,0.32575757575757575,0.412174582029308],[0.59,0.32575757575757575,0.4025160201501133],[0.6,0.32575757575757575,0],[0.61,0.32575757575757575,0.4047766666022462],[0.62,0.32575757575757575,0.4020538723199627],[0.63,0.32575757575757575,0.3983663803369708],[0.64,0.32575757575757575,0.3933431950206344],[0.65,0.32575757575757575,0.38799933682700927],[0.66,0.32575757575757575,0.3820877166392619],[0.67,0.32575757575757575,0.3769549788154554],[0.68,0.32575757575757575,0.3608619099073816],[0.6900000000000001,0.32575757575757575,0.3493661885314088],[0.7000000000000001,0.32575757575757575,0.33928596454111376],[0.71,0.32575757575757575,0.3290782164892996],[0.72,0.32575757575757575,0.31922019700437865],[0.73,0.32575757575757575,0.30863615621860696],[0.74,0.32575757575757575,0.2980546516681046],[0.75,0.32575757575757575,0.2870670585640943],[0.76,0.32575757575757575,0.27597175119372575],[0.77,0.32575757575757575,0.2647323762523013],[0.78,0.32575757575757575,0.25334141651051867],[0.79,0.32575757575757575,0.24183197527360076],[0.8,0.32575757575757575,0.2301040322023032],[0.81,0.32575757575757575,0.2181767866902895],[0.8200000000000001,0.32575757575757575,0.20584832354726196],[0.8300000000000001,0.32575757575757575,0.19327064603844513],[0.84,0.32575757575757575,0.18009882049234718],[0.85,0.32575757575757575,0.16671527216545023],[0.86,0.32575757575757575,0.15288344972730356],[0.87,0.32575757575757575,0],[0.88,0.32575757575757575,0],[0.89,0.32575757575757575,0.1045259747079278],[0.9,0.32575757575757575,0.0890772598005184],[0.91,0.32575757575757575,0.07406163933041293],[0.92,0.32575757575757575,0.058549524787094576],[0.93,0.32575757575757575,0.04151904772040886],[0.9400000000000001,0.32575757575757575,0],[0.9500000000000001,0.32575757575757575,0],[0.96,0.32575757575757575,0],[0.97,0.32575757575757575,0],[0.98,0.32575757575757575,0],[0.99,0.32575757575757575,0],[1,0.32575757575757575,0],[0,0.33333333333333337,0.8681474092888648],[0.01,0.33333333333333337,0.8702040285868728],[0.02,0.33333333333333337,0.85155050881431],[0.03,0.33333333333333337,0.8509931098123152],[0.04,0.33333333333333337,0.8495656417843918],[0.05,0.33333333333333337,0.847551570382223],[0.06,0.33333333333333337,0.844977552422842],[0.07,0.33333333333333337,0.8421126877526475],[0.08,0.33333333333333337,0.8389293070841668],[0.09,0.33333333333333337,0.8352739947498029],[0.1,0.33333333333333337,0.8312639859217122],[0.11,0.33333333333333337,0.8262549023360295],[0.12,0.33333333333333337,0.8207444044901382],[0.13,0.33333333333333337,0.8138042918522048],[0.14,0.33333333333333337,0.8065262746759876],[0.15,0.33333333333333337,0.7987306839040378],[0.16,0.33333333333333337,0.7923178671613387],[0.17,0.33333333333333337,0.7134245878836256],[0.18,0.33333333333333337,0.7416200250230918],[0.19,0.33333333333333337,0.7431408102314989],[0.2,0.33333333333333337,0.7436593049495106],[0.21,0.33333333333333337,0.681321176224834],[0.22,0.33333333333333337,0.7039127002341721],[0.23,0.33333333333333337,0.6973044806693934],[0.24,0.33333333333333337,0.6907640725599073],[0.25,0.33333333333333337,0.68437546091334],[0.26,0.33333333333333337,0.6788418532702474],[0.27,0.33333333333333337,0.673818795372386],[0.28,0.33333333333333337,0.6699731498425188],[0.29,0.33333333333333337,0.6660044274987038],[0.3,0.33333333333333337,0.663238882041766],[0.31,0.33333333333333337,0.6594789671973806],[0.32,0.33333333333333337,0.656812591723549],[0.33,0.33333333333333337,0.6529685744427058],[0.34,0.33333333333333337,0.6500226560045685],[0.35000000000000003,0.33333333333333337,0.5676183332486857],[0.36,0.33333333333333337,0.5637147759257171],[0.37,0.33333333333333337,0.5938286758499833],[0.38,0.33333333333333337,0.5834519153595451],[0.39,0.33333333333333337,0.5730157289160275],[0.4,0.33333333333333337,0.5617420113200307],[0.41000000000000003,0.33333333333333337,0.5490115279889694],[0.42,0.33333333333333337,0.5354741648655275],[0.43,0.33333333333333337,0.531772939800041],[0.44,0.33333333333333337,0.5269929696498452],[0.45,0.33333333333333337,0.5214131371823724],[0.46,0.33333333333333337,0.5160472240995506],[0.47000000000000003,0.33333333333333337,0.5106258401808043],[0.48,0.33333333333333337,0.5059989672228337],[0.49,0.33333333333333337,0.48355065997015284],[0.5,0.33333333333333337,0.475662685008074],[0.51,0.33333333333333337,0.46758229537151724],[0.52,0.33333333333333337,0.4592552102510682],[0.53,0.33333333333333337,0.45061134649624135],[0.54,0.33333333333333337,0.4417980545939951],[0.55,0.33333333333333337,0.4324384892086095],[0.56,0.33333333333333337,0.4228759321498754],[0.5700000000000001,0.33333333333333337,0.4124595017061743],[0.58,0.33333333333333337,0.4014164090158299],[0.59,0.33333333333333337,0.3889386287180093],[0.6,0.33333333333333337,0.37625889814830776],[0.61,0.33333333333333337,0.39807250099857144],[0.62,0.33333333333333337,0.39678115763617955],[0.63,0.33333333333333337,0.39390150491888887],[0.64,0.33333333333333337,0.39021136174599536],[0.65,0.33333333333333337,0.384991336406325],[0.66,0.33333333333333337,0.3795425578280832],[0.67,0.33333333333333337,0.37397291530518884],[0.68,0.33333333333333337,0.3572754095805186],[0.6900000000000001,0.33333333333333337,0.3471832805953299],[0.7000000000000001,0.33333333333333337,0.3374070521627447],[0.71,0.33333333333333337,0.32816998995882907],[0.72,0.33333333333333337,0.31816248557849586],[0.73,0.33333333333333337,0.30818392221882207],[0.74,0.33333333333333337,0.2975697631248421],[0.75,0.33333333333333337,0.28685510722181123],[0.76,0.33333333333333337,0.27586421405311223],[0.77,0.33333333333333337,0.2647159195261519],[0.78,0.33333333333333337,0.2534246602498412],[0.79,0.33333333333333337,0.24194730583531876],[0.8,0.33333333333333337,0.2302526682765641],[0.81,0.33333333333333337,0.2182574239461415],[0.8200000000000001,0.33333333333333337,0.205924623334744],[0.8300000000000001,0.33333333333333337,0.19304805909222825],[0.84,0.33333333333333337,0.1797271442575435],[0.85,0.33333333333333337,0.16563131114154644],[0.86,0.33333333333333337,0.15085325058979837],[0.87,0.33333333333333337,0.16635367375817275],[0.88,0.33333333333333337,0.11260886667604557],[0.89,0.33333333333333337,0.10279198846340035],[0.9,0.33333333333333337,0.08808446869227937],[0.91,0.33333333333333337,0.07323429833436307],[0.92,0.33333333333333337,0.05753439900661303],[0.93,0.33333333333333337,0.04023732574374286],[0.9400000000000001,0.33333333333333337,0.06167037006156561],[0.9500000000000001,0.33333333333333337,0.058673565708185334],[0.96,0.33333333333333337,0],[0.97,0.33333333333333337,0],[0.98,0.33333333333333337,0],[0.99,0.33333333333333337,0],[1,0.33333333333333337,0],[0,0.34090909090909094,0.8714431557675146],[0.01,0.34090909090909094,0.8721571666843861],[0.02,0.34090909090909094,0],[0.03,0.34090909090909094,0.851508216086714],[0.04,0.34090909090909094,0.8496442333981495],[0.05,0.34090909090909094,0.8470388276823249],[0.06,0.34090909090909094,0.843992195030947],[0.07,0.34090909090909094,0.8406527466183487],[0.08,0.34090909090909094,0.8370674236700343],[0.09,0.34090909090909094,0.8333282037089276],[0.1,0.34090909090909094,0.8289544925835249],[0.11,0.34090909090909094,0.8242421954982808],[0.12,0.34090909090909094,0.8182781060408011],[0.13,0.34090909090909094,0.8117761190919415],[0.14,0.34090909090909094,0.8039828000728452],[0.15,0.34090909090909094,0.7957496054071407],[0.16,0.34090909090909094,0],[0.17,0.34090909090909094,0],[0.18,0.34090909090909094,0.7407135651027763],[0.19,0.34090909090909094,0.7409167932795158],[0.2,0.34090909090909094,0.7405546654912973],[0.21,0.34090909090909094,0.7390725706257303],[0.22,0.34090909090909094,0],[0.23,0.34090909090909094,0.6930839406952101],[0.24,0.34090909090909094,0.6866248224760907],[0.25,0.34090909090909094,0.6803629691813247],[0.26,0.34090909090909094,0.6745200823306184],[0.27,0.34090909090909094,0.6697480473233796],[0.28,0.34090909090909094,0.6653459601632415],[0.29,0.34090909090909094,0.6622382927919017],[0.3,0.34090909090909094,0.6587479371236284],[0.31,0.34090909090909094,0.6566042946532087],[0.32,0.34090909090909094,0.6535080405834411],[0.33,0.34090909090909094,0.6516093643477437],[0.34,0.34090909090909094,0.6494285348143575],[0.35000000000000003,0.34090909090909094,0],[0.36,0.34090909090909094,0],[0.37,0.34090909090909094,0.5899575086903106],[0.38,0.34090909090909094,0.5789503368511935],[0.39,0.34090909090909094,0.5682716331427442],[0.4,0.34090909090909094,0.5574798326625288],[0.41000000000000003,0.34090909090909094,0.5450534385629868],[0.42,0.34090909090909094,0.5321780707683121],[0.43,0.34090909090909094,0.5287355387393334],[0.44,0.34090909090909094,0.5237755478815522],[0.45,0.34090909090909094,0.5187032550202396],[0.46,0.34090909090909094,0.5133640780530007],[0.47000000000000003,0.34090909090909094,0.5088466424342053],[0.48,0.34090909090909094,0.5049359293600685],[0.49,0.34090909090909094,0.4785298667394604],[0.5,0.34090909090909094,0.4702926761188884],[0.51,0.34090909090909094,0.4618534796319358],[0.52,0.34090909090909094,0.4531335357520703],[0.53,0.34090909090909094,0.4442072490691558],[0.54,0.34090909090909094,0.43481374363245956],[0.55,0.34090909090909094,0.4251726338509464],[0.56,0.34090909090909094,0.41467890948990027],[0.5700000000000001,0.34090909090909094,0.40363733058940987],[0.58,0.34090909090909094,0.39107216682209167],[0.59,0.34090909090909094,0.37708810247320845],[0.6,0.34090909090909094,0],[0.61,0.34090909090909094,0.392188317785344],[0.62,0.34090909090909094,0.39141000307795437],[0.63,0.34090909090909094,0.3898045553886402],[0.64,0.34090909090909094,0.3863093260508025],[0.65,0.34090909090909094,0.3819054392310787],[0.66,0.34090909090909094,0.3759056175575017],[0.67,0.34090909090909094,0.3695820546396829],[0.68,0.34090909090909094,0.35236454388835414],[0.6900000000000001,0.34090909090909094,0.3438690727083312],[0.7000000000000001,0.34090909090909094,0.33547460271801477],[0.71,0.34090909090909094,0.3262510443100257],[0.72,0.34090909090909094,0.3169979738593608],[0.73,0.34090909090909094,0.3069049746679844],[0.74,0.34090909090909094,0.2967041773802286],[0.75,0.34090909090909094,0.2860552914051479],[0.76,0.34090909090909094,0.275238907594939],[0.77,0.34090909090909094,0.26422495525778567],[0.78,0.34090909090909094,0.2530230143367582],[0.79,0.34090909090909094,0.24161843459411944],[0.8,0.34090909090909094,0.2299822242334436],[0.81,0.34090909090909094,0.2180073966815831],[0.8200000000000001,0.34090909090909094,0.20563059960508775],[0.8300000000000001,0.34090909090909094,0.1927862444593836],[0.84,0.34090909090909094,0.17927070013019586],[0.85,0.34090909090909094,0.16507306371056146],[0.86,0.34090909090909094,0.14954431079171943],[0.87,0.34090909090909094,0],[0.88,0.34090909090909094,0],[0.89,0.34090909090909094,0.10079477790946717],[0.9,0.34090909090909094,0.08679207583963952],[0.91,0.34090909090909094,0.07229443070937322],[0.92,0.34090909090909094,0.05677905274372154],[0.93,0.34090909090909094,0.039917043032721325],[0.9400000000000001,0.34090909090909094,0],[0.9500000000000001,0.34090909090909094,0],[0.96,0.34090909090909094,0],[0.97,0.34090909090909094,0],[0.98,0.34090909090909094,0],[0.99,0.34090909090909094,0],[1,0.34090909090909094,0],[0,0.3484848484848485,0.8737356197840417],[0.01,0.3484848484848485,0.8741912895652602],[0.02,0.3484848484848485,0.8945447264650835],[0.03,0.3484848484848485,0.8518860114388804],[0.04,0.3484848484848485,0.8496815037361003],[0.05,0.3484848484848485,0.8466514726424399],[0.06,0.3484848484848485,0.8430503641073716],[0.07,0.3484848484848485,0.8391745863493942],[0.08,0.3484848484848485,0.835296424142761],[0.09,0.3484848484848485,0.8311502725757408],[0.1,0.3484848484848485,0.8269447727181726],[0.11,0.3484848484848485,0.8219014267662786],[0.12,0.3484848484848485,0.8164780813113198],[0.13,0.3484848484848485,0.8097250925109456],[0.14,0.3484848484848485,0.8026215240917869],[0.15,0.3484848484848485,0.7948014220604884],[0.16,0.3484848484848485,0.8244048449577126],[0.17,0.3484848484848485,0.8224468585337231],[0.18,0.3484848484848485,0.7399736506636756],[0.19,0.3484848484848485,0.7395872713062086],[0.2,0.3484848484848485,0.7387905352629669],[0.21,0.3484848484848485,0.7378607091148146],[0.22,0.3484848484848485,0.6749768507352437],[0.23,0.3484848484848485,0.6890471352383157],[0.24,0.3484848484848485,0.6827769624305173],[0.25,0.3484848484848485,0.6763695735738791],[0.26,0.3484848484848485,0.6705848205303004],[0.27,0.3484848484848485,0.6654125713832586],[0.28,0.3484848484848485,0.66151055090018],[0.29,0.3484848484848485,0.6578195909784587],[0.3,0.3484848484848485,0.655611496119182],[0.31,0.3484848484848485,0.6529773777327772],[0.32,0.3484848484848485,0.6517357784690911],[0.33,0.3484848484848485,0.6499634434990662],[0.34,0.3484848484848485,0.6492529777732561],[0.35000000000000003,0.3484848484848485,0.5837202036720389],[0.36,0.3484848484848485,0.5922374279255899],[0.37,0.3484848484848485,0.5842027663167282],[0.38,0.3484848484848485,0.5743273898427967],[0.39,0.3484848484848485,0.5645510011793642],[0.4,0.3484848484848485,0.5548768754239136],[0.41000000000000003,0.3484848484848485,0.5450505023777634],[0.42,0.3484848484848485,0.5315734280624284],[0.43,0.3484848484848485,0.5268716901606829],[0.44,0.3484848484848485,0.5217061660401041],[0.45,0.3484848484848485,0.5160855464144286],[0.46,0.3484848484848485,0.5112187989495356],[0.47000000000000003,0.3484848484848485,0.5066375253595493],[0.48,0.3484848484848485,0.5033096610308443],[0.49,0.3484848484848485,0.4731071376626403],[0.5,0.3484848484848485,0.46477955373530583],[0.51,0.3484848484848485,0.4560800035706786],[0.52,0.3484848484848485,0.44706302145346966],[0.53,0.3484848484848485,0.4376804789087561],[0.54,0.3484848484848485,0.42806829272335334],[0.55,0.3484848484848485,0.41773296612999805],[0.56,0.3484848484848485,0.40698868188733717],[0.5700000000000001,0.3484848484848485,0.3949223416187869],[0.58,0.3484848484848485,0.38167646358720875],[0.59,0.3484848484848485,0.3664283024675776],[0.6,0.3484848484848485,0.43848400261677434],[0.61,0.3484848484848485,0.38661220187781625],[0.62,0.3484848484848485,0.38674224033998383],[0.63,0.3484848484848485,0.3853287027975012],[0.64,0.3484848484848485,0.3829118446909481],[0.65,0.3484848484848485,0.3782566516353064],[0.66,0.3484848484848485,0.37239719109448766],[0.67,0.3484848484848485,0.3646525064000398],[0.68,0.3484848484848485,0.3474042781208501],[0.6900000000000001,0.3484848484848485,0.3408788242771068],[0.7000000000000001,0.3484848484848485,0.33292549385019166],[0.71,0.3484848484848485,0.3245348071611752],[0.72,0.3484848484848485,0.3151073880279185],[0.73,0.3484848484848485,0.3055092360183167],[0.74,0.3484848484848485,0.2952930347565658],[0.75,0.3484848484848485,0.2849020055584016],[0.76,0.3484848484848485,0.27422478026903485],[0.77,0.3484848484848485,0.26334071528780534],[0.78,0.3484848484848485,0.25225923457313926],[0.79,0.3484848484848485,0.24096215973463342],[0.8,0.3484848484848485,0.2293628776407366],[0.81,0.3484848484848485,0.21746691025879814],[0.8200000000000001,0.3484848484848485,0.20513142064694767],[0.8300000000000001,0.3484848484848485,0.19231106847212756],[0.84,0.3484848484848485,0.17901834431896663],[0.85,0.3484848484848485,0.16520574016409853],[0.86,0.3484848484848485,0.15139903137036942],[0.87,0.3484848484848485,0.13922011870054737],[0.88,0.3484848484848485,0.11691866980549259],[0.89,0.3484848484848485,0.09878208568024159],[0.9,0.3484848484848485,0.08528312879710626],[0.91,0.3484848484848485,0.07125203215511425],[0.92,0.3484848484848485,0.056077119063143416],[0.93,0.3484848484848485,0.03963168893665129],[0.9400000000000001,0.3484848484848485,0],[0.9500000000000001,0.3484848484848485,0],[0.96,0.3484848484848485,0],[0.97,0.3484848484848485,0],[0.98,0.3484848484848485,0],[0.99,0.3484848484848485,0],[1,0.3484848484848485,0],[0,0.3560606060606061,0.875099967378266],[0.01,0.3560606060606061,0.8757035995008573],[0.02,0.3560606060606061,0],[0.03,0.3560606060606061,0],[0.04,0.3560606060606061,0.8497751622186025],[0.05,0.3560606060606061,0.8462806916880377],[0.06,0.3560606060606061,0.8421396512923129],[0.07,0.3560606060606061,0.8378279052039965],[0.08,0.3560606060606061,0.8334044141678784],[0.09,0.3560606060606061,0.8292127857469862],[0.1,0.3560606060606061,0.8246727049133288],[0.11,0.3560606060606061,0.8200863718707926],[0.12,0.3560606060606061,0.8144998630074913],[0.13,0.3560606060606061,0.8085806343987805],[0.14,0.3560606060606061,0.8017270497496991],[0.15,0.3560606060606061,0.7950221614406712],[0.16,0.3560606060606061,0],[0.17,0.3560606060606061,0],[0.18,0.3560606060606061,0.7397620705607821],[0.19,0.3560606060606061,0.7388646070481882],[0.2,0.3560606060606061,0.7375522828025197],[0.21,0.3560606060606061,0.7363347453441731],[0.22,0.3560606060606061,0],[0.23,0.3560606060606061,0.6855741392674803],[0.24,0.3560606060606061,0.6791387870455932],[0.25,0.3560606060606061,0.6726672878813684],[0.26,0.3560606060606061,0.6665988363680987],[0.27,0.3560606060606061,0.6616023593553257],[0.28,0.3560606060606061,0.657238518295812],[0.29,0.3560606060606061,0.6544003811701659],[0.3,0.3560606060606061,0.6517139425101546],[0.31,0.3560606060606061,0.6506705674099375],[0.32,0.3560606060606061,0.6493454311696771],[0.33,0.3560606060606061,0.6491105499530765],[0.34,0.3560606060606061,0],[0.35000000000000003,0.3560606060606061,0],[0.36,0.3560606060606061,0.5902353465482927],[0.37,0.3560606060606061,0.5804074747126862],[0.38,0.3560606060606061,0.570571966174749],[0.39,0.3560606060606061,0.5612803390014882],[0.4,0.3560606060606061,0.5532782416861203],[0.41000000000000003,0.3560606060606061,0.5465768031731688],[0.42,0.3560606060606061,0.5327863304823433],[0.43,0.3560606060606061,0.5261954672934764],[0.44,0.3560606060606061,0.5197745219770257],[0.45,0.3560606060606061,0.5142165141740697],[0.46,0.3560606060606061,0.5087830675034306],[0.47000000000000003,0.3560606060606061,0.5046249881453726],[0.48,0.3560606060606061,0.5012292486794035],[0.49,0.3560606060606061,0.46769678470466813],[0.5,0.3560606060606061,0.45936638497857385],[0.51,0.3560606060606061,0.4503920067752545],[0.52,0.3560606060606061,0.44101434375013293],[0.53,0.3560606060606061,0.43138704360303354],[0.54,0.3560606060606061,0.42123777004653584],[0.55,0.3560606060606061,0.41078904357785945],[0.56,0.3560606060606061,0.39928889430621683],[0.5700000000000001,0.3560606060606061,0.3870190446433279],[0.58,0.3560606060606061,0.37274232665200946],[0.59,0.3560606060606061,0.35661423362775047],[0.6,0.3560606060606061,0],[0.61,0.3560606060606061,0.3820712642974039],[0.62,0.3560606060606061,0.38219831405130356],[0.63,0.3560606060606061,0.3817366150475243],[0.64,0.3560606060606061,0.3792381073435891],[0.65,0.3560606060606061,0.37547785003853407],[0.66,0.3560606060606061,0.3692973898663948],[0.67,0.3560606060606061,0.36118902133423525],[0.68,0.3560606060606061,0.3442929001332722],[0.6900000000000001,0.3560606060606061,0.33841564355369036],[0.7000000000000001,0.3560606060606061,0.33112777919127645],[0.71,0.3560606060606061,0.32249401760467566],[0.72,0.3560606060606061,0.31349756992981503],[0.73,0.3560606060606061,0.30375671676280214],[0.74,0.3560606060606061,0.29383504983722525],[0.75,0.3560606060606061,0.2835375196897826],[0.76,0.3560606060606061,0.2730223621479957],[0.77,0.3560606060606061,0.26229204406225826],[0.78,0.3560606060606061,0.25132625756784194],[0.79,0.3560606060606061,0.2400950190490699],[0.8,0.3560606060606061,0.22860729366721766],[0.81,0.3560606060606061,0.2167164388395233],[0.8200000000000001,0.3560606060606061,0.2044481362157272],[0.8300000000000001,0.3560606060606061,0.19170935514513668],[0.84,0.3560606060606061,0.17846403933478078],[0.85,0.3560606060606061,0.16490438530546925],[0.86,0.3560606060606061,0.1511158811051728],[0.87,0.3560606060606061,0.13773202828388012],[0.88,0.3560606060606061,0],[0.89,0.3560606060606061,0.09680391522562021],[0.9,0.3560606060606061,0.08370059636152882],[0.91,0.3560606060606061,0.07001465706060435],[0.92,0.3560606060606061,0.055279976845604664],[0.93,0.3560606060606061,0.03922403061818075],[0.9400000000000001,0.3560606060606061,0],[0.9500000000000001,0.3560606060606061,0],[0.96,0.3560606060606061,0],[0.97,0.3560606060606061,0],[0.98,0.3560606060606061,0],[0.99,0.3560606060606061,0],[1,0.3560606060606061,0],[0,0.36363636363636365,0.8754768718276448],[0.01,0.36363636363636365,0.8763734718200588],[0.02,0.36363636363636365,0.8779518868950686],[0.03,0.36363636363636365,0.8245810633118831],[0.04,0.36363636363636365,0.8496589364700451],[0.05,0.36363636363636365,0.8458812193013269],[0.06,0.36363636363636365,0.8413921390909082],[0.07,0.36363636363636365,0.836469064545784],[0.08,0.36363636363636365,0.8318102040751556],[0.09,0.36363636363636365,0.8271687704051647],[0.1,0.36363636363636365,0.8228701964490307],[0.11,0.36363636363636365,0.8181120393252658],[0.12,0.36363636363636365,0.8132846080577059],[0.13,0.36363636363636365,0.8075248888365983],[0.14,0.36363636363636365,0.8017745148632816],[0.15,0.36363636363636365,0.7958835831900668],[0.16,0.36363636363636365,0.812188017188802],[0.17,0.36363636363636365,0.7550568950617513],[0.18,0.36363636363636365,0.7402207983289523],[0.19,0.36363636363636365,0.7387202900772489],[0.2,0.36363636363636365,0.7367054550442897],[0.21,0.36363636363636365,0.7348737889789904],[0.22,0.36363636363636365,0.7284522692404973],[0.23,0.36363636363636365,0.6821077159536866],[0.24,0.36363636363636365,0.6757913064287384],[0.25,0.36363636363636365,0.6691464766191124],[0.26,0.36363636363636365,0.6630444031373823],[0.27,0.36363636363636365,0.657650430874273],[0.28,0.36363636363636365,0.6537385702604105],[0.29,0.36363636363636365,0.6504151914557252],[0.3,0.36363636363636365,0.6489369096487535],[0.31,0.36363636363636365,0.6476397491144111],[0.32,0.36363636363636365,0.647817106179366],[0.33,0.36363636363636365,0.6477690934067792],[0.34,0.36363636363636365,0.5574364398429806],[0.35000000000000003,0.36363636363636365,0.5517211493925577],[0.36,0.36363636363636365,0.5875954781207341],[0.37,0.36363636363636365,0.5770996611491728],[0.38,0.36363636363636365,0.5670483510104919],[0.39,0.36363636363636365,0.5582082974184093],[0.4,0.36363636363636365,0.5510423209390385],[0.41000000000000003,0.36363636363636365,0.5463382765968402],[0.42,0.36363636363636365,0.5333266487876756],[0.43,0.36363636363636365,0.525029201194406],[0.44,0.36363636363636365,0.518319599338522],[0.45,0.36363636363636365,0.5119478067684207],[0.46,0.36363636363636365,0.506832223196561],[0.47000000000000003,0.36363636363636365,0.5022394457353032],[0.48,0.36363636363636365,0.4991625445832656],[0.49,0.36363636363636365,0.46331018984772376],[0.5,0.36363636363636365,0.45421389557782554],[0.51,0.36363636363636365,0.4448347945647523],[0.52,0.36363636363636365,0.4351396272883268],[0.53,0.36363636363636365,0.4250881032169688],[0.54,0.36363636363636365,0.41483397907849895],[0.55,0.36363636363636365,0.40381239795632656],[0.56,0.36363636363636365,0.39233894194366614],[0.5700000000000001,0.36363636363636365,0.3793584504467624],[0.58,0.36363636363636365,0.36498902852654846],[0.59,0.36363636363636365,0.3483152210109303],[0.6,0.36363636363636365,0.43017615712751894],[0.61,0.36363636363636365,0.3777625537008544],[0.62,0.36363636363636365,0.37858321971646425],[0.63,0.36363636363636365,0.37807077306456083],[0.64,0.36363636363636365,0.3766549977171114],[0.65,0.36363636363636365,0.37300995536220416],[0.66,0.36363636363636365,0.36797100955302653],[0.67,0.36363636363636365,0.3605519309748846],[0.68,0.36363636363636365,0.3438069862984845],[0.6900000000000001,0.36363636363636365,0.337645400398099],[0.7000000000000001,0.36363636363636365,0.3297461099892453],[0.71,0.36363636363636365,0.32120481845419535],[0.72,0.36363636363636365,0.3118678212242858],[0.73,0.36363636363636365,0.30234473664432604],[0.74,0.36363636363636365,0.29241191046700094],[0.75,0.36363636363636365,0.2822813444115303],[0.76,0.36363636363636365,0.2719166875170159],[0.77,0.36363636363636365,0.2612942398179948],[0.78,0.36363636363636365,0.2504288075438575],[0.79,0.36363636363636365,0.23929528698805952],[0.8,0.36363636363636365,0.2277968506033365],[0.81,0.36363636363636365,0.21597726276617912],[0.8200000000000001,0.36363636363636365,0.20368985439559917],[0.8300000000000001,0.36363636363636365,0.1909365645850083],[0.84,0.36363636363636365,0.17775297032058324],[0.85,0.36363636363636365,0.16404119797727756],[0.86,0.36363636363636365,0.15007542410956193],[0.87,0.36363636363636365,0.1358223274682515],[0.88,0.36363636363636365,0.13060013415248192],[0.89,0.36363636363636365,0.09486509026651281],[0.9,0.36363636363636365,0.08197251725787334],[0.91,0.36363636363636365,0.06867234443266487],[0.92,0.36363636363636365,0.05435953941878255],[0.93,0.36363636363636365,0.0390497412783604],[0.9400000000000001,0.36363636363636365,0.05043480743935485],[0.9500000000000001,0.36363636363636365,0],[0.96,0.36363636363636365,0],[0.97,0.36363636363636365,0],[0.98,0.36363636363636365,0],[0.99,0.36363636363636365,0],[1,0.36363636363636365,0],[0,0.3712121212121212,0.8747325533120083],[0.01,0.3712121212121212,0.8758669524465784],[0.02,0.3712121212121212,0.877628710143193],[0.03,0.3712121212121212,0],[0.04,0.3712121212121212,0],[0.05,0.3712121212121212,0.8456518154486838],[0.06,0.3712121212121212,0.840639862561993],[0.07,0.3712121212121212,0.8354934218936246],[0.08,0.3712121212121212,0.830290969662052],[0.09,0.3712121212121212,0.8256657613278328],[0.1,0.3712121212121212,0.8210967709201964],[0.11,0.3712121212121212,0.8168706335496196],[0.12,0.3712121212121212,0.8121151322050297],[0.13,0.3712121212121212,0.8073634425804974],[0.14,0.3712121212121212,0.8021604470386603],[0.15,0.3712121212121212,0.7974769561856629],[0.16,0.3712121212121212,0],[0.17,0.3712121212121212,0],[0.18,0.3712121212121212,0.7414911555245449],[0.19,0.3712121212121212,0.7391443861222987],[0.2,0.3712121212121212,0.7363070175491689],[0.21,0.3712121212121212,0.733823231765734],[0.22,0.3712121212121212,0],[0.23,0.3712121212121212,0.6797229974872742],[0.24,0.3712121212121212,0.6730287107633992],[0.25,0.3712121212121212,0.6661912792682584],[0.26,0.3712121212121212,0.6596981282529704],[0.27,0.3712121212121212,0.6544514685800293],[0.28,0.3712121212121212,0.6499922092467867],[0.29,0.3712121212121212,0.6474869166124648],[0.3,0.3712121212121212,0.6455597190366384],[0.31,0.3712121212121212,0.6456207586119562],[0.32,0.3712121212121212,0.6457919688361986],[0.33,0.3712121212121212,0.6467738732611643],[0.34,0.3712121212121212,0],[0.35000000000000003,0.3712121212121212,0],[0.36,0.3712121212121212,0.5845101104777826],[0.37,0.3712121212121212,0.5737563199937229],[0.38,0.3712121212121212,0.563581951919975],[0.39,0.3712121212121212,0.5547049562289933],[0.4,0.3712121212121212,0.547703495361739],[0.41000000000000003,0.3712121212121212,0.543072997942227],[0.42,0.3712121212121212,0.5307268538012182],[0.43,0.3712121212121212,0.5231322313030154],[0.44,0.3712121212121212,0.516087152267565],[0.45,0.3712121212121212,0.5101170898278573],[0.46,0.3712121212121212,0.5043380132491392],[0.47000000000000003,0.3712121212121212,0.5001089912145669],[0.48,0.3712121212121212,0.4973647635607749],[0.49,0.3712121212121212,0],[0.5,0.3712121212121212,0.4489923116819523],[0.51,0.3712121212121212,0.43925033409616004],[0.52,0.3712121212121212,0.4292800213640724],[0.53,0.3712121212121212,0.4190973479251834],[0.54,0.3712121212121212,0.4084229702726659],[0.55,0.3712121212121212,0.39748843581620763],[0.56,0.3712121212121212,0.38548075096631257],[0.5700000000000001,0.3712121212121212,0.3726667720105363],[0.58,0.3712121212121212,0.35777652881267386],[0.59,0.3712121212121212,0.3410271699524282],[0.6,0.3712121212121212,0],[0.61,0.3712121212121212,0.37459184437183757],[0.62,0.3712121212121212,0.3752079979911928],[0.63,0.3712121212121212,0.3755357993385572],[0.64,0.3712121212121212,0.3741844415839877],[0.65,0.3712121212121212,0.37190857259314963],[0.66,0.3712121212121212,0.36786626413480616],[0.67,0.3712121212121212,0.36285724462847746],[0.68,0.3712121212121212,0.3463411378237837],[0.6900000000000001,0.3712121212121212,0.3383018054109224],[0.7000000000000001,0.3712121212121212,0.329575404120531],[0.71,0.3712121212121212,0.32030667751401254],[0.72,0.3712121212121212,0.3109340525821359],[0.73,0.3712121212121212,0.30123661293817616],[0.74,0.3712121212121212,0.2914141496205852],[0.75,0.3712121212121212,0.2813849390532922],[0.76,0.3712121212121212,0.2711084710718066],[0.77,0.3712121212121212,0.26061026804306053],[0.78,0.3712121212121212,0.2498109986261967],[0.79,0.3712121212121212,0.23867703617629069],[0.8,0.3712121212121212,0.22722777371055072],[0.81,0.3712121212121212,0.21532412251351868],[0.8200000000000001,0.3712121212121212,0.20300604036257952],[0.8300000000000001,0.3712121212121212,0.1902058901541448],[0.84,0.3712121212121212,0.17683792177023006],[0.85,0.3712121212121212,0.16305839377815617],[0.86,0.3712121212121212,0.14860944656798378],[0.87,0.3712121212121212,0.1337338171779732],[0.88,0.3712121212121212,0],[0.89,0.3712121212121212,0.09288953514186621],[0.9,0.3712121212121212,0.08019369440801014],[0.91,0.3712121212121212,0.06697061636776681],[0.92,0.3712121212121212,0.053209514516326585],[0.93,0.3712121212121212,0.03889975649445749],[0.9400000000000001,0.3712121212121212,0],[0.9500000000000001,0.3712121212121212,0],[0.96,0.3712121212121212,0],[0.97,0.3712121212121212,0],[0.98,0.3712121212121212,0],[0.99,0.3712121212121212,0],[1,0.3712121212121212,0],[0,0.3787878787878788,0.8730346934452277],[0.01,0.3787878787878788,0.874421075800375],[0.02,0.3787878787878788,0.8766126577380338],[0.03,0.3787878787878788,0.8920058743025081],[0.04,0.3787878787878788,0.827275931895198],[0.05,0.3787878787878788,0.8451459667332742],[0.06,0.3787878787878788,0.8401801443190051],[0.07,0.3787878787878788,0.8346448553088457],[0.08,0.3787878787878788,0.8294197511330834],[0.09,0.3787878787878788,0.8244373082953113],[0.1,0.3787878787878788,0.8201551488929288],[0.11,0.3787878787878788,0.815873537874158],[0.12,0.3787878787878788,0.8118817749003326],[0.13,0.3787878787878788,0.8074635195384509],[0.14,0.3787878787878788,0.8033513601165612],[0.15,0.3787878787878788,0.7995654073508673],[0.16,0.3787878787878788,0.8178487510926227],[0.17,0.3787878787878788,0.7229786335680793],[0.18,0.3787878787878788,0.743529380423815],[0.19,0.3787878787878788,0.7401082904542526],[0.2,0.3787878787878788,0.7363227160174866],[0.21,0.3787878787878788,0.7328792632144003],[0.22,0.3787878787878788,0.7016156840471212],[0.23,0.3787878787878788,0.6779625387036888],[0.24,0.3787878787878788,0.6709952485503217],[0.25,0.3787878787878788,0.6637940891489182],[0.26,0.3787878787878788,0.6572653369404692],[0.27,0.3787878787878788,0.651398795021561],[0.28,0.3787878787878788,0.647422472594507],[0.29,0.3787878787878788,0.6442127961831529],[0.3,0.3787878787878788,0.6433811773507615],[0.31,0.3787878787878788,0.6430319868740031],[0.32,0.3787878787878788,0.644303254183894],[0.33,0.3787878787878788,0.6458698058920649],[0.34,0.3787878787878788,0.5517874436816778],[0.35000000000000003,0.3787878787878788,0.5490977422160419],[0.36,0.3787878787878788,0.5810049464803211],[0.37,0.3787878787878788,0.5702352338976273],[0.38,0.3787878787878788,0.5600038805404094],[0.39,0.3787878787878788,0.5508412514204762],[0.4,0.3787878787878788,0.543206162874509],[0.41000000000000003,0.3787878787878788,0.5370351245908099],[0.42,0.3787878787878788,0.5264307183329797],[0.43,0.3787878787878788,0.5201822135579468],[0.44,0.3787878787878788,0.5140870130426145],[0.45,0.3787878787878788,0.5076611485385254],[0.46,0.3787878787878788,0.5021691083569035],[0.47000000000000003,0.3787878787878788,0.49706952191700604],[0.48,0.3787878787878788,0.4619319799307304],[0.49,0.3787878787878788,0.45103059838589615],[0.5,0.3787878787878788,0.44297517901501515],[0.51,0.3787878787878788,0.43349496629162926],[0.52,0.3787878787878788,0.42354763688764074],[0.53,0.3787878787878788,0.41315218216621774],[0.54,0.3787878787878788,0.40256429918510833],[0.55,0.3787878787878788,0.39126196718642636],[0.56,0.3787878787878788,0.3795180127686749],[0.5700000000000001,0.3787878787878788,0.3663148330397402],[0.58,0.3787878787878788,0.3517086714411075],[0.59,0.3787878787878788,0.3348639532342921],[0.6,0.3787878787878788,0.34689283648386254],[0.61,0.3787878787878788,0.3715104661263143],[0.62,0.3787878787878788,0.3727525864557135],[0.63,0.3787878787878788,0.37307940177314475],[0.64,0.3787878787878788,0.37286788572553176],[0.65,0.3787878787878788,0.37112083078607216],[0.66,0.3787878787878788,0.3689158280396101],[0.67,0.3787878787878788,0.3661997104068448],[0.68,0.3787878787878788,0.3509848277896353],[0.6900000000000001,0.3787878787878788,0.3403617189451163],[0.7000000000000001,0.3787878787878788,0.33010627833492323],[0.71,0.3787878787878788,0.3202836584934678],[0.72,0.3787878787878788,0.31051695864822015],[0.73,0.3787878787878788,0.3007925917322046],[0.74,0.3787878787878788,0.2909855662546484],[0.75,0.3787878787878788,0.2810040253437698],[0.76,0.3787878787878788,0.27085459152526065],[0.77,0.3787878787878788,0.2603876908073133],[0.78,0.3787878787878788,0.24961654386985516],[0.79,0.3787878787878788,0.23849885594132564],[0.8,0.3787878787878788,0.22693960534783664],[0.81,0.3787878787878788,0.21499377392314517],[0.8200000000000001,0.3787878787878788,0.20253997599475076],[0.8300000000000001,0.3787878787878788,0.18955083140554238],[0.84,0.3787878787878788,0.17609346272365203],[0.85,0.3787878787878788,0.1619236888061297],[0.86,0.3787878787878788,0.14723845020510024],[0.87,0.3787878787878788,0.13177401330739597],[0.88,0.3787878787878788,0.1350033287877315],[0.89,0.3787878787878788,0.09117810051745379],[0.9,0.3787878787878788,0.07821349696399578],[0.91,0.3787878787878788,0.06502089632364622],[0.92,0.3787878787878788,0.0510995748359733],[0.93,0.3787878787878788,0.038963598202016475],[0.9400000000000001,0.3787878787878788,0.04219430842013104],[0.9500000000000001,0.3787878787878788,0],[0.96,0.3787878787878788,0],[0.97,0.3787878787878788,0],[0.98,0.3787878787878788,0],[0.99,0.3787878787878788,0],[1,0.3787878787878788,0],[0,0.38636363636363635,0.8706130025866619],[0.01,0.38636363636363635,0.8722201230902997],[0.02,0.38636363636363635,0.8749300879011711],[0.03,0.38636363636363635,0],[0.04,0.38636363636363635,0],[0.05,0.38636363636363635,0.8447540120392873],[0.06,0.38636363636363635,0.8397578920694172],[0.07,0.38636363636363635,0.8344103098195417],[0.08,0.38636363636363635,0.8289272237949673],[0.09,0.38636363636363635,0.8241417650905298],[0.1,0.38636363636363635,0.8197204738616054],[0.11,0.38636363636363635,0.8159478460720644],[0.12,0.38636363636363635,0.812096708404533],[0.13,0.38636363636363635,0.8085254945169086],[0.14,0.38636363636363635,0.8048378451258467],[0.15,0.38636363636363635,0.8017671865614602],[0.16,0.38636363636363635,0],[0.17,0.38636363636363635,0.7512177760158845],[0.18,0.38636363636363635,0.7464695182560335],[0.19,0.38636363636363635,0.7417022177387186],[0.2,0.38636363636363635,0.736819907112273],[0.21,0.38636363636363635,0.7322744680968777],[0.22,0.38636363636363635,0],[0.23,0.38636363636363635,0.6766507808726528],[0.24,0.38636363636363635,0.6697015292151693],[0.25,0.38636363636363635,0.6624843140993806],[0.26,0.38636363636363635,0.6553829341068864],[0.27,0.38636363636363635,0.6497563833930864],[0.28,0.38636363636363635,0.644863812383887],[0.29,0.38636363636363635,0.642474284364952],[0.3,0.38636363636363635,0.6407473608893186],[0.31,0.38636363636363635,0.641325235601444],[0.32,0.38636363636363635,0.641988421598081],[0.33,0.38636363636363635,0],[0.34,0.38636363636363635,0],[0.35000000000000003,0.38636363636363635,0],[0.36,0.38636363636363635,0.577198842630291],[0.37,0.38636363636363635,0.5666462735790289],[0.38,0.38636363636363635,0.5563018400838413],[0.39,0.38636363636363635,0.5469732130086974],[0.4,0.38636363636363635,0.5382678020961256],[0.41000000000000003,0.38636363636363635,0.5283188467946911],[0.42,0.38636363636363635,0.5232405366106153],[0.43,0.38636363636363635,0.517843792626665],[0.44,0.38636363636363635,0.5116629309737732],[0.45,0.38636363636363635,0.505785474970118],[0.46,0.38636363636363635,0.4996706415598919],[0.47000000000000003,0.38636363636363635,0.4945465285480748],[0.48,0.38636363636363635,0],[0.49,0.38636363636363635,0],[0.5,0.38636363636363635,0.4369062047665738],[0.51,0.38636363636363635,0.4277876391202519],[0.52,0.38636363636363635,0.4179341713892666],[0.53,0.38636363636363635,0.40766427531532773],[0.54,0.38636363636363635,0.39690865308584966],[0.55,0.38636363636363635,0.38587420623896646],[0.56,0.38636363636363635,0.37387862094675545],[0.5700000000000001,0.38636363636363635,0.36104452776755014],[0.58,0.38636363636363635,0.34631126843207244],[0.59,0.38636363636363635,0.3298057696417786],[0.6,0.38636363636363635,0],[0.61,0.38636363636363635,0.36927155117720656],[0.62,0.38636363636363635,0.3705446031854891],[0.63,0.38636363636363635,0.37169950758565684],[0.64,0.38636363636363635,0.3716426733707978],[0.65,0.38636363636363635,0.3711625443583485],[0.66,0.38636363636363635,0.3698381959927086],[0.67,0.38636363636363635,0.36883144838358584],[0.68,0.38636363636363635,0.3558535405166346],[0.6900000000000001,0.38636363636363635,0.3427654052017091],[0.7000000000000001,0.38636363636363635,0.3312906909804525],[0.71,0.38636363636363635,0.32081153316274136],[0.72,0.38636363636363635,0.31082382368132583],[0.73,0.38636363636363635,0.3010273143143837],[0.74,0.38636363636363635,0.2912051405895673],[0.75,0.38636363636363635,0.2813357611320721],[0.76,0.38636363636363635,0.27118335946305266],[0.77,0.38636363636363635,0.2607805483799219],[0.78,0.38636363636363635,0.24999260796188222],[0.79,0.38636363636363635,0.2387798568574801],[0.8,0.38636363636363635,0.2271683332567779],[0.81,0.38636363636363635,0.21503040281146882],[0.8200000000000001,0.38636363636363635,0.2024012294090978],[0.8300000000000001,0.38636363636363635,0.1892489980523191],[0.84,0.38636363636363635,0.17541744497662348],[0.85,0.38636363636363635,0.16108887038279],[0.86,0.38636363636363635,0.14584806566659042],[0.87,0.38636363636363635,0.12998745102309697],[0.88,0.38636363636363635,0],[0.89,0.38636363636363635,0.08952087453470683],[0.9,0.38636363636363635,0.07641733995197936],[0.91,0.38636363636363635,0.062345402681528404],[0.92,0.38636363636363635,0.046585737820941345],[0.93,0.38636363636363635,0],[0.9400000000000001,0.38636363636363635,0],[0.9500000000000001,0.38636363636363635,0],[0.96,0.38636363636363635,0],[0.97,0.38636363636363635,0],[0.98,0.38636363636363635,0],[0.99,0.38636363636363635,0],[1,0.38636363636363635,0],[0,0.3939393939393939,0.8677732823420343],[0.01,0.3939393939393939,0.8695904674478228],[0.02,0.3939393939393939,0.8724460735218387],[0.03,0.3939393939393939,0.8752644955952402],[0.04,0.3939393939393939,0.8027802874253489],[0.05,0.3939393939393939,0.8015595463226571],[0.06,0.3939393939393939,0.8396446142095495],[0.07,0.3939393939393939,0.8343730428763295],[0.08,0.3939393939393939,0.8292928076381628],[0.09,0.3939393939393939,0.8244568894369144],[0.1,0.3939393939393939,0.8204330243746762],[0.11,0.3939393939393939,0.8167098357542613],[0.12,0.3939393939393939,0.8134872170995815],[0.13,0.3939393939393939,0.8101913430352272],[0.14,0.3939393939393939,0.8071547875255446],[0.15,0.3939393939393939,0.803583121518352],[0.16,0.3939393939393939,0.753573502606081],[0.17,0.3939393939393939,0.753817668533302],[0.18,0.3939393939393939,0.7491307279109509],[0.19,0.3939393939393939,0.7435978406389501],[0.2,0.3939393939393939,0.7380600518745072],[0.21,0.3939393939393939,0.7329465928002927],[0.22,0.3939393939393939,0.7372499917643959],[0.23,0.3939393939393939,0.676036017792166],[0.24,0.3939393939393939,0.6695905449061915],[0.25,0.3939393939393939,0.6620562444274223],[0.26,0.3939393939393939,0.6550634936446158],[0.27,0.3939393939393939,0.6485040770678767],[0.28,0.3939393939393939,0.6441875856654858],[0.29,0.3939393939393939,0.6405382840838161],[0.3,0.3939393939393939,0.6397077027853142],[0.31,0.3939393939393939,0.6392178283209702],[0.32,0.3939393939393939,0.6402189514369256],[0.33,0.3939393939393939,0.5511991946983948],[0.34,0.3939393939393939,0.5477503350416769],[0.35000000000000003,0.3939393939393939,0.544935345092789],[0.36,0.3939393939393939,0.5731825697321848],[0.37,0.3939393939393939,0.5628285805226845],[0.38,0.3939393939393939,0.5527950136635782],[0.39,0.3939393939393939,0.5434971426770889],[0.4,0.3939393939393939,0.5353535684385126],[0.41000000000000003,0.3939393939393939,0.5249031429501837],[0.42,0.3939393939393939,0.5208246984149079],[0.43,0.3939393939393939,0.5154642132058203],[0.44,0.3939393939393939,0.5099051212984997],[0.45,0.3939393939393939,0.5035922945151992],[0.46,0.3939393939393939,0.49773681533223024],[0.47000000000000003,0.3939393939393939,0.4921215060763585],[0.48,0.3939393939393939,0.5159282219944664],[0.49,0.3939393939393939,0.4407101696246586],[0.5,0.3939393939393939,0.43100800889473484],[0.51,0.3939393939393939,0.42232079360619823],[0.52,0.3939393939393939,0.41272377916841],[0.53,0.3939393939393939,0.40252985797644647],[0.54,0.3939393939393939,0.3920242032774257],[0.55,0.3939393939393939,0.3809368232619224],[0.56,0.3939393939393939,0.36930770262088103],[0.5700000000000001,0.3939393939393939,0.35640918988711884],[0.58,0.3939393939393939,0.34199187863978475],[0.59,0.3939393939393939,0.32545708911287763],[0.6,0.3939393939393939,0.33524758311029484],[0.61,0.3939393939393939,0.3674224110703047],[0.62,0.3939393939393939,0.3692703862035626],[0.63,0.3939393939393939,0.3704429540423886],[0.64,0.3939393939393939,0.37131800555897],[0.65,0.3939393939393939,0.3711038259045192],[0.66,0.3939393939393939,0.3707949692307544],[0.67,0.3939393939393939,0.37034658027327394],[0.68,0.3939393939393939,0.35888941540294234],[0.6900000000000001,0.3939393939393939,0.3447427705438133],[0.7000000000000001,0.3939393939393939,0.332652064492904],[0.71,0.3939393939393939,0.3218620787200828],[0.72,0.3939393939393939,0.31177988449149585],[0.73,0.3939393939393939,0.3019152830187153],[0.74,0.3939393939393939,0.292195709865951],[0.75,0.3939393939393939,0.28229383462247437],[0.76,0.3939393939393939,0.27224174413330193],[0.77,0.3939393939393939,0.26179408309528013],[0.78,0.3939393939393939,0.2509589180767785],[0.79,0.3939393939393939,0.23968416293000006],[0.8,0.3939393939393939,0.227872802702669],[0.81,0.3939393939393939,0.21558790285155244],[0.8200000000000001,0.3939393939393939,0.202727648948986],[0.8300000000000001,0.3939393939393939,0.18923451719156392],[0.84,0.3939393939393939,0.17521765943929532],[0.85,0.3939393939393939,0.16033032045800594],[0.86,0.3939393939393939,0.14477997566345407],[0.87,0.3939393939393939,0.12820197518580156],[0.88,0.3939393939393939,0.0835303840480448],[0.89,0.3939393939393939,0.08810969051900618],[0.9,0.3939393939393939,0.07495464470084783],[0.91,0.3939393939393939,0.06125055692214321],[0.92,0.3939393939393939,0.04582811266105691],[0.93,0.3939393939393939,0],[0.9400000000000001,0.3939393939393939,0],[0.9500000000000001,0.3939393939393939,0],[0.96,0.3939393939393939,0],[0.97,0.3939393939393939,0],[0.98,0.3939393939393939,0],[0.99,0.3939393939393939,0],[1,0.3939393939393939,0],[0,0.40151515151515155,0.8649871372112032],[0.01,0.40151515151515155,0.866917098170292],[0.02,0.40151515151515155,0.8701651680418927],[0.03,0.40151515151515155,0.8737904255322744],[0.04,0.40151515151515155,0],[0.05,0.40151515151515155,0],[0.06,0.40151515151515155,0.8391982919929927],[0.07,0.40151515151515155,0.8347808493848141],[0.08,0.40151515151515155,0.8300396935030527],[0.09,0.40151515151515155,0.8257758760838603],[0.1,0.40151515151515155,0.8218868974050952],[0.11,0.40151515151515155,0.818673719937264],[0.12,0.40151515151515155,0.815643670165229],[0.13,0.40151515151515155,0.8131044832588182],[0.14,0.40151515151515155,0.810959349723527],[0.15,0.40151515151515155,0],[0.16,0.40151515151515155,0],[0.17,0.40151515151515155,0.7577437352801464],[0.18,0.40151515151515155,0.7521883971489385],[0.19,0.40151515151515155,0.7460017359021469],[0.2,0.40151515151515155,0.7397163954669632],[0.21,0.40151515151515155,0.7341031411369177],[0.22,0.40151515151515155,0.7293959735615134],[0.23,0.40151515151515155,0],[0.24,0.40151515151515155,0.6709517758134894],[0.25,0.40151515151515155,0.6631037163614681],[0.26,0.40151515151515155,0.6553767069012724],[0.27,0.40151515151515155,0.6492318627458786],[0.28,0.40151515151515155,0.6435969410957565],[0.29,0.40151515151515155,0.6407041576627295],[0.3,0.40151515151515155,0.6382752073181519],[0.31,0.40151515151515155,0.6383426824449402],[0.32,0.40151515151515155,0.6383890357161659],[0.33,0.40151515151515155,0],[0.34,0.40151515151515155,0],[0.35000000000000003,0.40151515151515155,0],[0.36,0.40151515151515155,0.5689527091284339],[0.37,0.40151515151515155,0.5589034852666013],[0.38,0.40151515151515155,0.5490428730553236],[0.39,0.40151515151515155,0.5402099939528746],[0.4,0.40151515151515155,0.5322310121563496],[0.41000000000000003,0.40151515151515155,0.5248334434412316],[0.42,0.40151515151515155,0.519134383258121],[0.43,0.40151515151515155,0.5138507724909074],[0.44,0.40151515151515155,0.5079086858855126],[0.45,0.40151515151515155,0.502000478609794],[0.46,0.40151515151515155,0.4956843315742674],[0.47000000000000003,0.40151515151515155,0.49013552979666847],[0.48,0.40151515151515155,0],[0.49,0.40151515151515155,0],[0.5,0.40151515151515155,0.42555929176304474],[0.51,0.40151515151515155,0.41728040788134224],[0.52,0.40151515151515155,0.40800542312197496],[0.53,0.40151515151515155,0.3980725701408271],[0.54,0.40151515151515155,0.3877457626132329],[0.55,0.40151515151515155,0.376985044069881],[0.56,0.40151515151515155,0.36549634069443254],[0.5700000000000001,0.40151515151515155,0.35294217766367925],[0.58,0.40151515151515155,0.3386799176090626],[0.59,0.40151515151515155,0.32244909762035295],[0.6,0.40151515151515155,0],[0.61,0.40151515151515155,0.36642732730444705],[0.62,0.40151515151515155,0.36828029589144073],[0.63,0.40151515151515155,0.3701336082955674],[0.64,0.40151515151515155,0.3709874682930577],[0.65,0.40151515151515155,0.3715524564726812],[0.66,0.40151515151515155,0.37138667680037585],[0.67,0.40151515151515155,0.37133465917097896],[0.68,0.40151515151515155,0.35947947854100193],[0.6900000000000001,0.40151515151515155,0.34595834291311145],[0.7000000000000001,0.40151515151515155,0.33403805734222414],[0.71,0.40151515151515155,0.3233697098479681],[0.72,0.40151515151515155,0.31325934095701446],[0.73,0.40151515151515155,0.3035344272147373],[0.74,0.40151515151515155,0.29377340857122486],[0.75,0.40151515151515155,0.28401154044628707],[0.76,0.40151515151515155,0.27389605094995356],[0.77,0.40151515151515155,0.2634671550203647],[0.78,0.40151515151515155,0.2525587551886315],[0.79,0.40151515151515155,0.24112527518444093],[0.8,0.40151515151515155,0.2291981681004452],[0.81,0.40151515151515155,0.21665378085678663],[0.8200000000000001,0.40151515151515155,0.20351690565789052],[0.8300000000000001,0.40151515151515155,0.1897853611658996],[0.84,0.40151515151515155,0.1752431800979598],[0.85,0.40151515151515155,0.16010908581222516],[0.86,0.40151515151515155,0.1438273081169139],[0.87,0.40151515151515155,0.12669428626098933],[0.88,0.40151515151515155,0],[0.89,0.40151515151515155,0.08696582047170422],[0.9,0.40151515151515155,0.07424770963964517],[0.91,0.40151515151515155,0.060955536275019796],[0.92,0.40151515151515155,0.04680519137270368],[0.93,0.40151515151515155,0],[0.9400000000000001,0.40151515151515155,0],[0.9500000000000001,0.40151515151515155,0],[0.96,0.40151515151515155,0],[0.97,0.40151515151515155,0],[0.98,0.40151515151515155,0],[0.99,0.40151515151515155,0],[1,0.40151515151515155,0],[0,0.4090909090909091,0.8625432608275589],[0.01,0.4090909090909091,0.8645071014125066],[0.02,0.4090909090909091,0.8678811678741658],[0.03,0.4090909090909091,0.8717241580072268],[0.04,0.4090909090909091,0.8239614619442894],[0.05,0.4090909090909091,0.8233014662982688],[0.06,0.4090909090909091,0.8388577775787962],[0.07,0.4090909090909091,0.8351583904990303],[0.08,0.4090909090909091,0.8313680194058917],[0.09,0.4090909090909091,0.8275602659545525],[0.1,0.4090909090909091,0.8243042977630182],[0.11,0.4090909090909091,0.8213165060404178],[0.12,0.4090909090909091,0.8187787517421666],[0.13,0.4090909090909091,0.8164796568669979],[0.14,0.4090909090909091,0.8149088052605264],[0.15,0.4090909090909091,0.7995722320224958],[0.16,0.4090909090909091,0.7425553388681299],[0.17,0.4090909090909091,0.7621361540058598],[0.18,0.4090909090909091,0.7556350579213349],[0.19,0.4090909090909091,0.7486371065375554],[0.2,0.4090909090909091,0.741760377570518],[0.21,0.4090909090909091,0.7353569181614402],[0.22,0.4090909090909091,0.7298642381219473],[0.23,0.4090909090909091,0.6688461558749952],[0.24,0.4090909090909091,0.6723429725309152],[0.25,0.4090909090909091,0.6644990567494627],[0.26,0.4090909090909091,0.6572763050570495],[0.27,0.4090909090909091,0.6501894478964263],[0.28,0.4090909090909091,0.6452258789965375],[0.29,0.4090909090909091,0.6406055510948427],[0.3,0.4090909090909091,0.6387308103906802],[0.31,0.4090909090909091,0.6371277296840111],[0.32,0.4090909090909091,0.6372061237259085],[0.33,0.4090909090909091,0.5459338634295476],[0.34,0.4090909090909091,0.5418908941583491],[0.35000000000000003,0.4090909090909091,0.5385930800679685],[0.36,0.4090909090909091,0.5642736277778895],[0.37,0.4090909090909091,0.5543982212399088],[0.38,0.4090909090909091,0.5451272006941614],[0.39,0.4090909090909091,0.5367318320339372],[0.4,0.4090909090909091,0.5295335896736346],[0.41000000000000003,0.4090909090909091,0.5230078753647885],[0.42,0.4090909090909091,0.5175099967281978],[0.43,0.4090909090909091,0.5119186820420001],[0.44,0.4090909090909091,0.5063824533367128],[0.45,0.4090909090909091,0.5001035471055502],[0.46,0.4090909090909091,0.4940658375694851],[0.47000000000000003,0.4090909090909091,0.4882583457619841],[0.48,0.4090909090909091,0.4970453193640832],[0.49,0.4090909090909091,0.43002104321821505],[0.5,0.4090909090909091,0.4205154902681505],[0.51,0.4090909090909091,0.4127901465055428],[0.52,0.4090909090909091,0.4038515056505241],[0.53,0.4090909090909091,0.39431216022606896],[0.54,0.4090909090909091,0.38426391386739545],[0.55,0.4090909090909091,0.3738827310681187],[0.56,0.4090909090909091,0.3627097450692014],[0.5700000000000001,0.4090909090909091,0.35055016730165417],[0.58,0.4090909090909091,0.3365001643759461],[0.59,0.4090909090909091,0.3200450892203103],[0.6,0.4090909090909091,0.3353415286478519],[0.61,0.4090909090909091,0.36576189078947924],[0.62,0.4090909090909091,0.36810076538072606],[0.63,0.4090909090909091,0.369871375870476],[0.64,0.4090909090909091,0.37141424417430713],[0.65,0.4090909090909091,0.37188722510393435],[0.66,0.4090909090909091,0.372185714698967],[0.67,0.4090909090909091,0.3720548357398767],[0.68,0.4090909090909091,0.3587311908993326],[0.6900000000000001,0.4090909090909091,0.34675685627405795],[0.7000000000000001,0.4090909090909091,0.335629190567608],[0.71,0.4090909090909091,0.325196455706786],[0.72,0.4090909090909091,0.3153588016276958],[0.73,0.4090909090909091,0.30562834875050776],[0.74,0.4090909090909091,0.2960633275330075],[0.75,0.4090909090909091,0.28623686684051247],[0.76,0.4090909090909091,0.2762118104133502],[0.77,0.4090909090909091,0.2656983686304284],[0.78,0.4090909090909091,0.2547059342686754],[0.79,0.4090909090909091,0.24317756559906556],[0.8,0.4090909090909091,0.2310134746660601],[0.81,0.4090909090909091,0.2182701512117151],[0.8200000000000001,0.4090909090909091,0.20485941801204854],[0.8300000000000001,0.4090909090909091,0.1906815584935843],[0.84,0.4090909090909091,0.17589179127833318],[0.85,0.4090909090909091,0.16004091238826895],[0.86,0.4090909090909091,0.143352637552701],[0.87,0.4090909090909091,0.1253894922607766],[0.88,0.4090909090909091,0.0826463943225616],[0.89,0.4090909090909091,0.08606377158930842],[0.9,0.4090909090909091,0.07384501325933761],[0.91,0.4090909090909091,0.06150415343809271],[0.92,0.4090909090909091,0.04857736571687865],[0.93,0.4090909090909091,0],[0.9400000000000001,0.4090909090909091,0],[0.9500000000000001,0.4090909090909091,0],[0.96,0.4090909090909091,0],[0.97,0.4090909090909091,0],[0.98,0.4090909090909091,0],[0.99,0.4090909090909091,0],[1,0.4090909090909091,0],[0,0.4166666666666667,0.8606237177697493],[0.01,0.4166666666666667,0.8625182511277438],[0.02,0.4166666666666667,0.8657267680824654],[0.03,0.4166666666666667,0.8695159443639324],[0.04,0.4166666666666667,0],[0.05,0.4166666666666667,0],[0.06,0.4166666666666667,0],[0.07,0.4166666666666667,0.8354479975280904],[0.08,0.4166666666666667,0.8326423610330478],[0.09,0.4166666666666667,0.8298232720661295],[0.1,0.4166666666666667,0.8270723812361205],[0.11,0.4166666666666667,0.8246487260997546],[0.12,0.4166666666666667,0.8223047718912428],[0.13,0.4166666666666667,0.8203342504148641],[0.14,0.4166666666666667,0.8189039953821484],[0.15,0.4166666666666667,0],[0.16,0.4166666666666667,0],[0.17,0.4166666666666667,0.7664890341567822],[0.18,0.4166666666666667,0.7590437817356618],[0.19,0.4166666666666667,0.7514422739764404],[0.2,0.4166666666666667,0.7438470246687623],[0.21,0.4166666666666667,0.7367644810066589],[0.22,0.4166666666666667,0.7303736294799928],[0.23,0.4166666666666667,0],[0.24,0.4166666666666667,0.6737381685435238],[0.25,0.4166666666666667,0.6667255776847922],[0.26,0.4166666666666667,0.6593103851251831],[0.27,0.4166666666666667,0.6529805336825185],[0.28,0.4166666666666667,0.646675103204507],[0.29,0.4166666666666667,0.6425835681712861],[0.3,0.4166666666666667,0.6387162578374803],[0.31,0.4166666666666667,0.6372162535377839],[0.32,0.4166666666666667,0.6362082766500574],[0.33,0.4166666666666667,0],[0.34,0.4166666666666667,0],[0.35000000000000003,0.4166666666666667,0],[0.36,0.4166666666666667,0.5586144374573317],[0.37,0.4166666666666667,0.5490270941039016],[0.38,0.4166666666666667,0.5405313503567767],[0.39,0.4166666666666667,0.5330569967300935],[0.4,0.4166666666666667,0.5264874733381821],[0.41000000000000003,0.4166666666666667,0.5207653133974299],[0.42,0.4166666666666667,0.5153438222503107],[0.43,0.4166666666666667,0.510181523284504],[0.44,0.4166666666666667,0.504426106793483],[0.45,0.4166666666666667,0.4985652897255004],[0.46,0.4166666666666667,0.492248063100608],[0.47000000000000003,0.4166666666666667,0.4865148344062484],[0.48,0.4166666666666667,0],[0.49,0.4166666666666667,0],[0.5,0.4166666666666667,0.41602245820203565],[0.51,0.4166666666666667,0.4087955874721181],[0.52,0.4166666666666667,0.4003932622770809],[0.53,0.4166666666666667,0.3911053857379638],[0.54,0.4166666666666667,0.38161582933323235],[0.55,0.4166666666666667,0.3714801184716472],[0.56,0.4166666666666667,0.36100585006774977],[0.5700000000000001,0.4166666666666667,0.34921177055722596],[0.58,0.4166666666666667,0.3360049893216609],[0.59,0.4166666666666667,0.3198573237296243],[0.6,0.4166666666666667,0],[0.61,0.4166666666666667,0.36571654815265914],[0.62,0.4166666666666667,0.3680317462352924],[0.63,0.4166666666666667,0.37039105904500175],[0.64,0.4166666666666667,0.3717531658163984],[0.65,0.4166666666666667,0.3728193551768606],[0.66,0.4166666666666667,0.3729842240896599],[0.67,0.4166666666666667,0.3729756410023338],[0.68,0.4166666666666667,0.3584546901054882],[0.6900000000000001,0.4166666666666667,0.34796138894235407],[0.7000000000000001,0.4166666666666667,0.3374826931872968],[0.71,0.4166666666666667,0.32754085488187157],[0.72,0.4166666666666667,0.31778642994307527],[0.73,0.4166666666666667,0.3083283202980137],[0.74,0.4166666666666667,0.2987213876482988],[0.75,0.4166666666666667,0.2890579693992196],[0.76,0.4166666666666667,0.2789435843271418],[0.77,0.4166666666666667,0.2684346321435156],[0.78,0.4166666666666667,0.2573523172010456],[0.79,0.4166666666666667,0.24565150932079807],[0.8,0.4166666666666667,0.2333543832934054],[0.81,0.4166666666666667,0.2203410187158918],[0.8200000000000001,0.4166666666666667,0.20659767996723175],[0.8300000000000001,0.4166666666666667,0.19215581779076368],[0.84,0.4166666666666667,0.17671782905840505],[0.85,0.4166666666666667,0.16054938382544762],[0.86,0.4166666666666667,0.14294601864505574],[0.87,0.4166666666666667,0.1243258977499943],[0.88,0.4166666666666667,0],[0.89,0.4166666666666667,0.08530037458652409],[0.9,0.4166666666666667,0.07378230054630004],[0.91,0.4166666666666667,0.06220219268154238],[0.92,0.4166666666666667,0.05066947096773991],[0.93,0.4166666666666667,0],[0.9400000000000001,0.4166666666666667,0],[0.9500000000000001,0.4166666666666667,0],[0.96,0.4166666666666667,0],[0.97,0.4166666666666667,0],[0.98,0.4166666666666667,0],[0.99,0.4166666666666667,0],[1,0.4166666666666667,0],[0,0.42424242424242425,0.8592784352601546],[0.01,0.42424242424242425,0.8609459564964714],[0.02,0.42424242424242425,0.8639111952625077],[0.03,0.42424242424242425,0.8671290265071561],[0.04,0.42424242424242425,0.8694795786334629],[0.05,0.42424242424242425,0.8405129611976719],[0.06,0.42424242424242425,0.8396511230041107],[0.07,0.42424242424242425,0.8356415494279579],[0.08,0.42424242424242425,0.8339329189035389],[0.09,0.42424242424242425,0.8319320008919676],[0.1,0.42424242424242425,0.8300120489471412],[0.11,0.42424242424242425,0.8280167356203338],[0.12,0.42424242424242425,0.8260557553248031],[0.13,0.42424242424242425,0.8241705669214215],[0.14,0.42424242424242425,0.822862321728782],[0.15,0.42424242424242425,0.770854430658662],[0.16,0.42424242424242425,0.7780260078745649],[0.17,0.42424242424242425,0.770204336927413],[0.18,0.42424242424242425,0.7622642916786946],[0.19,0.42424242424242425,0.7540734064136495],[0.2,0.42424242424242425,0.7459449489647203],[0.21,0.42424242424242425,0.7380702352407009],[0.22,0.42424242424242425,0.7306228710849054],[0.23,0.42424242424242425,0.6863612824988875],[0.24,0.42424242424242425,0.6751875553991906],[0.25,0.42424242424242425,0.6689121501265851],[0.26,0.42424242424242425,0.6624802790545014],[0.27,0.42424242424242425,0.6555433866575144],[0.28,0.42424242424242425,0.6498606388977046],[0.29,0.42424242424242425,0.644018944122246],[0.3,0.42424242424242425,0.6402009120898856],[0.31,0.42424242424242425,0.636984497081024],[0.32,0.42424242424242425,0.6358626969541493],[0.33,0.42424242424242425,0.5486668902383057],[0.34,0.42424242424242425,0.5386278382943216],[0.35000000000000003,0.42424242424242425,0.5569592018512503],[0.36,0.42424242424242425,0.5497078642485111],[0.37,0.42424242424242425,0.5422029762294267],[0.38,0.42424242424242425,0.5351695018718184],[0.39,0.42424242424242425,0.5288615506680223],[0.4,0.42424242424242425,0.5232080066407948],[0.41000000000000003,0.42424242424242425,0.5179915457066494],[0.42,0.42424242424242425,0.5130972026327987],[0.43,0.42424242424242425,0.5079449389590736],[0.44,0.42424242424242425,0.5026635062080427],[0.45,0.42424242424242425,0.49666446920253016],[0.46,0.42424242424242425,0.4907745331694314],[0.47000000000000003,0.42424242424242425,0.4850958557823535],[0.48,0.42424242424242425,0.5051807769290937],[0.49,0.42424242424242425,0.4250567891050512],[0.5,0.42424242424242425,0.41226349577661475],[0.51,0.42424242424242425,0.40547954652588447],[0.52,0.42424242424242425,0.39730229533868244],[0.53,0.42424242424242425,0.38862178483913257],[0.54,0.42424242424242425,0.3792874117544164],[0.55,0.42424242424242425,0.36997759519990847],[0.56,0.42424242424242425,0.35970979229144295],[0.5700000000000001,0.42424242424242425,0.34915906422594345],[0.58,0.42424242424242425,0.3370393383143051],[0.59,0.42424242424242425,0.32437298832917055],[0.6,0.42424242424242425,0.31294101502577176],[0.61,0.42424242424242425,0.3658924290330928],[0.62,0.42424242424242425,0.36855673819934165],[0.63,0.42424242424242425,0.3707269711281487],[0.64,0.42424242424242425,0.37275177353556527],[0.65,0.42424242424242425,0.37366841238468773],[0.66,0.42424242424242425,0.37438669192927976],[0.67,0.42424242424242425,0.3744174370245229],[0.68,0.42424242424242425,0.35997773077205475],[0.6900000000000001,0.42424242424242425,0.3499333141580216],[0.7000000000000001,0.42424242424242425,0.3399211884710005],[0.71,0.42424242424242425,0.3301101495327202],[0.72,0.42424242424242425,0.3206877019811152],[0.73,0.42424242424242425,0.3112232399036141],[0.74,0.42424242424242425,0.3018499200610546],[0.75,0.42424242424242425,0.2921063467065147],[0.76,0.42424242424242425,0.28208508910556584],[0.77,0.42424242424242425,0.27148133208314007],[0.78,0.42424242424242425,0.26031510383596057],[0.79,0.42424242424242425,0.24851871278373394],[0.8,0.42424242424242425,0.23599472315365366],[0.81,0.42424242424242425,0.22276435612663345],[0.8200000000000001,0.42424242424242425,0.2087572735777113],[0.8300000000000001,0.42424242424242425,0.19379460476252425],[0.84,0.42424242424242425,0.17809055031914517],[0.85,0.42424242424242425,0.16104520995545887],[0.86,0.42424242424242425,0.14289479143416323],[0.87,0.42424242424242425,0.12311695440158991],[0.88,0.42424242424242425,0.08077692907871978],[0.89,0.42424242424242425,0.08458113612751308],[0.9,0.42424242424242425,0.07373719444394009],[0.91,0.42424242424242425,0.06278569823613495],[0.92,0.42424242424242425,0.05237573243259403],[0.93,0.42424242424242425,0],[0.9400000000000001,0.42424242424242425,0],[0.9500000000000001,0.42424242424242425,0],[0.96,0.42424242424242425,0],[0.97,0.42424242424242425,0],[0.98,0.42424242424242425,0],[0.99,0.42424242424242425,0],[1,0.42424242424242425,0],[0,0.4318181818181818,0.8583741073576937],[0.01,0.4318181818181818,0.8598467462762831],[0.02,0.4318181818181818,0.8624025403480385],[0.03,0.4318181818181818,0.8654252801152236],[0.04,0.4318181818181818,0.8679765589175252],[0.05,0.4318181818181818,0],[0.06,0.4318181818181818,0],[0.07,0.4318181818181818,0.8357933492514358],[0.08,0.4318181818181818,0.834741826765354],[0.09,0.4318181818181818,0.8336746576760494],[0.1,0.4318181818181818,0.8324779071614798],[0.11,0.4318181818181818,0.8311133880483894],[0.12,0.4318181818181818,0.8294157651494847],[0.13,0.4318181818181818,0.8277114944560557],[0.14,0.4318181818181818,0.8263902931686564],[0.15,0.4318181818181818,0],[0.16,0.4318181818181818,0.7808977380392379],[0.17,0.4318181818181818,0.7732826973484925],[0.18,0.4318181818181818,0.7650467506521268],[0.19,0.4318181818181818,0.7564847326520112],[0.2,0.4318181818181818,0.7478682431841708],[0.21,0.4318181818181818,0.7393697618107018],[0.22,0.4318181818181818,0.7312353428275018],[0.23,0.4318181818181818,0],[0.24,0.4318181818181818,0.6769609890809073],[0.25,0.4318181818181818,0.6716517973104295],[0.26,0.4318181818181818,0.665346808333582],[0.27,0.4318181818181818,0.6591931026803871],[0.28,0.4318181818181818,0.6524115468153544],[0.29,0.4318181818181818,0.6467194167283012],[0.3,0.4318181818181818,0.641012237049428],[0.31,0.4318181818181818,0.6372795290397278],[0.32,0.4318181818181818,0],[0.33,0.4318181818181818,0],[0.34,0.4318181818181818,0],[0.35000000000000003,0.4318181818181818,0.5522929111397188],[0.36,0.4318181818181818,0.5403161583646706],[0.37,0.4318181818181818,0.5343677747306481],[0.38,0.4318181818181818,0.529295802048792],[0.39,0.4318181818181818,0.5243174612184877],[0.4,0.4318181818181818,0.5195983842433797],[0.41000000000000003,0.4318181818181818,0.5150055650559319],[0.42,0.4318181818181818,0.5103964475247432],[0.43,0.4318181818181818,0.5057031648853401],[0.44,0.4318181818181818,0.5004460339888466],[0.45,0.4318181818181818,0.49497725710411206],[0.46,0.4318181818181818,0.48915166028451296],[0.47000000000000003,0.4318181818181818,0.4839030083759195],[0.48,0.4318181818181818,0],[0.49,0.4318181818181818,0],[0.5,0.4318181818181818,0.4089512746090445],[0.51,0.4318181818181818,0.4024579862069249],[0.52,0.4318181818181818,0.3947962673195131],[0.53,0.4318181818181818,0.3861905175344392],[0.54,0.4318181818181818,0.3776332143496636],[0.55,0.4318181818181818,0.3683497088545391],[0.56,0.4318181818181818,0.35923157591322613],[0.5700000000000001,0.4318181818181818,0.348816083486596],[0.58,0.4318181818181818,0.33822450193668974],[0.59,0.4318181818181818,0.3260350965355008],[0.6,0.4318181818181818,0.3136133462876567],[0.61,0.4318181818181818,0.3663732077740867],[0.62,0.4318181818181818,0.36890293220340015],[0.63,0.4318181818181818,0.37157208416190685],[0.64,0.4318181818181818,0.37337223344478676],[0.65,0.4318181818181818,0.37502973637151743],[0.66,0.4318181818181818,0.37579792877650264],[0.67,0.4318181818181818,0.3764300359884625],[0.68,0.4318181818181818,0.36334620972186527],[0.6900000000000001,0.4318181818181818,0.35280513173723693],[0.7000000000000001,0.4318181818181818,0.3425969428661939],[0.71,0.4318181818181818,0.33302138536461345],[0.72,0.4318181818181818,0.3235960815641642],[0.73,0.4318181818181818,0.3144200921031821],[0.74,0.4318181818181818,0.30499024725470625],[0.75,0.4318181818181818,0.2954234081888143],[0.76,0.4318181818181818,0.28530579515169385],[0.77,0.4318181818181818,0.27471503087074534],[0.78,0.4318181818181818,0.26346270661455395],[0.79,0.4318181818181818,0.25151208002959324],[0.8,0.4318181818181818,0.2388572708062365],[0.81,0.4318181818181818,0.22538709814029623],[0.8200000000000001,0.4318181818181818,0.2110160459918175],[0.8300000000000001,0.4318181818181818,0.19581824054981642],[0.84,0.4318181818181818,0.1793722869934712],[0.85,0.4318181818181818,0.1619874740779289],[0.86,0.4318181818181818,0.14271549096283542],[0.87,0.4318181818181818,0.12205804581180554],[0.88,0.4318181818181818,0],[0.89,0.4318181818181818,0.08412148145940462],[0.9,0.4318181818181818,0.0738734023037802],[0.91,0.4318181818181818,0.0626608076662245],[0.92,0.4318181818181818,0],[0.93,0.4318181818181818,0],[0.9400000000000001,0.4318181818181818,0],[0.9500000000000001,0.4318181818181818,0],[0.96,0.4318181818181818,0],[0.97,0.4318181818181818,0],[0.98,0.4318181818181818,0],[0.99,0.4318181818181818,0],[1,0.4318181818181818,0],[0,0.4393939393939394,0.8576861338649975],[0.01,0.4393939393939394,0.8588993978095136],[0.02,0.4393939393939394,0.861105594111223],[0.03,0.4393939393939394,0.8636712941842983],[0.04,0.4393939393939394,0.8659440803949033],[0.05,0.4393939393939394,0.8607319770246556],[0.06,0.4393939393939394,0.8473690734454846],[0.07,0.4393939393939394,0.8500494603458866],[0.08,0.4393939393939394,0.8347767001498259],[0.09,0.4393939393939394,0.8345473843938872],[0.1,0.4393939393939394,0.8341853499629401],[0.11,0.4393939393939394,0.833353197972512],[0.12,0.4393939393939394,0.8320605115929012],[0.13,0.4393939393939394,0.8304752838211191],[0.14,0.4393939393939394,0.8292282826564475],[0.15,0.4393939393939394,0.8058007260722178],[0.16,0.4393939393939394,0.7843804901480582],[0.17,0.4393939393939394,0.7760706482250456],[0.18,0.4393939393939394,0.7674000786517716],[0.19,0.4393939393939394,0.7585343390191639],[0.2,0.4393939393939394,0.7494388287265765],[0.21,0.4393939393939394,0.740460093034276],[0.22,0.4393939393939394,0.7316872705104441],[0.23,0.4393939393939394,0.7657426587741097],[0.24,0.4393939393939394,0.6786733934525567],[0.25,0.4393939393939394,0.6740701846107807],[0.26,0.4393939393939394,0.668643197775626],[0.27,0.4393939393939394,0.6621275652039168],[0.28,0.4393939393939394,0.6557309287157878],[0.29,0.4393939393939394,0.6485515192276714],[0.3,0.4393939393939394,0.6423777508373062],[0.31,0.4393939393939394,0.6368631992456681],[0.32,0.4393939393939394,0.6705002761072981],[0.33,0.4393939393939394,0.6697188089242145],[0.34,0.4393939393939394,0.5741132881066107],[0.35000000000000003,0.4393939393939394,0.5442787828186599],[0.36,0.4393939393939394,0.5242617431089268],[0.37,0.4393939393939394,0.5256259427508162],[0.38,0.4393939393939394,0.5233000716555278],[0.39,0.4393939393939394,0.5198443456392867],[0.4,0.4393939393939394,0.5158558681102103],[0.41000000000000003,0.4393939393939394,0.5117978086183812],[0.42,0.4393939393939394,0.5075780440119488],[0.43,0.4393939393939394,0.5030747532550233],[0.44,0.4393939393939394,0.498321391670117],[0.45,0.4393939393939394,0.4930132614242824],[0.46,0.4393939393939394,0.4878113054231253],[0.47000000000000003,0.4393939393939394,0.48294900422595344],[0.48,0.4393939393939394,0.5015440984101622],[0.49,0.4393939393939394,0.4938381498427239],[0.5,0.4393939393939394,0.40620865189108035],[0.51,0.4393939393939394,0.3999740534699704],[0.52,0.4393939393939394,0.3922911157282236],[0.53,0.4393939393939394,0.3842473098679301],[0.54,0.4393939393939394,0.3756233719594361],[0.55,0.4393939393939394,0.36734177776293664],[0.56,0.4393939393939394,0.35809540234467996],[0.5700000000000001,0.4393939393939394,0.34908301917571083],[0.58,0.4393939393939394,0.33844919213960456],[0.59,0.4393939393939394,0.3275622776899408],[0.6,0.4393939393939394,0.3151853558940572],[0.61,0.4393939393939394,0.3670119050293689],[0.62,0.4393939393939394,0.369574667191844],[0.63,0.4393939393939394,0.3719169646170749],[0.64,0.4393939393939394,0.3743215290397888],[0.65,0.4393939393939394,0.3758510472873221],[0.66,0.4393939393939394,0.377427861117142],[0.67,0.4393939393939394,0.3785658188859469],[0.68,0.4393939393939394,0.3675535250259885],[0.6900000000000001,0.4393939393939394,0.3558285089273987],[0.7000000000000001,0.4393939393939394,0.3454194609628747],[0.71,0.4393939393939394,0.3357282234732827],[0.72,0.4393939393939394,0.3266019885014152],[0.73,0.4393939393939394,0.31740245701737835],[0.74,0.4393939393939394,0.30822845715730895],[0.75,0.4393939393939394,0.2985804805718882],[0.76,0.4393939393939394,0.2885736140667569],[0.77,0.4393939393939394,0.2778937046109203],[0.78,0.4393939393939394,0.2665783910008671],[0.79,0.4393939393939394,0.25454178518636317],[0.8,0.4393939393939394,0.24169434526040462],[0.81,0.4393939393939394,0.2280024571374585],[0.8200000000000001,0.4393939393939394,0.21341806046102435],[0.8300000000000001,0.4393939393939394,0.1976574292088567],[0.84,0.4393939393939394,0.18099799924111426],[0.85,0.4393939393939394,0.16263876969617735],[0.86,0.4393939393939394,0.1428099308752751],[0.87,0.4393939393939394,0.12091589502185696],[0.88,0.4393939393939394,0.14298388623557257],[0.89,0.4393939393939394,0.08382405472932838],[0.9,0.4393939393939394,0.07500064108432072],[0.91,0.4393939393939394,0.06541802339900782],[0.92,0.4393939393939394,0.05976802457623856],[0.93,0.4393939393939394,0],[0.9400000000000001,0.4393939393939394,0],[0.9500000000000001,0.4393939393939394,0],[0.96,0.4393939393939394,0],[0.97,0.4393939393939394,0],[0.98,0.4393939393939394,0],[0.99,0.4393939393939394,0],[1,0.4393939393939394,0],[0,0.44696969696969696,0.856843620400328],[0.01,0.44696969696969696,0.8578421558916982],[0.02,0.44696969696969696,0.8596198584895929],[0.03,0.44696969696969696,0.8617785216459632],[0.04,0.44696969696969696,0.8635875987424944],[0.05,0.44696969696969696,0],[0.06,0.44696969696969696,0],[0.07,0.44696969696969696,0],[0.08,0.44696969696969696,0.8341971894407194],[0.09,0.44696969696969696,0.8345278133526735],[0.1,0.44696969696969696,0.8347166173190183],[0.11,0.44696969696969696,0.834482120801945],[0.12,0.44696969696969696,0.8335092162337834],[0.13,0.44696969696969696,0.8322104375487167],[0.14,0.44696969696969696,0.8310697506486133],[0.15,0.44696969696969696,0],[0.16,0.44696969696969696,0.7872370103734982],[0.17,0.44696969696969696,0.7781617088428764],[0.18,0.44696969696969696,0.76918006314053],[0.19,0.44696969696969696,0.759899883430025],[0.2,0.44696969696969696,0.7505955552980947],[0.21,0.44696969696969696,0.7410589492015782],[0.22,0.44696969696969696,0.7317364282594685],[0.23,0.44696969696969696,0],[0.24,0.44696969696969696,0.6804283273873823],[0.25,0.44696969696969696,0.6765530939075199],[0.26,0.44696969696969696,0.6712557258849938],[0.27,0.44696969696969696,0.6652775465632481],[0.28,0.44696969696969696,0.6580641643468543],[0.29,0.44696969696969696,0.6507928380936532],[0.3,0.44696969696969696,0.643005879977861],[0.31,0.44696969696969696,0.6364060577863688],[0.32,0.44696969696969696,0],[0.33,0.44696969696969696,0],[0.34,0.44696969696969696,0],[0.35000000000000003,0.44696969696969696,0.543020869180368],[0.36,0.44696969696969696,0.5198862154153752],[0.37,0.44696969696969696,0.5205604425134085],[0.38,0.44696969696969696,0.5189008119749529],[0.39,0.44696969696969696,0.515864760491054],[0.4,0.44696969696969696,0.5124047111086838],[0.41000000000000003,0.44696969696969696,0.5085617694150013],[0.42,0.44696969696969696,0.5046252959602235],[0.43,0.44696969696969696,0.5004870059341915],[0.44,0.44696969696969696,0.49597201883088404],[0.45,0.44696969696969696,0.4912889046707227],[0.46,0.44696969696969696,0.4864648820586188],[0.47000000000000003,0.44696969696969696,0.4822507897316522],[0.48,0.44696969696969696,0],[0.49,0.44696969696969696,0],[0.5,0.44696969696969696,0.4040894226631757],[0.51,0.44696969696969696,0.39766862056464636],[0.52,0.44696969696969696,0.39018836806559953],[0.53,0.44696969696969696,0.3819748349449812],[0.54,0.44696969696969696,0.3740473187702925],[0.55,0.44696969696969696,0.36559701759756635],[0.56,0.44696969696969696,0.3575861420910441],[0.5700000000000001,0.44696969696969696,0.34834183966463983],[0.58,0.44696969696969696,0.339220736570085],[0.59,0.44696969696969696,0.3282863808271218],[0.6,0.44696969696969696,0.3167831570599773],[0.61,0.44696969696969696,0.3674307692430467],[0.62,0.44696969696969696,0.36990701688602057],[0.63,0.44696969696969696,0.3724859207385473],[0.64,0.44696969696969696,0.3745219511654335],[0.65,0.44696969696969696,0.376658730088126],[0.66,0.44696969696969696,0.37823322851171903],[0.67,0.44696969696969696,0.38029427104132796],[0.68,0.44696969696969696,0.370749518451351],[0.6900000000000001,0.44696969696969696,0.35832056655508143],[0.7000000000000001,0.44696969696969696,0.3476684989480624],[0.71,0.44696969696969696,0.33825648689159193],[0.72,0.44696969696969696,0.3291574480234153],[0.73,0.44696969696969696,0.32029785431599667],[0.74,0.44696969696969696,0.3110870741127814],[0.75,0.44696969696969696,0.3016492107590318],[0.76,0.44696969696969696,0.29155904837604046],[0.77,0.44696969696969696,0.2809181664932381],[0.78,0.44696969696969696,0.26952993444106227],[0.79,0.44696969696969696,0.25737035429401534],[0.8,0.44696969696969696,0.24439952584361346],[0.81,0.44696969696969696,0.230517288876125],[0.8200000000000001,0.44696969696969696,0.21555798816048247],[0.8300000000000001,0.44696969696969696,0.19963785953880728],[0.84,0.44696969696969696,0.18220070375917807],[0.85,0.44696969696969696,0.16357124691273764],[0.86,0.44696969696969696,0.14252038731199101],[0.87,0.44696969696969696,0.1196411592561878],[0.88,0.44696969696969696,0],[0.89,0.44696969696969696,0.08378101331509298],[0.9,0.44696969696969696,0.07678791206184099],[0.91,0.44696969696969696,0.06936776478095794],[0.92,0.44696969696969696,0],[0.93,0.44696969696969696,0],[0.9400000000000001,0.44696969696969696,0],[0.9500000000000001,0.44696969696969696,0],[0.96,0.44696969696969696,0],[0.97,0.44696969696969696,0],[0.98,0.44696969696969696,0],[0.99,0.44696969696969696,0],[1,0.44696969696969696,0],[0,0.4545454545454546,0.8555107400090628],[0.01,0.4545454545454546,0.8562961054242944],[0.02,0.4545454545454546,0.8577678068642955],[0.03,0.4545454545454546,0.8594676725858694],[0.04,0.4545454545454546,0.8609488337314884],[0.05,0.4545454545454546,0.8846910773973553],[0.06,0.4545454545454546,0.8891600747646167],[0.07,0.4545454545454546,0.8926929331562311],[0.08,0.4545454545454546,0.8329595858526335],[0.09,0.4545454545454546,0.8333954666657752],[0.1,0.4545454545454546,0.8340248623297851],[0.11,0.4545454545454546,0.83412647137984],[0.12,0.4545454545454546,0.8336236823447875],[0.13,0.4545454545454546,0.8326272581097417],[0.14,0.4545454545454546,0.8318827154483376],[0.15,0.4545454545454546,0],[0.16,0.4545454545454546,0.7888651332273076],[0.17,0.4545454545454546,0.7792819865973242],[0.18,0.4545454545454546,0.7699282607280968],[0.19,0.4545454545454546,0.7606452866442955],[0.2,0.4545454545454546,0.7509467928381828],[0.21,0.4545454545454546,0.7412857507825119],[0.22,0.4545454545454546,0.7314968647278608],[0.23,0.4545454545454546,0.6908100245970488],[0.24,0.4545454545454546,0.6821923441932146],[0.25,0.4545454545454546,0.6785387001622736],[0.26,0.4545454545454546,0.6737164380316814],[0.27,0.4545454545454546,0.6674495492520862],[0.28,0.4545454545454546,0.6604363698508222],[0.29,0.4545454545454546,0.6520933679416234],[0.3,0.4545454545454546,0.643818218601957],[0.31,0.4545454545454546,0.6357397800559759],[0.32,0.4545454545454546,0.5433445061337563],[0.33,0.4545454545454546,0.5384176842217299],[0.34,0.4545454545454546,0.5334955064082223],[0.35000000000000003,0.4545454545454546,0.5449515110687668],[0.36,0.4545454545454546,0.5192644357299234],[0.37,0.4545454545454546,0.5183827838332379],[0.38,0.4545454545454546,0.5160132699612987],[0.39,0.4545454545454546,0.5129347446047121],[0.4,0.4545454545454546,0.5092812887917807],[0.41000000000000003,0.4545454545454546,0.5056156055866232],[0.42,0.4545454545454546,0.5018019139581626],[0.43,0.4545454545454546,0.49791102416679145],[0.44,0.4545454545454546,0.49388273334107335],[0.45,0.4545454545454546,0.48958805018074547],[0.46,0.4545454545454546,0.48550313708627507],[0.47000000000000003,0.4545454545454546,0.48191530620920064],[0.48,0.4545454545454546,0.3915431357597633],[0.49,0.4545454545454546,0.3829422946672574],[0.5,0.4545454545454546,0.40237474330334927],[0.51,0.4545454545454546,0.3957760712977665],[0.52,0.4545454545454546,0.38797678023472326],[0.53,0.4545454545454546,0.3800372066716702],[0.54,0.4545454545454546,0.37191096702406773],[0.55,0.4545454545454546,0.36435188020090925],[0.56,0.4545454545454546,0.35615046317438076],[0.5700000000000001,0.4545454545454546,0.3483320334607932],[0.58,0.4545454545454546,0.33911342061263416],[0.59,0.4545454545454546,0.32979545537843824],[0.6,0.4545454545454546,0.3189861677574195],[0.61,0.4545454545454546,0.33982476469112916],[0.62,0.4545454545454546,0.3706044311462077],[0.63,0.4545454545454546,0.37260551480076853],[0.64,0.4545454545454546,0.37480342274836603],[0.65,0.4545454545454546,0.3764229693250421],[0.66,0.4545454545454546,0.3782975378011081],[0.67,0.4545454545454546,0.3802002915235397],[0.68,0.4545454545454546,0.37146563115999176],[0.6900000000000001,0.4545454545454546,0.35937246463639905],[0.7000000000000001,0.4545454545454546,0.34925692122222607],[0.71,0.4545454545454546,0.340064412073509],[0.72,0.4545454545454546,0.33143251097394344],[0.73,0.4545454545454546,0.32263155027237855],[0.74,0.4545454545454546,0.3137406844425163],[0.75,0.4545454545454546,0.3042545213384868],[0.76,0.4545454545454546,0.2943117228006485],[0.77,0.4545454545454546,0.2836015354407717],[0.78,0.4545454545454546,0.2721797728508801],[0.79,0.4545454545454546,0.259946765431444],[0.8,0.4545454545454546,0.24682096402693943],[0.81,0.4545454545454546,0.23271980211557394],[0.8200000000000001,0.4545454545454546,0.21761417883010858],[0.8300000000000001,0.4545454545454546,0.20112831695671168],[0.84,0.4545454545454546,0.18358405659409277],[0.85,0.4545454545454546,0.1639776721852996],[0.86,0.4545454545454546,0.1424567104833792],[0.87,0.4545454545454546,0.11829767781461378],[0.88,0.4545454545454546,0.08137581658035009],[0.89,0.4545454545454546,0.08402993494811717],[0.9,0.4545454545454546,0.07897266795924261],[0.91,0.4545454545454546,0.07356271180065913],[0.92,0.4545454545454546,0],[0.93,0.4545454545454546,0],[0.9400000000000001,0.4545454545454546,0],[0.9500000000000001,0.4545454545454546,0],[0.96,0.4545454545454546,0],[0.97,0.4545454545454546,0],[0.98,0.4545454545454546,0],[0.99,0.4545454545454546,0],[1,0.4545454545454546,0],[0,0.46212121212121215,0.8534254770926788],[0.01,0.46212121212121215,0.8540937597754437],[0.02,0.46212121212121215,0.8552603172059421],[0.03,0.46212121212121215,0.8567440515600583],[0.04,0.46212121212121215,0.8578209646384134],[0.05,0.46212121212121215,0.8577560331743699],[0.06,0.46212121212121215,0],[0.07,0.46212121212121215,0],[0.08,0.46212121212121215,0.8315538664074853],[0.09,0.46212121212121215,0.8313050990915547],[0.1,0.46212121212121215,0.8318837918470636],[0.11,0.46212121212121215,0.8323830708120996],[0.12,0.46212121212121215,0.8321593731898858],[0.13,0.46212121212121215,0.8317137651616733],[0.14,0.46212121212121215,0.8317805864341637],[0.15,0.46212121212121215,0.7961370333948775],[0.16,0.46212121212121215,0.7879423499549647],[0.17,0.46212121212121215,0.7789110073799583],[0.18,0.46212121212121215,0.7698040089658773],[0.19,0.46212121212121215,0.7602840198516734],[0.2,0.46212121212121215,0.7507692057256108],[0.21,0.46212121212121215,0.7408531568727308],[0.22,0.46212121212121215,0.7311801708368952],[0.23,0.46212121212121215,0],[0.24,0.46212121212121215,0.6836351096082964],[0.25,0.46212121212121215,0.680225644698464],[0.26,0.46212121212121215,0.6753516105408394],[0.27,0.46212121212121215,0.6693600861622141],[0.28,0.46212121212121215,0.6617924914172191],[0.29,0.46212121212121215,0.6534031620110919],[0.3,0.46212121212121215,0.6440808329964711],[0.31,0.46212121212121215,0.6352633747271259],[0.32,0.46212121212121215,0],[0.33,0.46212121212121215,0],[0.34,0.46212121212121215,0],[0.35000000000000003,0.46212121212121215,0.5483588437441816],[0.36,0.46212121212121215,0.520472538893733],[0.37,0.46212121212121215,0.5180575950816511],[0.38,0.46212121212121215,0.5147289970328832],[0.39,0.46212121212121215,0.5108066987288633],[0.4,0.46212121212121215,0.5069330674425208],[0.41000000000000003,0.46212121212121215,0.5030291337340405],[0.42,0.46212121212121215,0.49934171466039373],[0.43,0.46212121212121215,0.4957000772682073],[0.44,0.46212121212121215,0.4920055787171005],[0.45,0.46212121212121215,0.48835241633142834],[0.46,0.46212121212121215,0.4847823490877956],[0.47000000000000003,0.46212121212121215,0.48185440869530183],[0.48,0.46212121212121215,0],[0.49,0.46212121212121215,0],[0.5,0.46212121212121215,0.4012625066964739],[0.51,0.46212121212121215,0.39408443459917186],[0.52,0.46212121212121215,0.38609571213822635],[0.53,0.46212121212121215,0.3778594877096546],[0.54,0.46212121212121215,0.3701763074390993],[0.55,0.46212121212121215,0.362487219228223],[0.56,0.46212121212121215,0.35538140089723996],[0.5700000000000001,0.46212121212121215,0.347503551521789],[0.58,0.46212121212121215,0.3398651758462279],[0.59,0.46212121212121215,0.331014247258987],[0.6,0.46212121212121215,0.32206031664340606],[0.61,0.46212121212121215,0],[0.62,0.46212121212121215,0.3712783366471899],[0.63,0.46212121212121215,0.3729815386437523],[0.64,0.46212121212121215,0.3744069042884699],[0.65,0.46212121212121215,0.37596669684115835],[0.66,0.46212121212121215,0.37698872280169315],[0.67,0.46212121212121215,0.3782829879855795],[0.68,0.46212121212121215,0.3693718528095604],[0.6900000000000001,0.46212121212121215,0.3590184885400291],[0.7000000000000001,0.46212121212121215,0.3498090583356245],[0.71,0.46212121212121215,0.3413931015245617],[0.72,0.46212121212121215,0.3330196871161585],[0.73,0.46212121212121215,0.32467622959101],[0.74,0.46212121212121215,0.3158190409228616],[0.75,0.46212121212121215,0.3065935751258961],[0.76,0.46212121212121215,0.2965996322256973],[0.77,0.46212121212121215,0.2859586226605523],[0.78,0.46212121212121215,0.274480304388947],[0.79,0.46212121212121215,0.26214897813462235],[0.8,0.46212121212121215,0.24890526807736774],[0.81,0.46212121212121215,0.23465550924911838],[0.8200000000000001,0.46212121212121215,0.21918070893538008],[0.8300000000000001,0.46212121212121215,0.20262567655366154],[0.84,0.46212121212121215,0.1843358558556721],[0.85,0.46212121212121215,0.16460796224243604],[0.86,0.46212121212121215,0.1419643055072436],[0.87,0.46212121212121215,0.11705575487003772],[0.88,0.46212121212121215,0],[0.89,0.46212121212121215,0.0846590592324512],[0.9,0.46212121212121215,0.08133836360937073],[0.91,0.46212121212121215,0.07775460171863963],[0.92,0.46212121212121215,0],[0.93,0.46212121212121215,0],[0.9400000000000001,0.46212121212121215,0],[0.9500000000000001,0.46212121212121215,0],[0.96,0.46212121212121215,0],[0.97,0.46212121212121215,0],[0.98,0.46212121212121215,0],[0.99,0.46212121212121215,0],[1,0.46212121212121215,0],[0,0.4696969696969697,0.8505259732640474],[0.01,0.4696969696969697,0.8510775065375734],[0.02,0.4696969696969697,0.8521794791366828],[0.03,0.4696969696969697,0.8534932574205503],[0.04,0.4696969696969697,0.8548021738717217],[0.05,0.4696969696969697,0.855509430709612],[0.06,0.4696969696969697,0.8865942425440475],[0.07,0.4696969696969697,0.8893830031794311],[0.08,0.4696969696969697,0.8914085801290844],[0.09,0.4696969696969697,0.8275846563022725],[0.1,0.4696969696969697,0.8285546465748699],[0.11,0.4696969696969697,0.8291599676116028],[0.12,0.4696969696969697,0.8293016993772142],[0.13,0.4696969696969697,0.829026248366681],[0.14,0.4696969696969697,0.8418295867992418],[0.15,0.4696969696969697,0.7962408233569747],[0.16,0.4696969696969697,0.7869966988271851],[0.17,0.4696969696969697,0.7778740309577878],[0.18,0.4696969696969697,0.7685342352695639],[0.19,0.4696969696969697,0.7592950107477004],[0.2,0.4696969696969697,0.7495777202529589],[0.21,0.4696969696969697,0.7399768573227712],[0.22,0.4696969696969697,0.7302408457573017],[0.23,0.4696969696969697,0.7393418510176254],[0.24,0.4696969696969697,0.6848346440937265],[0.25,0.4696969696969697,0.6812961509149217],[0.26,0.4696969696969697,0.6765912880907927],[0.27,0.4696969696969697,0.6703581551803952],[0.28,0.4696969696969697,0.6629317440963942],[0.29,0.4696969696969697,0.6539348274231715],[0.3,0.4696969696969697,0.6444531013371719],[0.31,0.4696969696969697,0.6348843673825082],[0.32,0.4696969696969697,0.6444746095740961],[0.33,0.4696969696969697,0.5603358989593525],[0.34,0.4696969696969697,0.5518181551390428],[0.35000000000000003,0.4696969696969697,0.5526142902267164],[0.36,0.4696969696969697,0.5240416124805509],[0.37,0.4696969696969697,0.5195345266706453],[0.38,0.4696969696969697,0.514574148521747],[0.39,0.4696969696969697,0.5097948930775695],[0.4,0.4696969696969697,0.5052204687573834],[0.41000000000000003,0.4696969696969697,0.5011553602231813],[0.42,0.4696969696969697,0.4974161488381068],[0.43,0.4696969696969697,0.49398290338890855],[0.44,0.4696969696969697,0.49073346478642577],[0.45,0.4696969696969697,0.487547396690587],[0.46,0.4696969696969697,0.4846936899572183],[0.47000000000000003,0.4696969696969697,0.482024475414339],[0.48,0.4696969696969697,0.4633451723082495],[0.49,0.4696969696969697,0.3987722739322264],[0.5,0.4696969696969697,0.4006200303140133],[0.51,0.4696969696969697,0.39273838584542375],[0.52,0.4696969696969697,0.38426255192524683],[0.53,0.4696969696969697,0.3760345223445009],[0.54,0.4696969696969697,0.36822104638635444],[0.55,0.4696969696969697,0.3611936937997881],[0.56,0.4696969696969697,0.35411783869263813],[0.5700000000000001,0.4696969696969697,0.3475032806864685],[0.58,0.4696969696969697,0.3401495407308969],[0.59,0.4696969696969697,0.3330206298001312],[0.6,0.4696969696969697,0.3253694630916865],[0.61,0.4696969696969697,0.38763627387259586],[0.62,0.4696969696969697,0.37220235728415263],[0.63,0.4696969696969697,0.37317100563958916],[0.64,0.4696969696969697,0.37424835367688825],[0.65,0.4696969696969697,0.37474416690252366],[0.66,0.4696969696969697,0.375287448048983],[0.67,0.4696969696969697,0.37543083302006347],[0.68,0.4696969696969697,0.36562576690445614],[0.6900000000000001,0.4696969696969697,0.3575475509925844],[0.7000000000000001,0.4696969696969697,0.34977743038479636],[0.71,0.4696969696969697,0.34201295426973455],[0.72,0.4696969696969697,0.33429018182409675],[0.73,0.4696969696969697,0.32612229105948615],[0.74,0.4696969696969697,0.31764424472779634],[0.75,0.4696969696969697,0.3084183867998822],[0.76,0.4696969696969697,0.29860035017750336],[0.77,0.4696969696969697,0.28791043845889813],[0.78,0.4696969696969697,0.2764114405672769],[0.79,0.4696969696969697,0.26400969959546333],[0.8,0.4696969696969697,0.2506240688280923],[0.81,0.4696969696969697,0.23615556398904486],[0.8200000000000001,0.4696969696969697,0.22058314510839316],[0.8300000000000001,0.4696969696969697,0.20349138794182536],[0.84,0.4696969696969697,0.18521703514090454],[0.85,0.4696969696969697,0.16461324521038312],[0.86,0.4696969696969697,0.14170573063535408],[0.87,0.4696969696969697,0.11575029427389527],[0.88,0.4696969696969697,0.15102127943095686],[0.89,0.4696969696969697,0.08572936769767259],[0.9,0.4696969696969697,0.08397367691366847],[0.91,0.4696969696969697,0.08200433258280507],[0.92,0.4696969696969697,0],[0.93,0.4696969696969697,0],[0.9400000000000001,0.4696969696969697,0],[0.9500000000000001,0.4696969696969697,0],[0.96,0.4696969696969697,0],[0.97,0.4696969696969697,0],[0.98,0.4696969696969697,0],[0.99,0.4696969696969697,0],[1,0.4696969696969697,0],[0,0.4772727272727273,0.8468397262282532],[0.01,0.4772727272727273,0.8473984764929234],[0.02,0.4772727272727273,0.8483833750784728],[0.03,0.4772727272727273,0.8498196087172429],[0.04,0.4772727272727273,0.8511878353188579],[0.05,0.4772727272727273,0.8522630916578777],[0.06,0.4772727272727273,0],[0.07,0.4772727272727273,0],[0.08,0.4772727272727273,0],[0.09,0.4772727272727273,0.823454612536609],[0.1,0.4772727272727273,0.8242810566658005],[0.11,0.4772727272727273,0.8249787335097094],[0.12,0.4772727272727273,0.8251867797803716],[0.13,0.4772727272727273,0.8251251869370043],[0.14,0.4772727272727273,0],[0.15,0.4772727272727273,0.795623089242026],[0.16,0.4772727272727273,0.7854932531883645],[0.17,0.4772727272727273,0.7758347743893982],[0.18,0.4772727272727273,0.7666231629957787],[0.19,0.4772727272727273,0.7571836135562174],[0.2,0.4772727272727273,0.7479161692723613],[0.21,0.4772727272727273,0.7383845751906364],[0.22,0.4772727272727273,0.729375320750435],[0.23,0.4772727272727273,0],[0.24,0.4772727272727273,0.6851456895957928],[0.25,0.4772727272727273,0.681851077821281],[0.26,0.4772727272727273,0.6770945391699597],[0.27,0.4772727272727273,0.6709978240451772],[0.28,0.4772727272727273,0.6632676162256301],[0.29,0.4772727272727273,0.6543724764567707],[0.3,0.4772727272727273,0.6444633452241691],[0.31,0.4772727272727273,0.6347463531319217],[0.32,0.4772727272727273,0],[0.33,0.4772727272727273,0],[0.34,0.4772727272727273,0],[0.35000000000000003,0.4772727272727273,0.5575037291219658],[0.36,0.4772727272727273,0.5292640888402322],[0.37,0.4772727272727273,0.5221950020479534],[0.38,0.4772727272727273,0.5155848111718296],[0.39,0.4772727272727273,0.5095911535709075],[0.4,0.4772727272727273,0.5044423396229281],[0.41000000000000003,0.4772727272727273,0.4999797946732533],[0.42,0.4772727272727273,0.49623537099801557],[0.43,0.4772727272727273,0.49298314357519163],[0.44,0.4772727272727273,0.49007917687185293],[0.45,0.4772727272727273,0.48756937744843226],[0.46,0.4772727272727273,0.48553618320122666],[0.47000000000000003,0.4772727272727273,0],[0.48,0.4772727272727273,0],[0.49,0.4772727272727273,0],[0.5,0.4772727272727273,0.4002860496116902],[0.51,0.4772727272727273,0.3915746964748341],[0.52,0.4772727272727273,0.38271021845075015],[0.53,0.4772727272727273,0.37428645712694814],[0.54,0.4772727272727273,0.3667547877021489],[0.55,0.4772727272727273,0.35981226206335737],[0.56,0.4772727272727273,0.35359385661226506],[0.5700000000000001,0.4772727272727273,0.34725959971086134],[0.58,0.4772727272727273,0.34128602299962824],[0.59,0.4772727272727273,0.3348904988282847],[0.6,0.4772727272727273,0.328817681783774],[0.61,0.4772727272727273,0],[0.62,0.4772727272727273,0.37341362117601196],[0.63,0.4772727272727273,0.3737872716652278],[0.64,0.4772727272727273,0.37378158161041053],[0.65,0.4772727272727273,0.37373538248004334],[0.66,0.4772727272727273,0.37311848633899425],[0.67,0.4772727272727273,0.3725516989902533],[0.68,0.4772727272727273,0.36180920205016004],[0.6900000000000001,0.4772727272727273,0.3558688293574641],[0.7000000000000001,0.4772727272727273,0.3492740833420507],[0.71,0.4772727272727273,0.34240386571063275],[0.72,0.4772727272727273,0.33505280340235455],[0.73,0.4772727272727273,0.3273809615905173],[0.74,0.4772727272727273,0.318992419142275],[0.75,0.4772727272727273,0.31004360459631364],[0.76,0.4772727272727273,0.3001973994162922],[0.77,0.4772727272727273,0.2895764509517793],[0.78,0.4772727272727273,0.27801945669633216],[0.79,0.4772727272727273,0.26550644393581757],[0.8,0.4772727272727273,0.25199093812798307],[0.81,0.4772727272727273,0.2373762276751372],[0.8200000000000001,0.4772727272727273,0.2214458711602168],[0.8300000000000001,0.4772727272727273,0.20435122113773585],[0.84,0.4772727272727273,0.185412628929933],[0.85,0.4772727272727273,0.16484705714969247],[0.86,0.4772727272727273,0.1410095896246721],[0.87,0.4772727272727273,0.11457010084356008],[0.88,0.4772727272727273,0],[0.89,0.4772727272727273,0.0873845061829092],[0.9,0.4772727272727273,0.08672480917511186],[0.91,0.4772727272727273,0.08605092289448017],[0.92,0.4772727272727273,0],[0.93,0.4772727272727273,0],[0.9400000000000001,0.4772727272727273,0],[0.9500000000000001,0.4772727272727273,0],[0.96,0.4772727272727273,0],[0.97,0.4772727272727273,0],[0.98,0.4772727272727273,0],[0.99,0.4772727272727273,0],[1,0.4772727272727273,0],[0,0.48484848484848486,0.842579515393526],[0.01,0.48484848484848486,0.8430776197441769],[0.02,0.48484848484848486,0.8441766143785999],[0.03,0.48484848484848486,0.8455547689447503],[0.04,0.48484848484848486,0.8471855909702972],[0.05,0.48484848484848486,0.8483937825633017],[0.06,0.48484848484848486,0.8424932315938405],[0.07,0.48484848484848486,0.8431718750977407],[0.08,0.48484848484848486,0.8437991242909069],[0.09,0.48484848484848486,0.8189169876471366],[0.1,0.48484848484848486,0.8195082226447974],[0.11,0.48484848484848486,0.8200127920483637],[0.12,0.48484848484848486,0.8202078053394046],[0.13,0.48484848484848486,0.8201950620830117],[0.14,0.48484848484848486,0.7914529973402495],[0.15,0.48484848484848486,0.7939062937231814],[0.16,0.48484848484848486,0.782860564568377],[0.17,0.48484848484848486,0.7730521828344264],[0.18,0.48484848484848486,0.7636037087149734],[0.19,0.48484848484848486,0.754563404528982],[0.2,0.48484848484848486,0.7452651198549674],[0.21,0.48484848484848486,0.7362776189212641],[0.22,0.48484848484848486,0.7274514316845128],[0.23,0.48484848484848486,0.7265990042567062],[0.24,0.48484848484848486,0.6851493966853188],[0.25,0.48484848484848486,0.6819186682586587],[0.26,0.48484848484848486,0.6771964572477089],[0.27,0.48484848484848486,0.6709469641879234],[0.28,0.48484848484848486,0.663319426166608],[0.29,0.48484848484848486,0.6542236946594243],[0.3,0.48484848484848486,0.6445116637560374],[0.31,0.48484848484848486,0.6348406419325006],[0.32,0.48484848484848486,0.5651539235972494],[0.33,0.48484848484848486,0.5561699824310313],[0.34,0.48484848484848486,0.5404018210044549],[0.35000000000000003,0.48484848484848486,0.56240764193594],[0.36,0.48484848484848486,0.5351073071086307],[0.37,0.48484848484848486,0.525696562155654],[0.38,0.48484848484848486,0.5173637334135917],[0.39,0.48484848484848486,0.510343726092645],[0.4,0.48484848484848486,0.5044423413137276],[0.41000000000000003,0.48484848484848486,0.49969167753699195],[0.42,0.48484848484848486,0.4958308831011899],[0.43,0.48484848484848486,0.49273813619516704],[0.44,0.48484848484848486,0.49020223231692994],[0.45,0.48484848484848486,0.4881340456240385],[0.46,0.48484848484848486,0.48671207374777514],[0.47000000000000003,0.48484848484848486,0],[0.48,0.48484848484848486,0.39202031426074735],[0.49,0.48484848484848486,0.3820628991504677],[0.5,0.48484848484848486,0.40009046398084636],[0.51,0.48484848484848486,0.39053344441170235],[0.52,0.48484848484848486,0.38134539951583135],[0.53,0.48484848484848486,0.37294546910419285],[0.54,0.48484848484848486,0.3654998350656784],[0.55,0.48484848484848486,0.3590665437013746],[0.56,0.48484848484848486,0.3531559067033165],[0.5700000000000001,0.48484848484848486,0.3478217166150922],[0.58,0.48484848484848486,0.3424316190597298],[0.59,0.48484848484848486,0.3375079583582217],[0.6,0.48484848484848486,0.3327602676204914],[0.61,0.48484848484848486,0.3296448387124113],[0.62,0.48484848484848486,0.37470870793486416],[0.63,0.48484848484848486,0.3743310146467149],[0.64,0.48484848484848486,0.3737381437415798],[0.65,0.48484848484848486,0.37251546223144394],[0.66,0.48484848484848486,0.3712579165897913],[0.67,0.48484848484848486,0.369667557329718],[0.68,0.48484848484848486,0.35908051376030237],[0.6900000000000001,0.48484848484848486,0.35443591701818966],[0.7000000000000001,0.48484848484848486,0.34884588507340053],[0.71,0.48484848484848486,0.3425255367672914],[0.72,0.48484848484848486,0.33575488342248416],[0.73,0.48484848484848486,0.32828788437880835],[0.74,0.48484848484848486,0.32026126819728873],[0.75,0.48484848484848486,0.3113317230115665],[0.76,0.48484848484848486,0.3016440629444598],[0.77,0.48484848484848486,0.2909681992877081],[0.78,0.48484848484848486,0.279356419662956],[0.79,0.48484848484848486,0.2667485088064223],[0.8,0.48484848484848486,0.253053858531364],[0.81,0.48484848484848486,0.23820836602354356],[0.8200000000000001,0.48484848484848486,0.22218532741318173],[0.8300000000000001,0.48484848484848486,0.20460612325198807],[0.84,0.48484848484848486,0.18578090775663675],[0.85,0.48484848484848486,0.16449617068491412],[0.86,0.48484848484848486,0.14058647564996463],[0.87,0.48484848484848486,0.11323951378469754],[0.88,0.48484848484848486,0.07967510569338165],[0.89,0.48484848484848486,0.08946477679208852],[0.9,0.48484848484848486,0.08965944160742739],[0.91,0.48484848484848486,0.08984606986918031],[0.92,0.48484848484848486,0],[0.93,0.48484848484848486,0],[0.9400000000000001,0.48484848484848486,0],[0.9500000000000001,0.48484848484848486,0],[0.96,0.48484848484848486,0],[0.97,0.48484848484848486,0],[0.98,0.48484848484848486,0],[0.99,0.48484848484848486,0],[1,0.48484848484848486,0],[0,0.49242424242424243,0.8378959818952623],[0.01,0.49242424242424243,0.838476734891943],[0.02,0.49242424242424243,0.839462960225005],[0.03,0.49242424242424243,0.8410794642790842],[0.04,0.49242424242424243,0.8427144676035763],[0.05,0.49242424242424243,0.8442008160482493],[0.06,0.49242424242424243,0],[0.07,0.49242424242424243,0],[0.08,0.49242424242424243,0],[0.09,0.49242424242424243,0.8141357754272871],[0.1,0.49242424242424243,0.8143848633974098],[0.11,0.49242424242424243,0.8145244910232674],[0.12,0.49242424242424243,0.8145346324785819],[0.13,0.49242424242424243,0.814441570338099],[0.14,0.49242424242424243,0],[0.15,0.49242424242424243,0.7904099665936544],[0.16,0.49242424242424243,0.7790395537385563],[0.17,0.49242424242424243,0.7690996513128037],[0.18,0.49242424242424243,0.7600160374953995],[0.19,0.49242424242424243,0.7509891640764864],[0.2,0.49242424242424243,0.7422597474554012],[0.21,0.49242424242424243,0.7334621421761236],[0.22,0.49242424242424243,0.7251618504509587],[0.23,0.49242424242424243,0],[0.24,0.49242424242424243,0.6852675439502003],[0.25,0.49242424242424243,0.6817005384723307],[0.26,0.49242424242424243,0.6767901418298866],[0.27,0.49242424242424243,0.6704808108537439],[0.28,0.49242424242424243,0.6627279093885199],[0.29,0.49242424242424243,0.6537925991464071],[0.3,0.49242424242424243,0.6442138805925927],[0.31,0.49242424242424243,0.6349920400392248],[0.32,0.49242424242424243,0],[0.33,0.49242424242424243,0],[0.34,0.49242424242424243,0],[0.35000000000000003,0.49242424242424243,0.5672707273931035],[0.36,0.49242424242424243,0.5408918429881469],[0.37,0.49242424242424243,0.5296304209436704],[0.38,0.49242424242424243,0.5199117500380841],[0.39,0.49242424242424243,0.5118245347178889],[0.4,0.49242424242424243,0.5053468191390618],[0.41000000000000003,0.49242424242424243,0.5001630991686549],[0.42,0.49242424242424243,0.49625151215042906],[0.43,0.49242424242424243,0.4932534904708598],[0.44,0.49242424242424243,0.49100496058187193],[0.45,0.49242424242424243,0.48935278920224945],[0.46,0.49242424242424243,0.48831203556165514],[0.47000000000000003,0.49242424242424243,0],[0.48,0.49242424242424243,0],[0.49,0.49242424242424243,0.4069519677512872],[0.5,0.49242424242424243,0.398841976596117],[0.51,0.49242424242424243,0.3894956244287679],[0.52,0.49242424242424243,0.3802937673596224],[0.53,0.49242424242424243,0.3719501408046527],[0.54,0.49242424242424243,0.36480929474686885],[0.55,0.49242424242424243,0.35866484283675576],[0.56,0.49242424242424243,0.3534037513096634],[0.5700000000000001,0.49242424242424243,0.3485842398343034],[0.58,0.49242424242424243,0.34426149421988195],[0.59,0.49242424242424243,0.3401508804374722],[0.6,0.49242424242424243,0.33704510265367255],[0.61,0.49242424242424243,0.3356094405527162],[0.62,0.49242424242424243,0.3761000490605288],[0.63,0.49242424242424243,0.3752560706427974],[0.64,0.49242424242424243,0.37365755838254283],[0.65,0.49242424242424243,0.3717921975732309],[0.66,0.49242424242424243,0.36956635906846014],[0.67,0.49242424242424243,0.3675169034922946],[0.68,0.49242424242424243,0.3576747409113413],[0.6900000000000001,0.49242424242424243,0.35361725011074185],[0.7000000000000001,0.49242424242424243,0.34852837473367776],[0.71,0.49242424242424243,0.3427679174782137],[0.72,0.49242424242424243,0.33629982848033363],[0.73,0.49242424242424243,0.3292469131998594],[0.74,0.49242424242424243,0.32131367735700245],[0.75,0.49242424242424243,0.31262174209333704],[0.76,0.49242424242424243,0.3028968571474152],[0.77,0.49242424242424243,0.29224179446810417],[0.78,0.49242424242424243,0.280540435211538],[0.79,0.49242424242424243,0.2677584814749506],[0.8,0.49242424242424243,0.2539028689794456],[0.81,0.49242424242424243,0.23886626229399638],[0.8200000000000001,0.49242424242424243,0.22250432754913924],[0.8300000000000001,0.49242424242424243,0.2049522702787338],[0.84,0.49242424242424243,0.1855882151931636],[0.85,0.49242424242424243,0.1645055691206998],[0.86,0.49242424242424243,0.13993835578003577],[0.87,0.49242424242424243,0.11243548539154415],[0.88,0.49242424242424243,0],[0.89,0.49242424242424243,0.09168526797130014],[0.9,0.49242424242424243,0.09271639713861157],[0.91,0.49242424242424243,0.09390723728534096],[0.92,0.49242424242424243,0],[0.93,0.49242424242424243,0],[0.9400000000000001,0.49242424242424243,0],[0.9500000000000001,0.49242424242424243,0],[0.96,0.49242424242424243,0],[0.97,0.49242424242424243,0],[0.98,0.49242424242424243,0],[0.99,0.49242424242424243,0],[1,0.49242424242424243,0],[0,0.5,0.8330641747610634],[0.01,0.5,0.8335383917580595],[0.02,0.5,0.8347294375205965],[0.03,0.5,0.8361907547346031],[0.04,0.5,0.8381569962838523],[0.05,0.5,0.8397424097568031],[0.06,0.5,0.8353148667311321],[0.07,0.5,0.8393730546463577],[0.08,0.5,0.8196774623419092],[0.09,0.5,0.8092635981448366],[0.1,0.5,0.8090372435667841],[0.11,0.5,0.808689335816208],[0.12,0.5,0.8082155079871899],[0.13,0.5,0.8079423966939423],[0.14,0.5,0.7925546893034099],[0.15,0.5,0.7835719677017219],[0.16,0.5,0.7736607299897924],[0.17,0.5,0.7644352002116545],[0.18,0.5,0.7555767537126159],[0.19,0.5,0.7471057608591725],[0.2,0.5,0.7385858790445853],[0.21,0.5,0.730451929746882],[0.22,0.5,0.7226431216120717],[0.23,0.5,0.7280179156861888],[0.24,0.5,0.6848699730246666],[0.25,0.5,0.6810662876506379],[0.26,0.5,0.6759117309898834],[0.27,0.5,0.6694448161254847],[0.28,0.5,0.6616419933918467],[0.29,0.5,0.6528186245253523],[0.3,0.5,0.6436222398010023],[0.31,0.5,0.6351031572287363],[0.32,0.5,0.6604705477177056],[0.33,0.5,0.5544241966112089],[0.34,0.5,0.5368129663028093],[0.35000000000000003,0.5,0.5715962025157185],[0.36,0.5,0.5459811834033199],[0.37,0.5,0.5339306521581474],[0.38,0.5,0.5231222742877413],[0.39,0.5,0.5141289977504402],[0.4,0.5,0.5068994536437357],[0.41000000000000003,0.5,0.5014430502802816],[0.42,0.5,0.49732179967883877],[0.43,0.5,0.494462573405257],[0.44,0.5,0.4924257492460484],[0.45,0.5,0.49105140102431255],[0.46,0.5,0.4902485823880157],[0.47000000000000003,0.5,0.3977466498390853],[0.48,0.5,0.3903291494098242],[0.49,0.5,0.40793721561549146],[0.5,0.5,0.39873615106142807],[0.51,0.5,0.38905340934429433],[0.52,0.5,0.379703453301507],[0.53,0.5,0.37153638893197694],[0.54,0.5,0.3645901591308184],[0.55,0.5,0.3588703987129701],[0.56,0.5,0.3540615214539255],[0.5700000000000001,0.5,0.34995313416554763],[0.58,0.5,0.3462289848424306],[0.59,0.5,0.34293815702581754],[0.6,0.5,0.3403029238756946],[0.61,0.5,0.3386340389646782],[0.62,0.5,0.37785709790523114],[0.63,0.5,0.3763302995932464],[0.64,0.5,0.37404619427801045],[0.65,0.5,0.3711792007904966],[0.66,0.5,0.3683203954965466],[0.67,0.5,0.3657296587263004],[0.68,0.5,0.3573866263025224],[0.6900000000000001,0.5,0.3533043440026105],[0.7000000000000001,0.5,0.3485196202237556],[0.71,0.5,0.3430620346812987],[0.72,0.5,0.33700480220739404],[0.73,0.5,0.3301313975555412],[0.74,0.5,0.32249602417748907],[0.75,0.5,0.31381392910415795],[0.76,0.5,0.3041950187624005],[0.77,0.5,0.29345639644264826],[0.78,0.5,0.28163127681504463],[0.79,0.5,0.2687176329753782],[0.8,0.5,0.2546122781183461],[0.81,0.5,0.2393400309723416],[0.8200000000000001,0.5,0.22285946155663539],[0.8300000000000001,0.5,0.20490616207448656],[0.84,0.5,0.18573587921616774],[0.85,0.5,0.16415974208977502],[0.86,0.5,0.13982750650851483],[0.87,0.5,0.11194492465441944],[0.88,0.5,0.12630952916718668],[0.89,0.5,0.09393640109545795],[0.9,0.5,0.09601514908175326],[0.91,0.5,0.09836999900237231],[0.92,0.5,0],[0.93,0.5,0],[0.9400000000000001,0.5,0],[0.9500000000000001,0.5,0],[0.96,0.5,0],[0.97,0.5,0],[0.98,0.5,0],[0.99,0.5,0],[1,0.5,0],[0,0.5075757575757576,0.8280986206422921],[0.01,0.5075757575757576,0.8287106435294684],[0.02,0.5075757575757576,0.8296632655478826],[0.03,0.5075757575757576,0.8314862799532736],[0.04,0.5075757575757576,0.8333168790969241],[0.05,0.5075757575757576,0.8351530258614446],[0.06,0.5075757575757576,0.835378549368896],[0.07,0.5075757575757576,0],[0.08,0.5075757575757576,0],[0.09,0.5075757575757576,0.8045054252365701],[0.1,0.5075757575757576,0.8037011770850332],[0.11,0.5075757575757576,0.8024959572393211],[0.12,0.5075757575757576,0.8013478799905867],[0.13,0.5075757575757576,0.8005505331047259],[0.14,0.5075757575757576,0.7894162894677874],[0.15,0.5075757575757576,0.778107215868628],[0.16,0.5075757575757576,0.7682557499296112],[0.17,0.5075757575757576,0.7592724701781192],[0.18,0.5075757575757576,0.7509099014827689],[0.19,0.5075757575757576,0.7427128598656452],[0.2,0.5075757575757576,0.7347920195979512],[0.21,0.5075757575757576,0.727060536101725],[0.22,0.5075757575757576,0.71998939394654],[0.23,0.5075757575757576,0],[0.24,0.5075757575757576,0.6841917938693908],[0.25,0.5075757575757576,0.6800224935203794],[0.26,0.5075757575757576,0.6745990321240796],[0.27,0.5075757575757576,0.6678673183105679],[0.28,0.5075757575757576,0.6600558124900641],[0.29,0.5075757575757576,0.6512992360634413],[0.3,0.5075757575757576,0.6426375366043894],[0.31,0.5075757575757576,0.6352078858478492],[0.32,0.5075757575757576,0],[0.33,0.5075757575757576,0],[0.34,0.5075757575757576,0],[0.35000000000000003,0.5075757575757576,0.575277386291393],[0.36,0.5075757575757576,0.5498125410719114],[0.37,0.5075757575757576,0.539142114827436],[0.38,0.5075757575757576,0.5271500271240394],[0.39,0.5075757575757576,0.5170098265054788],[0.4,0.5075757575757576,0.5091678826306023],[0.41000000000000003,0.5075757575757576,0.503167202855592],[0.42,0.5075757575757576,0.4990347882567634],[0.43,0.5075757575757576,0.49613996700117236],[0.44,0.5075757575757576,0.4943263068182557],[0.45,0.5075757575757576,0.4930810713323502],[0.46,0.5075757575757576,0.49221847016333453],[0.47000000000000003,0.5075757575757576,0],[0.48,0.5075757575757576,0],[0.49,0.5075757575757576,0.4094018574938608],[0.5,0.5075757575757576,0.3993848728328384],[0.51,0.5075757575757576,0.3891459873381615],[0.52,0.5075757575757576,0.3797927287439574],[0.53,0.5075757575757576,0.37160911754204345],[0.54,0.5075757575757576,0.36496962796114657],[0.55,0.5075757575757576,0.3595975597087592],[0.56,0.5075757575757576,0.3552644407209389],[0.5700000000000001,0.5075757575757576,0.3517565523971608],[0.58,0.5075757575757576,0.34873601390885706],[0.59,0.5075757575757576,0.3455573556651648],[0.6,0.5075757575757576,0.34362501495066033],[0.61,0.5075757575757576,0.34239155116051206],[0.62,0.5075757575757576,0.3793650125025583],[0.63,0.5075757575757576,0.37784881447889906],[0.64,0.5075757575757576,0.3747195356648722],[0.65,0.5075757575757576,0.3709670712126907],[0.66,0.5075757575757576,0.36711102087994596],[0.67,0.5075757575757576,0.3631067293979752],[0.68,0.5075757575757576,0.3578826954187959],[0.6900000000000001,0.5075757575757576,0.35336752354453305],[0.7000000000000001,0.5075757575757576,0.3486944922966738],[0.71,0.5075757575757576,0.3435567638995485],[0.72,0.5075757575757576,0.33775168361136737],[0.73,0.5075757575757576,0.33120996660912966],[0.74,0.5075757575757576,0.3236623269387163],[0.75,0.5075757575757576,0.3151708825110232],[0.76,0.5075757575757576,0.3055000102090062],[0.77,0.5075757575757576,0.29472736998143634],[0.78,0.5075757575757576,0.28278822425974226],[0.79,0.5075757575757576,0.26963465408381515],[0.8,0.5075757575757576,0.25536110388553507],[0.81,0.5075757575757576,0.2398492737148954],[0.8200000000000001,0.5075757575757576,0.2230851874174198],[0.8300000000000001,0.5075757575757576,0.20517344085964556],[0.84,0.5075757575757576,0.1856237501639046],[0.85,0.5075757575757576,0.1643871537090143],[0.86,0.5075757575757576,0.1396899243386988],[0.87,0.5075757575757576,0.11194233085903618],[0.88,0.5075757575757576,0],[0.89,0.5075757575757576,0.09638633857662277],[0.9,0.5075757575757576,0.09944729594038627],[0.91,0.5075757575757576,0.10294428365705371],[0.92,0.5075757575757576,0],[0.93,0.5075757575757576,0],[0.9400000000000001,0.5075757575757576,0],[0.9500000000000001,0.5075757575757576,0],[0.96,0.5075757575757576,0],[0.97,0.5075757575757576,0],[0.98,0.5075757575757576,0],[0.99,0.5075757575757576,0],[1,0.5075757575757576,0],[0,0.5151515151515151,0.8232056472298854],[0.01,0.5151515151515151,0.8236433444671368],[0.02,0.5151515151515151,0.8249481614462069],[0.03,0.5151515151515151,0.8264743276562192],[0.04,0.5151515151515151,0.8289533492444787],[0.05,0.5151515151515151,0.8310837306543213],[0.06,0.5151515151515151,0.8329411806377391],[0.07,0.5151515151515151,0.7936110758231321],[0.08,0.5151515151515151,0.7923004816467566],[0.09,0.5151515151515151,0.800316127224153],[0.1,0.5151515151515151,0.7984891077822149],[0.11,0.5151515151515151,0.7961998310944971],[0.12,0.5151515151515151,0.7937809174081796],[0.13,0.5151515151515151,0.7919652040012277],[0.14,0.5151515151515151,0.7840808712424538],[0.15,0.5151515151515151,0.772242604436428],[0.16,0.5151515151515151,0.7625287911127898],[0.17,0.5151515151515151,0.7540119482091803],[0.18,0.5151515151515151,0.7460125650451408],[0.19,0.5151515151515151,0.7383027713585276],[0.2,0.5151515151515151,0.7307431146775056],[0.21,0.5151515151515151,0.7235737173007825],[0.22,0.5151515151515151,0.7169437739444684],[0.23,0.5151515151515151,0.7051540467996487],[0.24,0.5151515151515151,0.6835263786718271],[0.25,0.5151515151515151,0.6787387230960372],[0.26,0.5151515151515151,0.6728489088536582],[0.27,0.5151515151515151,0.665954566795755],[0.28,0.5151515151515151,0.6579895102173409],[0.29,0.5151515151515151,0.6495021053215193],[0.3,0.5151515151515151,0.6407722879030827],[0.31,0.5151515151515151,0.6869163638872766],[0.32,0.5151515151515151,0.5599380370406452],[0.33,0.5151515151515151,0.5497700531579639],[0.34,0.5151515151515151,0.5391924911880361],[0.35000000000000003,0.5151515151515151,0.5783590780308655],[0.36,0.5151515151515151,0.4956503261356539],[0.37,0.5151515151515151,0.5474419916820774],[0.38,0.5151515151515151,0.5319805319326831],[0.39,0.5151515151515151,0.520348777795805],[0.4,0.5151515151515151,0.5115723587493899],[0.41000000000000003,0.5151515151515151,0.5054016928278081],[0.42,0.5151515151515151,0.5009610061885945],[0.43,0.5151515151515151,0.4982654952692811],[0.44,0.5151515151515151,0.4965289915170499],[0.45,0.5151515151515151,0.4953576904843258],[0.46,0.5151515151515151,0.49373631774412685],[0.47000000000000003,0.5151515151515151,0.4013398445060801],[0.48,0.5151515151515151,0.3909174719543811],[0.49,0.5151515151515151,0.4111494646756769],[0.5,0.5151515151515151,0.40038051034465416],[0.51,0.5151515151515151,0.3899213771709014],[0.52,0.5151515151515151,0.38027000257792715],[0.53,0.5151515151515151,0.37230960506147426],[0.54,0.5151515151515151,0.3658481752102142],[0.55,0.5151515151515151,0.3608145700150342],[0.56,0.5151515151515151,0.3570204696222804],[0.5700000000000001,0.5151515151515151,0.35409789271739367],[0.58,0.5151515151515151,0.35214839708035867],[0.59,0.5151515151515151,0.3476671245340143],[0.6,0.5151515151515151,0.346739344903873],[0.61,0.5151515151515151,0.34617171208304554],[0.62,0.5151515151515151,0.35193480216519135],[0.63,0.5151515151515151,0.3805581802306632],[0.64,0.5151515151515151,0.37592424752286163],[0.65,0.5151515151515151,0.37121733878037255],[0.66,0.5151515151515151,0.36653204731788797],[0.67,0.5151515151515151,0.3621822591546993],[0.68,0.5151515151515151,0.35765442373343187],[0.6900000000000001,0.5151515151515151,0.3534135729793561],[0.7000000000000001,0.5151515151515151,0.3489688818841099],[0.71,0.5151515151515151,0.34414346636534515],[0.72,0.5151515151515151,0.3386699886677682],[0.73,0.5151515151515151,0.33231406406000585],[0.74,0.5151515151515151,0.3250287765291356],[0.75,0.5151515151515151,0.3165525888187837],[0.76,0.5151515151515151,0.3069607929988324],[0.77,0.5151515151515151,0.296107181097534],[0.78,0.5151515151515151,0.2840097328309412],[0.79,0.5151515151515151,0.2707389433105909],[0.8,0.5151515151515151,0.2561835513800552],[0.81,0.5151515151515151,0.2404920260241812],[0.8200000000000001,0.5151515151515151,0.22360594957485555],[0.8300000000000001,0.5151515151515151,0.20542177929395977],[0.84,0.5151515151515151,0.18612136079721237],[0.85,0.5151515151515151,0.1646084257569417],[0.86,0.5151515151515151,0.14030438627660907],[0.87,0.5151515151515151,0.11242975783547585],[0.88,0.5151515151515151,0.11226465894232408],[0.89,0.5151515151515151,0.09920355347584128],[0.9,0.5151515151515151,0.10308165341399618],[0.91,0.5151515151515151,0.10743581702114255],[0.92,0.5151515151515151,0],[0.93,0.5151515151515151,0],[0.9400000000000001,0.5151515151515151,0],[0.9500000000000001,0.5151515151515151,0],[0.96,0.5151515151515151,0],[0.97,0.5151515151515151,0],[0.98,0.5151515151515151,0],[0.99,0.5151515151515151,0],[1,0.5151515151515151,0],[0,0.5227272727272727,0.8182017680180402],[0.01,0.5227272727272727,0.8188764025804379],[0.02,0.5227272727272727,0.8198464910279845],[0.03,0.5227272727272727,0.8220051936529327],[0.04,0.5227272727272727,0.82425065640506],[0.05,0.5227272727272727,0.8272452597718944],[0.06,0.5227272727272727,0.8295046047896901],[0.07,0.5227272727272727,0],[0.08,0.5227272727272727,0],[0.09,0.5227272727272727,0.7973408641852844],[0.1,0.5227272727272727,0.7935503692657844],[0.11,0.5227272727272727,0.789917293618444],[0.12,0.5227272727272727,0.7858346783923433],[0.13,0.5227272727272727,0.7809795541000633],[0.14,0.5227272727272727,0.7738644676815073],[0.15,0.5227272727272727,0.7650212847578262],[0.16,0.5227272727272727,0.7566266733058566],[0.17,0.5227272727272727,0.748769749211879],[0.18,0.5227272727272727,0.7412284496916912],[0.19,0.5227272727272727,0.7339323836525298],[0.2,0.5227272727272727,0.7267965468612269],[0.21,0.5227272727272727,0.7200377272995514],[0.22,0.5227272727272727,0.713884989432348],[0.23,0.5227272727272727,0],[0.24,0.5227272727272727,0.6825535508038791],[0.25,0.5227272727272727,0.6771353569681158],[0.26,0.5227272727272727,0.6708957752978452],[0.27,0.5227272727272727,0.663748085156652],[0.28,0.5227272727272727,0.6559586297589245],[0.29,0.5227272727272727,0.6477675597401091],[0.3,0.5227272727272727,0.6400514719713255],[0.31,0.5227272727272727,0],[0.32,0.5227272727272727,0],[0.33,0.5227272727272727,0],[0.34,0.5227272727272727,0],[0.35000000000000003,0.5227272727272727,0.5806648904830445],[0.36,0.5227272727272727,0],[0.37,0.5227272727272727,0.5509948157372003],[0.38,0.5227272727272727,0.535336233159956],[0.39,0.5227272727272727,0.5230448668520505],[0.4,0.5227272727272727,0.5141069618949756],[0.41000000000000003,0.5227272727272727,0.5074537277721175],[0.42,0.5227272727272727,0.5032184238358871],[0.43,0.5227272727272727,0.5004592771691482],[0.44,0.5227272727272727,0.49911322350155884],[0.45,0.5227272727272727,0.4984399517985339],[0.46,0.5227272727272727,0],[0.47000000000000003,0.5227272727272727,0],[0.48,0.5227272727272727,0],[0.49,0.5227272727272727,0.41313263302667663],[0.5,0.5227272727272727,0.4018381149662647],[0.51,0.5227272727272727,0.3908645978401073],[0.52,0.5227272727272727,0.3813412481547681],[0.53,0.5227272727272727,0.373364590872891],[0.54,0.5227272727272727,0.3671871882915995],[0.55,0.5227272727272727,0.3625750782366126],[0.56,0.5227272727272727,0.3590876208315789],[0.5700000000000001,0.5227272727272727,0.3567978335088074],[0.58,0.5227272727272727,0.355250187757184],[0.59,0.5227272727272727,0.3500314213592358],[0.6,0.5227272727272727,0.3499342639049265],[0.61,0.5227272727272727,0.3498909746664549],[0.62,0.5227272727272727,0],[0.63,0.5227272727272727,0.38325465069614484],[0.64,0.5227272727272727,0.37750742399754067],[0.65,0.5227272727272727,0.37166533577657684],[0.66,0.5227272727272727,0.3665322163532362],[0.67,0.5227272727272727,0.36172694821179907],[0.68,0.5227272727272727,0.35755494851956476],[0.6900000000000001,0.5227272727272727,0.35342677804779193],[0.7000000000000001,0.5227272727272727,0.34935326154761387],[0.71,0.5227272727272727,0.3448064970316651],[0.72,0.5227272727272727,0.33961740592277356],[0.73,0.5227272727272727,0.33356360998031054],[0.74,0.5227272727272727,0.3263878189139417],[0.75,0.5227272727272727,0.3181023733587913],[0.76,0.5227272727272727,0.30849095185100395],[0.77,0.5227272727272727,0.2976119805187137],[0.78,0.5227272727272727,0.28545112623396474],[0.79,0.5227272727272727,0.27195269719322346],[0.8,0.5227272727272727,0.25731232273754934],[0.81,0.5227272727272727,0.241404414400552],[0.8200000000000001,0.5227272727272727,0.22436729308469652],[0.8300000000000001,0.5227272727272727,0.20626876933540483],[0.84,0.5227272727272727,0.1867733453793859],[0.85,0.5227272727272727,0.1656756219413479],[0.86,0.5227272727272727,0.14124481232812852],[0.87,0.5227272727272727,0.11374955240358589],[0.88,0.5227272727272727,0],[0.89,0.5227272727272727,0.10264603346024091],[0.9,0.5227272727272727,0.10685191581345808],[0.91,0.5227272727272727,0.11151480672204087],[0.92,0.5227272727272727,0],[0.93,0.5227272727272727,0],[0.9400000000000001,0.5227272727272727,0],[0.9500000000000001,0.5227272727272727,0],[0.96,0.5227272727272727,0],[0.97,0.5227272727272727,0],[0.98,0.5227272727272727,0],[0.99,0.5227272727272727,0],[1,0.5227272727272727,0],[0,0.5303030303030303,0.8132934636788884],[0.01,0.5303030303030303,0.8137672816980958],[0.02,0.5303030303030303,0.8152797397650178],[0.03,0.5303030303030303,0.8170321965858701],[0.04,0.5303030303030303,0.8201367729763458],[0.05,0.5303030303030303,0.8230029225701692],[0.06,0.5303030303030303,0.8259008652600612],[0.07,0.5303030303030303,0.8126938441354532],[0.08,0.5303030303030303,0.7820011699152064],[0.09,0.5303030303030303,0.7787883698850872],[0.1,0.5303030303030303,0.7881221084643865],[0.11,0.5303030303030303,0.7841086999300478],[0.12,0.5303030303030303,0.7790399936096695],[0.13,0.5303030303030303,0.7731167853822709],[0.14,0.5303030303030303,0.7662189263704934],[0.15,0.5303030303030303,0.758670691666157],[0.16,0.5303030303030303,0.7512093146483543],[0.17,0.5303030303030303,0.743880090673638],[0.18,0.5303030303030303,0.7368512893039556],[0.19,0.5303030303030303,0.729832307914569],[0.2,0.5303030303030303,0.7230815966929277],[0.21,0.5303030303030303,0.7166234940427052],[0.22,0.5303030303030303,0.7109063073999293],[0.23,0.5303030303030303,0.6783663290647702],[0.24,0.5303030303030303,0.6812037582895175],[0.25,0.5303030303030303,0.675367028696017],[0.26,0.5303030303030303,0.6687985786031878],[0.27,0.5303030303030303,0.6616077005041524],[0.28,0.5303030303030303,0.653951527952874],[0.29,0.5303030303030303,0.6463732474135266],[0.3,0.5303030303030303,0.6395383585559965],[0.31,0.5303030303030303,0.6489918565450811],[0.32,0.5303030303030303,0.592019647744666],[0.33,0.5303030303030303,0.5745593091381872],[0.34,0.5303030303030303,0.582422700869817],[0.35000000000000003,0.5303030303030303,0.5820790705497276],[0.36,0.5303030303030303,0.5352945775579254],[0.37,0.5303030303030303,0.5523926266769658],[0.38,0.5303030303030303,0.5372327602145733],[0.39,0.5303030303030303,0.5252638927523918],[0.4,0.5303030303030303,0.5159844908982294],[0.41000000000000003,0.5303030303030303,0.5096428187875338],[0.42,0.5303030303030303,0.505179307628718],[0.43,0.5303030303030303,0.5028106252143055],[0.44,0.5303030303030303,0.5015731033125317],[0.45,0.5303030303030303,0.5012289097935059],[0.46,0.5303030303030303,0.4037856901984421],[0.47000000000000003,0.5303030303030303,0.39761315934868696],[0.48,0.5303030303030303,0.39060174906365636],[0.49,0.5303030303030303,0.41496368230416725],[0.5,0.5303030303030303,0.40313928017310463],[0.51,0.5303030303030303,0.39218732433224857],[0.52,0.5303030303030303,0.3825245366913792],[0.53,0.5303030303030303,0.3748325727762496],[0.54,0.5303030303030303,0.36897005665066795],[0.55,0.5303030303030303,0.36459343243423126],[0.56,0.5303030303030303,0.36174269718546304],[0.5700000000000001,0.5303030303030303,0.3596887957588727],[0.58,0.5303030303030303,0.35867293961404706],[0.59,0.5303030303030303,0.35273744148110897],[0.6,0.5303030303030303,0.35316178826772754],[0.61,0.5303030303030303,0.3536595965511248],[0.62,0.5303030303030303,0.32866561904855157],[0.63,0.5303030303030303,0.38646451244983426],[0.64,0.5303030303030303,0.3791429780361647],[0.65,0.5303030303030303,0.3725821193726897],[0.66,0.5303030303030303,0.3665583494628729],[0.67,0.5303030303030303,0.36178522437745153],[0.68,0.5303030303030303,0.35739170702008827],[0.6900000000000001,0.5303030303030303,0.3536380315712814],[0.7000000000000001,0.5303030303030303,0.34969534148127024],[0.71,0.5303030303030303,0.3455043666933025],[0.72,0.5303030303030303,0.3405971379589208],[0.73,0.5303030303030303,0.3347501649378375],[0.74,0.5303030303030303,0.32784438203501565],[0.75,0.5303030303030303,0.31962239399391656],[0.76,0.5303030303030303,0.3101322525437766],[0.77,0.5303030303030303,0.29925517420721715],[0.78,0.5303030303030303,0.286997960965347],[0.79,0.5303030303030303,0.2735029461999301],[0.8,0.5303030303030303,0.2586551626481614],[0.81,0.5303030303030303,0.24272848436569616],[0.8200000000000001,0.5303030303030303,0.22564883222046112],[0.8300000000000001,0.5303030303030303,0.20747198593824817],[0.84,0.5303030303030303,0.1882992169476928],[0.85,0.5303030303030303,0.16710184749090987],[0.86,0.5303030303030303,0.1430542997179292],[0.87,0.5303030303030303,0.11549424679682824],[0.88,0.5303030303030303,0.10472716155391038],[0.89,0.5303030303030303,0.10716698898599375],[0.9,0.5303030303030303,0.11084639756131727],[0.91,0.5303030303030303,0.11520780242287668],[0.92,0.5303030303030303,0],[0.93,0.5303030303030303,0],[0.9400000000000001,0.5303030303030303,0],[0.9500000000000001,0.5303030303030303,0],[0.96,0.5303030303030303,0],[0.97,0.5303030303030303,0],[0.98,0.5303030303030303,0],[0.99,0.5303030303030303,0],[1,0.5303030303030303,0],[0,0.5378787878787878,0.8082262977442809],[0.01,0.5378787878787878,0.8090208459577514],[0.02,0.5378787878787878,0.8101898984866635],[0.03,0.5378787878787878,0.8127580952976583],[0.04,0.5378787878787878,0.8155007256955413],[0.05,0.5378787878787878,0.8192369345075441],[0.06,0.5378787878787878,0.8221958133898555],[0.07,0.5378787878787878,0],[0.08,0.5378787878787878,0],[0.09,0.5378787878787878,0],[0.1,0.5378787878787878,0.7839431207454153],[0.11,0.5378787878787878,0.7793909085542092],[0.12,0.5378787878787878,0.7736109087902756],[0.13,0.5378787878787878,0.7672946178751598],[0.14,0.5378787878787878,0.7604653525364901],[0.15,0.5378787878787878,0.7535770579802341],[0.16,0.5378787878787878,0.7465562923109285],[0.17,0.5378787878787878,0.7398076336095003],[0.18,0.5378787878787878,0.7329418583278255],[0.19,0.5378787878787878,0.7263222138954826],[0.2,0.5378787878787878,0.7196429414171177],[0.21,0.5378787878787878,0.7134224270972692],[0.22,0.5378787878787878,0.7076961220292062],[0.23,0.5378787878787878,0],[0.24,0.5378787878787878,0.679982029507271],[0.25,0.5378787878787878,0.6736216848273938],[0.26,0.5378787878787878,0.6668013224539425],[0.27,0.5378787878787878,0.6596369927128711],[0.28,0.5378787878787878,0.6522595121267786],[0.29,0.5378787878787878,0.6452262682109089],[0.3,0.5378787878787878,0.6392767975599852],[0.31,0.5378787878787878,0],[0.32,0.5378787878787878,0],[0.33,0.5378787878787878,0],[0.34,0.5378787878787878,0.5827440452422704],[0.35000000000000003,0.5378787878787878,0.5826592170066368],[0.36,0.5378787878787878,0],[0.37,0.5378787878787878,0.5524901427001545],[0.38,0.5378787878787878,0.5382861592638897],[0.39,0.5378787878787878,0.5264884060917516],[0.4,0.5378787878787878,0.5177849379426385],[0.41000000000000003,0.5378787878787878,0.5112337226524877],[0.42,0.5378787878787878,0.5072428329570713],[0.43,0.5378787878787878,0.5048484212130684],[0.44,0.5378787878787878,0.504024616792429],[0.45,0.5378787878787878,0.5038183114819669],[0.46,0.5378787878787878,0],[0.47000000000000003,0.5378787878787878,0],[0.48,0.5378787878787878,0],[0.49,0.5378787878787878,0.4165844447088032],[0.5,0.5378787878787878,0.40445863513714114],[0.51,0.5378787878787878,0.39331939380042424],[0.52,0.5378787878787878,0.3839736705158111],[0.53,0.5378787878787878,0.37654574159831056],[0.54,0.5378787878787878,0.37093493174363334],[0.55,0.5378787878787878,0.36718806488775063],[0.56,0.5378787878787878,0.364472686142871],[0.5700000000000001,0.5378787878787878,0.3631347265269884],[0.58,0.5378787878787878,0.36230907363794207],[0.59,0.5378787878787878,0.3557319771504766],[0.6,0.5378787878787878,0.3564419681726797],[0.61,0.5378787878787878,0.3573392489951808],[0.62,0.5378787878787878,0],[0.63,0.5378787878787878,0.38943894678563185],[0.64,0.5378787878787878,0.381078611379052],[0.65,0.5378787878787878,0.37330612068837443],[0.66,0.5378787878787878,0.36711175062109874],[0.67,0.5378787878787878,0.36169536655636914],[0.68,0.5378787878787878,0.35758887248976],[0.6900000000000001,0.5378787878787878,0.35370136547350406],[0.7000000000000001,0.5378787878787878,0.35013132013332404],[0.71,0.5378787878787878,0.34611276502656535],[0.72,0.5378787878787878,0.34148306097415493],[0.73,0.5378787878787878,0.33592141253532093],[0.74,0.5378787878787878,0.32916170366926645],[0.75,0.5378787878787878,0.32117741079917184],[0.76,0.5378787878787878,0.311759759906389],[0.77,0.5378787878787878,0.30094894043987996],[0.78,0.5378787878787878,0.28877375574425873],[0.79,0.5378787878787878,0.27517191926470275],[0.8,0.5378787878787878,0.2604300819809963],[0.81,0.5378787878787878,0.24441840992777153],[0.8200000000000001,0.5378787878787878,0.22741154756112425],[0.8300000000000001,0.5378787878787878,0.20944473615617137],[0.84,0.5378787878787878,0.19030088154838623],[0.85,0.5378787878787878,0.1695576816839774],[0.86,0.5378787878787878,0.14532474376017246],[0.87,0.5378787878787878,0.1182535776722484],[0.88,0.5378787878787878,0.10792921595958828],[0.89,0.5378787878787878,0.11135931522730154],[0.9,0.5378787878787878,0.1147201865628022],[0.91,0.5378787878787878,0.11840654479348407],[0.92,0.5378787878787878,0],[0.93,0.5378787878787878,0],[0.9400000000000001,0.5378787878787878,0],[0.9500000000000001,0.5378787878787878,0],[0.96,0.5378787878787878,0],[0.97,0.5378787878787878,0],[0.98,0.5378787878787878,0],[0.99,0.5378787878787878,0],[1,0.5378787878787878,0],[0,0.5454545454545454,0.8032827949823518],[0.01,0.5454545454545454,0.8039035661416147],[0.02,0.5454545454545454,0.8057040200480922],[0.03,0.5454545454545454,0.8078962377344958],[0.04,0.5454545454545454,0.8115676911249758],[0.05,0.5454545454545454,0.8150855037328436],[0.06,0.5454545454545454,0.8186376182114607],[0.07,0.5454545454545454,0.7672875391660842],[0.08,0.5454545454545454,0.7639792231925535],[0.09,0.5454545454545454,0.7604291211993154],[0.1,0.5454545454545454,0.7804716607016604],[0.11,0.5454545454545454,0.7754943976222448],[0.12,0.5454545454545454,0.7695016983013816],[0.13,0.5454545454545454,0.7628655278064684],[0.14,0.5454545454545454,0.7563029223674759],[0.15,0.5454545454545454,0.7495515245144201],[0.16,0.5454545454545454,0.7430741880469374],[0.17,0.5454545454545454,0.7363930393622944],[0.18,0.5454545454545454,0.729956939503028],[0.19,0.5454545454545454,0.7232651034473265],[0.2,0.5454545454545454,0.7168315119543287],[0.21,0.5454545454545454,0.7104296975490806],[0.22,0.5454545454545454,0.7046244415976752],[0.23,0.5454545454545454,0.6672834102811401],[0.24,0.5454545454545454,0.6783441927954763],[0.25,0.5454545454545454,0.6718908048624087],[0.26,0.5454545454545454,0.6651054458863024],[0.27,0.5454545454545454,0.657975031994441],[0.28,0.5454545454545454,0.6509782421358465],[0.29,0.5454545454545454,0.6444047150142129],[0.3,0.5454545454545454,0.6391559625967282],[0.31,0.5454545454545454,0.6218777788993233],[0.32,0.5454545454545454,0.6215321048841578],[0.33,0.5454545454545454,0.5681343330753142],[0.34,0.5454545454545454,0.5829296694668807],[0.35000000000000003,0.5454545454545454,0.5827397157796866],[0.36,0.5454545454545454,0.557652385030617],[0.37,0.5454545454545454,0.5516889508317775],[0.38,0.5454545454545454,0.5383374216370862],[0.39,0.5454545454545454,0.5274770551921333],[0.4,0.5454545454545454,0.5188224659826731],[0.41000000000000003,0.5454545454545454,0.5128867957158507],[0.42,0.5454545454545454,0.5088421575058948],[0.43,0.5454545454545454,0.5069458351440339],[0.44,0.5454545454545454,0.5062220276695757],[0.45,0.5454545454545454,0.5062901130095117],[0.46,0.5454545454545454,0.4018996651282407],[0.47000000000000003,0.5454545454545454,0.39478455142512403],[0.48,0.5454545454545454,0.3872076645398925],[0.49,0.5454545454545454,0.4173845722408592],[0.5,0.5454545454545454,0.40518366295267716],[0.51,0.5454545454545454,0.39444877000648815],[0.52,0.5454545454545454,0.3854303575302921],[0.53,0.5454545454545454,0.3783427611611331],[0.54,0.5454545454545454,0.37335548379145156],[0.55,0.5454545454545454,0.36970381588281465],[0.56,0.5454545454545454,0.3678295289418382],[0.5700000000000001,0.5454545454545454,0.3665439681787881],[0.58,0.5454545454545454,0.36625106160269333],[0.59,0.5454545454545454,0.3586617235798074],[0.6,0.5454545454545454,0.35956026020723336],[0.61,0.5454545454545454,0.3609177124762075],[0.62,0.5454545454545454,0.33591920832930194],[0.63,0.5454545454545454,0.39280514722380067],[0.64,0.5454545454545454,0.3828379092714218],[0.65,0.5454545454545454,0.37453044664168683],[0.66,0.5454545454545454,0.3673837137416651],[0.67,0.5454545454545454,0.3621139535980421],[0.68,0.5454545454545454,0.35755053108280455],[0.6900000000000001,0.5454545454545454,0.3539874582073868],[0.7000000000000001,0.5454545454545454,0.3503854754174822],[0.71,0.5454545454545454,0.3466646019733636],[0.72,0.5454545454545454,0.3422500366200345],[0.73,0.5454545454545454,0.3368895808404423],[0.74,0.5454545454545454,0.3304164915973262],[0.75,0.5454545454545454,0.3225631691087344],[0.76,0.5454545454545454,0.31335144014871186],[0.77,0.5454545454545454,0.30268191714720616],[0.78,0.5454545454545454,0.29054710801135664],[0.79,0.5454545454545454,0.2771471927349282],[0.8,0.5454545454545454,0.2623637811263595],[0.81,0.5454545454545454,0.24657319673373612],[0.8200000000000001,0.5454545454545454,0.22969484712871777],[0.8300000000000001,0.5454545454545454,0.2119183359129563],[0.84,0.5454545454545454,0.19326738096011475],[0.85,0.5454545454545454,0.17254282403722732],[0.86,0.5454545454545454,0.14940347510749097],[0.87,0.5454545454545454,0.12040367083889636],[0.88,0.5454545454545454,0.11297929018528888],[0.89,0.5454545454545454,0.1162991569842158],[0.9,0.5454545454545454,0.11894465410929665],[0.91,0.5454545454545454,0.12140462149846815],[0.92,0.5454545454545454,0],[0.93,0.5454545454545454,0],[0.9400000000000001,0.5454545454545454,0],[0.9500000000000001,0.5454545454545454,0],[0.96,0.5454545454545454,0],[0.97,0.5454545454545454,0],[0.98,0.5454545454545454,0],[0.99,0.5454545454545454,0],[1,0.5454545454545454,0],[0,0.5530303030303031,0.7982389212930885],[0.01,0.5530303030303031,0.7991930426446864],[0.02,0.5530303030303031,0.8007382879055935],[0.03,0.5530303030303031,0.8037496829605418],[0.04,0.5530303030303031,0.8071245047698348],[0.05,0.5530303030303031,0.8114595224742761],[0.06,0.5530303030303031,0.8150331765474582],[0.07,0.5530303030303031,0],[0.08,0.5530303030303031,0],[0.09,0.5530303030303031,0],[0.1,0.5530303030303031,0.7774683137314192],[0.11,0.5530303030303031,0.7724229535255555],[0.12,0.5530303030303031,0.7661970767946704],[0.13,0.5530303030303031,0.7597592263787054],[0.14,0.5530303030303031,0.7531201144345286],[0.15,0.5530303030303031,0.7468230283354],[0.16,0.5530303030303031,0.740327596614291],[0.17,0.5530303030303031,0.7340885841153879],[0.18,0.5530303030303031,0.7275138208188376],[0.19,0.5530303030303031,0.7211105268397631],[0.2,0.5530303030303031,0.7143743875518483],[0.21,0.5530303030303031,0.7079466434624269],[0.22,0.5530303030303031,0.70169471514236],[0.23,0.5530303030303031,0],[0.24,0.5530303030303031,0.677001198285283],[0.25,0.5530303030303031,0.6705796859393548],[0.26,0.5530303030303031,0.6637335165197453],[0.27,0.5530303030303031,0.656939357158933],[0.28,0.5530303030303031,0.6500740236830206],[0.29,0.5530303030303031,0.6440215744488915],[0.3,0.5530303030303031,0.6391663206823903],[0.31,0.5530303030303031,0],[0.32,0.5530303030303031,0],[0.33,0.5530303030303031,0],[0.34,0.5530303030303031,0.5828866401536645],[0.35000000000000003,0.5530303030303031,0.5822831151689185],[0.36,0.5530303030303031,0],[0.37,0.5530303030303031,0.5501177040602621],[0.38,0.5530303030303031,0.5380659821579765],[0.39,0.5530303030303031,0.5277455821647453],[0.4,0.5530303030303031,0.5199097124259959],[0.41000000000000003,0.5530303030303031,0.5140453453110454],[0.42,0.5530303030303031,0.5105757385327865],[0.43,0.5530303030303031,0.5087747954507685],[0.44,0.5530303030303031,0.5084074462858873],[0.45,0.5530303030303031,0.5085672044073801],[0.46,0.5530303030303031,0],[0.47000000000000003,0.5530303030303031,0],[0.48,0.5530303030303031,0.42575581934810297],[0.49,0.5530303030303031,0.4162252666602737],[0.5,0.5530303030303031,0.4054787974727986],[0.51,0.5530303030303031,0.3954044483038449],[0.52,0.5530303030303031,0.38687662838471193],[0.53,0.5530303030303031,0.3804613246212882],[0.54,0.5530303030303031,0.3755944734736676],[0.55,0.5530303030303031,0.37281967520701514],[0.56,0.5530303030303031,0.3708769679916203],[0.5700000000000001,0.5530303030303031,0.3704347699109899],[0.58,0.5530303030303031,0.37019743354111556],[0.59,0.5530303030303031,0.3615188364694517],[0.6,0.5530303030303031,0.3625607167806367],[0.61,0.5530303030303031,0.3643192482031663],[0.62,0.5530303030303031,0.36700417522422807],[0.63,0.5530303030303031,0.39530657986059353],[0.64,0.5530303030303031,0.3847697682914513],[0.65,0.5530303030303031,0.3754221966627129],[0.66,0.5530303030303031,0.36823210965944636],[0.67,0.5530303030303031,0.36224310032306944],[0.68,0.5530303030303031,0.3578982539836927],[0.6900000000000001,0.5530303030303031,0.35404461099464524],[0.7000000000000001,0.5530303030303031,0.35069741787580216],[0.71,0.5530303030303031,0.34703803845797176],[0.72,0.5530303030303031,0.3428311212430577],[0.73,0.5530303030303031,0.3377201012747447],[0.74,0.5530303030303031,0.33140454390927365],[0.75,0.5530303030303031,0.3238298053445846],[0.76,0.5530303030303031,0.31478722984652663],[0.77,0.5530303030303031,0.3042946970223982],[0.78,0.5530303030303031,0.2924121298470749],[0.79,0.5530303030303031,0.2790670164660549],[0.8,0.5530303030303031,0.26461263411991076],[0.81,0.5530303030303031,0.24892021340649106],[0.8200000000000001,0.5530303030303031,0.2323751353122727],[0.8300000000000001,0.5530303030303031,0.2150195956715207],[0.84,0.5530303030303031,0.19669651179606254],[0.85,0.5530303030303031,0.17747120207907768],[0.86,0.5530303030303031,0.154042483708133],[0.87,0.5530303030303031,0.12729998964007783],[0.88,0.5530303030303031,0.12022676652405351],[0.89,0.5530303030303031,0.12284551289589346],[0.9,0.5530303030303031,0.12361945959497174],[0.91,0.5530303030303031,0.1245567824481554],[0.92,0.5530303030303031,0],[0.93,0.5530303030303031,0],[0.9400000000000001,0.5530303030303031,0],[0.9500000000000001,0.5530303030303031,0],[0.96,0.5530303030303031,0],[0.97,0.5530303030303031,0],[0.98,0.5530303030303031,0],[0.99,0.5530303030303031,0],[1,0.5530303030303031,0],[0,0.5606060606060607,0.7933846405024005],[0.01,0.5606060606060607,0.7942352014215062],[0.02,0.5606060606060607,0.7963547039941309],[0.03,0.5606060606060607,0.7991289273564878],[0.04,0.5606060606060607,0.8033191807541846],[0.05,0.5606060606060607,0.8075217537137193],[0.06,0.5606060606060607,0.8116644520235097],[0.07,0.5606060606060607,0.7687029572590559],[0.08,0.5606060606060607,0.7646290312763059],[0.09,0.5606060606060607,0.7604176388986962],[0.1,0.5606060606060607,0.7747890678704106],[0.11,0.5606060606060607,0.769720465211341],[0.12,0.5606060606060607,0.7637699802434582],[0.13,0.5606060606060607,0.7572738590775715],[0.14,0.5606060606060607,0.7510584271798055],[0.15,0.5606060606060607,0.7447066141721708],[0.16,0.5606060606060607,0.738654193964916],[0.17,0.5606060606060607,0.7322754097547436],[0.18,0.5606060606060607,0.7260416043244378],[0.19,0.5606060606060607,0.7193319811636572],[0.2,0.5606060606060607,0.7126851906534569],[0.21,0.5606060606060607,0.7056522288938518],[0.22,0.5606060606060607,0.698754989945873],[0.23,0.5606060606060607,0.6800439669585885],[0.24,0.5606060606060607,0.6755499659995271],[0.25,0.5606060606060607,0.6695504406285142],[0.26,0.5606060606060607,0.6631625488787605],[0.27,0.5606060606060607,0.6562973516810298],[0.28,0.5606060606060607,0.649914309885743],[0.29,0.5606060606060607,0.6439370347988906],[0.3,0.5606060606060607,0.6394993233948376],[0.31,0.5606060606060607,0.6332084202922416],[0.32,0.5606060606060607,0.5769905168861111],[0.33,0.5606060606060607,0.5700574474102861],[0.34,0.5606060606060607,0.582673813065639],[0.35000000000000003,0.5606060606060607,0.5810147018628541],[0.36,0.5606060606060607,0.5787410187889509],[0.37,0.5606060606060607,0.5481475244904275],[0.38,0.5606060606060607,0.5372841828292685],[0.39,0.5606060606060607,0.5280807745502205],[0.4,0.5606060606060607,0.5206059633000613],[0.41000000000000003,0.5606060606060607,0.515406463925715],[0.42,0.5606060606060607,0.5121223396004746],[0.43,0.5606060606060607,0.510730884657195],[0.44,0.5606060606060607,0.5104554183486847],[0.45,0.5606060606060607,0.5105954407270139],[0.46,0.5606060606060607,0.4048086006146856],[0.47000000000000003,0.5606060606060607,0.3991033724776],[0.48,0.5606060606060607,0.4264699211225325],[0.49,0.5606060606060607,0.4164548599066298],[0.5,0.5606060606060607,0.4061140659981207],[0.51,0.5606060606060607,0.3964571073665333],[0.52,0.5606060606060607,0.38862801334477515],[0.53,0.5606060606060607,0.3823701812588588],[0.54,0.5606060606060607,0.37837784585277406],[0.55,0.5606060606060607,0.37545233451943494],[0.56,0.5606060606060607,0.3744790927647633],[0.5700000000000001,0.5606060606060607,0.37390043575375165],[0.58,0.5606060606060607,0.3742665441273372],[0.59,0.5606060606060607,0.36415669363141473],[0.6,0.5606060606060607,0.36515866088782445],[0.61,0.5606060606060607,0.36700399426403374],[0.62,0.5606060606060607,0.3692418166928607],[0.63,0.5606060606060607,0.39837374385094115],[0.64,0.5606060606060607,0.3865702130811671],[0.65,0.5606060606060607,0.37686007441533065],[0.66,0.5606060606060607,0.3688232330485771],[0.67,0.5606060606060607,0.3628918969721407],[0.68,0.5606060606060607,0.35802433747894546],[0.6900000000000001,0.5606060606060607,0.3543145991884145],[0.7000000000000001,0.5606060606060607,0.3508258218148825],[0.71,0.5606060606060607,0.3473194066770474],[0.72,0.5606060606060607,0.34324617833003995],[0.73,0.5606060606060607,0.3382729994243877],[0.74,0.5606060606060607,0.3322218293469644],[0.75,0.5606060606060607,0.3248033512718242],[0.76,0.5606060606060607,0.3160158558727606],[0.77,0.5606060606060607,0.3057715726162341],[0.78,0.5606060606060607,0.29404465321105033],[0.79,0.5606060606060607,0.28107201906008256],[0.8,0.5606060606060607,0.2667311972774467],[0.81,0.5606060606060607,0.2514705941993195],[0.8200000000000001,0.5606060606060607,0.23522496459791928],[0.8300000000000001,0.5606060606060607,0.21832006075443686],[0.84,0.5606060606060607,0.20101925061543519],[0.85,0.5606060606060607,0.18269391535247087],[0.86,0.5606060606060607,0.16468448316491496],[0.87,0.5606060606060607,0.1453797696339713],[0.88,0.5606060606060607,0.13611077727959164],[0.89,0.5606060606060607,0.13115316242749683],[0.9,0.5606060606060607,0.12894485703267655],[0.91,0.5606060606060607,0.12784791269404422],[0.92,0.5606060606060607,0],[0.93,0.5606060606060607,0],[0.9400000000000001,0.5606060606060607,0],[0.9500000000000001,0.5606060606060607,0],[0.96,0.5606060606060607,0],[0.97,0.5606060606060607,0],[0.98,0.5606060606060607,0],[0.99,0.5606060606060607,0],[1,0.5606060606060607,0],[0,0.5681818181818182,0.7885537316690592],[0.01,0.5681818181818182,0.789677079065469],[0.02,0.5681818181818182,0.7916704113214659],[0.03,0.5681818181818182,0.7950974983793704],[0.04,0.5681818181818182,0.7991283440149295],[0.05,0.5681818181818182,0.8039561824519428],[0.06,0.5681818181818182,0.8081278535065417],[0.07,0.5681818181818182,0],[0.08,0.5681818181818182,0],[0.09,0.5681818181818182,0],[0.1,0.5681818181818182,0.7720932145530541],[0.11,0.5681818181818182,0.7674313024052304],[0.12,0.5681818181818182,0.7615764418124854],[0.13,0.5681818181818182,0.7555397898501287],[0.14,0.5681818181818182,0.7493129057816568],[0.15,0.5681818181818182,0.7434153913170974],[0.16,0.5681818181818182,0.7372656681282146],[0.17,0.5681818181818182,0.731270147288929],[0.18,0.5681818181818182,0.724811603140519],[0.19,0.5681818181818182,0.7183416150276919],[0.2,0.5681818181818182,0.7112527622380482],[0.21,0.5681818181818182,0.7039928584674552],[0.22,0.5681818181818182,0.6960536716151557],[0.23,0.5681818181818182,0.6801647443088241],[0.24,0.5681818181818182,0.6753601512439924],[0.25,0.5681818181818182,0.6696570318591971],[0.26,0.5681818181818182,0.6630363426113759],[0.27,0.5681818181818182,0.6566488850498894],[0.28,0.5681818181818182,0.650029080419873],[0.29,0.5681818181818182,0.6444807166038697],[0.3,0.5681818181818182,0.6400171202954446],[0.31,0.5681818181818182,0],[0.32,0.5681818181818182,0],[0.33,0.5681818181818182,0],[0.34,0.5681818181818182,0.5826667107431127],[0.35000000000000003,0.5681818181818182,0.5800807574429689],[0.36,0.5681818181818182,0.577186506351002],[0.37,0.5681818181818182,0.5458132981574215],[0.38,0.5681818181818182,0.536587535119696],[0.39,0.5681818181818182,0.5282243566724834],[0.4,0.5681818181818182,0.5215600097219459],[0.41000000000000003,0.5681818181818182,0.5167075104685153],[0.42,0.5681818181818182,0.5138933410414136],[0.43,0.5681818181818182,0.5127643897259984],[0.44,0.5681818181818182,0.5125326356899743],[0.45,0.5681818181818182,0.5121201122642072],[0.46,0.5681818181818182,0],[0.47000000000000003,0.5681818181818182,0],[0.48,0.5681818181818182,0.42759615213269675],[0.49,0.5681818181818182,0.4173788230642509],[0.5,0.5681818181818182,0.40704693088323596],[0.51,0.5681818181818182,0.3979595541517865],[0.52,0.5681818181818182,0.39021820447854194],[0.53,0.5681818181818182,0.38480304632663564],[0.54,0.5681818181818182,0.3806330216380705],[0.55,0.5681818181818182,0.3786778787994334],[0.56,0.5681818181818182,0.37737305862547244],[0.5700000000000001,0.5681818181818182,0.37763308639065574],[0.58,0.5681818181818182,0.37798131535630536],[0.59,0.5681818181818182,0.3665167946088688],[0.6,0.5681818181818182,0.36754717349920574],[0.61,0.5681818181818182,0.36945245180970754],[0.62,0.5681818181818182,0.3719791577479037],[0.63,0.5681818181818182,0.400531228630302],[0.64,0.5681818181818182,0.38856051737952785],[0.65,0.5681818181818182,0.3781369068661803],[0.66,0.5681818181818182,0.36997486730028617],[0.67,0.5681818181818182,0.363395837474696],[0.68,0.5681818181818182,0.3584930143246714],[0.6900000000000001,0.5681818181818182,0.3544476932641021],[0.7000000000000001,0.5681818181818182,0.35098760638890386],[0.71,0.5681818181818182,0.34745423788166707],[0.72,0.5681818181818182,0.3434450433618989],[0.73,0.5681818181818182,0.33864462563534825],[0.74,0.5681818181818182,0.33269295107541175],[0.75,0.5681818181818182,0.32552591597512637],[0.76,0.5681818181818182,0.3169294638413776],[0.77,0.5681818181818182,0.30690113044860456],[0.78,0.5681818181818182,0.2955172500838258],[0.79,0.5681818181818182,0.2826936493098493],[0.8,0.5681818181818182,0.26881958575250725],[0.81,0.5681818181818182,0.25377072562537617],[0.8200000000000001,0.5681818181818182,0.2380133876839337],[0.8300000000000001,0.5681818181818182,0.2216369099183011],[0.84,0.5681818181818182,0.20488605209678412],[0.85,0.5681818181818182,0.18835815303395062],[0.86,0.5681818181818182,0.17153119117534307],[0.87,0.5681818181818182,0.15711790615276416],[0.88,0.5681818181818182,0.1453697641951541],[0.89,0.5681818181818182,0.13822350859458177],[0.9,0.5681818181818182,0.13328507097595454],[0.91,0.5681818181818182,0.1306851670807044],[0.92,0.5681818181818182,0],[0.93,0.5681818181818182,0],[0.9400000000000001,0.5681818181818182,0],[0.9500000000000001,0.5681818181818182,0],[0.96,0.5681818181818182,0],[0.97,0.5681818181818182,0],[0.98,0.5681818181818182,0],[0.99,0.5681818181818182,0],[1,0.5681818181818182,0],[0,0.5757575757575758,0.7839701754933714],[0.01,0.5757575757575758,0.7850517849387942],[0.02,0.5757575757575758,0.7874610273417155],[0.03,0.5757575757575758,0.7907825262781745],[0.04,0.5757575757575758,0.795382755641334],[0.05,0.5757575757575758,0.8001423780548282],[0.06,0.5757575757575758,0.8046413638566268],[0.07,0.5757575757575758,0],[0.08,0.5757575757575758,0],[0.09,0.5757575757575758,0.7754774230847292],[0.1,0.5757575757575758,0.7696499169133978],[0.11,0.5757575757575758,0.7651552833283741],[0.12,0.5757575757575758,0.7597493278582867],[0.13,0.5757575757575758,0.7537897513486097],[0.14,0.5757575757575758,0.7480322913485905],[0.15,0.5757575757575758,0.7421040574039602],[0.16,0.5757575757575758,0.7363613363608887],[0.17,0.5757575757575758,0.7302415999337821],[0.18,0.5757575757575758,0.7241144939022743],[0.19,0.5757575757575758,0.7174114361212572],[0.2,0.5757575757575758,0.7104999899355882],[0.21,0.5757575757575758,0.7027404952150025],[0.22,0.5757575757575758,0.6941400696063205],[0.23,0.5757575757575758,0.6813633595532073],[0.24,0.5757575757575758,0.6765321823875683],[0.25,0.5757575757575758,0.6702991155119556],[0.26,0.5757575757575758,0.6640342027722279],[0.27,0.5757575757575758,0.6571654000170544],[0.28,0.5757575757575758,0.6510381684587045],[0.29,0.5757575757575758,0.6451368556786689],[0.3,0.5757575757575758,0.6408548541029431],[0.31,0.5757575757575758,0.590380171449573],[0.32,0.5757575757575758,0.5844105180990512],[0.33,0.5757575757575758,0.5771892798980348],[0.34,0.5757575757575758,0.5829282166363815],[0.35000000000000003,0.5757575757575758,0.5790326715101872],[0.36,0.5757575757575758,0.5747501192351736],[0.37,0.5757575757575758,0.543904804601955],[0.38,0.5757575757575758,0.5360496145895894],[0.39,0.5757575757575758,0.5286871339701145],[0.4,0.5757575757575758,0.5225807519442822],[0.41000000000000003,0.5757575757575758,0.5182473521107501],[0.42,0.5757575757575758,0.515868888557719],[0.43,0.5757575757575758,0.5150034930580258],[0.44,0.5757575757575758,0.5151776126461802],[0.45,0.5757575757575758,0.4721247936648775],[0.46,0.5757575757575758,0.4052604876709545],[0.47000000000000003,0.5757575757575758,0.4012107249936252],[0.48,0.5757575757575758,0.4288167896738976],[0.49,0.5757575757575758,0.4184718114152701],[0.5,0.5757575757575758,0.4085180090093271],[0.51,0.5757575757575758,0.39934461499894486],[0.52,0.5757575757575758,0.3923614928707034],[0.53,0.5757575757575758,0.3867400298400432],[0.54,0.5757575757575758,0.3834858348271044],[0.55,0.5757575757575758,0.38110955320172846],[0.56,0.5757575757575758,0.3807054083255549],[0.5700000000000001,0.5757575757575758,0.3805912126258233],[0.58,0.5757575757575758,0.38136161946110436],[0.59,0.5757575757575758,0.36857454018512137],[0.6,0.5757575757575758,0.3696122343964604],[0.61,0.5757575757575758,0.37161520874471937],[0.62,0.5757575757575758,0.374269363863586],[0.63,0.5757575757575758,0.40241724196229095],[0.64,0.5757575757575758,0.39059598820149366],[0.65,0.5757575757575758,0.3800283395348],[0.66,0.5757575757575758,0.3711497236289336],[0.67,0.5757575757575758,0.36429125384646244],[0.68,0.5757575757575758,0.3589197060254268],[0.6900000000000001,0.5757575757575758,0.35470298388017407],[0.7000000000000001,0.5757575757575758,0.35106051630292906],[0.71,0.5757575757575758,0.3474575838140677],[0.72,0.5757575757575758,0.3434866234442404],[0.73,0.5757575757575758,0.33868669496948195],[0.74,0.5757575757575758,0.33290798210399464],[0.75,0.5757575757575758,0.32583143628825795],[0.76,0.5757575757575758,0.3174450769158227],[0.77,0.5757575757575758,0.3076646921452364],[0.78,0.5757575757575758,0.2964509344925337],[0.79,0.5757575757575758,0.28405296156366333],[0.8,0.5757575757575758,0.27034407947195493],[0.81,0.5757575757575758,0.2558041888857124],[0.8200000000000001,0.5757575757575758,0.24037819166542057],[0.8300000000000001,0.5757575757575758,0.22447946637589872],[0.84,0.5757575757575758,0.2084291042407928],[0.85,0.5757575757575758,0.1924004138549902],[0.86,0.5757575757575758,0.17731924361560295],[0.87,0.5757575757575758,0.16311727096597334],[0.88,0.5757575757575758,0.1518494889022708],[0.89,0.5757575757575758,0.14280704012532067],[0.9,0.5757575757575758,0.13652591300026062],[0.91,0.5757575757575758,0.13219076492837956],[0.92,0.5757575757575758,0],[0.93,0.5757575757575758,0],[0.9400000000000001,0.5757575757575758,0],[0.9500000000000001,0.5757575757575758,0],[0.96,0.5757575757575758,0],[0.97,0.5757575757575758,0],[0.98,0.5757575757575758,0],[0.99,0.5757575757575758,0],[1,0.5757575757575758,0],[0,0.5833333333333334,0.7795397229573435],[0.01,0.5833333333333334,0.7807988134714209],[0.02,0.5833333333333334,0.783148894310274],[0.03,0.5833333333333334,0.7868873594286608],[0.04,0.5833333333333334,0.7914087447709687],[0.05,0.5833333333333334,0.796572818794295],[0.06,0.5833333333333334,0.8011521456051873],[0.07,0.5833333333333334,0],[0.08,0.5833333333333334,0],[0.09,0.5833333333333334,0],[0.1,0.5833333333333334,0.7670693808411984],[0.11,0.5833333333333334,0.7629312783678782],[0.12,0.5833333333333334,0.7576713964084191],[0.13,0.5833333333333334,0.7521570268579552],[0.14,0.5833333333333334,0.7464367674180378],[0.15,0.5833333333333334,0.7409149701012097],[0.16,0.5833333333333334,0.7351294980442911],[0.17,0.5833333333333334,0.7293683616718473],[0.18,0.5833333333333334,0.7231550307495033],[0.19,0.5833333333333334,0.716796679773154],[0.2,0.5833333333333334,0.7098050562045477],[0.21,0.5833333333333334,0.702477731029312],[0.22,0.5833333333333334,0.6942604064118227],[0.23,0.5833333333333334,0.6855318712686648],[0.24,0.5833333333333334,0.6784419692355148],[0.25,0.5833333333333334,0.6719852420365109],[0.26,0.5833333333333334,0.6649994356914346],[0.27,0.5833333333333334,0.6586495149224554],[0.28,0.5833333333333334,0.651936848996284],[0.29,0.5833333333333334,0.6464605001770547],[0.3,0.5833333333333334,0.6418907175581914],[0.31,0.5833333333333334,0],[0.32,0.5833333333333334,0],[0.33,0.5833333333333334,0],[0.34,0.5833333333333334,0.583290996445935],[0.35000000000000003,0.5833333333333334,0.5779563099751329],[0.36,0.5833333333333334,0.5718517612938444],[0.37,0.5833333333333334,0],[0.38,0.5833333333333334,0.5360518292657022],[0.39,0.5833333333333334,0.5292685816547585],[0.4,0.5833333333333334,0.5237750439569427],[0.41000000000000003,0.5833333333333334,0.5200218600816118],[0.42,0.5833333333333334,0.5179160991195202],[0.43,0.5833333333333334,0.5174905712359459],[0.44,0.5833333333333334,0.5177107943481573],[0.45,0.5833333333333334,0],[0.46,0.5833333333333334,0],[0.47000000000000003,0.5833333333333334,0],[0.48,0.5833333333333334,0.4300178371529309],[0.49,0.5833333333333334,0.4199608283120958],[0.5,0.5833333333333334,0.40983329612571917],[0.51,0.5833333333333334,0.40129515569351953],[0.52,0.5833333333333334,0.39404943824340016],[0.53,0.5833333333333334,0.3892635327356204],[0.54,0.5833333333333334,0.3855826527398951],[0.55,0.5833333333333334,0.3840772727900147],[0.56,0.5833333333333334,0.38314068237826765],[0.5700000000000001,0.5833333333333334,0.38367594664937943],[0.58,0.5833333333333334,0.3842506628606989],[0.59,0.5833333333333334,0.37027244501831635],[0.6,0.5833333333333334,0.3713308412635612],[0.61,0.5833333333333334,0.37340261547309916],[0.62,0.5833333333333334,0.37626783484728527],[0.63,0.5833333333333334,0.4041201198683644],[0.64,0.5833333333333334,0.39371981886146457],[0.65,0.5833333333333334,0.38231496856562436],[0.66,0.5833333333333334,0.37277004613492287],[0.67,0.5833333333333334,0.36527328436427026],[0.68,0.5833333333333334,0.35945547529838706],[0.6900000000000001,0.5833333333333334,0.3549526556097212],[0.7000000000000001,0.5833333333333334,0.3510449132423523],[0.71,0.5833333333333334,0.34735193541650794],[0.72,0.5833333333333334,0.34324204015761806],[0.73,0.5833333333333334,0.3384938966465787],[0.74,0.5833333333333334,0.33267593092635483],[0.75,0.5833333333333334,0.32573855239168054],[0.76,0.5833333333333334,0.31745950218862035],[0.77,0.5833333333333334,0.3078306643078844],[0.78,0.5833333333333334,0.2969292106057234],[0.79,0.5833333333333334,0.284666206959349],[0.8,0.5833333333333334,0.27143216895157984],[0.81,0.5833333333333334,0.25710126918852777],[0.8200000000000001,0.5833333333333334,0.24216296281537275],[0.8300000000000001,0.5833333333333334,0.2267027329984721],[0.84,0.5833333333333334,0.21103219298039083],[0.85,0.5833333333333334,0.1957164979877041],[0.86,0.5833333333333334,0.18085059346740073],[0.87,0.5833333333333334,0.16748134142633267],[0.88,0.5833333333333334,0.1555800981578645],[0.89,0.5833333333333334,0.14606772826678932],[0.9,0.5833333333333334,0.13848606516581766],[0.91,0.5833333333333334,0.13289247977407181],[0.92,0.5833333333333334,0],[0.93,0.5833333333333334,0],[0.9400000000000001,0.5833333333333334,0],[0.9500000000000001,0.5833333333333334,0],[0.96,0.5833333333333334,0],[0.97,0.5833333333333334,0],[0.98,0.5833333333333334,0],[0.99,0.5833333333333334,0],[1,0.5833333333333334,0],[0,0.5909090909090909,0.7754185984150169],[0.01,0.5909090909090909,0.7766416240883474],[0.02,0.5909090909090909,0.779223757546893],[0.03,0.5909090909090909,0.7828690580953046],[0.04,0.5909090909090909,0.7877054918745441],[0.05,0.5909090909090909,0.7928142121918773],[0.06,0.5909090909090909,0.7976321706248268],[0.07,0.5909090909090909,0],[0.08,0.5909090909090909,0],[0.09,0.5909090909090909,0.7684204301292524],[0.1,0.5909090909090909,0.7643806365997446],[0.11,0.5909090909090909,0.7603852715361972],[0.12,0.5909090909090909,0.7554634893611163],[0.13,0.5909090909090909,0.7500248009229866],[0.14,0.5909090909090909,0.7446699836651673],[0.15,0.5909090909090909,0.7391562466505379],[0.16,0.5909090909090909,0.7337119903439375],[0.17,0.5909090909090909,0.7279426846274804],[0.18,0.5909090909090909,0.7220787775486304],[0.19,0.5909090909090909,0.7157568262815716],[0.2,0.5909090909090909,0.7092265617434561],[0.21,0.5909090909090909,0.7021259833232156],[0.22,0.5909090909090909,0.6948399878851829],[0.23,0.5909090909090909,0.6871198207606732],[0.24,0.5909090909090909,0.6802351985383996],[0.25,0.5909090909090909,0.6731380221322543],[0.26,0.5909090909090909,0.6666848589082988],[0.27,0.5909090909090909,0.6596872370178248],[0.28,0.5909090909090909,0.6536087999160651],[0.29,0.5909090909090909,0.6475828697470354],[0.3,0.5909090909090909,0.6431675304627642],[0.31,0.5909090909090909,0.5838192107046718],[0.32,0.5909090909090909,0.5788586117328579],[0.33,0.5909090909090909,0.5729063931533809],[0.34,0.5909090909090909,0.5841155077253513],[0.35000000000000003,0.5909090909090909,0.5770371031976407],[0.36,0.5909090909090909,0.5690193225713549],[0.37,0.5909090909090909,0.5530799407359035],[0.38,0.5909090909090909,0.5349581798976549],[0.39,0.5909090909090909,0.529608699059045],[0.4,0.5909090909090909,0.525115123153794],[0.41000000000000003,0.5909090909090909,0.5217752786021868],[0.42,0.5909090909090909,0.5203063963346156],[0.43,0.5909090909090909,0.5199178647971584],[0.44,0.5909090909090909,0.5204088679706425],[0.45,0.5909090909090909,0.40969625242174784],[0.46,0.5909090909090909,0.404524971863603],[0.47000000000000003,0.5909090909090909,0.40059628415166176],[0.48,0.5909090909090909,0.43143137394155334],[0.49,0.5909090909090909,0.4212837254687524],[0.5,0.5909090909090909,0.4116391348074738],[0.51,0.5909090909090909,0.4028019686611608],[0.52,0.5909090909090909,0.3962980874869326],[0.53,0.5909090909090909,0.3911088493621793],[0.54,0.5909090909090909,0.3882244330282377],[0.55,0.5909090909090909,0.386160520407403],[0.56,0.5909090909090909,0.3858918005442871],[0.5700000000000001,0.5909090909090909,0.3859230337489873],[0.58,0.5909090909090909,0.3867668391381031],[0.59,0.5909090909090909,0.37156048181941126],[0.6,0.5909090909090909,0.37263593602434353],[0.61,0.5909090909090909,0.3746788232595847],[0.62,0.5909090909090909,0.37736693295264945],[0.63,0.5909090909090909,0.35174054077363665],[0.64,0.5909090909090909,0.39939517088113496],[0.65,0.5909090909090909,0.38527988834760957],[0.66,0.5909090909090909,0.3745179016070398],[0.67,0.5909090909090909,0.36621846180983325],[0.68,0.5909090909090909,0.3600598622523592],[0.6900000000000001,0.5909090909090909,0.35505329673423475],[0.7000000000000001,0.5909090909090909,0.3509852232453823],[0.71,0.5909090909090909,0.34697669463331693],[0.72,0.5909090909090909,0.3428016351740384],[0.73,0.5909090909090909,0.33786739792896703],[0.74,0.5909090909090909,0.33207749527631536],[0.75,0.5909090909090909,0.32508739100014294],[0.76,0.5909090909090909,0.31689607524513524],[0.77,0.5909090909090909,0.3074166811411222],[0.78,0.5909090909090909,0.29661290294157183],[0.79,0.5909090909090909,0.2847221963929958],[0.8,0.5909090909090909,0.2716188071275675],[0.81,0.5909090909090909,0.25776960481735567],[0.8200000000000001,0.5909090909090909,0.24310843113827724],[0.8300000000000001,0.5909090909090909,0.22805696499919254],[0.84,0.5909090909090909,0.21288269976947377],[0.85,0.5909090909090909,0.1977755396830386],[0.86,0.5909090909090909,0.1834663849652744],[0.87,0.5909090909090909,0.169962808112202],[0.88,0.5909090909090909,0.1581793650013094],[0.89,0.5909090909090909,0.14795017290096274],[0.9,0.5909090909090909,0.13976493675852364],[0.91,0.5909090909090909,0.1332992279393495],[0.92,0.5909090909090909,0.12842397067856443],[0.93,0.5909090909090909,0],[0.9400000000000001,0.5909090909090909,0],[0.9500000000000001,0.5909090909090909,0],[0.96,0.5909090909090909,0],[0.97,0.5909090909090909,0],[0.98,0.5909090909090909,0],[0.99,0.5909090909090909,0],[1,0.5909090909090909,0],[0,0.5984848484848485,0.7715612830481265],[0.01,0.5984848484848485,0.7728628411172307],[0.02,0.5984848484848485,0.7753380447021498],[0.03,0.5984848484848485,0.7791589096993722],[0.04,0.5984848484848485,0.7838404441295548],[0.05,0.5984848484848485,0.7891087496768003],[0.06,0.5984848484848485,0.7939147478444468],[0.07,0.5984848484848485,0],[0.08,0.5984848484848485,0],[0.09,0.5984848484848485,0],[0.1,0.5984848484848485,0.7614032701397254],[0.11,0.5984848484848485,0.7575807311988456],[0.12,0.5984848484848485,0.7527225181735523],[0.13,0.5984848484848485,0.7475501032408362],[0.14,0.5984848484848485,0.7422226243027408],[0.15,0.5984848484848485,0.7369967342270108],[0.16,0.5984848484848485,0.73157392105313],[0.17,0.5984848484848485,0.7261125592115687],[0.18,0.5984848484848485,0.72032698247183],[0.19,0.5984848484848485,0.7143911435602087],[0.2,0.5984848484848485,0.7080623087209059],[0.21,0.5984848484848485,0.7015731425111162],[0.22,0.5984848484848485,0.6946794356515105],[0.23,0.5984848484848485,0.6879064943786142],[0.24,0.5984848484848485,0.6809274281803273],[0.25,0.5984848484848485,0.6744879377289122],[0.26,0.5984848484848485,0.6675580628556204],[0.27,0.5984848484848485,0.6613659154542868],[0.28,0.5984848484848485,0.6547116081235251],[0.29,0.5984848484848485,0.6492833048574794],[0.3,0.5984848484848485,0.6445631997208041],[0.31,0.5984848484848485,0],[0.32,0.5984848484848485,0],[0.33,0.5984848484848485,0.5919625399477664],[0.34,0.5984848484848485,0.5849809551145815],[0.35000000000000003,0.5984848484848485,0.5767592730130804],[0.36,0.5984848484848485,0.5670170529167786],[0.37,0.5984848484848485,0],[0.38,0.5984848484848485,0.5339694586227203],[0.39,0.5984848484848485,0.5301131385572128],[0.4,0.5984848484848485,0.5263683197253963],[0.41000000000000003,0.5984848484848485,0.5239537739891211],[0.42,0.5984848484848485,0.5225482988377688],[0.43,0.5984848484848485,0.5226966416862642],[0.44,0.5984848484848485,0.5230891209067634],[0.45,0.5984848484848485,0],[0.46,0.5984848484848485,0],[0.47000000000000003,0.5984848484848485,0],[0.48,0.5984848484848485,0.4328329403041927],[0.49,0.5984848484848485,0.42291708726526456],[0.5,0.5984848484848485,0.41301092071311385],[0.51,0.5984848484848485,0.40479733838123294],[0.52,0.5984848484848485,0.39793274002860424],[0.53,0.5984848484848485,0.39346378326997244],[0.54,0.5984848484848485,0.39008514046762266],[0.55,0.5984848484848485,0.38863768951549976],[0.56,0.5984848484848485,0.38775970509543867],[0.5700000000000001,0.5984848484848485,0.38811898713764853],[0.58,0.5984848484848485,0.3885921273442536],[0.59,0.5984848484848485,0.37244220480092316],[0.6,0.5984848484848485,0.37352345723651],[0.61,0.5984848484848485,0.37563423941979845],[0.62,0.5984848484848485,0.3783435699593104],[0.63,0.5984848484848485,0],[0.64,0.5984848484848485,0.40083179395890745],[0.65,0.5984848484848485,0.3869517830133353],[0.66,0.5984848484848485,0.3756425559643679],[0.67,0.5984848484848485,0.36714079707233027],[0.68,0.5984848484848485,0.3603040007331909],[0.6900000000000001,0.5984848484848485,0.3551751676258983],[0.7000000000000001,0.5984848484848485,0.350598062980104],[0.71,0.5984848484848485,0.3464625430870612],[0.72,0.5984848484848485,0.3419452572974788],[0.73,0.5984848484848485,0.3369272139995041],[0.74,0.5984848484848485,0.3309282516999454],[0.75,0.5984848484848485,0.32393093532291256],[0.76,0.5984848484848485,0.31571007629120496],[0.77,0.5984848484848485,0.30627322437547494],[0.78,0.5984848484848485,0.2956857362410088],[0.79,0.5984848484848485,0.2838692703733522],[0.8,0.5984848484848485,0.2711854738804574],[0.81,0.5984848484848485,0.25750701510566854],[0.8200000000000001,0.5984848484848485,0.24329615212361072],[0.8300000000000001,0.5984848484848485,0.22860081915205743],[0.84,0.5984848484848485,0.21372410029406488],[0.85,0.5984848484848485,0.1991051203353732],[0.86,0.5984848484848485,0.18482892029597162],[0.87,0.5984848484848485,0.1716557312796317],[0.88,0.5984848484848485,0.15954571428263886],[0.89,0.5984848484848485,0.1491409645544352],[0.9,0.5984848484848485,0.14030143800691847],[0.91,0.5984848484848485,0.13318178392647279],[0.92,0.5984848484848485,0.12747461830460705],[0.93,0.5984848484848485,0],[0.9400000000000001,0.5984848484848485,0],[0.9500000000000001,0.5984848484848485,0],[0.96,0.5984848484848485,0],[0.97,0.5984848484848485,0],[0.98,0.5984848484848485,0],[0.99,0.5984848484848485,0],[1,0.5984848484848485,0],[0,0.6060606060606061,0.7680730857772329],[0.01,0.6060606060606061,0.7692897317062217],[0.02,0.6060606060606061,0.7718158726100155],[0.03,0.6060606060606061,0.7754142569466456],[0.04,0.6060606060606061,0.7801266690468631],[0.05,0.6060606060606061,0.7852306005274815],[0.06,0.6060606060606061,0.7901473205474078],[0.07,0.6060606060606061,0.7574723786753454],[0.08,0.6060606060606061,0.7562846328753577],[0.09,0.6060606060606061,0.7545791008034634],[0.1,0.6060606060606061,0.7581982592550022],[0.11,0.6060606060606061,0.7543252674646234],[0.12,0.6060606060606061,0.7495834715280414],[0.13,0.6060606060606061,0.7444298926938595],[0.14,0.6060606060606061,0.7393008745157301],[0.15,0.6060606060606061,0.7340985262631037],[0.16,0.6060606060606061,0.7289204219341496],[0.17,0.6060606060606061,0.7235354234278033],[0.18,0.6060606060606061,0.7180572025595888],[0.19,0.6060606060606061,0.712309217684514],[0.2,0.6060606060606061,0.7064230003865233],[0.21,0.6060606060606061,0.7002515851220799],[0.22,0.6060606060606061,0.694043833524584],[0.23,0.6060606060606061,0.6875576205987286],[0.24,0.6060606060606061,0.6813571922777708],[0.25,0.6060606060606061,0.6747745260986114],[0.26,0.6060606060606061,0.6687408565039662],[0.27,0.6060606060606061,0.6621374487084694],[0.28,0.6060606060606061,0.6563675733941117],[0.29,0.6060606060606061,0.6505641694107211],[0.3,0.6060606060606061,0.646262692995877],[0.31,0.6060606060606061,0.5885473178465878],[0.32,0.6060606060606061,0.5842805055137763],[0.33,0.6060606060606061,0.593826766575374],[0.34,0.6060606060606061,0.5863518092770781],[0.35000000000000003,0.6060606060606061,0.5774512542996517],[0.36,0.6060606060606061,0.5677868975807947],[0.37,0.6060606060606061,0.558308486971252],[0.38,0.6060606060606061,0.5335827886117421],[0.39,0.6060606060606061,0.5307147668749015],[0.4,0.6060606060606061,0.528157089012172],[0.41000000000000003,0.6060606060606061,0.5259403611859272],[0.42,0.6060606060606061,0.5253788159270373],[0.43,0.6060606060606061,0.525303058060764],[0.44,0.6060606060606061,0.526017855008766],[0.45,0.6060606060606061,0.4126477818335148],[0.46,0.6060606060606061,0.4068682250479545],[0.47000000000000003,0.6060606060606061,0.4026779861061208],[0.48,0.6060606060606061,0.43431196520044346],[0.49,0.6060606060606061,0.4241636423130532],[0.5,0.6060606060606061,0.41470133967898515],[0.51,0.6060606060606061,0.40621629319282115],[0.52,0.6060606060606061,0.4000003179492334],[0.53,0.6060606060606061,0.395149660970574],[0.54,0.6060606060606061,0.3923323841417687],[0.55,0.6060606060606061,0.390329440379874],[0.56,0.6060606060606061,0.389765330979129],[0.5700000000000001,0.6060606060606061,0.38953025756912874],[0.58,0.6060606060606061,0.389920385542157],[0.59,0.6060606060606061,0.3729126707547731],[0.6,0.6060606060606061,0.3740874833134161],[0.61,0.6060606060606061,0.3762003918327457],[0.62,0.6060606060606061,0.37892127316744584],[0.63,0.6060606060606061,0.34509658148745515],[0.64,0.6060606060606061,0.40108264181978526],[0.65,0.6060606060606061,0.3875627084357175],[0.66,0.6060606060606061,0.3765100555482389],[0.67,0.6060606060606061,0.36738697844739193],[0.68,0.6060606060606061,0.3606110224314593],[0.6900000000000001,0.6060606060606061,0.3548176861145649],[0.7000000000000001,0.6060606060606061,0.35014998749010334],[0.71,0.6060606060606061,0.3455170794474156],[0.72,0.6060606060606061,0.3408468331316837],[0.73,0.6060606060606061,0.33548047549273075],[0.74,0.6060606060606061,0.32937524593343637],[0.75,0.6060606060606061,0.3221854597278626],[0.76,0.6060606060606061,0.3139370799180459],[0.77,0.6060606060606061,0.30454002116333617],[0.78,0.6060606060606061,0.2939798685890387],[0.79,0.6060606060606061,0.2824648796937083],[0.8,0.6060606060606061,0.26988144827527616],[0.81,0.6060606060606061,0.2566515611633309],[0.8200000000000001,0.6060606060606061,0.24269422175635302],[0.8300000000000001,0.6060606060606061,0.22839419230523283],[0.84,0.6060606060606061,0.21394265125322678],[0.85,0.6060606060606061,0.1995162225994367],[0.86,0.6060606060606061,0.18566233842150773],[0.87,0.6060606060606061,0.17241487502589053],[0.88,0.6060606060606061,0.1604212396925395],[0.89,0.6060606060606061,0.1496631239675157],[0.9,0.6060606060606061,0.14046349953078383],[0.91,0.6060606060606061,0.1327307536367114],[0.92,0.6060606060606061,0.12622109780291058],[0.93,0.6060606060606061,0],[0.9400000000000001,0.6060606060606061,0],[0.9500000000000001,0.6060606060606061,0],[0.96,0.6060606060606061,0],[0.97,0.6060606060606061,0],[0.98,0.6060606060606061,0],[0.99,0.6060606060606061,0],[1,0.6060606060606061,0],[0,0.6136363636363636,0.7649183171053048],[0.01,0.6136363636363636,0.7661224631198695],[0.02,0.6136363636363636,0.7684288454360179],[0.03,0.6136363636363636,0.771952865442487],[0.04,0.6136363636363636,0.7763403155333495],[0.05,0.6136363636363636,0.7813062715536685],[0.06,0.6136363636363636,0.7861268292154875],[0.07,0.6136363636363636,0],[0.08,0.6136363636363636,0],[0.09,0.6136363636363636,0],[0.1,0.6136363636363636,0.7546836326898128],[0.11,0.6136363636363636,0.7507079761506662],[0.12,0.6136363636363636,0.7459193238659073],[0.13,0.6136363636363636,0.7408655211471631],[0.14,0.6136363636363636,0.7357612202409289],[0.15,0.6136363636363636,0.7307253611523341],[0.16,0.6136363636363636,0.7256030254308877],[0.17,0.6136363636363636,0.7204500008332257],[0.18,0.6136363636363636,0.715119886202148],[0.19,0.6136363636363636,0.7096926260395349],[0.2,0.6136363636363636,0.7040814760196609],[0.21,0.6136363636363636,0.6983975760167489],[0.22,0.6136363636363636,0.6925321968353018],[0.23,0.6136363636363636,0.686755273609688],[0.24,0.6136363636363636,0.6807205425633281],[0.25,0.6136363636363636,0.6750184258140902],[0.26,0.6136363636363636,0.6688560061849977],[0.27,0.6136363636363636,0.6632537882475813],[0.28,0.6136363636363636,0.6572194155277504],[0.29,0.6136363636363636,0.6522335107515006],[0.3,0.6136363636363636,0.6479264256630727],[0.31,0.6136363636363636,0],[0.32,0.6136363636363636,0],[0.33,0.6136363636363636,0.5967678988443941],[0.34,0.6136363636363636,0.5883089941145638],[0.35000000000000003,0.6136363636363636,0.578673406217828],[0.36,0.6136363636363636,0.5682211750110242],[0.37,0.6136363636363636,0.5572221930424648],[0.38,0.6136363636363636,0.5336407300692598],[0.39,0.6136363636363636,0.5319797912947648],[0.4,0.6136363636363636,0.5298218896794722],[0.41000000000000003,0.6136363636363636,0.5287360174631931],[0.42,0.6136363636363636,0.5278777774766218],[0.43,0.6136363636363636,0.5285026904685803],[0.44,0.6136363636363636,0.5289230061926261],[0.45,0.6136363636363636,0],[0.46,0.6136363636363636,0],[0.47000000000000003,0.6136363636363636,0],[0.48,0.6136363636363636,0.43545245014890227],[0.49,0.6136363636363636,0.42546246542431926],[0.5,0.6136363636363636,0.415829804547461],[0.51,0.6136363636363636,0.40792052883850255],[0.52,0.6136363636363636,0.4014857532053983],[0.53,0.6136363636363636,0.39715901892615163],[0.54,0.6136363636363636,0.39393034896959134],[0.55,0.6136363636363636,0.3922194499738678],[0.56,0.6136363636363636,0.3910591357187305],[0.5700000000000001,0.6136363636363636,0.39081455947064464],[0.58,0.6136363636363636,0.39074793388827955],[0.59,0.6136363636363636,0.3730597186778386],[0.6,0.6136363636363636,0.37425332764654234],[0.61,0.6136363636363636,0.3765615111958632],[0.62,0.6136363636363636,0.37942652200401966],[0.63,0.6136363636363636,0],[0.64,0.6136363636363636,0.40106695723986185],[0.65,0.6136363636363636,0.38792964834817034],[0.66,0.6136363636363636,0.37651431159101645],[0.67,0.6136363636363636,0.3677210613795369],[0.68,0.6136363636363636,0.36023244871856885],[0.6900000000000001,0.6136363636363636,0.3544975997757447],[0.7000000000000001,0.6136363636363636,0.34920077346081513],[0.71,0.6136363636363636,0.34442518242770037],[0.72,0.6136363636363636,0.339288582043614],[0.73,0.6136363636363636,0.33374454185771407],[0.74,0.6136363636363636,0.3273201341347851],[0.75,0.6136363636363636,0.32003022587023056],[0.76,0.6136363636363636,0.3116612667021998],[0.77,0.6136363636363636,0.3022491700891877],[0.78,0.6136363636363636,0.2918414273129898],[0.79,0.6136363636363636,0.2803836496846811],[0.8,0.6136363636363636,0.2681902728806119],[0.81,0.6136363636363636,0.25513926817635485],[0.8200000000000001,0.6136363636363636,0.24163801999113188],[0.8300000000000001,0.6136363636363636,0.22769679673499105],[0.84,0.6136363636363636,0.21358107269577586],[0.85,0.6136363636363636,0.19961515843447414],[0.86,0.6136363636363636,0.1858861847748787],[0.87,0.6136363636363636,0.17294982657191119],[0.88,0.6136363636363636,0.1608543088829455],[0.89,0.6136363636363636,0.15001845221996007],[0.9,0.6136363636363636,0.14048093890672492],[0.91,0.6136363636363636,0.13219520217712655],[0.92,0.6136363636363636,0.1248992675300304],[0.93,0.6136363636363636,0],[0.9400000000000001,0.6136363636363636,0],[0.9500000000000001,0.6136363636363636,0],[0.96,0.6136363636363636,0],[0.97,0.6136363636363636,0],[0.98,0.6136363636363636,0],[0.99,0.6136363636363636,0],[1,0.6136363636363636,0],[0,0.6212121212121212,0.7621698019996839],[0.01,0.6212121212121212,0.7632386623721499],[0.02,0.6212121212121212,0.7654400466893687],[0.03,0.6212121212121212,0.7686110167220968],[0.04,0.6212121212121212,0.7727550596946033],[0.05,0.6212121212121212,0.7773537695450314],[0.06,0.6212121212121212,0.7815977657097902],[0.07,0.6212121212121212,0.7841365644022195],[0.08,0.6212121212121212,0.7815735152310533],[0.09,0.6212121212121212,0.7712906654938629],[0.1,0.6212121212121212,0.7508522285443449],[0.11,0.6212121212121212,0.7467100806758906],[0.12,0.6212121212121212,0.7419261662404688],[0.13,0.6212121212121212,0.7368904440453806],[0.14,0.6212121212121212,0.7318791757621852],[0.15,0.6212121212121212,0.7268915136960232],[0.16,0.6212121212121212,0.7219295183953278],[0.17,0.6212121212121212,0.7168743687771539],[0.18,0.6212121212121212,0.7117720180614301],[0.19,0.6212121212121212,0.706547367480448],[0.2,0.6212121212121212,0.7012634615636633],[0.21,0.6212121212121212,0.6958931814811362],[0.22,0.6212121212121212,0.6905466862710397],[0.23,0.6212121212121212,0.6850931499362278],[0.24,0.6212121212121212,0.6798128389273235],[0.25,0.6212121212121212,0.6742582520503142],[0.26,0.6212121212121212,0.6690494268163991],[0.27,0.6212121212121212,0.6634051845917883],[0.28,0.6212121212121212,0.6583580401683964],[0.29,0.6212121212121212,0.6533665195564601],[0.3,0.6212121212121212,0.6496913235853723],[0.31,0.6212121212121212,0.5946009393688699],[0.32,0.6212121212121212,0.5939820851501025],[0.33,0.6212121212121212,0.6004374274618578],[0.34,0.6212121212121212,0.5908656963476803],[0.35000000000000003,0.6212121212121212,0.5804039538557784],[0.36,0.6212121212121212,0.5690265424888801],[0.37,0.6212121212121212,0.556664848961708],[0.38,0.6212121212121212,0.5344129013768142],[0.39,0.6212121212121212,0.5333717817470407],[0.4,0.6212121212121212,0.5324680057929313],[0.41000000000000003,0.6212121212121212,0.5311332796519195],[0.42,0.6212121212121212,0.5313684310533606],[0.43,0.6212121212121212,0.5313534900680269],[0.44,0.6212121212121212,0.5321840279917351],[0.45,0.6212121212121212,0.41188300077445683],[0.46,0.6212121212121212,0.40685032793456405],[0.47000000000000003,0.6212121212121212,0.403357889889934],[0.48,0.6212121212121212,0.43645894084398174],[0.49,0.6212121212121212,0.426258031124893],[0.5,0.6212121212121212,0.4170651551342768],[0.51,0.6212121212121212,0.4091230788304001],[0.52,0.6212121212121212,0.4031873433002019],[0.53,0.6212121212121212,0.39864701097800254],[0.54,0.6212121212121212,0.3956980781245244],[0.55,0.6212121212121212,0.3935166524263207],[0.56,0.6212121212121212,0.39234356767517226],[0.5700000000000001,0.6212121212121212,0.39153131969468424],[0.58,0.6212121212121212,0.39127919439059883],[0.59,0.6212121212121212,0.37281195244071996],[0.6,0.6212121212121212,0.37416235982362556],[0.61,0.6212121212121212,0.37648044878931713],[0.62,0.6212121212121212,0.37961225862180353],[0.63,0.6212121212121212,0.3433389148476879],[0.64,0.6212121212121212,0.4006104551789689],[0.65,0.6212121212121212,0.38748131146597814],[0.66,0.6212121212121212,0.3765984268293755],[0.67,0.6212121212121212,0.3672064295057482],[0.68,0.6212121212121212,0.3600001381681703],[0.6900000000000001,0.6212121212121212,0.35356206232097803],[0.7000000000000001,0.6212121212121212,0.34822848875701023],[0.71,0.6212121212121212,0.34289179502576655],[0.72,0.6212121212121212,0.3375629147946315],[0.73,0.6212121212121212,0.33161288188145893],[0.74,0.6212121212121212,0.3250301774530484],[0.75,0.6212121212121212,0.3175017380640085],[0.76,0.6212121212121212,0.3090793071200325],[0.77,0.6212121212121212,0.2996745585901224],[0.78,0.6212121212121212,0.2893016796814504],[0.79,0.6212121212121212,0.2781319949197514],[0.8,0.6212121212121212,0.2660713000363782],[0.81,0.6212121212121212,0.2534818214888956],[0.8200000000000001,0.6212121212121212,0.2402731746400822],[0.8300000000000001,0.6212121212121212,0.22677413822447223],[0.84,0.6212121212121212,0.21311106611715158],[0.85,0.6212121212121212,0.19943222962877044],[0.86,0.6212121212121212,0.1861433541468997],[0.87,0.6212121212121212,0.17330649872908435],[0.88,0.6212121212121212,0.16137234708701823],[0.89,0.6212121212121212,0.15044870364256235],[0.9,0.6212121212121212,0.1406508763198935],[0.91,0.6212121212121212,0.13200940737665276],[0.92,0.6212121212121212,0.12390982161098794],[0.93,0.6212121212121212,0],[0.9400000000000001,0.6212121212121212,0],[0.9500000000000001,0.6212121212121212,0],[0.96,0.6212121212121212,0],[0.97,0.6212121212121212,0],[0.98,0.6212121212121212,0],[0.99,0.6212121212121212,0],[1,0.6212121212121212,0],[0,0.6287878787878788,0.7597994665832435],[0.01,0.6287878787878788,0.7607907508369292],[0.02,0.6287878787878788,0.7627227256771766],[0.03,0.6287878787878788,0.7656669479217335],[0.04,0.6287878787878788,0.7694408840981612],[0.05,0.6287878787878788,0.7738130640384138],[0.06,0.6287878787878788,0.7781568081905752],[0.07,0.6287878787878788,0.7817896357077219],[0.08,0.6287878787878788,0],[0.09,0.6287878787878788,0.7487234283362867],[0.1,0.6287878787878788,0.7465603209867259],[0.11,0.6287878787878788,0.7425677104703445],[0.12,0.6287878787878788,0.7377722927840678],[0.13,0.6287878787878788,0.7327641714024885],[0.14,0.6287878787878788,0.7278126475780906],[0.15,0.6287878787878788,0.7229167936265098],[0.16,0.6287878787878788,0.7180215033633899],[0.17,0.6287878787878788,0.7131243401948348],[0.18,0.6287878787878788,0.7081416061088284],[0.19,0.6287878787878788,0.7031233849195229],[0.2,0.6287878787878788,0.698053745496953],[0.21,0.6287878787878788,0.6930038368077029],[0.22,0.6287878787878788,0.6879791753423838],[0.23,0.6287878787878788,0.6830860311474773],[0.24,0.6287878787878788,0.6781312384512448],[0.25,0.6287878787878788,0.6733769465320077],[0.26,0.6287878787878788,0.668358774677101],[0.27,0.6287878787878788,0.663660663603687],[0.28,0.6287878787878788,0.6587469898085279],[0.29,0.6287878787878788,0.654625223422384],[0.3,0.6287878787878788,0.6512549003234642],[0.31,0.6287878787878788,0],[0.32,0.6287878787878788,0],[0.33,0.6287878787878788,0.6042675170770389],[0.34,0.6287878787878788,0.5938744711824971],[0.35000000000000003,0.6287878787878788,0.5826804148188881],[0.36,0.6287878787878788,0.5707066397245188],[0.37,0.6287878787878788,0.5572844977467482],[0.38,0.6287878787878788,0.5352526229608571],[0.39,0.6287878787878788,0.5357567047103781],[0.4,0.6287878787878788,0.5348601151716086],[0.41000000000000003,0.6287878787878788,0.5348593747043092],[0.42,0.6287878787878788,0.5341978578765545],[0.43,0.6287878787878788,0.535170044358699],[0.44,0.6287878787878788,0.5354173100442223],[0.45,0.6287878787878788,0],[0.46,0.6287878787878788,0],[0.47000000000000003,0.6287878787878788,0.44498546166087083],[0.48,0.6287878787878788,0.4364051151225502],[0.49,0.6287878787878788,0.4269445911263975],[0.5,0.6287878787878788,0.4179355063140476],[0.51,0.6287878787878788,0.41044277220429826],[0.52,0.6287878787878788,0.4045190838879955],[0.53,0.6287878787878788,0.4002364971724851],[0.54,0.6287878787878788,0.39700981284986636],[0.55,0.6287878787878788,0.39482264654242194],[0.56,0.6287878787878788,0.39312215159330605],[0.5700000000000001,0.6287878787878788,0.39207374515938165],[0.58,0.6287878787878788,0.39141972676287495],[0.59,0.6287878787878788,0.37229937803960655],[0.6,0.6287878787878788,0.3736284813235998],[0.61,0.6287878787878788,0.37600917304388615],[0.62,0.6287878787878788,0.37880245569593474],[0.63,0.6287878787878788,0],[0.64,0.6287878787878788,0.3992532005576682],[0.65,0.6287878787878788,0.38696129848737015],[0.66,0.6287878787878788,0.3758208486759621],[0.67,0.6287878787878788,0.36692686469321417],[0.68,0.6287878787878788,0.35903872770363493],[0.6900000000000001,0.6287878787878788,0.3527478270793988],[0.7000000000000001,0.6287878787878788,0.34678939105256623],[0.71,0.6287878787878788,0.3413213239477524],[0.72,0.6287878787878788,0.3355309320056239],[0.73,0.6287878787878788,0.3293971503193334],[0.74,0.6287878787878788,0.32250788835406063],[0.75,0.6287878787878788,0.31489347813547686],[0.76,0.6287878787878788,0.3063670758089737],[0.77,0.6287878787878788,0.2969877618809711],[0.78,0.6287878787878788,0.2867855090441753],[0.79,0.6287878787878788,0.27573035527505196],[0.8,0.6287878787878788,0.2640840440228813],[0.81,0.6287878787878788,0.2517333664819538],[0.8200000000000001,0.6287878787878788,0.23902223151078775],[0.8300000000000001,0.6287878787878788,0.22593193666732206],[0.84,0.6287878787878788,0.21267933376454667],[0.85,0.6287878787878788,0.1994989336239281],[0.86,0.6287878787878788,0.18646400421657616],[0.87,0.6287878787878788,0.17397841806091718],[0.88,0.6287878787878788,0.16214250032287075],[0.89,0.6287878787878788,0.15120623135926553],[0.9,0.6287878787878788,0.14135468310991073],[0.91,0.6287878787878788,0.132415999549152],[0.92,0.6287878787878788,0.12448252298920122],[0.93,0.6287878787878788,0.11733982513019563],[0.9400000000000001,0.6287878787878788,0],[0.9500000000000001,0.6287878787878788,0],[0.96,0.6287878787878788,0],[0.97,0.6287878787878788,0],[0.98,0.6287878787878788,0],[0.99,0.6287878787878788,0],[1,0.6287878787878788,0],[0,0.6363636363636364,0.7578516466145517],[0.01,0.6363636363636364,0.7587048359903525],[0.02,0.6363636363636364,0.7604448695145721],[0.03,0.6363636363636364,0.7630509363456357],[0.04,0.6363636363636364,0.7665199329006859],[0.05,0.6363636363636364,0.7706426963980655],[0.06,0.6363636363636364,0.7748985421237422],[0.07,0.6363636363636364,0.7787268473500919],[0.08,0.6363636363636364,0.7386535826727306],[0.09,0.6363636363636364,0.7465488721392521],[0.1,0.6363636363636364,0.7430879213375952],[0.11,0.6363636363636364,0.7386851057882273],[0.12,0.6363636363636364,0.7337300947333396],[0.13,0.6363636363636364,0.7287546018283906],[0.14,0.6363636363636364,0.7238178759279168],[0.15,0.6363636363636364,0.7189886785892377],[0.16,0.6363636363636364,0.714194088561247],[0.17,0.6363636363636364,0.7093593995141444],[0.18,0.6363636363636364,0.704506740617566],[0.19,0.6363636363636364,0.6995795831457066],[0.2,0.6363636363636364,0.6946570564882844],[0.21,0.6363636363636364,0.6897921988457275],[0.22,0.6363636363636364,0.6850949353458184],[0.23,0.6363636363636364,0.680566535444278],[0.24,0.6363636363636364,0.6762322736271735],[0.25,0.6363636363636364,0.6718465380264526],[0.26,0.6363636363636364,0.6676174111106242],[0.27,0.6363636363636364,0.6632113631528342],[0.28,0.6363636363636364,0.659150422301486],[0.29,0.6363636363636364,0.6553891307986246],[0.3,0.6363636363636364,0.6527770617474383],[0.31,0.6363636363636364,0.5905939112971811],[0.32,0.6363636363636364,0.5889922185294734],[0.33,0.6363636363636364,0.6082805873203565],[0.34,0.6363636363636364,0.597166361500828],[0.35000000000000003,0.6363636363636364,0.5856761708650522],[0.36,0.6363636363636364,0.5733613455282353],[0.37,0.6363636363636364,0.5595828133595163],[0.38,0.6363636363636364,0.5552179964692323],[0.39,0.6363636363636364,0.5388253428536905],[0.4,0.6363636363636364,0.5388305765791281],[0.41000000000000003,0.6363636363636364,0.5378061889836174],[0.42,0.6363636363636364,0.5385635966454545],[0.43,0.6363636363636364,0.538274768071662],[0.44,0.6363636363636364,0.539169221782001],[0.45,0.6363636363636364,0.4118828573973912],[0.46,0.6363636363636364,0.40897972695918533],[0.47000000000000003,0.6363636363636364,0.446278408234414],[0.48,0.6363636363636364,0.4372327135143297],[0.49,0.6363636363636364,0.42778580134612726],[0.5,0.6363636363636364,0.41897273885034714],[0.51,0.6363636363636364,0.41164662513595746],[0.52,0.6363636363636364,0.4058909554858767],[0.53,0.6363636363636364,0.4015403266944394],[0.54,0.6363636363636364,0.39829728990395663],[0.55,0.6363636363636364,0.3957375260527484],[0.56,0.6363636363636364,0.3937894454049335],[0.5700000000000001,0.6363636363636364,0.3922148823992003],[0.58,0.6363636363636364,0.39121150718452863],[0.59,0.6363636363636364,0.37149531314920947],[0.6,0.6363636363636364,0.37295938230532244],[0.61,0.6363636363636364,0.3751340548496398],[0.62,0.6363636363636364,0.3776383800709209],[0.63,0.6363636363636364,0.3479663079159191],[0.64,0.6363636363636364,0.39851467820473013],[0.65,0.6363636363636364,0.38595808844702045],[0.66,0.6363636363636364,0.3753291919239801],[0.67,0.6363636363636364,0.36587938267425146],[0.68,0.6363636363636364,0.35834115776341174],[0.6900000000000001,0.6363636363636364,0.3514073826890878],[0.7000000000000001,0.6363636363636364,0.3454529841754065],[0.71,0.6363636363636364,0.33948830745228564],[0.72,0.6363636363636364,0.33353796525293333],[0.73,0.6363636363636364,0.32706889947960416],[0.74,0.6363636363636364,0.32007235173715176],[0.75,0.6363636363636364,0.3122897369210579],[0.76,0.6363636363636364,0.3037829501402441],[0.77,0.6363636363636364,0.29447042222925346],[0.78,0.6363636363636364,0.28438553819370826],[0.79,0.6363636363636364,0.27366313201083103],[0.8,0.6363636363636364,0.26222525277013864],[0.81,0.6363636363636364,0.2503733674363927],[0.8200000000000001,0.6363636363636364,0.23801171441130253],[0.8300000000000001,0.6363636363636364,0.22541088130821446],[0.84,0.6363636363636364,0.2126480573983327],[0.85,0.6363636363636364,0.19983491650648016],[0.86,0.6363636363636364,0.18727036873803143],[0.87,0.6363636363636364,0.17501561088435363],[0.88,0.6363636363636364,0.16337784048208295],[0.89,0.6363636363636364,0.15253176936731594],[0.9,0.6363636363636364,0.14247358213307182],[0.91,0.6363636363636364,0.1334263920356148],[0.92,0.6363636363636364,0.1249608953448702],[0.93,0.6363636363636364,0.11705044819046827],[0.9400000000000001,0.6363636363636364,0],[0.9500000000000001,0.6363636363636364,0],[0.96,0.6363636363636364,0],[0.97,0.6363636363636364,0],[0.98,0.6363636363636364,0],[0.99,0.6363636363636364,0],[1,0.6363636363636364,0],[0,0.6439393939393939,0.756308112646852],[0.01,0.6439393939393939,0.757040240781522],[0.02,0.6439393939393939,0.7585475079207917],[0.03,0.6439393939393939,0.7608413622663891],[0.04,0.6439393939393939,0.7639894805768488],[0.05,0.6439393939393939,0.7677740087856336],[0.06,0.6439393939393939,0.7718645424756667],[0.07,0.6439393939393939,0.77554784393244],[0.08,0.6439393939393939,0],[0.09,0.6439393939393939,0.7437440819423571],[0.1,0.6439393939393939,0.7398060261262729],[0.11,0.6439393939393939,0.7350422823347458],[0.12,0.6439393939393939,0.7300399665193376],[0.13,0.6439393939393939,0.7249757958929811],[0.14,0.6439393939393939,0.7201202920570806],[0.15,0.6439393939393939,0.715333271941097],[0.16,0.6439393939393939,0.7105893293320309],[0.17,0.6439393939393939,0.705847799638724],[0.18,0.6439393939393939,0.7010026423593587],[0.19,0.6439393939393939,0.6961145404007888],[0.2,0.6439393939393939,0.6911756267462097],[0.21,0.6439393939393939,0.6863503773885637],[0.22,0.6439393939393939,0.6818577710885008],[0.23,0.6439393939393939,0.6777674784264931],[0.24,0.6439393939393939,0.6739169130961767],[0.25,0.6439393939393939,0.6701819841152633],[0.26,0.6439393939393939,0.6663855880813959],[0.27,0.6439393939393939,0.6626671591887947],[0.28,0.6439393939393939,0.6590219197057998],[0.29,0.6439393939393939,0.6559034673738946],[0.3,0.6439393939393939,0.6537291643471103],[0.31,0.6439393939393939,0],[0.32,0.6439393939393939,0],[0.33,0.6439393939393939,0.6123306131392474],[0.34,0.6439393939393939,0.6007082929924641],[0.35000000000000003,0.6439393939393939,0.5890374114292687],[0.36,0.6439393939393939,0.5774730238788439],[0.37,0.6439393939393939,0.5657911224292962],[0.38,0.6439393939393939,0.5558268334749968],[0.39,0.6439393939393939,0.5431404339268212],[0.4,0.6439393939393939,0.5422919140432875],[0.41000000000000003,0.6439393939393939,0.5426917636148395],[0.42,0.6439393939393939,0.541632264335074],[0.43,0.6439393939393939,0.5427300360872116],[0.44,0.6439393939393939,0.5426092417673432],[0.45,0.6439393939393939,0],[0.46,0.6439393939393939,0],[0.47000000000000003,0.6439393939393939,0.4481069452072855],[0.48,0.6439393939393939,0.4386459590718463],[0.49,0.6439393939393939,0.42892234873017226],[0.5,0.6439393939393939,0.42025297960913033],[0.51,0.6439393939393939,0.41286933634590844],[0.52,0.6439393939393939,0.4072200591146768],[0.53,0.6439393939393939,0.40277176443561297],[0.54,0.6439393939393939,0.39934423498269966],[0.55,0.6439393939393939,0.39655017889706295],[0.56,0.6439393939393939,0.3941547020806357],[0.5700000000000001,0.6439393939393939,0.39219255246069606],[0.58,0.6439393939393939,0.39074157580233765],[0.59,0.6439393939393939,0.3705759027714388],[0.6,0.6439393939393939,0.3720735002104515],[0.61,0.6439393939393939,0.37429769085719833],[0.62,0.6439393939393939,0.3765500036323093],[0.63,0.6439393939393939,0],[0.64,0.6439393939393939,0.3968425477418075],[0.65,0.6439393939393939,0.38499580690176854],[0.66,0.6439393939393939,0.37412089159911627],[0.67,0.6439393939393939,0.3651853661813223],[0.68,0.6439393939393939,0.35705575902733466],[0.6900000000000001,0.6439393939393939,0.35031030195295454],[0.7000000000000001,0.6439393939393939,0.3438413439112912],[0.71,0.6439393939393939,0.3377990352809308],[0.72,0.6439393939393939,0.33150412457930256],[0.73,0.6439393939393939,0.32492723179533617],[0.74,0.6439393939393939,0.3177393359362639],[0.75,0.6439393939393939,0.3099671149909672],[0.76,0.6439393939393939,0.301455332426109],[0.77,0.6439393939393939,0.2922701446467727],[0.78,0.6439393939393939,0.28242612158641967],[0.79,0.6439393939393939,0.2719066023299934],[0.8,0.6439393939393939,0.26092344277508084],[0.81,0.6439393939393939,0.2493696243596943],[0.8200000000000001,0.6439393939393939,0.23752917288893433],[0.8300000000000001,0.6439393939393939,0.22536340521583953],[0.84,0.6439393939393939,0.21304256819727024],[0.85,0.6439393939393939,0.20073597800129472],[0.86,0.6439393939393939,0.18849160788860153],[0.87,0.6439393939393939,0.17660183899611845],[0.88,0.6439393939393939,0.16517154349737623],[0.89,0.6439393939393939,0.15432862979838505],[0.9,0.6439393939393939,0.1443111995515971],[0.91,0.6439393939393939,0.13483108168609778],[0.92,0.6439393939393939,0.12599350778435242],[0.93,0.6439393939393939,0.11701105978119367],[0.9400000000000001,0.6439393939393939,0],[0.9500000000000001,0.6439393939393939,0],[0.96,0.6439393939393939,0],[0.97,0.6439393939393939,0],[0.98,0.6439393939393939,0],[0.99,0.6439393939393939,0],[1,0.6439393939393939,0],[0,0.6515151515151515,0.7551591987454903],[0.01,0.6515151515151515,0.7557794978908683],[0.02,0.6515151515151515,0.7570194150872],[0.03,0.6515151515151515,0.7590500897538704],[0.04,0.6515151515151515,0.7617744446663154],[0.05,0.6515151515151515,0.7652878640623848],[0.06,0.6515151515151515,0.7689929931853206],[0.07,0.6515151515151515,0.7724307805729053],[0.08,0.6515151515151515,0.7508337128045091],[0.09,0.6515151515151515,0.7408574645324133],[0.1,0.6515151515151515,0.7366472028717245],[0.11,0.6515151515151515,0.7318100345791739],[0.12,0.6515151515151515,0.726628329593995],[0.13,0.6515151515151515,0.7216561212743842],[0.14,0.6515151515151515,0.716777844732621],[0.15,0.6515151515151515,0.7120674491569772],[0.16,0.6515151515151515,0.7073988576139262],[0.17,0.6515151515151515,0.7026551359567788],[0.18,0.6515151515151515,0.6978352299934534],[0.19,0.6515151515151515,0.6928057033421312],[0.2,0.6515151515151515,0.6876705304986412],[0.21,0.6515151515151515,0.6826279135185949],[0.22,0.6515151515151515,0.678174038794357],[0.23,0.6515151515151515,0.6746156171761748],[0.24,0.6515151515151515,0.6713913988368927],[0.25,0.6515151515151515,0.6682510445139324],[0.26,0.6515151515151515,0.6650211606864893],[0.27,0.6515151515151515,0.661788810581895],[0.28,0.6515151515151515,0.6586132494408137],[0.29,0.6515151515151515,0.6559388091905343],[0.3,0.6515151515151515,0.6540555018762898],[0.31,0.6515151515151515,0.599160940571823],[0.32,0.6515151515151515,0.5941738647850288],[0.33,0.6515151515151515,0.6159946445778528],[0.34,0.6515151515151515,0.6039420868419534],[0.35000000000000003,0.6515151515151515,0.5923927278310103],[0.36,0.6515151515151515,0.5811198788783032],[0.37,0.6515151515151515,0.5699752102358966],[0.38,0.6515151515151515,0.5586023413419425],[0.39,0.6515151515151515,0.5478278703000226],[0.4,0.6515151515151515,0.5477693934961849],[0.41000000000000003,0.6515151515151515,0.5460585631886962],[0.42,0.6515151515151515,0.546815304302392],[0.43,0.6515151515151515,0.5457917564346938],[0.44,0.6515151515151515,0.5466031670186444],[0.45,0.6515151515151515,0.42039942738352154],[0.46,0.6515151515151515,0.41577052563498573],[0.47000000000000003,0.6515151515151515,0.4504001866555025],[0.48,0.6515151515151515,0.44033192286362466],[0.49,0.6515151515151515,0.43057725095955746],[0.5,0.6515151515151515,0.42153258741099375],[0.51,0.6515151515151515,0.4143430755040455],[0.52,0.6515151515151515,0.4084243736293467],[0.53,0.6515151515151515,0.4039665063944102],[0.54,0.6515151515151515,0.4002682150810505],[0.55,0.6515151515151515,0.39718140690190185],[0.56,0.6515151515151515,0.3944091616475627],[0.5700000000000001,0.6515151515151515,0.39194724642308065],[0.58,0.6515151515151515,0.38996459291216784],[0.59,0.6515151515151515,0.36979571914086584],[0.6,0.6515151515151515,0.3713395394617816],[0.61,0.6515151515151515,0.3733263727939946],[0.62,0.6515151515151515,0.37537953430193816],[0.63,0.6515151515151515,0.3505310551451508],[0.64,0.6515151515151515,0.3954894344053937],[0.65,0.6515151515151515,0.38359776716970245],[0.66,0.6515151515151515,0.3732774594766617],[0.67,0.6515151515151515,0.36388955230613096],[0.68,0.6515151515151515,0.3561342972365074],[0.6900000000000001,0.6515151515151515,0.3488820126082341],[0.7000000000000001,0.6515151515151515,0.34247133841700705],[0.71,0.6515151515151515,0.33607767608894434],[0.72,0.6515151515151515,0.3297071169545732],[0.73,0.6515151515151515,0.3229372829877266],[0.74,0.6515151515151515,0.3157470789416372],[0.75,0.6515151515151515,0.3079320756064787],[0.76,0.6515151515151515,0.29954922151580676],[0.77,0.6515151515151515,0.29052285228330876],[0.78,0.6515151515151515,0.28089026488088176],[0.79,0.6515151515151515,0.27075226288775145],[0.8,0.6515151515151515,0.2600377422657073],[0.81,0.6515151515151515,0.2489924792536256],[0.8200000000000001,0.6515151515151515,0.23751741114447034],[0.8300000000000001,0.6515151515151515,0.22583208791437342],[0.84,0.6515151515151515,0.21398217505598427],[0.85,0.6515151515151515,0.20204623313720618],[0.86,0.6515151515151515,0.19025159689268495],[0.87,0.6515151515151515,0.17864031227888683],[0.88,0.6515151515151515,0.16741722137111203],[0.89,0.6515151515151515,0.15675508208833583],[0.9,0.6515151515151515,0.1465534044919179],[0.91,0.6515151515151515,0.1370513009251677],[0.92,0.6515151515151515,0.12761763511873747],[0.93,0.6515151515151515,0.11782509311071312],[0.9400000000000001,0.6515151515151515,0.1042463883821666],[0.9500000000000001,0.6515151515151515,0],[0.96,0.6515151515151515,0],[0.97,0.6515151515151515,0],[0.98,0.6515151515151515,0],[0.99,0.6515151515151515,0],[1,0.6515151515151515,0],[0,0.6590909090909091,0.7543834158130253],[0.01,0.6590909090909091,0.7548458039178452],[0.02,0.6590909090909091,0.7559129179722706],[0.03,0.6590909090909091,0.7575262712770774],[0.04,0.6590909090909091,0.7600041088208359],[0.05,0.6590909090909091,0.7630017672398306],[0.06,0.6590909090909091,0.7664502060597351],[0.07,0.6590909090909091,0.769468367945222],[0.08,0.6590909090909091,0],[0.09,0.6590909090909091,0.7380582914701489],[0.1,0.6590909090909091,0.7338188584018641],[0.11,0.6590909090909091,0.7287968834859264],[0.12,0.6590909090909091,0.7237158299228436],[0.13,0.6590909090909091,0.7186648694175253],[0.14,0.6590909090909091,0.7139059191268595],[0.15,0.6590909090909091,0.7092487940041574],[0.16,0.6590909090909091,0.704625981143426],[0.17,0.6590909090909091,0.6999560405124776],[0.18,0.6590909090909091,0.6950236067747962],[0.19,0.6590909090909091,0.6898169553447576],[0.2,0.6590909090909091,0.6841911421219007],[0.21,0.6590909090909091,0.6783337784398769],[0.22,0.6590909090909091,0.6737346082149027],[0.23,0.6590909090909091,0.6710358891565515],[0.24,0.6590909090909091,0.6687116946743816],[0.25,0.6590909090909091,0.6661951362159595],[0.26,0.6590909090909091,0.6635540638788766],[0.27,0.6590909090909091,0.6606501372228014],[0.28,0.6590909090909091,0.6579572912728244],[0.29,0.6590909090909091,0.6553793161146457],[0.3,0.6590909090909091,0.6536328572501701],[0.31,0.6590909090909091,0.6524720445637264],[0.32,0.6590909090909091,0],[0.33,0.6590909090909091,0.6188402884705504],[0.34,0.6590909090909091,0.6066797062179754],[0.35000000000000003,0.6590909090909091,0.5952600318753771],[0.36,0.6590909090909091,0.5844395370193116],[0.37,0.6590909090909091,0.5739863615222404],[0.38,0.6590909090909091,0.5628593650674885],[0.39,0.6590909090909091,0.5543562587001174],[0.4,0.6590909090909091,0.5521601228412506],[0.41000000000000003,0.6590909090909091,0.551975379024088],[0.42,0.6590909090909091,0.5496834318545853],[0.43,0.6590909090909091,0.5505536549192303],[0.44,0.6590909090909091,0.5498281149610276],[0.45,0.6590909090909091,0],[0.46,0.6590909090909091,0],[0.47000000000000003,0.6590909090909091,0.45293606286433163],[0.48,0.6590909090909091,0.4425309385616969],[0.49,0.6590909090909091,0.4321645402531955],[0.5,0.6590909090909091,0.42329904735422463],[0.51,0.6590909090909091,0.41562707514732194],[0.52,0.6590909090909091,0.4098365394040585],[0.53,0.6590909090909091,0.4050030453317014],[0.54,0.6590909090909091,0.4011792569772667],[0.55,0.6590909090909091,0.3977319316642118],[0.56,0.6590909090909091,0.39458290965511134],[0.5700000000000001,0.6590909090909091,0.3916501950994595],[0.58,0.6590909090909091,0.3890762286831009],[0.59,0.6590909090909091,0.36901900971205037],[0.6,0.6590909090909091,0.3705583420230113],[0.61,0.6590909090909091,0.3725572823987683],[0.62,0.6590909090909091,0.37430517149004083],[0.63,0.6590909090909091,0],[0.64,0.6590909090909091,0.39368300518815497],[0.65,0.6590909090909091,0.3823903762006272],[0.66,0.6590909090909091,0.3718919744788969],[0.67,0.6590909090909091,0.3630249524438509],[0.68,0.6590909090909091,0.35481695856982454],[0.6900000000000001,0.6590909090909091,0.34779014948210957],[0.7000000000000001,0.6590909090909091,0.3410192564494092],[0.71,0.6590909090909091,0.33462312895681035],[0.72,0.6590909090909091,0.32805744798116887],[0.73,0.6590909090909091,0.3212775938956237],[0.74,0.6590909090909091,0.31402835357272324],[0.75,0.6590909090909091,0.30632565824017055],[0.76,0.6590909090909091,0.29803848881975287],[0.77,0.6590909090909091,0.2892278354638784],[0.78,0.6590909090909091,0.2798912925057552],[0.79,0.6590909090909091,0.270013062654176],[0.8,0.6590909090909091,0.25975775726696726],[0.81,0.6590909090909091,0.24901983079086407],[0.8200000000000001,0.6590909090909091,0.23803020651379428],[0.8300000000000001,0.6590909090909091,0.22674042164279892],[0.84,0.6590909090909091,0.21528387116331088],[0.85,0.6590909090909091,0.20379301324561847],[0.86,0.6590909090909091,0.19229471688163743],[0.87,0.6590909090909091,0.18102282681152398],[0.88,0.6590909090909091,0.17005471871519556],[0.89,0.6590909090909091,0.15944053156983387],[0.9,0.6590909090909091,0.1494149187452293],[0.91,0.6590909090909091,0.13967370058829826],[0.92,0.6590909090909091,0.13046170899619375],[0.93,0.6590909090909091,0.12128592949142503],[0.9400000000000001,0.6590909090909091,0.1131755392646202],[0.9500000000000001,0.6590909090909091,0],[0.96,0.6590909090909091,0],[0.97,0.6590909090909091,0],[0.98,0.6590909090909091,0],[0.99,0.6590909090909091,0],[1,0.6590909090909091,0],[0,0.6666666666666667,0.7538889062466241],[0.01,0.6666666666666667,0.7542751085472874],[0.02,0.6666666666666667,0.755015183121912],[0.03,0.6666666666666667,0.7564471237889001],[0.04,0.6666666666666667,0.7583786314159644],[0.05,0.6666666666666667,0.761154182223076],[0.06,0.6666666666666667,0.7640499604899433],[0.07,0.6666666666666667,0.7667556505665307],[0.08,0.6666666666666667,0.7453387356730994],[0.09,0.6666666666666667,0.7356015354563739],[0.1,0.6666666666666667,0.7311634289677982],[0.11,0.6666666666666667,0.7262261271632346],[0.12,0.6666666666666667,0.72104358887029],[0.13,0.6666666666666667,0.7161531925378228],[0.14,0.6666666666666667,0.7114154819951302],[0.15,0.6666666666666667,0.7068710365605271],[0.16,0.6666666666666667,0.7023635354981943],[0.17,0.6666666666666667,0.6976928719104463],[0.18,0.6666666666666667,0.6927885111240972],[0.19,0.6666666666666667,0.6873144273141746],[0.2,0.6666666666666667,0.6810187433771692],[0.21,0.6666666666666667,0.672969528094346],[0.22,0.6666666666666667,0.667418745087055],[0.23,0.6666666666666667,0.667252158651682],[0.24,0.6666666666666667,0.6659868758992465],[0.25,0.6666666666666667,0.6642351550752934],[0.26,0.6666666666666667,0.6619211942888876],[0.27,0.6666666666666667,0.6595134646316244],[0.28,0.6666666666666667,0.6567961257338871],[0.29,0.6666666666666667,0.6546083880143491],[0.3,0.6666666666666667,0.6526524199106737],[0.31,0.6666666666666667,0.6517189502053906],[0.32,0.6666666666666667,0.6157801401684129],[0.33,0.6666666666666667,0.6206659817810793],[0.34,0.6666666666666667,0.6085764584204847],[0.35000000000000003,0.6666666666666667,0.5974666465983809],[0.36,0.6666666666666667,0.5874343129788878],[0.37,0.6666666666666667,0.5777894869594248],[0.38,0.6666666666666667,0.5695069625031699],[0.39,0.6666666666666667,0.561809145681024],[0.4,0.6666666666666667,0.5590684860543715],[0.41000000000000003,0.6666666666666667,0.5550311224012185],[0.42,0.6666666666666667,0.5551433076707118],[0.43,0.6666666666666667,0.552956009042131],[0.44,0.6666666666666667,0.5535637030289211],[0.45,0.6666666666666667,0.4280696624767793],[0.46,0.6666666666666667,0.4252400573559861],[0.47000000000000003,0.6666666666666667,0.4555251181217468],[0.48,0.6666666666666667,0.4445702639314999],[0.49,0.6666666666666667,0.43429240535490804],[0.5,0.6666666666666667,0.42480395524235776],[0.51,0.6666666666666667,0.4173423804015507],[0.52,0.6666666666666667,0.4110392498894633],[0.53,0.6666666666666667,0.4062281479484482],[0.54,0.6666666666666667,0.40200931976910753],[0.55,0.6666666666666667,0.39834010689456173],[0.56,0.6666666666666667,0.39479403601843654],[0.5700000000000001,0.6666666666666667,0.39141514802628097],[0.58,0.6666666666666667,0.38825738555567074],[0.59,0.6666666666666667,0.36850183483540566],[0.6,0.6666666666666667,0.37009946405132765],[0.61,0.6666666666666667,0.37179117309847476],[0.62,0.6666666666666667,0.3733308449394422],[0.63,0.6666666666666667,0.35220293435745376],[0.64,0.6666666666666667,0.3919540086629018],[0.65,0.6666666666666667,0.3808145969312353],[0.66,0.6666666666666667,0.37092285327867985],[0.67,0.6666666666666667,0.36173868625899536],[0.68,0.6666666666666667,0.35392008518508034],[0.6900000000000001,0.6666666666666667,0.3465325962209485],[0.7000000000000001,0.6666666666666667,0.33987101909844586],[0.71,0.6666666666666667,0.3332630325534651],[0.72,0.6666666666666667,0.3266982020100629],[0.73,0.6666666666666667,0.31984561455573846],[0.74,0.6666666666666667,0.312674982835313],[0.75,0.6666666666666667,0.3050210165919284],[0.76,0.6666666666666667,0.29693245393482437],[0.77,0.6666666666666667,0.28833201818172044],[0.78,0.6666666666666667,0.2792519001330337],[0.79,0.6666666666666667,0.2697564177487647],[0.8,0.6666666666666667,0.25977312037374234],[0.81,0.6666666666666667,0.24949411737705332],[0.8200000000000001,0.6666666666666667,0.23881966818253098],[0.8300000000000001,0.6666666666666667,0.22792824001091969],[0.84,0.6666666666666667,0.21685282432510117],[0.85,0.6666666666666667,0.20564764783415432],[0.86,0.6666666666666667,0.19450994454057866],[0.87,0.6666666666666667,0.18348933762928835],[0.88,0.6666666666666667,0.17274495856844768],[0.89,0.6666666666666667,0.162388770583483],[0.9,0.6666666666666667,0.1522935197681757],[0.91,0.6666666666666667,0.14272083125689689],[0.92,0.6666666666666667,0.1332051226383326],[0.93,0.6666666666666667,0.12387989110642288],[0.9400000000000001,0.6666666666666667,0.11423744646731784],[0.9500000000000001,0.6666666666666667,0],[0.96,0.6666666666666667,0],[0.97,0.6666666666666667,0],[0.98,0.6666666666666667,0],[0.99,0.6666666666666667,0],[1,0.6666666666666667,0],[0,0.6742424242424243,0.7536348114896286],[0.01,0.6742424242424243,0.7538456943229068],[0.02,0.6742424242424243,0.7544822042159408],[0.03,0.6742424242424243,0.7554356064003394],[0.04,0.6742424242424243,0.7572059809240765],[0.05,0.6742424242424243,0.7593620776091521],[0.06,0.6742424242424243,0.7620513195879896],[0.07,0.6742424242424243,0.7643461428847549],[0.08,0.6742424242424243,0],[0.09,0.6742424242424243,0.7331250249480883],[0.1,0.6742424242424243,0.7287958140198582],[0.11,0.6742424242424243,0.723803538501863],[0.12,0.6742424242424243,0.7188146331571891],[0.13,0.6742424242424243,0.7139223196184055],[0.14,0.6742424242424243,0.7093570797504588],[0.15,0.6742424242424243,0.7049283435708662],[0.16,0.6742424242424243,0.700519828305294],[0.17,0.6742424242424243,0.6960223897422856],[0.18,0.6742424242424243,0.6911342672536499],[0.19,0.6742424242424243,0.6857942578596012],[0.2,0.6742424242424243,0.6796993471980577],[0.21,0.6742424242424243,0.672678831279789],[0.22,0.6742424242424243,0.6646467487994789],[0.23,0.6742424242424243,0.664536954241775],[0.24,0.6742424242424243,0.6637835029887549],[0.25,0.6742424242424243,0.6623387423961641],[0.26,0.6742424242424243,0.660470433214428],[0.27,0.6742424242424243,0.6579857303550509],[0.28,0.6742424242424243,0.6556450519350192],[0.29,0.6742424242424243,0.6530552163633746],[0.3,0.6742424242424243,0.6513081308962236],[0.31,0.6742424242424243,0.6500894420152158],[0.32,0.6742424242424243,0],[0.33,0.6742424242424243,0.6213373228092245],[0.34,0.6742424242424243,0.609390049851521],[0.35000000000000003,0.6742424242424243,0.5988626682461171],[0.36,0.6742424242424243,0.5892705696479352],[0.37,0.6742424242424243,0.5812396955479396],[0.38,0.6742424242424243,0.5731069062972272],[0.39,0.6742424242424243,0.567980579058492],[0.4,0.6742424242424243,0.562048697294238],[0.41000000000000003,0.6742424242424243,0.5607302929701665],[0.42,0.6742424242424243,0.5568012408249494],[0.43,0.6742424242424243,0.5573518249187771],[0.44,0.6742424242424243,0.5559786905872126],[0.45,0.6742424242424243,0],[0.46,0.6742424242424243,0],[0.47000000000000003,0.6742424242424243,0.4580255564620068],[0.48,0.6742424242424243,0.4469908782528872],[0.49,0.6742424242424243,0.43612801897034614],[0.5,0.6742424242424243,0.4268650930317961],[0.51,0.6742424242424243,0.41879774184357665],[0.52,0.6742424242424243,0.4126232802439985],[0.53,0.6742424242424243,0.40734725836677704],[0.54,0.6742424242424243,0.40304403226630403],[0.55,0.6742424242424243,0.39901208351826234],[0.56,0.6742424242424243,0.395181759863912],[0.5700000000000001,0.6742424242424243,0.3913809509272181],[0.58,0.6742424242424243,0.3876633577020715],[0.59,0.6742424242424243,0.36842995426488734],[0.6,0.6742424242424243,0.3697918133814077],[0.61,0.6742424242424243,0.3713656576822536],[0.62,0.6742424242424243,0.3724927163487445],[0.63,0.6742424242424243,0],[0.64,0.6742424242424243,0.38983792371815107],[0.65,0.6742424242424243,0.3795109143542562],[0.66,0.6742424242424243,0.3695856866983301],[0.67,0.6742424242424243,0.3609280556567722],[0.68,0.6742424242424243,0.35278139285973154],[0.6900000000000001,0.6742424242424243,0.3456368538373527],[0.7000000000000001,0.6742424242424243,0.3387324916707614],[0.71,0.6742424242424243,0.33216638423001543],[0.72,0.6742424242424243,0.3255016083466705],[0.73,0.6742424242424243,0.3186891512715406],[0.74,0.6742424242424243,0.311526429374048],[0.75,0.6742424242424243,0.3040253008556302],[0.76,0.6742424242424243,0.2960661750890131],[0.77,0.6742424242424243,0.28770447275349814],[0.78,0.6742424242424243,0.27891272924772303],[0.79,0.6742424242424243,0.2696705713515094],[0.8,0.6742424242424243,0.2600895938270186],[0.81,0.6742424242424243,0.2500634573395819],[0.8200000000000001,0.6742424242424243,0.23977425554130444],[0.8300000000000001,0.6742424242424243,0.2291772377007803],[0.84,0.6742424242424243,0.2183835315100915],[0.85,0.6742424242424243,0.20750078176735937],[0.86,0.6742424242424243,0.19653257918441863],[0.87,0.6742424242424243,0.18578097213002054],[0.88,0.6742424242424243,0.17531214759741498],[0.89,0.6742424242424243,0.1651044182108546],[0.9,0.6742424242424243,0.15528886125737298],[0.91,0.6742424242424243,0.14558343513620542],[0.92,0.6742424242424243,0.1361709068912882],[0.93,0.6742424242424243,0.1264166715316077],[0.9400000000000001,0.6742424242424243,0.1160891107823],[0.9500000000000001,0.6742424242424243,0],[0.96,0.6742424242424243,0],[0.97,0.6742424242424243,0],[0.98,0.6742424242424243,0],[0.99,0.6742424242424243,0],[1,0.6742424242424243,0],[0,0.6818181818181819,0.7534568041139087],[0.01,0.6818181818181819,0.7536315115264878],[0.02,0.6818181818181819,0.7539326530162767],[0.03,0.6818181818181819,0.7547940375593483],[0.04,0.6818181818181819,0.7559770565166029],[0.05,0.6818181818181819,0.757981709887091],[0.06,0.6818181818181819,0.7600588724710344],[0.07,0.6818181818181819,0.7620742824063695],[0.08,0.6818181818181819,0.7225906033908135],[0.09,0.6818181818181819,0.7307732209623536],[0.1,0.6818181818181819,0.7265359669521636],[0.11,0.6818181818181819,0.7217650025627976],[0.12,0.6818181818181819,0.7167885717219779],[0.13,0.6818181818181819,0.7121138894895876],[0.14,0.6818181818181819,0.7076415794157518],[0.15,0.6818181818181819,0.7033765893684976],[0.16,0.6818181818181819,0.699169673878806],[0.17,0.6818181818181819,0.6947886302016868],[0.18,0.6818181818181819,0.6901678944318681],[0.19,0.6818181818181819,0.6850325251941736],[0.2,0.6818181818181819,0.679498742725605],[0.21,0.6818181818181819,0.6736442192010171],[0.22,0.6818181818181819,0.6632150375982526],[0.23,0.6818181818181819,0.6626512163243692],[0.24,0.6818181818181819,0.6619286820514703],[0.25,0.6818181818181819,0.6607312538737775],[0.26,0.6818181818181819,0.6588179702433127],[0.27,0.6818181818181819,0.6566133480413259],[0.28,0.6818181818181819,0.6538013611972645],[0.29,0.6818181818181819,0.6514083381161925],[0.3,0.6818181818181819,0.6489851045876402],[0.31,0.6818181818181819,0.6477033727203054],[0.32,0.6818181818181819,0.6127141040189876],[0.33,0.6818181818181819,0.6201837511141269],[0.34,0.6818181818181819,0.6089440587836461],[0.35000000000000003,0.6818181818181819,0.5988171054301199],[0.36,0.6818181818181819,0.5905493328343414],[0.37,0.6818181818181819,0.582570789459948],[0.38,0.6818181818181819,0.5767972234660662],[0.39,0.6818181818181819,0.5698925503471712],[0.4,0.6818181818181819,0.5671071907250851],[0.41000000000000003,0.6818181818181819,0.5616632310830546],[0.42,0.6818181818181819,0.5615126655766143],[0.43,0.6818181818181819,0.5583533702054058],[0.44,0.6818181818181819,0.5588701297156006],[0.45,0.6818181818181819,0.42475467340201206],[0.46,0.6818181818181819,0.4226663067361969],[0.47000000000000003,0.6818181818181819,0.46049989176800876],[0.48,0.6818181818181819,0.4491567330790255],[0.49,0.6818181818181819,0.43849063756710505],[0.5,0.6818181818181819,0.42865774783124627],[0.51,0.6818181818181819,0.42076363298841774],[0.52,0.6818181818181819,0.4140677566084005],[0.53,0.6818181818181819,0.408800578771472],[0.54,0.6818181818181819,0.4041274832726354],[0.55,0.6818181818181819,0.3999400930122028],[0.56,0.6818181818181819,0.39579965214658513],[0.5700000000000001,0.6818181818181819,0.3917032328532063],[0.58,0.6818181818181819,0.38766275555157137],[0.59,0.6818181818181819,0.36867786614020714],[0.6,0.6818181818181819,0.3699429109393844],[0.61,0.6818181818181819,0.37108494891148885],[0.62,0.6818181818181819,0.3719914624762692],[0.63,0.6818181818181819,0.37036530520749616],[0.64,0.6818181818181819,0.3882519413451026],[0.65,0.6818181818181819,0.378108191445398],[0.66,0.6818181818181819,0.3687591558713665],[0.67,0.6818181818181819,0.3598577112921306],[0.68,0.6818181818181819,0.3520792712705924],[0.6900000000000001,0.6818181818181819,0.3446606184819838],[0.7000000000000001,0.6818181818181819,0.33787125593320233],[0.71,0.6818181818181819,0.3311582582802127],[0.72,0.6818181818181819,0.324508723762121],[0.73,0.6818181818181819,0.31765857332116965],[0.74,0.6818181818181819,0.31058098165339426],[0.75,0.6818181818181819,0.30313440330747],[0.76,0.6818181818181819,0.2953680647574195],[0.77,0.6818181818181819,0.2871912814051045],[0.78,0.6818181818181819,0.2786341619456776],[0.79,0.6818181818181819,0.2697106839841677],[0.8,0.6818181818181819,0.2603463184611914],[0.81,0.6818181818181819,0.2506695430935766],[0.8200000000000001,0.6818181818181819,0.24058958444862705],[0.8300000000000001,0.6818181818181819,0.23026452704166525],[0.84,0.6818181818181819,0.21975113370980814],[0.85,0.6818181818181819,0.2090627311107323],[0.86,0.6818181818181819,0.1981851674371785],[0.87,0.6818181818181819,0.18761336680928403],[0.88,0.6818181818181819,0.17741206524055422],[0.89,0.6818181818181819,0.16756741979494902],[0.9,0.6818181818181819,0.15788179930429375],[0.91,0.6818181818181819,0.14850389498485206],[0.92,0.6818181818181819,0.13904230866349346],[0.93,0.6818181818181819,0.12945734846580403],[0.9400000000000001,0.6818181818181819,0.11887164733013367],[0.9500000000000001,0.6818181818181819,0.1186042239238028],[0.96,0.6818181818181819,0],[0.97,0.6818181818181819,0],[0.98,0.6818181818181819,0],[0.99,0.6818181818181819,0],[1,0.6818181818181819,0],[0,0.6893939393939394,0.75330841062178],[0.01,0.6893939393939394,0.7533224999338859],[0.02,0.6893939393939394,0.7535931394274673],[0.03,0.6893939393939394,0.7539982268634355],[0.04,0.6893939393939394,0.7551090464719699],[0.05,0.6893939393939394,0.7564855864996659],[0.06,0.6893939393939394,0.7583897750005966],[0.07,0.6893939393939394,0.7599135909354962],[0.08,0.6893939393939394,0],[0.09,0.6893939393939394,0.728634373240302],[0.1,0.6893939393939394,0.7246107709521241],[0.11,0.6893939393939394,0.7199081812277828],[0.12,0.6893939393939394,0.7151760373839007],[0.13,0.6893939393939394,0.7105829441368186],[0.14,0.6893939393939394,0.7063137795284118],[0.15,0.6893939393939394,0.7022267787394301],[0.16,0.6893939393939394,0.6981827692200111],[0.17,0.6893939393939394,0.6940817174615249],[0.18,0.6893939393939394,0.6896515189717912],[0.19,0.6893939393939394,0.6849195494549898],[0.2,0.6893939393939394,0.6797913709846205],[0.21,0.6893939393939394,0.6745632756010068],[0.22,0.6893939393939394,0],[0.23,0.6893939393939394,0.6608776774090503],[0.24,0.6893939393939394,0.6603025534938519],[0.25,0.6893939393939394,0.6591067971393272],[0.26,0.6893939393939394,0.657303823815703],[0.27,0.6893939393939394,0.6547396668568617],[0.28,0.6893939393939394,0.6520593777373509],[0.29,0.6893939393939394,0.6488581458795262],[0.3,0.6893939393939394,0.6463261717441385],[0.31,0.6893939393939394,0.6442299072614598],[0.32,0.6893939393939394,0.6234645224168602],[0.33,0.6893939393939394,0.616276978264132],[0.34,0.6893939393939394,0.6070759950635811],[0.35000000000000003,0.6893939393939394,0.5975763837371788],[0.36,0.6893939393939394,0.5900046757734119],[0.37,0.6893939393939394,0.5841193642587994],[0.38,0.6893939393939394,0.5772899641556204],[0.39,0.6893939393939394,0.5735307244521055],[0.4,0.6893939393939394,0.5672521810818663],[0.41000000000000003,0.6893939393939394,0.5660734746204272],[0.42,0.6893939393939394,0.5612722832363644],[0.43,0.6893939393939394,0.5617937182090367],[0.44,0.6893939393939394,0.5599818067478443],[0.45,0.6893939393939394,0],[0.46,0.6893939393939394,0],[0.47000000000000003,0.6893939393939394,0.4627145930737625],[0.48,0.6893939393939394,0.45162374047415577],[0.49,0.6893939393939394,0.4406618837930466],[0.5,0.6893939393939394,0.43099038544071266],[0.51,0.6893939393939394,0.4225833781238229],[0.52,0.6893939393939394,0.415919244168653],[0.53,0.6893939393939394,0.41026500656982334],[0.54,0.6893939393939394,0.40550936183216596],[0.55,0.6893939393939394,0.40105900432935476],[0.56,0.6893939393939394,0.396735814399742],[0.5700000000000001,0.6893939393939394,0.3923405374127209],[0.58,0.6893939393939394,0.38780658396105977],[0.59,0.6893939393939394,0.3695329102689797],[0.6,0.6893939393939394,0.37038144415084884],[0.61,0.6893939393939394,0.371256137315534],[0.62,0.6893939393939394,0.37172762893229083],[0.63,0.6893939393939394,0],[0.64,0.6893939393939394,0.3869143404544124],[0.65,0.6893939393939394,0.3771919795142715],[0.66,0.6893939393939394,0.36773916054149874],[0.67,0.6893939393939394,0.3592933291685052],[0.68,0.6893939393939394,0.35123061564716596],[0.6900000000000001,0.6893939393939394,0.3440198884247959],[0.7000000000000001,0.6893939393939394,0.3370230668501022],[0.71,0.6893939393939394,0.3303300102116343],[0.72,0.6893939393939394,0.32358569138557197],[0.73,0.6893939393939394,0.31674948874899356],[0.74,0.6893939393939394,0.30965651742176636],[0.75,0.6893939393939394,0.3023279462554683],[0.76,0.6893939393939394,0.2946435260521139],[0.77,0.6893939393939394,0.28666570334914987],[0.78,0.6893939393939394,0.2783232789317957],[0.79,0.6893939393939394,0.26960029101947214],[0.8,0.6893939393939394,0.26052758284798283],[0.81,0.6893939393939394,0.25100493079232555],[0.8200000000000001,0.6893939393939394,0.2411579821675356],[0.8300000000000001,0.6893939393939394,0.23100304082973327],[0.84,0.6893939393939394,0.22068092795839916],[0.85,0.6893939393939394,0.2104839452312391],[0.86,0.6893939393939394,0.1991813001552213],[0.87,0.6893939393939394,0.18872699306559992],[0.88,0.6893939393939394,0.17894757687275525],[0.89,0.6893939393939394,0.16945386071202378],[0.9,0.6893939393939394,0.16022557131549736],[0.91,0.6893939393939394,0.1510390958903833],[0.92,0.6893939393939394,0.14207432149401258],[0.93,0.6893939393939394,0.1330131957950223],[0.9400000000000001,0.6893939393939394,0.1241281501210292],[0.9500000000000001,0.6893939393939394,0.11660327756673161],[0.96,0.6893939393939394,0],[0.97,0.6893939393939394,0],[0.98,0.6893939393939394,0],[0.99,0.6893939393939394,0],[1,0.6893939393939394,0],[0,0.696969696969697,0.7530092068372961],[0.01,0.696969696969697,0.7530269296885372],[0.02,0.696969696969697,0.7530153697273354],[0.03,0.696969696969697,0.7534175508706209],[0.04,0.696969696969697,0.7540052522391427],[0.05,0.696969696969697,0.7553095969422425],[0.06,0.696969696969697,0.7566466761062809],[0.07,0.696969696969697,0.7579575272109216],[0.08,0.696969696969697,0.7222751663553043],[0.09,0.696969696969697,0.7268057532441199],[0.1,0.696969696969697,0.7229018307385742],[0.11,0.696969696969697,0.7184401705262489],[0.12,0.696969696969697,0.7138090773010192],[0.13,0.696969696969697,0.7094385289343585],[0.14,0.696969696969697,0.7053185646847228],[0.15,0.696969696969697,0.7014096945863744],[0.16,0.696969696969697,0.6976079121273819],[0.17,0.696969696969697,0.6936951503936806],[0.18,0.696969696969697,0.6896197956391036],[0.19,0.696969696969697,0.6851835107853456],[0.2,0.696969696969697,0.6805667870411654],[0.21,0.696969696969697,0.6757730371657571],[0.22,0.696969696969697,0.680690650783316],[0.23,0.696969696969697,0.6593599650697837],[0.24,0.696969696969697,0.6587891079161687],[0.25,0.696969696969697,0.6575027455035142],[0.26,0.696969696969697,0.6555129158152891],[0.27,0.696969696969697,0.6529342841365331],[0.28,0.696969696969697,0.6496143981141554],[0.29,0.696969696969697,0.6463290494180163],[0.3,0.696969696969697,0.6427638357202123],[0.31,0.696969696969697,0.6399693687814914],[0.32,0.696969696969697,0.6216210504255589],[0.33,0.696969696969697,0.6142589799648507],[0.34,0.696969696969697,0.6058557771045399],[0.35000000000000003,0.696969696969697,0.5935376316501971],[0.36,0.696969696969697,0.5893197614207167],[0.37,0.696969696969697,0.5834473409265837],[0.38,0.696969696969697,0.5792920063067286],[0.39,0.696969696969697,0.5729502844549839],[0.4,0.696969696969697,0.5707848033420235],[0.41000000000000003,0.696969696969697,0.5649373665220521],[0.42,0.696969696969697,0.5648846457028005],[0.43,0.696969696969697,0.5611627060104931],[0.44,0.696969696969697,0.561658973875311],[0.45,0.696969696969697,0.4240077657848959],[0.46,0.696969696969697,0.4220180332514874],[0.47000000000000003,0.696969696969697,0.4647424578858614],[0.48,0.696969696969697,0.45402013343716235],[0.49,0.696969696969697,0.44327487729336235],[0.5,0.696969696969697,0.433246447210451],[0.51,0.696969696969697,0.4247968248868075],[0.52,0.696969696969697,0.41774588719695555],[0.53,0.696969696969697,0.4120086309342755],[0.54,0.696969696969697,0.40702017820189285],[0.55,0.696969696969697,0.4024648728237147],[0.56,0.696969696969697,0.39799214281621575],[0.5700000000000001,0.696969696969697,0.3934766176923192],[0.58,0.696969696969697,0.38884596299086993],[0.59,0.696969696969697,0.37084732429620204],[0.6,0.696969696969697,0.371357654578796],[0.61,0.696969696969697,0.37169501922362685],[0.62,0.696969696969697,0.3719116284004864],[0.63,0.696969696969697,0.3705882358696001],[0.64,0.696969696969697,0.3854997990691158],[0.65,0.696969696969697,0.37615875727212605],[0.66,0.696969696969697,0.3672430557067369],[0.67,0.696969696969697,0.35856235685233784],[0.68,0.696969696969697,0.35079872366638665],[0.6900000000000001,0.696969696969697,0.3433229328329521],[0.7000000000000001,0.696969696969697,0.33638541334348526],[0.71,0.696969696969697,0.3295289741758689],[0.72,0.696969696969697,0.3227464196568698],[0.73,0.696969696969697,0.315828363235154],[0.74,0.696969696969697,0.30876311847397386],[0.75,0.696969696969697,0.30142381708190824],[0.76,0.696969696969697,0.29387759641802746],[0.77,0.696969696969697,0.2860020884695723],[0.78,0.696969696969697,0.2778475912605963],[0.79,0.696969696969697,0.26933948472716535],[0.8,0.696969696969697,0.2604184234639284],[0.81,0.696969696969697,0.2510935735559173],[0.8200000000000001,0.696969696969697,0.24129855050579557],[0.8300000000000001,0.696969696969697,0.2310734670335638],[0.84,0.696969696969697,0.22102962413575578],[0.85,0.696969696969697,0.21242014152175737],[0.86,0.696969696969697,0.19898375556444586],[0.87,0.696969696969697,0.18896749119009565],[0.88,0.696969696969697,0.1797777602172309],[0.89,0.696969696969697,0.17089442178424513],[0.9,0.696969696969697,0.16206738286141353],[0.91,0.696969696969697,0.15340041675937807],[0.92,0.696969696969697,0.14472023241766793],[0.93,0.696969696969697,0.1362134722125319],[0.9400000000000001,0.696969696969697,0.12764317122905938],[0.9500000000000001,0.696969696969697,0.11913481474014118],[0.96,0.696969696969697,0.1260945612508142],[0.97,0.696969696969697,0],[0.98,0.696969696969697,0],[0.99,0.696969696969697,0],[1,0.696969696969697,0],[0,0.7045454545454546,0.7525378887662799],[0.01,0.7045454545454546,0.7524360005352436],[0.02,0.7045454545454546,0.7524601339315187],[0.03,0.7045454545454546,0.7525053156895228],[0.04,0.7045454545454546,0.7531100218061205],[0.05,0.7045454545454546,0.753896253130304],[0.06,0.7045454545454546,0.7551519439486115],[0.07,0.7045454545454546,0.7561067916309776],[0.08,0.7045454545454546,0],[0.09,0.7045454545454546,0.7251945560602729],[0.1,0.7045454545454546,0.7215095184056932],[0.11,0.7045454545454546,0.7172101628962855],[0.12,0.7045454545454546,0.7127994872323445],[0.13,0.7045454545454546,0.7085692010458728],[0.14,0.7045454545454546,0.7046229983078433],[0.15,0.7045454545454546,0.7009100112137905],[0.16,0.7045454545454546,0.6972680872460747],[0.17,0.7045454545454546,0.6936345951983478],[0.18,0.7045454545454546,0.6897973833500628],[0.19,0.7045454545454546,0.6857867841121676],[0.2,0.7045454545454546,0.6816114339051086],[0.21,0.7045454545454546,0.6777400284887144],[0.22,0.7045454545454546,0.6748834700471593],[0.23,0.7045454545454546,0.6579624753867075],[0.24,0.7045454545454546,0.657208373289858],[0.25,0.7045454545454546,0.6558367014010458],[0.26,0.7045454545454546,0.6536027442908894],[0.27,0.7045454545454546,0.6506689938026479],[0.28,0.7045454545454546,0.6472177326722319],[0.29,0.7045454545454546,0.6431335881714403],[0.3,0.7045454545454546,0.639124257029102],[0.31,0.7045454545454546,0.63504545197257],[0.32,0.7045454545454546,0.619499487473451],[0.33,0.7045454545454546,0.6135467855643139],[0.34,0.7045454545454546,0.6072825481225368],[0.35000000000000003,0.7045454545454546,0.5929886647333886],[0.36,0.7045454545454546,0.5883042937082055],[0.37,0.7045454545454546,0.5841522998205361],[0.38,0.7045454545454546,0.5782520242157736],[0.39,0.7045454545454546,0.5753005048517006],[0.4,0.7045454545454546,0.5691374772586271],[0.41000000000000003,0.7045454545454546,0.5681848170850528],[0.42,0.7045454545454546,0.5630059990125512],[0.43,0.7045454545454546,0.56343429625508],[0.44,0.7045454545454546,0.5613200112094356],[0.45,0.7045454545454546,0],[0.46,0.7045454545454546,0],[0.47000000000000003,0.7045454545454546,0.4661163795781046],[0.48,0.7045454545454546,0.45680525838502734],[0.49,0.7045454545454546,0.4459918735963731],[0.5,0.7045454545454546,0.43575634032887306],[0.51,0.7045454545454546,0.42696950629928687],[0.52,0.7045454545454546,0.4197380803157309],[0.53,0.7045454545454546,0.4138005244858155],[0.54,0.7045454545454546,0.4087028985552534],[0.55,0.7045454545454546,0.40406594423142467],[0.56,0.7045454545454546,0.39954560375615616],[0.5700000000000001,0.7045454545454546,0.3950195870682409],[0.58,0.7045454545454546,0.39043087926100456],[0.59,0.7045454545454546,0.37258701532643546],[0.6,0.7045454545454546,0.37265742855231987],[0.61,0.7045454545454546,0.37261255070359794],[0.62,0.7045454545454546,0.37237765124389133],[0.63,0.7045454545454546,0],[0.64,0.7045454545454546,0.38480833723280716],[0.65,0.7045454545454546,0.3757443790618361],[0.66,0.7045454545454546,0.3666615360718849],[0.67,0.7045454545454546,0.35832487068639995],[0.68,0.7045454545454546,0.3502601165411323],[0.6900000000000001,0.7045454545454546,0.34290593062575114],[0.7000000000000001,0.7045454545454546,0.33573196627478363],[0.71,0.7045454545454546,0.3288206006570777],[0.72,0.7045454545454546,0.3218910776479256],[0.73,0.7045454545454546,0.31491620639236173],[0.74,0.7045454545454546,0.3077648861722895],[0.75,0.7045454545454546,0.30048219021064654],[0.76,0.7045454545454546,0.29293401524103974],[0.77,0.7045454545454546,0.28521962820057767],[0.78,0.7045454545454546,0.27718711957828257],[0.79,0.7045454545454546,0.2688645703589796],[0.8,0.7045454545454546,0.26012598840118434],[0.81,0.7045454545454546,0.25088643744051864],[0.8200000000000001,0.7045454545454546,0.240969115494108],[0.8300000000000001,0.7045454545454546,0.23033724080625134],[0.84,0.7045454545454546,0.21885427951319916],[0.85,0.7045454545454546,0.20829150976872712],[0.86,0.7045454545454546,0.19515759304984992],[0.87,0.7045454545454546,0.18809405167377785],[0.88,0.7045454545454546,0.1801604353394862],[0.89,0.7045454545454546,0.17197012327187214],[0.9,0.7045454545454546,0.16371911642104733],[0.91,0.7045454545454546,0.1554392238778789],[0.92,0.7045454545454546,0.14730006373093132],[0.93,0.7045454545454546,0.1391052047786662],[0.9400000000000001,0.7045454545454546,0.13093983010704513],[0.9500000000000001,0.7045454545454546,0.12243944502967936],[0.96,0.7045454545454546,0],[0.97,0.7045454545454546,0],[0.98,0.7045454545454546,0],[0.99,0.7045454545454546,0],[1,0.7045454545454546,0],[0,0.7121212121212122,0.7517490772077244],[0.01,0.7121212121212122,0.7516818069113722],[0.02,0.7121212121212122,0.7515118251935933],[0.03,0.7121212121212122,0.7516275523010376],[0.04,0.7121212121212122,0.7518483167536079],[0.05,0.7121212121212122,0.7526492956331465],[0.06,0.7121212121212122,0.7534788534016089],[0.07,0.7121212121212122,0.7543328448484515],[0.08,0.7121212121212122,0.7540667290008922],[0.09,0.7121212121212122,0.7237533561182607],[0.1,0.7121212121212122,0.720331927818412],[0.11,0.7121212121212122,0.716245358664773],[0.12,0.7121212121212122,0.7120167839915152],[0.13,0.7121212121212122,0.7079323385679859],[0.14,0.7121212121212122,0.7041510149710144],[0.15,0.7121212121212122,0.7005588651949224],[0.16,0.7121212121212122,0.6971260273500208],[0.17,0.7121212121212122,0.6936476991296486],[0.18,0.7121212121212122,0.6900940651026816],[0.19,0.7121212121212122,0.6863463427953949],[0.2,0.7121212121212122,0.6825465287648809],[0.21,0.7121212121212122,0.6789221815924749],[0.22,0.7121212121212122,0.6758809619266333],[0.23,0.7121212121212122,0.6565488984235326],[0.24,0.7121212121212122,0.6557031764458933],[0.25,0.7121212121212122,0.6538871605623848],[0.26,0.7121212121212122,0.651494172342745],[0.27,0.7121212121212122,0.648230779416133],[0.28,0.7121212121212122,0.6443579039736363],[0.29,0.7121212121212122,0.6400091766944924],[0.3,0.7121212121212122,0.6352012865593564],[0.31,0.7121212121212122,0.6302204587510793],[0.32,0.7121212121212122,0.6182059247174457],[0.33,0.7121212121212122,0.6131546249776139],[0.34,0.7121212121212122,0.6084909306977653],[0.35000000000000003,0.7121212121212122,0.5925276212313952],[0.36,0.7121212121212122,0.588303501003111],[0.37,0.7121212121212122,0.5829984053239248],[0.38,0.7121212121212122,0.5794453755100409],[0.39,0.7121212121212122,0.573475325384525],[0.4,0.7121212121212122,0.5715652719269562],[0.41000000000000003,0.7121212121212122,0.5656838144914365],[0.42,0.7121212121212122,0.5654467563803621],[0.43,0.7121212121212122,0.5613913569749147],[0.44,0.7121212121212122,0.5616558091323],[0.45,0.7121212121212122,0.4438514904194826],[0.46,0.7121212121212122,0.4405761676511859],[0.47000000000000003,0.7121212121212122,0.4378150605115288],[0.48,0.7121212121212122,0.4610951280005573],[0.49,0.7121212121212122,0.4488343414474887],[0.5,0.7121212121212122,0.4381816976545352],[0.51,0.7121212121212122,0.4290425891117653],[0.52,0.7121212121212122,0.42168157925174804],[0.53,0.7121212121212122,0.4155678284351709],[0.54,0.7121212121212122,0.41045894304219194],[0.55,0.7121212121212122,0.40577597283245825],[0.56,0.7121212121212122,0.4013196670333004],[0.5700000000000001,0.7121212121212122,0.3968674380928783],[0.58,0.7121212121212122,0.39238585684899385],[0.59,0.7121212121212122,0.3747630016428528],[0.6,0.7121212121212122,0.37447176633257306],[0.61,0.7121212121212122,0.37383128949498523],[0.62,0.7121212121212122,0.37317918790487775],[0.63,0.7121212121212122,0.3670509841769671],[0.64,0.7121212121212122,0.3845321837179283],[0.65,0.7121212121212122,0.3753769278318074],[0.66,0.7121212121212122,0.3665974604258402],[0.67,0.7121212121212122,0.3579645868724376],[0.68,0.7121212121212122,0.3500796397887219],[0.6900000000000001,0.7121212121212122,0.3424247824471652],[0.7000000000000001,0.7121212121212122,0.3352172717848759],[0.71,0.7121212121212122,0.32809369520894105],[0.72,0.7121212121212122,0.32104868666665765],[0.73,0.7121212121212122,0.3139297699138734],[0.74,0.7121212121212122,0.3067462620395903],[0.75,0.7121212121212122,0.29938056809186436],[0.76,0.7121212121212122,0.2919435117477125],[0.77,0.7121212121212122,0.2842541335333605],[0.78,0.7121212121212122,0.27643664283212505],[0.79,0.7121212121212122,0.2682632783375955],[0.8,0.7121212121212122,0.259746917363931],[0.81,0.7121212121212122,0.2506086463673273],[0.8200000000000001,0.7121212121212122,0.24061999029982772],[0.8300000000000001,0.7121212121212122,0.22911768413206113],[0.84,0.7121212121212122,0.21548563635794732],[0.85,0.7121212121212122,0.2008506526220427],[0.86,0.7121212121212122,0.1948184592821015],[0.87,0.7121212121212122,0.18805657150355448],[0.88,0.7121212121212122,0.18075049746040675],[0.89,0.7121212121212122,0.17307805485565758],[0.9,0.7121212121212122,0.16532922611472828],[0.91,0.7121212121212122,0.15757940637517912],[0.92,0.7121212121212122,0.1498157218489472],[0.93,0.7121212121212122,0.14217960390900125],[0.9400000000000001,0.7121212121212122,0.13439737954445738],[0.9500000000000001,0.7121212121212122,0.12628791185968846],[0.96,0.7121212121212122,0],[0.97,0.7121212121212122,0],[0.98,0.7121212121212122,0],[0.99,0.7121212121212122,0],[1,0.7121212121212122,0],[0,0.7196969696969697,0.7506478632101485],[0.01,0.7196969696969697,0.7505082901003886],[0.02,0.7196969696969697,0.7504176771869401],[0.03,0.7196969696969697,0.750303505493064],[0.04,0.7196969696969697,0.7506116839621935],[0.05,0.7196969696969697,0.7510586756182182],[0.06,0.7196969696969697,0.751892830559252],[0.07,0.7196969696969697,0.7524924320584031],[0.08,0.7196969696969697,0],[0.09,0.7196969696969697,0.7228107502663119],[0.1,0.7196969696969697,0.7192845069878269],[0.11,0.7196969696969697,0.7154346375857782],[0.12,0.7196969696969697,0.7113294410545845],[0.13,0.7196969696969697,0.7074208063862445],[0.14,0.7196969696969697,0.7037101267551997],[0.15,0.7196969696969697,0.7002862623283274],[0.16,0.7196969696969697,0.6969344755705182],[0.17,0.7196969696969697,0.6936488941831979],[0.18,0.7196969696969697,0.6902549809900294],[0.19,0.7196969696969697,0.6867594859540566],[0.2,0.7196969696969697,0.6831931532209476],[0.21,0.7196969696969697,0.6797889645385622],[0.22,0.7196969696969697,0.6767690790722064],[0.23,0.7196969696969697,0.6552524676681954],[0.24,0.7196969696969697,0.6539134700213758],[0.25,0.7196969696969697,0.6519650018842429],[0.26,0.7196969696969697,0.6489778087227224],[0.27,0.7196969696969697,0.6455551353680378],[0.28,0.7196969696969697,0.6413380752535106],[0.29,0.7196969696969697,0.6366737897673036],[0.3,0.7196969696969697,0.6314354712248836],[0.31,0.7196969696969697,0.6256500411834147],[0.32,0.7196969696969697,0.6182287634250532],[0.33,0.7196969696969697,0.6129136460365172],[0.34,0.7196969696969697,0.6087829383465599],[0.35000000000000003,0.7196969696969697,0.592189528715076],[0.36,0.7196969696969697,0.5872546881523928],[0.37,0.7196969696969697,0.5831925705201153],[0.38,0.7196969696969697,0.5776286123138327],[0.39,0.7196969696969697,0.5748311595972875],[0.4,0.7196969696969697,0.568920209359497],[0.41000000000000003,0.7196969696969697,0.567731664277825],[0.42,0.7196969696969697,0.5624364738166245],[0.43,0.7196969696969697,0.562287253287739],[0.44,0.7196969696969697,0.5599261912800229],[0.45,0.7196969696969697,0],[0.46,0.7196969696969697,0],[0.47000000000000003,0.7196969696969697,0],[0.48,0.7196969696969697,0.46256047750055523],[0.49,0.7196969696969697,0.4507203504198356],[0.5,0.7196969696969697,0.43991410679277276],[0.51,0.7196969696969697,0.4308777963150251],[0.52,0.7196969696969697,0.4232941924239154],[0.53,0.7196969696969697,0.4172892902399925],[0.54,0.7196969696969697,0.41209202515971494],[0.55,0.7196969696969697,0.407552454616397],[0.56,0.7196969696969697,0.4031885327862137],[0.5700000000000001,0.7196969696969697,0.3989894672469375],[0.58,0.7196969696969697,0.3949050435391004],[0.59,0.7196969696969697,0.3773812036647972],[0.6,0.7196969696969697,0.37663799651000285],[0.61,0.7196969696969697,0.37549144612491514],[0.62,0.7196969696969697,0.37420355411015527],[0.63,0.7196969696969697,0],[0.64,0.7196969696969697,0.3843162596614633],[0.65,0.7196969696969697,0.37543022170369844],[0.66,0.7196969696969697,0.36643807024848674],[0.67,0.7196969696969697,0.35801446390785896],[0.68,0.7196969696969697,0.34979214764384337],[0.6900000000000001,0.7196969696969697,0.3421495870783061],[0.7000000000000001,0.7196969696969697,0.3346673283474756],[0.71,0.7196969696969697,0.32740693775272045],[0.72,0.7196969696969697,0.3201707041511349],[0.73,0.7196969696969697,0.31294031124317007],[0.74,0.7196969696969697,0.3056214344779603],[0.75,0.7196969696969697,0.2982958318375113],[0.76,0.7196969696969697,0.29080272850155386],[0.77,0.7196969696969697,0.2833246688510673],[0.78,0.7196969696969697,0.27558915510738025],[0.79,0.7196969696969697,0.267752268811036],[0.8,0.7196969696969697,0.25945053245061656],[0.81,0.7196969696969697,0.2506342288880291],[0.8200000000000001,0.7196969696969697,0.24077188188316107],[0.8300000000000001,0.7196969696969697,0.2294260072896922],[0.84,0.7196969696969697,0.21646491082736305],[0.85,0.7196969696969697,0.19995890901932067],[0.86,0.7196969696969697,0.19503832914270602],[0.87,0.7196969696969697,0.18876660212373647],[0.88,0.7196969696969697,0.18173724500673585],[0.89,0.7196969696969697,0.1745505860502589],[0.9,0.7196969696969697,0.16722089550444635],[0.91,0.7196969696969697,0.15991429422877232],[0.92,0.7196969696969697,0.15269269041935207],[0.93,0.7196969696969697,0.14547685327778498],[0.9400000000000001,0.7196969696969697,0.1384453721832461],[0.9500000000000001,0.7196969696969697,0.1316815858717324],[0.96,0.7196969696969697,0.12641213997296166],[0.97,0.7196969696969697,0],[0.98,0.7196969696969697,0],[0.99,0.7196969696969697,0],[1,0.7196969696969697,0],[0,0.7272727272727273,0.7491255866791182],[0.01,0.7272727272727273,0.7490359702738334],[0.02,0.7272727272727273,0.7488379809010499],[0.03,0.7272727272727273,0.7488362779570072],[0.04,0.7272727272727273,0.7489173269436282],[0.05,0.7272727272727273,0.7494528452993273],[0.06,0.7272727272727273,0.750035032417754],[0.07,0.7272727272727273,0.7506488074962921],[0.08,0.7272727272727273,0.7404604242001898],[0.09,0.7272727272727273,0.709752257016786],[0.1,0.7272727272727273,0.717990964453509],[0.11,0.7272727272727273,0.714463621823556],[0.12,0.7272727272727273,0.7106485991241858],[0.13,0.7272727272727273,0.7067768014182755],[0.14,0.7272727272727273,0.7032267051744876],[0.15,0.7272727272727273,0.699820697727439],[0.16,0.7272727272727273,0.6966203586392202],[0.17,0.7272727272727273,0.6934001221219181],[0.18,0.7272727272727273,0.6901791924349036],[0.19,0.7272727272727273,0.6868622276026505],[0.2,0.7272727272727273,0.6835354467767262],[0.21,0.7272727272727273,0.68041402500515],[0.22,0.7272727272727273,0.6778130297264486],[0.23,0.7272727272727273,0.6538411792186954],[0.24,0.7272727272727273,0.6522658620820514],[0.25,0.7272727272727273,0.6495650140797895],[0.26,0.7272727272727273,0.6464765454835535],[0.27,0.7272727272727273,0.6424551527011213],[0.28,0.7272727272727273,0.63819757570636],[0.29,0.7272727272727273,0.6332415617934715],[0.3,0.7272727272727273,0.6280904312845843],[0.31,0.7272727272727273,0.6223483057221793],[0.32,0.7272727272727273,0.6166312072259381],[0.33,0.7272727272727273,0.6115445558201997],[0.34,0.7272727272727273,0.6079371600032846],[0.35000000000000003,0.7272727272727273,0.5853273769793916],[0.36,0.7272727272727273,0.5863919788929075],[0.37,0.7272727272727273,0.5813084477605054],[0.38,0.7272727272727273,0.5777979362728771],[0.39,0.7272727272727273,0.5722427533061809],[0.4,0.7272727272727273,0.5701036817728041],[0.41000000000000003,0.7272727272727273,0.5644437050980684],[0.42,0.7272727272727273,0.5634372134183261],[0.43,0.7272727272727273,0.5591474731857193],[0.44,0.7272727272727273,0.5587193065023884],[0.45,0.7272727272727273,0.4335344787367346],[0.46,0.7272727272727273,0.4311908896575228],[0.47000000000000003,0.7272727272727273,0.4292802629106422],[0.48,0.7272727272727273,0.4626304774892559],[0.49,0.7272727272727273,0.4513675020565018],[0.5,0.7272727272727273,0.44112070730510605],[0.51,0.7272727272727273,0.43199314560078417],[0.52,0.7272727272727273,0.42473713080132813],[0.53,0.7272727272727273,0.41861360141229265],[0.54,0.7272727272727273,0.4136662876316629],[0.55,0.7272727272727273,0.4091731054196658],[0.56,0.7272727272727273,0.40508832131345845],[0.5700000000000001,0.7272727272727273,0.40116219746983994],[0.58,0.7272727272727273,0.3974750220308966],[0.59,0.7272727272727273,0.3804547354563753],[0.6,0.7272727272727273,0.3792658252499761],[0.61,0.7272727272727273,0.37749074669908245],[0.62,0.7272727272727273,0.3756550154646645],[0.63,0.7272727272727273,0.376890564313941],[0.64,0.7272727272727273,0.3844557294661904],[0.65,0.7272727272727273,0.3755166556631003],[0.66,0.7272727272727273,0.3667049763942142],[0.67,0.7272727272727273,0.35794554530739253],[0.68,0.7272727272727273,0.3497793487229257],[0.6900000000000001,0.7272727272727273,0.3418121097403205],[0.7000000000000001,0.7272727272727273,0.33420809417564473],[0.71,0.7272727272727273,0.3267132988270286],[0.72,0.7272727272727273,0.3193103588247683],[0.73,0.7272727272727273,0.3119141409321014],[0.74,0.7272727272727273,0.3045531658848711],[0.75,0.7272727272727273,0.2971201107248128],[0.76,0.7272727272727273,0.28979333528566287],[0.77,0.7272727272727273,0.2823209885741563],[0.78,0.7272727272727273,0.27496811626198403],[0.79,0.7272727272727273,0.2673258419720518],[0.8,0.7272727272727273,0.2595763900115893],[0.81,0.7272727272727273,0.2511697360774803],[0.8200000000000001,0.7272727272727273,0.241844749519258],[0.8300000000000001,0.7272727272727273,0.23052560063345356],[0.84,0.7272727272727273,0.22634076680489898],[0.85,0.7272727272727273,0.20261443091002876],[0.86,0.7272727272727273,0.19686403320819107],[0.87,0.7272727272727273,0.19026731590579066],[0.88,0.7272727272727273,0.1834699064666879],[0.89,0.7272727272727273,0.17648411300739322],[0.9,0.7272727272727273,0.16959720947901122],[0.91,0.7272727272727273,0.162733137048042],[0.92,0.7272727272727273,0.15589466704864946],[0.93,0.7272727272727273,0.14913674466690738],[0.9400000000000001,0.7272727272727273,0.1423717468878646],[0.9500000000000001,0.7272727272727273,0.13576896845617042],[0.96,0.7272727272727273,0.1293724317823451],[0.97,0.7272727272727273,0],[0.98,0.7272727272727273,0],[0.99,0.7272727272727273,0],[1,0.7272727272727273,0],[0,0.7348484848484849,0.7471947778394434],[0.01,0.7348484848484849,0.7470724638858814],[0.02,0.7348484848484849,0.7469681242305708],[0.03,0.7348484848484849,0.746854049303483],[0.04,0.7348484848484849,0.747059415801726],[0.05,0.7348484848484849,0.7474150967528271],[0.06,0.7348484848484849,0.7480741681350973],[0.07,0.7348484848484849,0.7485799461269724],[0.08,0.7348484848484849,0],[0.09,0.7348484848484849,0],[0.1,0.7348484848484849,0.7166061663299604],[0.11,0.7348484848484849,0.713424310838223],[0.12,0.7348484848484849,0.7096698347567265],[0.13,0.7348484848484849,0.7059836927690046],[0.14,0.7348484848484849,0.7024003132725654],[0.15,0.7348484848484849,0.6991361339167028],[0.16,0.7348484848484849,0.6959257490248911],[0.17,0.7348484848484849,0.6928421681112076],[0.18,0.7348484848484849,0.6897054096163074],[0.19,0.7348484848484849,0.686578782769151],[0.2,0.7348484848484849,0.6834831307751308],[0.21,0.7348484848484849,0.680659293402901],[0.22,0.7348484848484849,0.6784420218176724],[0.23,0.7348484848484849,0.652669309810944],[0.24,0.7348484848484849,0.6503180440308851],[0.25,0.7348484848484849,0.6473973361169848],[0.26,0.7348484848484849,0.6434594790186512],[0.27,0.7348484848484849,0.6394276011693909],[0.28,0.7348484848484849,0.6346493829499333],[0.29,0.7348484848484849,0.6298760695092895],[0.3,0.7348484848484849,0.6245363728999214],[0.31,0.7348484848484849,0.6193724188195443],[0.32,0.7348484848484849,0.6139695382038106],[0.33,0.7348484848484849,0.6095715666703541],[0.34,0.7348484848484849,0.6061351710523386],[0.35000000000000003,0.7348484848484849,0],[0.36,0.7348484848484849,0.5837456131278527],[0.37,0.7348484848484849,0.5800234020044515],[0.38,0.7348484848484849,0.5751360538270371],[0.39,0.7348484848484849,0.5722589102774875],[0.4,0.7348484848484849,0.5668819500990561],[0.41000000000000003,0.7348484848484849,0.5649923100384502],[0.42,0.7348484848484849,0.5597732165409962],[0.43,0.7348484848484849,0.5584614337263895],[0.44,0.7348484848484849,0.555684472906251],[0.45,0.7348484848484849,0],[0.46,0.7348484848484849,0],[0.47000000000000003,0.7348484848484849,0],[0.48,0.7348484848484849,0.4616168760606252],[0.49,0.7348484848484849,0.45130160961494187],[0.5,0.7348484848484849,0.4413163079466222],[0.51,0.7348484848484849,0.43282305170262486],[0.52,0.7348484848484849,0.42550621366785946],[0.53,0.7348484848484849,0.41980392651137377],[0.54,0.7348484848484849,0.4148340532558551],[0.55,0.7348484848484849,0.4106818559100549],[0.56,0.7348484848484849,0.4068282620862906],[0.5700000000000001,0.7348484848484849,0.4033371708457841],[0.58,0.7348484848484849,0.40015958202656654],[0.59,0.7348484848484849,0.38395140321786747],[0.6,0.7348484848484849,0.3822122658653685],[0.61,0.7348484848484849,0.3798759569479649],[0.62,0.7348484848484849,0.377461058992741],[0.63,0.7348484848484849,0],[0.64,0.7348484848484849,0.38522929013465673],[0.65,0.7348484848484849,0.3760776687045777],[0.66,0.7348484848484849,0.36690539987379],[0.67,0.7348484848484849,0.3582025315806219],[0.68,0.7348484848484849,0.34968518102689305],[0.6900000000000001,0.7348484848484849,0.34163383868150965],[0.7000000000000001,0.7348484848484849,0.33375766272853724],[0.71,0.7348484848484849,0.32607437791661986],[0.72,0.7348484848484849,0.31848517843602453],[0.73,0.7348484848484849,0.3109679640246436],[0.74,0.7348484848484849,0.30347630725009755],[0.75,0.7348484848484849,0.2961291775304964],[0.76,0.7348484848484849,0.28875050159199966],[0.77,0.7348484848484849,0.2816320141045409],[0.78,0.7348484848484849,0.2743989478629295],[0.79,0.7348484848484849,0.2674011582161069],[0.8,0.7348484848484849,0.260083762216305],[0.81,0.7348484848484849,0.2526787751107389],[0.8200000000000001,0.7348484848484849,0.2445666462408715],[0.8300000000000001,0.7348484848484849,0.23573139981986518],[0.84,0.7348484848484849,0.21442493510887933],[0.85,0.7348484848484849,0.20673490117447446],[0.86,0.7348484848484849,0.19957755929251875],[0.87,0.7348484848484849,0.19264274683196841],[0.88,0.7348484848484849,0.1857308985357652],[0.89,0.7348484848484849,0.1790872075470079],[0.9,0.7348484848484849,0.17251077730598802],[0.91,0.7348484848484849,0.16605211947608411],[0.92,0.7348484848484849,0.15961257966827325],[0.93,0.7348484848484849,0.15309915556220996],[0.9400000000000001,0.7348484848484849,0.14649910657742543],[0.9500000000000001,0.7348484848484849,0.13972763798588048],[0.96,0.7348484848484849,0.13275910403536167],[0.97,0.7348484848484849,0],[0.98,0.7348484848484849,0],[0.99,0.7348484848484849,0],[1,0.7348484848484849,0],[0,0.7424242424242424,0.7448044667121214],[0.01,0.7424242424242424,0.7447310032236154],[0.02,0.7424242424242424,0.7445893323348465],[0.03,0.7424242424242424,0.7445900715006093],[0.04,0.7424242424242424,0.7447073044972511],[0.05,0.7424242424242424,0.7451729088794549],[0.06,0.7424242424242424,0.7457523299630315],[0.07,0.7424242424242424,0.7463370707788983],[0.08,0.7424242424242424,0.710185713752792],[0.09,0.7424242424242424,0.7110825880874994],[0.1,0.7424242424242424,0.7151537512309123],[0.11,0.7424242424242424,0.7120440457044257],[0.12,0.7424242424242424,0.7084797713630888],[0.13,0.7424242424242424,0.7047347588791774],[0.14,0.7424242424242424,0.7012992192227802],[0.15,0.7424242424242424,0.6979649676349996],[0.16,0.7424242424242424,0.6948826909862249],[0.17,0.7424242424242424,0.6917960399756452],[0.18,0.7424242424242424,0.6888185089135873],[0.19,0.7424242424242424,0.6858352855380305],[0.2,0.7424242424242424,0.6830036577299109],[0.21,0.7424242424242424,0.6804703984157842],[0.22,0.7424242424242424,0.6785626071243016],[0.23,0.7424242424242424,0.6514762748360333],[0.24,0.7424242424242424,0.648680342500559],[0.25,0.7424242424242424,0.6448195749227659],[0.26,0.7424242424242424,0.6407576024596542],[0.27,0.7424242424242424,0.635933540957986],[0.28,0.7424242424242424,0.6312781244321649],[0.29,0.7424242424242424,0.6260787770920411],[0.3,0.7424242424242424,0.6211409016421491],[0.31,0.7424242424242424,0.6158284548008721],[0.32,0.7424242424242424,0.611098681022213],[0.33,0.7424242424242424,0.6066625795216269],[0.34,0.7424242424242424,0.6036389969365082],[0.35000000000000003,0.7424242424242424,0.5702834794816241],[0.36,0.7424242424242424,0.5807199828140978],[0.37,0.7424242424242424,0.5769335366851684],[0.38,0.7424242424242424,0.5738121928717448],[0.39,0.7424242424242424,0.5690824031293474],[0.4,0.7424242424242424,0.5665389347857452],[0.41000000000000003,0.7424242424242424,0.5613751699567704],[0.42,0.7424242424242424,0.5591862525141],[0.43,0.7424242424242424,0.5546232834953853],[0.44,0.7424242424242424,0.5529164018879515],[0.45,0.7424242424242424,0.4909028132000428],[0.46,0.7424242424242424,0.4357710923444489],[0.47000000000000003,0.7424242424242424,0.43367845807600414],[0.48,0.7424242424242424,0.45979231610598703],[0.49,0.7424242424242424,0.4502117719437553],[0.5,0.7424242424242424,0.4411513049370265],[0.51,0.7424242424242424,0.4327760690551883],[0.52,0.7424242424242424,0.42609920360126824],[0.53,0.7424242424242424,0.4203912354749161],[0.54,0.7424242424242424,0.4157674938422586],[0.55,0.7424242424242424,0.4117645942564262],[0.56,0.7424242424242424,0.40838173725044835],[0.5700000000000001,0.7424242424242424,0.4053461170475706],[0.58,0.7424242424242424,0.40282373039727304],[0.59,0.7424242424242424,0.3878763696096888],[0.6,0.7424242424242424,0.38545762680422413],[0.61,0.7424242424242424,0.3825123993288305],[0.62,0.7424242424242424,0.37944562050258646],[0.63,0.7424242424242424,0.37996407030361595],[0.64,0.7424242424242424,0.38577560764734053],[0.65,0.7424242424242424,0.3765731159552781],[0.66,0.7424242424242424,0.36742311624481827],[0.67,0.7424242424242424,0.3583766906303093],[0.68,0.7424242424242424,0.34981570009396423],[0.6900000000000001,0.7424242424242424,0.3414726670453554],[0.7000000000000001,0.7424242424242424,0.3334215552103864],[0.71,0.7424242424242424,0.3255361704691879],[0.72,0.7424242424242424,0.31776713575877186],[0.73,0.7424242424242424,0.3101127632085725],[0.74,0.7424242424242424,0.30260726072961486],[0.75,0.7424242424242424,0.2951789090130145],[0.76,0.7424242424242424,0.288063023877286],[0.77,0.7424242424242424,0.2809884060498093],[0.78,0.7424242424242424,0.2743557567484501],[0.79,0.7424242424242424,0.2676701200963858],[0.8,0.7424242424242424,0.26136457059249024],[0.81,0.7424242424242424,0.2548204391306337],[0.8200000000000001,0.7424242424242424,0.24825150263386353],[0.8300000000000001,0.7424242424242424,0.24057029145684017],[0.84,0.7424242424242424,0.2188506367890743],[0.85,0.7424242424242424,0.21042290480395778],[0.86,0.7424242424242424,0.20265444485593728],[0.87,0.7424242424242424,0.1953439035202993],[0.88,0.7424242424242424,0.18859912417165103],[0.89,0.7424242424242424,0.18212098179962205],[0.9,0.7424242424242424,0.17594813956001826],[0.91,0.7424242424242424,0.16984418607269047],[0.92,0.7424242424242424,0.16372590874306958],[0.93,0.7424242424242424,0.15744110410511666],[0.9400000000000001,0.7424242424242424,0.15089228140864402],[0.9500000000000001,0.7424242424242424,0.14393010776343773],[0.96,0.7424242424242424,0.13645397434534562],[0.97,0.7424242424242424,0],[0.98,0.7424242424242424,0],[0.99,0.7424242424242424,0],[1,0.7424242424242424,0],[0,0.75,0.7420412644404732],[0.01,0.75,0.7419644058021133],[0.02,0.75,0.7418997678516562],[0.03,0.75,0.7418800602060039],[0.04,0.75,0.7420992476827276],[0.05,0.75,0.7425362408277976],[0.06,0.75,0.7431888720307533],[0.07,0.75,0.7437845811046553],[0.08,0.75,0],[0.09,0.75,0],[0.1,0.75,0.7134342371881883],[0.11,0.75,0.7104383377207816],[0.12,0.75,0.7068163319899909],[0.13,0.75,0.7032207855869677],[0.14,0.75,0.6996727525574082],[0.15,0.75,0.6964707056912887],[0.16,0.75,0.6933092541279863],[0.17,0.75,0.6903647643387171],[0.18,0.75,0.6874310064119038],[0.19,0.75,0.6846852292454916],[0.2,0.75,0.6820811223980505],[0.21,0.75,0.679906491964487],[0.22,0.75,0.67834184506057],[0.23,0.75,0.6506869986927392],[0.24,0.75,0.6468581213347107],[0.25,0.75,0.6426809201955521],[0.26,0.75,0.6376796511362548],[0.27,0.75,0.6328384426719305],[0.28,0.75,0.6275212750216452],[0.29,0.75,0.6225723041249245],[0.3,0.75,0.6172749979994949],[0.31,0.75,0.6124451540457219],[0.32,0.75,0.6075030702127471],[0.33,0.75,0.6034856303791423],[0.34,0.75,0.6002291866646844],[0.35000000000000003,0.75,0],[0.36,0.75,0.5769274701609903],[0.37,0.75,0.5742210893452518],[0.38,0.75,0.5704433186270079],[0.39,0.75,0.5676267184707413],[0.4,0.75,0.5630848536681617],[0.41000000000000003,0.75,0.5603818034182606],[0.42,0.75,0.5553551939482331],[0.43,0.75,0.5524498287186466],[0.44,0.75,0.5485935355047243],[0.45,0.75,0],[0.46,0.75,0],[0.47000000000000003,0.75,0],[0.48,0.75,0.4572207559386245],[0.49,0.75,0.44872437071082044],[0.5,0.75,0.4400764519223298],[0.51,0.75,0.43253312742079897],[0.52,0.75,0.4259323018674668],[0.53,0.75,0.4208312704826442],[0.54,0.75,0.4159435612625652],[0.55,0.75,0.4124458288631274],[0.56,0.75,0.4095010600661635],[0.5700000000000001,0.75,0.4070563683072541],[0.58,0.75,0.4051461872909887],[0.59,0.75,0.3917228613667955],[0.6,0.75,0.388788473126783],[0.61,0.75,0.38545291880026455],[0.62,0.75,0.38216128772164104],[0.63,0.75,0],[0.64,0.75,0.38741811950416993],[0.65,0.75,0.3775085035161331],[0.66,0.75,0.36791522643568153],[0.67,0.75,0.35881122301197266],[0.68,0.75,0.34997010462997774],[0.6900000000000001,0.75,0.3414935714753612],[0.7000000000000001,0.75,0.3332368226526921],[0.71,0.75,0.3251474240954846],[0.72,0.75,0.3172426305928291],[0.73,0.75,0.30947842483171806],[0.74,0.75,0.30188423123013963],[0.75,0.75,0.29458969438337707],[0.76,0.75,0.2874686336629352],[0.77,0.75,0.2808673736640577],[0.78,0.75,0.27443280821766947],[0.79,0.75,0.2686329343068807],[0.8,0.75,0.26294386426125504],[0.81,0.75,0.2579036728574673],[0.8200000000000001,0.75,0.25323559632090165],[0.8300000000000001,0.75,0],[0.84,0.75,0.22345927152653255],[0.85,0.75,0.2139179373563228],[0.86,0.75,0.2056195384843289],[0.87,0.75,0.19832492419524822],[0.88,0.75,0.19163096034022997],[0.89,0.75,0.1855139172473436],[0.9,0.75,0.17963763228804017],[0.91,0.75,0.17390502793893664],[0.92,0.75,0.1680565370121066],[0.93,0.75,0.16199590845591855],[0.9400000000000001,0.75,0.15547276250652875],[0.9500000000000001,0.75,0.14846487550016313],[0.96,0.75,0.14061859196496224],[0.97,0.75,0],[0.98,0.75,0],[0.99,0.75,0],[1,0.75,0],[0,0.7575757575757576,0.7390277833906995],[0.01,0.7575757575757576,0.7389824468782846],[0.02,0.7575757575757576,0.7389284992140426],[0.03,0.7575757575757576,0.7389793426635682],[0.04,0.7575757575757576,0.7392153341266239],[0.05,0.7575757575757576,0.7397163536840319],[0.06,0.7575757575757576,0.7404304889711667],[0.07,0.7575757575757576,0.7409995326511933],[0.08,0.7575757575757576,0.7408310710896924],[0.09,0.7575757575757576,0.7147907248670249],[0.1,0.7575757575757576,0.7114414652851108],[0.11,0.7575757575757576,0.70844677882519],[0.12,0.7575757575757576,0.704956690209201],[0.13,0.7575757575757576,0.7012315166969809],[0.14,0.7575757575757576,0.697821549001458],[0.15,0.7575757575757576,0.6944803602207461],[0.16,0.7575757575757576,0.6914530739620803],[0.17,0.7575757575757576,0.6884553510016885],[0.18,0.7575757575757576,0.6857203644583938],[0.19,0.7575757575757576,0.6830902425462646],[0.2,0.7575757575757576,0.6808259753235949],[0.21,0.7575757575757576,0.6789482630292587],[0.22,0.7575757575757576,0.6778075440162394],[0.23,0.7575757575757576,0.6371534853506406],[0.24,0.7575757575757576,0.6452026898723282],[0.25,0.7575757575757576,0.6402698145222918],[0.26,0.7575757575757576,0.635128055983129],[0.27,0.7575757575757576,0.6294833596683684],[0.28,0.7575757575757576,0.6242529390932652],[0.29,0.7575757575757576,0.6187880262102055],[0.3,0.7575757575757576,0.6138020873138177],[0.31,0.7575757575757576,0.6086476649514797],[0.32,0.7575757575757576,0.6041017975403211],[0.33,0.7575757575757576,0.5997999747924846],[0.34,0.7575757575757576,0.5966557850501824],[0.35000000000000003,0.7575757575757576,0.5999537248048428],[0.36,0.7575757575757576,0.5729066552735393],[0.37,0.7575757575757576,0.5704125971343446],[0.38,0.7575757575757576,0.5678613376878386],[0.39,0.7575757575757576,0.5641741341186075],[0.4,0.7575757575757576,0.5613473930303662],[0.41000000000000003,0.7575757575757576,0.5568421595103358],[0.42,0.7575757575757576,0.5534590528219081],[0.43,0.7575757575757576,0.548314859712207],[0.44,0.7575757575757576,0.5441569437713608],[0.45,0.7575757575757576,0.5386721251559816],[0.46,0.7575757575757576,0.4365297213737796],[0.47000000000000003,0.7575757575757576,0.4346804685507194],[0.48,0.7575757575757576,0.4541944468759465],[0.49,0.7575757575757576,0.4464939418406505],[0.5,0.7575757575757576,0.4388383683828957],[0.51,0.7575757575757576,0.431465114588125],[0.52,0.7575757575757576,0.42548228140182087],[0.53,0.7575757575757576,0.4211323684088867],[0.54,0.7575757575757576,0.4150972710235588],[0.55,0.7575757575757576,0.41233458991348526],[0.56,0.7575757575757576,0.4101932878636604],[0.5700000000000001,0.7575757575757576,0.4083321882263896],[0.58,0.7575757575757576,0.40697252670853235],[0.59,0.7575757575757576,0.39533281406144205],[0.6,0.7575757575757576,0.39206427629153345],[0.61,0.7575757575757576,0.3884731000427664],[0.62,0.7575757575757576,0.38495601748855834],[0.63,0.7575757575757576,0.3853448460290914],[0.64,0.7575757575757576,0.38870970146755385],[0.65,0.7575757575757576,0.37824678500295983],[0.66,0.7575757575757576,0.36856806183481056],[0.67,0.7575757575757576,0.3592640421054051],[0.68,0.7575757575757576,0.35034926694128776],[0.6900000000000001,0.7575757575757576,0.34169461336143647],[0.7000000000000001,0.7575757575757576,0.33324980814161254],[0.71,0.7575757575757576,0.3250357448660087],[0.72,0.7575757575757576,0.3169527932214589],[0.73,0.7575757575757576,0.30910535006431616],[0.74,0.7575757575757576,0.30150884934013644],[0.75,0.7575757575757576,0.2941860154995637],[0.76,0.7575757575757576,0.2873653433731783],[0.77,0.7575757575757576,0.2808813108477718],[0.78,0.7575757575757576,0.2751321355360927],[0.79,0.7575757575757576,0.2697372646307369],[0.8,0.7575757575757576,0.2651434111487849],[0.81,0.7575757575757576,0.2609438263952633],[0.8200000000000001,0.7575757575757576,0.2577548481900317],[0.8300000000000001,0.7575757575757576,0.23589775990735634],[0.84,0.7575757575757576,0.22584489258367874],[0.85,0.7575757575757576,0.21651283014763234],[0.86,0.7575757575757576,0.20834784507804394],[0.87,0.7575757575757576,0.20109796340302105],[0.88,0.7575757575757576,0.19471945732014462],[0.89,0.7575757575757576,0.18884076928527715],[0.9,0.7575757575757576,0.1833342079711523],[0.91,0.7575757575757576,0.1778681336379272],[0.92,0.7575757575757576,0.17232110079874832],[0.93,0.7575757575757576,0.16636360246598103],[0.9400000000000001,0.7575757575757576,0.1600442606715186],[0.9500000000000001,0.7575757575757576,0.15308271019303932],[0.96,0.7575757575757576,0.1459074469723512],[0.97,0.7575757575757576,0.13949569480033858],[0.98,0.7575757575757576,0.16406688881463286],[0.99,0.7575757575757576,0.1635483076015445],[1,0.7575757575757576,0],[0,0.7651515151515151,0.736015627365008],[0.01,0.7651515151515151,0.7359809569253507],[0.02,0.7651515151515151,0.7359554240699494],[0.03,0.7651515151515151,0.7360369577718537],[0.04,0.7651515151515151,0.7363025471746091],[0.05,0.7651515151515151,0.7368813222833124],[0.06,0.7651515151515151,0.7376722243125777],[0.07,0.7651515151515151,0.7385652356276085],[0.08,0.7651515151515151,0.739180639407449],[0.09,0.7651515151515151,0],[0.1,0.7651515151515151,0.7093168185941268],[0.11,0.7651515151515151,0.7063584882337769],[0.12,0.7651515151515151,0.7027463811881577],[0.13,0.7651515151515151,0.6991584069485968],[0.14,0.7651515151515151,0.6955756762354139],[0.15,0.7651515151515151,0.69237023132524],[0.16,0.7651515151515151,0.6892106726010965],[0.17,0.7651515151515151,0.6863759356002888],[0.18,0.7651515151515151,0.6836336957512701],[0.19,0.7651515151515151,0.6812783272184122],[0.2,0.7651515151515151,0.6791915801228723],[0.21,0.7651515151515151,0.6776760130026324],[0.22,0.7651515151515151,0.6767576771512647],[0.23,0.7651515151515151,0],[0.24,0.7651515151515151,0.6436680805730698],[0.25,0.7651515151515151,0.6383593126320496],[0.26,0.7651515151515151,0.6324238842001179],[0.27,0.7651515151515151,0.6267270698968415],[0.28,0.7651515151515151,0.6208882222819434],[0.29,0.7651515151515151,0.6155791637504041],[0.3,0.7651515151515151,0.6102032965340549],[0.31,0.7651515151515151,0.605326155999284],[0.32,0.7651515151515151,0.6004534827705583],[0.33,0.7651515151515151,0.5962767773982125],[0.34,0.7651515151515151,0.5926496693266148],[0.35000000000000003,0.7651515151515151,0],[0.36,0.7651515151515151,0.568582779445607],[0.37,0.7651515151515151,0.5668764855912215],[0.38,0.7651515151515151,0.5642141327115231],[0.39,0.7651515151515151,0.5616172562299395],[0.4,0.7651515151515151,0.5579634985207741],[0.41000000000000003,0.7651515151515151,0.5547084507870983],[0.42,0.7651515151515151,0.5500056062457113],[0.43,0.7651515151515151,0.5457440085484315],[0.44,0.7651515151515151,0.5404828948650406],[0.45,0.7651515151515151,0.5357962169401196],[0.46,0.7651515151515151,0],[0.47000000000000003,0.7651515151515151,0],[0.48,0.7651515151515151,0.4506601294466556],[0.49,0.7651515151515151,0.4441250200932012],[0.5,0.7651515151515151,0.4369737198630189],[0.51,0.7651515151515151,0.43020146461749587],[0.52,0.7651515151515151,0.42365759878978904],[0.53,0.7651515151515151,0.41756306698819506],[0.54,0.7651515151515151,0.41240482151243846],[0.55,0.7651515151515151,0.4116571421869155],[0.56,0.7651515151515151,0.41050909548896847],[0.5700000000000001,0.7651515151515151,0.40920438488848354],[0.58,0.7651515151515151,0.40815428305918966],[0.59,0.7651515151515151,0.39866547076209846],[0.6,0.7651515151515151,0.3952072873102216],[0.61,0.7651515151515151,0.39155099207065225],[0.62,0.7651515151515151,0.38803442750002204],[0.63,0.7651515151515151,0.39691204675492797],[0.64,0.7651515151515151,0.3883030080180784],[0.65,0.7651515151515151,0.3787263936993184],[0.66,0.7651515151515151,0.369197829844231],[0.67,0.7651515151515151,0.35993224867862095],[0.68,0.7651515151515151,0.35092177502966815],[0.6900000000000001,0.7651515151515151,0.3421254028463917],[0.7000000000000001,0.7651515151515151,0.3335857985568226],[0.71,0.7651515151515151,0.3251668238560487],[0.72,0.7651515151515151,0.31701717760196635],[0.73,0.7651515151515151,0.3090544284582213],[0.74,0.7651515151515151,0.30142399838816664],[0.75,0.7651515151515151,0.2942216195989842],[0.76,0.7651515151515151,0.28747033360065977],[0.77,0.7651515151515151,0.28144687616780434],[0.78,0.7651515151515151,0.2759890603942904],[0.79,0.7651515151515151,0.2714321010247278],[0.8,0.7651515151515151,0.26741688726747836],[0.81,0.7651515151515151,0.26411334729769925],[0.8200000000000001,0.7651515151515151,0.2605770587442119],[0.8300000000000001,0.7651515151515151,0.238286684076234],[0.84,0.7651515151515151,0.22788359160003557],[0.85,0.7651515151515151,0.2186684902191502],[0.86,0.7651515151515151,0.21057895886614142],[0.87,0.7651515151515151,0.2036164590802469],[0.88,0.7651515151515151,0.19743105661170013],[0.89,0.7651515151515151,0.19188417358904725],[0.9,0.7651515151515151,0.1866098931730391],[0.91,0.7651515151515151,0.18144480449837141],[0.92,0.7651515151515151,0.17600969369763225],[0.93,0.7651515151515151,0.1702891267036779],[0.9400000000000001,0.7651515151515151,0.16385858880287008],[0.9500000000000001,0.7651515151515151,0.15698408059772914],[0.96,0.7651515151515151,0.14937099727898254],[0.97,0.7651515151515151,0.1416184597393777],[0.98,0.7651515151515151,0],[0.99,0.7651515151515151,0],[1,0.7651515151515151,0],[0,0.7727272727272727,0.7332788414438965],[0.01,0.7727272727272727,0.7332422023496785],[0.02,0.7727272727272727,0.733232695073021],[0.03,0.7727272727272727,0.7332963420958429],[0.04,0.7727272727272727,0.7335996233489621],[0.05,0.7727272727272727,0.7341438814149791],[0.06,0.7727272727272727,0.7350488600087932],[0.07,0.7727272727272727,0.7360191013461487],[0.08,0.7727272727272727,0.7368903584198848],[0.09,0.7727272727272727,0.7030456692200043],[0.1,0.7727272727272727,0.7070644208324857],[0.11,0.7727272727272727,0.7040508045304877],[0.12,0.7727272727272727,0.7005658196936311],[0.13,0.7727272727272727,0.6968135632635992],[0.14,0.7727272727272727,0.6933803225192369],[0.15,0.7727272727272727,0.6899942974633506],[0.16,0.7727272727272727,0.6869787876780591],[0.17,0.7727272727272727,0.6840350066608191],[0.18,0.7727272727272727,0.6814944659275779],[0.19,0.7727272727272727,0.6791795250542019],[0.2,0.7727272727272727,0.6774090202785974],[0.21,0.7727272727272727,0.6760771405706004],[0.22,0.7727272727272727,0.6753814570261365],[0.23,0.7727272727272727,0.632257507635875],[0.24,0.7727272727272727,0.6425445947981278],[0.25,0.7727272727272727,0.6363799386030706],[0.26,0.7727272727272727,0.6302492175589522],[0.27,0.7727272727272727,0.6239513641266556],[0.28,0.7727272727272727,0.6181696284123861],[0.29,0.7727272727272727,0.6124476688390378],[0.3,0.7727272727272727,0.6072321087688103],[0.31,0.7727272727272727,0.6020559758414338],[0.32,0.7727272727272727,0.5973231249841895],[0.33,0.7727272727272727,0.5927060740977175],[0.34,0.7727272727272727,0.5885805670952009],[0.35000000000000003,0.7727272727272727,0.584246078722052],[0.36,0.7727272727272727,0.5645507256865127],[0.37,0.7727272727272727,0.5630413408797081],[0.38,0.7727272727272727,0.5609979513003445],[0.39,0.7727272727272727,0.5582046803959093],[0.4,0.7727272727272727,0.555334518585533],[0.41000000000000003,0.7727272727272727,0.5515141674616033],[0.42,0.7727272727272727,0.5476060058610616],[0.43,0.7727272727272727,0.5427058863363164],[0.44,0.7727272727272727,0.5379495433848555],[0.45,0.7727272727272727,0.5325796478299195],[0.46,0.7727272727272727,0.503340400749467],[0.47000000000000003,0.7727272727272727,0.43854200470753235],[0.48,0.7727272727272727,0.446905312284947],[0.49,0.7727272727272727,0.4414216560770544],[0.5,0.7727272727272727,0.43534226652414976],[0.51,0.7727272727272727,0.42881437326801597],[0.52,0.7727272727272727,0.42228154498446113],[0.53,0.7727272727272727,0.4147211075833623],[0.54,0.7727272727272727,0.41066085036140854],[0.55,0.7727272727272727,0.4113903965810943],[0.56,0.7727272727272727,0.411001941914499],[0.5700000000000001,0.7727272727272727,0.40995412795521624],[0.58,0.7727272727272727,0.40865796606217636],[0.59,0.7727272727272727,0.4014234462271433],[0.6,0.7727272727272727,0.39815111862466046],[0.61,0.7727272727272727,0.3946735179339461],[0.62,0.7727272727272727,0.3913840466026839],[0.63,0.7727272727272727,0.3992105258034941],[0.64,0.7727272727272727,0.3894517051122068],[0.65,0.7727272727272727,0.37969855644255684],[0.66,0.7727272727272727,0.3701491728376697],[0.67,0.7727272727272727,0.36085421428713416],[0.68,0.7727272727272727,0.3517343575827233],[0.6900000000000001,0.7727272727272727,0.3428899137820145],[0.7000000000000001,0.7727272727272727,0.3341518643891997],[0.71,0.7727272727272727,0.32569661015251783],[0.72,0.7727272727272727,0.3173610160692817],[0.73,0.7727272727272727,0.3093734424487474],[0.74,0.7727272727272727,0.3017099930738723],[0.75,0.7727272727272727,0.29454934688095885],[0.76,0.7727272727272727,0.28803859205146143],[0.77,0.7727272727272727,0.28223557703563623],[0.78,0.7727272727272727,0.277360829649293],[0.79,0.7727272727272727,0.2732950912486866],[0.8,0.7727272727272727,0.2702298978370859],[0.81,0.7727272727272727,0.2681292322587175],[0.8200000000000001,0.7727272727272727,0],[0.8300000000000001,0.7727272727272727,0.24016176176326803],[0.84,0.7727272727272727,0.22939962417137616],[0.85,0.7727272727272727,0.22019236643203394],[0.86,0.7727272727272727,0.21235966682923044],[0.87,0.7727272727272727,0.20554789591268147],[0.88,0.7727272727272727,0.19964418257374822],[0.89,0.7727272727272727,0.19427372078537697],[0.9,0.7727272727272727,0.18925082921717012],[0.91,0.7727272727272727,0.1841870805947415],[0.92,0.7727272727272727,0.17898194498609254],[0.93,0.7727272727272727,0.17316587046514403],[0.9400000000000001,0.7727272727272727,0.16691785126731573],[0.9500000000000001,0.7727272727272727,0.15970731397409688],[0.96,0.7727272727272727,0.15196273250769737],[0.97,0.7727272727272727,0.14350748310335665],[0.98,0.7727272727272727,0.18633435120707456],[0.99,0.7727272727272727,0.183628390602405],[1,0.7727272727272727,0.18227541044988946],[0,0.7803030303030303,0.7310287152976805],[0.01,0.7803030303030303,0.730989018827626],[0.02,0.7803030303030303,0.7309325558349297],[0.03,0.7803030303030303,0.7309900070748842],[0.04,0.7803030303030303,0.7311905137220706],[0.05,0.7803030303030303,0.7317346288685644],[0.06,0.7803030303030303,0.7325208988491314],[0.07,0.7803030303030303,0.7335326269129645],[0.08,0.7803030303030303,0.7343615468925752],[0.09,0.7803030303030303,0],[0.1,0.7803030303030303,0.7047618761309022],[0.11,0.7803030303030303,0.7018106280988706],[0.12,0.7803030303030303,0.6982112912066911],[0.13,0.7803030303030303,0.6946269266611819],[0.14,0.7803030303030303,0.6910061828045756],[0.15,0.7803030303030303,0.6877690780401876],[0.16,0.7803030303030303,0.684578382117332],[0.17,0.7803030303030303,0.6817815774172891],[0.18,0.7803030303030303,0.679156712493147],[0.19,0.7803030303030303,0.6770621077114225],[0.2,0.7803030303030303,0.6753662993995679],[0.21,0.7803030303030303,0.6743062641674008],[0.22,0.7803030303030303,0.673754439681078],[0.23,0.7803030303030303,0],[0.24,0.7803030303030303,0.6408018329891152],[0.25,0.7803030303030303,0.6345513531108236],[0.26,0.7803030303030303,0.627987952484107],[0.27,0.7803030303030303,0.6217315627855218],[0.28,0.7803030303030303,0.6155768228013598],[0.29,0.7803030303030303,0.6099590022317678],[0.3,0.7803030303030303,0.6044821104712058],[0.31,0.7803030303030303,0.5994102171741672],[0.32,0.7803030303030303,0.5944388286124631],[0.33,0.7803030303030303,0.5898378757816423],[0.34,0.7803030303030303,0.5855278960999408],[0.35000000000000003,0.7803030303030303,0.5818665723323602],[0.36,0.7803030303030303,0.561060634505102],[0.37,0.7803030303030303,0.5595914073182794],[0.38,0.7803030303030303,0.5575365666550832],[0.39,0.7803030303030303,0.5551664825475353],[0.4,0.7803030303030303,0.5521956124686952],[0.41000000000000003,0.7803030303030303,0.5488710925601238],[0.42,0.7803030303030303,0.5448206308510388],[0.43,0.7803030303030303,0.5405969153761426],[0.44,0.7803030303030303,0.5361644455442895],[0.45,0.7803030303030303,0],[0.46,0.7803030303030303,0],[0.47000000000000003,0.7803030303030303,0],[0.48,0.7803030303030303,0.4431986182648772],[0.49,0.7803030303030303,0.4389872091279096],[0.5,0.7803030303030303,0.43380458391008764],[0.51,0.7803030303030303,0.4283243385000324],[0.52,0.7803030303030303,0.422171775526361],[0.53,0.7803030303030303,0.4148095074371373],[0.54,0.7803030303030303,0.41046198530394684],[0.55,0.7803030303030303,0.4124597573781663],[0.56,0.7803030303030303,0.41233793067875285],[0.5700000000000001,0.7803030303030303,0.410958786172374],[0.58,0.7803030303030303,0.40868361771247164],[0.59,0.7803030303030303,0.4046033679250015],[0.6,0.7803030303030303,0.40115147554770636],[0.61,0.7803030303030303,0.39784931569908827],[0.62,0.7803030303030303,0.394941517101549],[0.63,0.7803030303030303,0.4016915102434643],[0.64,0.7803030303030303,0.3913129217626995],[0.65,0.7803030303030303,0.38116902897685156],[0.66,0.7803030303030303,0.3714847273850209],[0.67,0.7803030303030303,0.36201825687217043],[0.68,0.7803030303030303,0.3528816699744379],[0.6900000000000001,0.7803030303030303,0.3438418541167312],[0.7000000000000001,0.7803030303030303,0.3351083624456072],[0.71,0.7803030303030303,0.32643723854871814],[0.72,0.7803030303030303,0.31810267596316155],[0.73,0.7803030303030303,0.30997508367276905],[0.74,0.7803030303030303,0.3023418032628216],[0.75,0.7803030303030303,0.29523815084970423],[0.76,0.7803030303030303,0.2888981161244759],[0.77,0.7803030303030303,0.2834340486723056],[0.78,0.7803030303030303,0.27894872291534434],[0.79,0.7803030303030303,0.2754571052095317],[0.8,0.7803030303030303,0.27284301443341613],[0.81,0.7803030303030303,0.27112394798404704],[0.8200000000000001,0.7803030303030303,0.24902795862020294],[0.8300000000000001,0.7803030303030303,0.2396329140218451],[0.84,0.7803030303030303,0.229887625482374],[0.85,0.7803030303030303,0.22114647336319943],[0.86,0.7803030303030303,0.2134708198804855],[0.87,0.7803030303030303,0.206907356022494],[0.88,0.7803030303030303,0.20111102528928546],[0.89,0.7803030303030303,0.19592258050700317],[0.9,0.7803030303030303,0.19095887103201192],[0.91,0.7803030303030303,0.18605944241457656],[0.92,0.7803030303030303,0.1807815536706512],[0.93,0.7803030303030303,0.17517108320513894],[0.9400000000000001,0.7803030303030303,0.16866566907740016],[0.9500000000000001,0.7803030303030303,0.16163587347109892],[0.96,0.7803030303030303,0.1535554612896051],[0.97,0.7803030303030303,0.14507313997445326],[0.98,0.7803030303030303,0],[0.99,0.7803030303030303,0],[1,0.7803030303030303,0],[0,0.7878787878787878,0.729306387540293],[0.01,0.7878787878787878,0.7292270966736751],[0.02,0.7878787878787878,0.7291313879883743],[0.03,0.7878787878787878,0.7290633131231177],[0.04,0.7878787878787878,0.7291880853590319],[0.05,0.7878787878787878,0.729530675641543],[0.06,0.7878787878787878,0.7302197657022632],[0.07,0.7878787878787878,0.7310405012177624],[0.08,0.7878787878787878,0.7317957291472563],[0.09,0.7878787878787878,0.6854639600546677],[0.1,0.7878787878787878,0.7023868565035676],[0.11,0.7878787878787878,0.6994440831904417],[0.12,0.7878787878787878,0.6960211210329156],[0.13,0.7878787878787878,0.6922800843038651],[0.14,0.7878787878787878,0.6888256747351371],[0.15,0.7878787878787878,0.685385063628192],[0.16,0.7878787878787878,0.6823189887950736],[0.17,0.7878787878787878,0.6793536875847128],[0.18,0.7878787878787878,0.6768546563518991],[0.19,0.7878787878787878,0.6746990473277342],[0.2,0.7878787878787878,0.6731849790376139],[0.21,0.7878787878787878,0.6722046345547352],[0.22,0.7878787878787878,0.6717947239258832],[0.23,0.7878787878787878,0.6554640211914277],[0.24,0.7878787878787878,0.6391203264127159],[0.25,0.7878787878787878,0.6325770752212171],[0.26,0.7878787878787878,0.6260683731340838],[0.27,0.7878787878787878,0.6195438237211452],[0.28,0.7878787878787878,0.6135087109335522],[0.29,0.7878787878787878,0.6076837277157098],[0.3,0.7878787878787878,0.6022894860924695],[0.31,0.7878787878787878,0.5970579374466698],[0.32,0.7878787878787878,0.5920953139635746],[0.33,0.7878787878787878,0.5872870922447322],[0.34,0.7878787878787878,0.5828872664352824],[0.35000000000000003,0.7878787878787878,0.5790780568634851],[0.36,0.7878787878787878,0.5587041733377602],[0.37,0.7878787878787878,0.5562710252350527],[0.38,0.7878787878787878,0.554301201411413],[0.39,0.7878787878787878,0.5520341450206079],[0.4,0.7878787878787878,0.5493282807443116],[0.41000000000000003,0.7878787878787878,0.5461012548208988],[0.42,0.7878787878787878,0.5424283283441168],[0.43,0.7878787878787878,0.5385596819713583],[0.44,0.7878787878787878,0.5349477217823229],[0.45,0.7878787878787878,0.5097286567023135],[0.46,0.7878787878787878,0.5058377895231234],[0.47000000000000003,0.7878787878787878,0.5025874507703477],[0.48,0.7878787878787878,0.4396995321865984],[0.49,0.7878787878787878,0.4366839645016213],[0.5,0.7878787878787878,0.432909425564445],[0.51,0.7878787878787878,0.42859178947865756],[0.52,0.7878787878787878,0.42407387368341243],[0.53,0.7878787878787878,0.41858176704354166],[0.54,0.7878787878787878,0.4176919858151169],[0.55,0.7878787878787878,0.4159967224994675],[0.56,0.7878787878787878,0.4150655419803321],[0.5700000000000001,0.7878787878787878,0.41314478705507546],[0.58,0.7878787878787878,0.4103925395881483],[0.59,0.7878787878787878,0.40715932265734195],[0.6,0.7878787878787878,0.40394352141631856],[0.61,0.7878787878787878,0.4010883896413351],[0.62,0.7878787878787878,0.398723404430663],[0.63,0.7878787878787878,0.40503952842201635],[0.64,0.7878787878787878,0.3937422580531058],[0.65,0.7878787878787878,0.38312771862078937],[0.66,0.7878787878787878,0.3730466684400643],[0.67,0.7878787878787878,0.3635264347918766],[0.68,0.7878787878787878,0.35414399562332266],[0.6900000000000001,0.7878787878787878,0.3451428620006385],[0.7000000000000001,0.7878787878787878,0.3361789854695766],[0.71,0.7878787878787878,0.3275496442685415],[0.72,0.7878787878787878,0.31901587262097564],[0.73,0.7878787878787878,0.3109271220964325],[0.74,0.7878787878787878,0.3032196232597979],[0.75,0.7878787878787878,0.2962488290748431],[0.76,0.7878787878787878,0.29005630618574274],[0.77,0.7878787878787878,0.2849379356163016],[0.78,0.7878787878787878,0.2808400507131443],[0.79,0.7878787878787878,0.27781949177036136],[0.8,0.7878787878787878,0.2754797766388797],[0.81,0.7878787878787878,0.2730535407252236],[0.8200000000000001,0.7878787878787878,0.2504110592306372],[0.8300000000000001,0.7878787878787878,0.23999790180091435],[0.84,0.7878787878787878,0.23029774128812164],[0.85,0.7878787878787878,0.22159777891210536],[0.86,0.7878787878787878,0.21411528858851983],[0.87,0.7878787878787878,0.20757817530132766],[0.88,0.7878787878787878,0.20190047850014436],[0.89,0.7878787878787878,0.19670430961296825],[0.9,0.7878787878787878,0.19181103369498598],[0.91,0.7878787878787878,0.1868267278675772],[0.92,0.7878787878787878,0.18168109982031294],[0.93,0.7878787878787878,0.1758678986098455],[0.9400000000000001,0.7878787878787878,0.1696161523979393],[0.9500000000000001,0.7878787878787878,0.16233342848016827],[0.96,0.7878787878787878,0.1545603314940276],[0.97,0.7878787878787878,0.14609537286017496],[0.98,0.7878787878787878,0.17306143434039883],[0.99,0.7878787878787878,0.17028957437027198],[1,0.7878787878787878,0],[0,0.7954545454545455,0.7278795797678418],[0.01,0.7954545454545455,0.7277619650941591],[0.02,0.7954545454545455,0.7275656315323876],[0.03,0.7954545454545455,0.7273813065131508],[0.04,0.7954545454545455,0.727304774964135],[0.05,0.7954545454545455,0.7274598852972636],[0.06,0.7954545454545455,0.7278902726156151],[0.07,0.7954545454545455,0.728514429451357],[0.08,0.7954545454545455,0.7290808972084455],[0.09,0.7954545454545455,0],[0.1,0.7954545454545455,0.7001085384128823],[0.11,0.7954545454545455,0.6971979248008143],[0.12,0.7954545454545455,0.6936311678599177],[0.13,0.7954545454545455,0.6900672015298388],[0.14,0.7954545454545455,0.6864017653687343],[0.15,0.7954545454545455,0.6830831412396939],[0.16,0.7954545454545455,0.6798027600295804],[0.17,0.7954545454545455,0.6769095173183439],[0.18,0.7954545454545455,0.6742577806674925],[0.19,0.7954545454545455,0.6721687905025647],[0.2,0.7954545454545455,0.6706255035291083],[0.21,0.7954545454545455,0.6697167437152864],[0.22,0.7954545454545455,0.6693431006032181],[0.23,0.7954545454545455,0],[0.24,0.7954545454545455,0.637026656142595],[0.25,0.7954545454545455,0.6306481473142942],[0.26,0.7954545454545455,0.6240315667154446],[0.27,0.7954545454545455,0.617673342953716],[0.28,0.7954545454545455,0.6115051121480146],[0.29,0.7954545454545455,0.6057978455893438],[0.3,0.7954545454545455,0.6003174374303352],[0.31,0.7954545454545455,0.5951154552762193],[0.32,0.7954545454545455,0.5900376499188795],[0.33,0.7954545454545455,0.5851181267364978],[0.34,0.7954545454545455,0.5804548719985729],[0.35000000000000003,0.7954545454545455,0.5762275304674527],[0.36,0.7954545454545455,0],[0.37,0.7954545454545455,0.5523263849443582],[0.38,0.7954545454545455,0.5510736267068045],[0.39,0.7954545454545455,0.5491036538277432],[0.4,0.7954545454545455,0.5466050830550612],[0.41000000000000003,0.7954545454545455,0.5435315205028999],[0.42,0.7954545454545455,0.5401882618930216],[0.43,0.7954545454545455,0.5367579201442569],[0.44,0.7954545454545455,0.5338553793302664],[0.45,0.7954545454545455,0],[0.46,0.7954545454545455,0],[0.47000000000000003,0.7954545454545455,0],[0.48,0.7954545454545455,0.43654982742013626],[0.49,0.7954545454545455,0.43478338273539896],[0.5,0.7954545454545455,0.43234910016522443],[0.51,0.7954545454545455,0.4297897670717446],[0.52,0.7954545454545455,0.42723142051342566],[0.53,0.7954545454545455,0.42526238012302975],[0.54,0.7954545454545455,0.42515842939863946],[0.55,0.7954545454545455,0.42114781871069984],[0.56,0.7954545454545455,0.41919061859999207],[0.5700000000000001,0.7954545454545455,0.41619738078633134],[0.58,0.7954545454545455,0.41299954113488174],[0.59,0.7954545454545455,0.4096685191996279],[0.6,0.7954545454545455,0.406777395183523],[0.61,0.7954545454545455,0.40434040498368506],[0.62,0.7954545454545455,0.4025959723367788],[0.63,0.7954545454545455,0.408935948171569],[0.64,0.7954545454545455,0.39667773361380926],[0.65,0.7954545454545455,0.3852505763096769],[0.66,0.7954545454545455,0.3749546334797449],[0.67,0.7954545454545455,0.36504990590598063],[0.68,0.7954545454545455,0.3557085128024855],[0.6900000000000001,0.7954545454545455,0.3464395257003194],[0.7000000000000001,0.7954545454545455,0.3375620046126057],[0.71,0.7954545454545455,0.3287043849175278],[0.72,0.7954545454545455,0.3202405480916003],[0.73,0.7954545454545455,0.31199803981287866],[0.74,0.7954545454545455,0.30440166068581254],[0.75,0.7954545454545455,0.2974389947367387],[0.76,0.7954545454545455,0.2915401191166302],[0.77,0.7954545454545455,0.28665447712417147],[0.78,0.7954545454545455,0.28307664559748824],[0.79,0.7954545454545455,0.28049800944749864],[0.8,0.7954545454545455,0.2790365536620293],[0.81,0.7954545454545455,0],[0.8200000000000001,0.7954545454545455,0.2516724361743412],[0.8300000000000001,0.7954545454545455,0.24049472239930153],[0.84,0.7954545454545455,0.23048270863284223],[0.85,0.7954545454545455,0.2218034545787608],[0.86,0.7954545454545455,0.21424482143050516],[0.87,0.7954545454545455,0.20777090429761116],[0.88,0.7954545454545455,0.20201165114813097],[0.89,0.7954545454545455,0.19680577743766672],[0.9,0.7954545454545455,0.19178734259220961],[0.91,0.7954545454545455,0.18681449455344462],[0.92,0.7954545454545455,0.18148023910051403],[0.93,0.7954545454545455,0.17584474902435474],[0.9400000000000001,0.7954545454545455,0.16937352354392693],[0.9500000000000001,0.7954545454545455,0.1624667125093801],[0.96,0.7954545454545455,0.15467428387837004],[0.97,0.7954545454545455,0.1466884546117805],[0.98,0.7954545454545455,0],[0.99,0.7954545454545455,0],[1,0.7954545454545455,0],[0,0.8030303030303031,0.726290698951032],[0.01,0.8030303030303031,0.7261249957447702],[0.02,0.8030303030303031,0.7258200552613348],[0.03,0.8030303030303031,0.7254938859022659],[0.04,0.8030303030303031,0.7251985102229876],[0.05,0.8030303030303031,0.7251396719589007],[0.06,0.8030303030303031,0.7252848101415643],[0.07,0.8030303030303031,0.7256967885054255],[0.08,0.8030303030303031,0.7260882302743072],[0.09,0.8030303030303031,0.6981444677558657],[0.1,0.8030303030303031,0.6983780262485118],[0.11,0.8030303030303031,0.6946782329094345],[0.12,0.8030303030303031,0.6912034956438782],[0.13,0.8030303030303031,0.6874507328950918],[0.14,0.8030303030303031,0.683916291403768],[0.15,0.8030303030303031,0.6803534489294909],[0.16,0.8030303030303031,0.677124938467184],[0.17,0.8030303030303031,0.6740304564139514],[0.18,0.8030303030303031,0.6713771440229304],[0.19,0.8030303030303031,0.6691892174427234],[0.2,0.8030303030303031,0.6676288300701221],[0.21,0.8030303030303031,0.6667320957323457],[0.22,0.8030303030303031,0.6661425983904403],[0.23,0.8030303030303031,0.665222747659165],[0.24,0.8030303030303031,0.6348701911110328],[0.25,0.8030303030303031,0.6285591804128363],[0.26,0.8030303030303031,0.6221140936954386],[0.27,0.8030303030303031,0.6156855134625473],[0.28,0.8030303030303031,0.6096728657626964],[0.29,0.8030303030303031,0.6039405442346424],[0.3,0.8030303030303031,0.5985516214817604],[0.31,0.8030303030303031,0.5933447330361248],[0.32,0.8030303030303031,0.5882467159991167],[0.33,0.8030303030303031,0.5832204024680172],[0.34,0.8030303030303031,0.5783723952568514],[0.35000000000000003,0.8030303030303031,0.5738976704310187],[0.36,0.8030303030303031,0.5333314909854818],[0.37,0.8030303030303031,0.5493519842931978],[0.38,0.8030303030303031,0.5483240906552802],[0.39,0.8030303030303031,0.5465718770004295],[0.4,0.8030303030303031,0.5441430714307539],[0.41000000000000003,0.8030303030303031,0.5413071077428886],[0.42,0.8030303030303031,0.5381018511358424],[0.43,0.8030303030303031,0.5352097856816351],[0.44,0.8030303030303031,0.5330026958146424],[0.45,0.8030303030303031,0.49676462512353964],[0.46,0.8030303030303031,0.49129937453744693],[0.47000000000000003,0.8030303030303031,0.48674261467494984],[0.48,0.8030303030303031,0.4339031370323521],[0.49,0.8030303030303031,0.43317909142484956],[0.5,0.8030303030303031,0.4321791211556062],[0.51,0.8030303030303031,0.43122721209077264],[0.52,0.8030303030303031,0.4306510769917495],[0.53,0.8030303030303031,0.4305121487808625],[0.54,0.8030303030303031,0.4309631681807377],[0.55,0.8030303030303031,0.4285709660324107],[0.56,0.8030303030303031,0.4245113735529924],[0.5700000000000001,0.8030303030303031,0.42017272883697065],[0.58,0.8030303030303031,0.41590478526522007],[0.59,0.8030303030303031,0.4124222172701295],[0.6,0.8030303030303031,0.40956625767513527],[0.61,0.8030303030303031,0.4075995390473406],[0.62,0.8030303030303031,0.40642399663616596],[0.63,0.8030303030303031,0.4130552088880848],[0.64,0.8030303030303031,0.39960874681692876],[0.65,0.8030303030303031,0.3876887889719072],[0.66,0.8030303030303031,0.37675251971032786],[0.67,0.8030303030303031,0.36683565497983317],[0.68,0.8030303030303031,0.3571379870279564],[0.6900000000000001,0.8030303030303031,0.34798682617526844],[0.7000000000000001,0.8030303030303031,0.33885199723446263],[0.71,0.8030303030303031,0.3301109469866458],[0.72,0.8030303030303031,0.32145185788011793],[0.73,0.8030303030303031,0.31332424236084355],[0.74,0.8030303030303031,0.30564569258201785],[0.75,0.8030303030303031,0.29892148838131627],[0.76,0.8030303030303031,0.2931258251655281],[0.77,0.8030303030303031,0.2887108903205289],[0.78,0.8030303030303031,0.2853818714652886],[0.79,0.8030303030303031,0.2832493427321797],[0.8,0.8030303030303031,0.28181915516586],[0.81,0.8030303030303031,0.2354621853027853],[0.8200000000000001,0.8030303030303031,0.2525051666585258],[0.8300000000000001,0.8030303030303031,0.24065218761598048],[0.84,0.8030303030303031,0.2304895062357608],[0.85,0.8030303030303031,0.2216781840760551],[0.86,0.8030303030303031,0.21413820571051123],[0.87,0.8030303030303031,0.20752974761150406],[0.88,0.8030303030303031,0.20171753490682057],[0.89,0.8030303030303031,0.19634189953060882],[0.9,0.8030303030303031,0.1912297168922471],[0.91,0.8030303030303031,0.18605443363834612],[0.92,0.8030303030303031,0.18074938964638],[0.93,0.8030303030303031,0.17490240775347787],[0.9400000000000001,0.8030303030303031,0.16871256022557507],[0.9500000000000001,0.8030303030303031,0.1617100287000433],[0.96,0.8030303030303031,0.15444731093896788],[0.97,0.8030303030303031,0.14680970169548263],[0.98,0.8030303030303031,0.15630857555688407],[0.99,0.8030303030303031,0.15380881169793748],[1,0.8030303030303031,0],[0,0.8106060606060607,0.7239702839487505],[0.01,0.8106060606060607,0.7237426730280409],[0.02,0.8106060606060607,0.7233737771785036],[0.03,0.8106060606060607,0.7228573030927661],[0.04,0.8106060606060607,0.7224555802308468],[0.05,0.8106060606060607,0.7220945084484518],[0.06,0.8106060606060607,0.7221203231687061],[0.07,0.8106060606060607,0.7222502973402896],[0.08,0.8106060606060607,0.7225513232360208],[0.09,0.8106060606060607,0],[0.1,0.8106060606060607,0],[0.11,0.8106060606060607,0.6912856566485464],[0.12,0.8106060606060607,0.6880862583759921],[0.13,0.8106060606060607,0.6845797090425845],[0.14,0.8106060606060607,0.6808092983229629],[0.15,0.8106060606060607,0.6772900922604937],[0.16,0.8106060606060607,0.6738223393866373],[0.17,0.8106060606060607,0.6707007513304626],[0.18,0.8106060606060607,0.6679160164063903],[0.19,0.8106060606060607,0.6656599670863528],[0.2,0.8106060606060607,0.6641439378067825],[0.21,0.8106060606060607,0.6632532422731636],[0.22,0.8106060606060607,0.6630257571933722],[0.23,0.8106060606060607,0.6629731230572762],[0.24,0.8106060606060607,0.6330345456724027],[0.25,0.8106060606060607,0.6265353640216571],[0.26,0.8106060606060607,0.6199971659639759],[0.27,0.8106060606060607,0.6136900875361168],[0.28,0.8106060606060607,0.6076661675270967],[0.29,0.8106060606060607,0.6020649999513161],[0.3,0.8106060606060607,0.5967500223050403],[0.31,0.8106060606060607,0.5916277858300067],[0.32,0.8106060606060607,0.5865818903732859],[0.33,0.8106060606060607,0.5815295181792556],[0.34,0.8106060606060607,0.5765979391619263],[0.35000000000000003,0.8106060606060607,0.5719166962096575],[0.36,0.8106060606060607,0],[0.37,0.8106060606060607,0.5470989511726374],[0.38,0.8106060606060607,0.5461917567653598],[0.39,0.8106060606060607,0.5444893316005494],[0.4,0.8106060606060607,0.5421878082623577],[0.41000000000000003,0.8106060606060607,0.5393455592958083],[0.42,0.8106060606060607,0.53641556508672],[0.43,0.8106060606060607,0.5336665686083957],[0.44,0.8106060606060607,0],[0.45,0.8106060606060607,0],[0.46,0.8106060606060607,0.4916781450764136],[0.47000000000000003,0.8106060606060607,0],[0.48,0.8106060606060607,0.4317250407468175],[0.49,0.8106060606060607,0.431854609056332],[0.5,0.8106060606060607,0.43221088647145134],[0.51,0.8106060606060607,0.4328885093203991],[0.52,0.8106060606060607,0.43410516350410877],[0.53,0.8106060606060607,0.4359818682275206],[0.54,0.8106060606060607,0.4380744848866142],[0.55,0.8106060606060607,0.43816181109271835],[0.56,0.8106060606060607,0.4310765457420543],[0.5700000000000001,0.8106060606060607,0.4244254750827934],[0.58,0.8106060606060607,0.41922378383395215],[0.59,0.8106060606060607,0.4150737997623546],[0.6,0.8106060606060607,0.4123899580084565],[0.61,0.8106060606060607,0.4107361029853161],[0.62,0.8106060606060607,0.41001945053740113],[0.63,0.8106060606060607,0.4173932278378499],[0.64,0.8106060606060607,0.40281124295292825],[0.65,0.8106060606060607,0.3898434315656935],[0.66,0.8106060606060607,0.37877168896545865],[0.67,0.8106060606060607,0.3683506254548159],[0.68,0.8106060606060607,0.35877524947390504],[0.6900000000000001,0.8106060606060607,0.3493106221859722],[0.7000000000000001,0.8106060606060607,0.34034070463651334],[0.71,0.8106060606060607,0.33137801136833656],[0.72,0.8106060606060607,0.32286361474693354],[0.73,0.8106060606060607,0.3146026712925709],[0.74,0.8106060606060607,0.3071236827088411],[0.75,0.8106060606060607,0.30041176271530845],[0.76,0.8106060606060607,0.2950216662907959],[0.77,0.8106060606060607,0.29079841131050344],[0.78,0.8106060606060607,0.28802198798884293],[0.79,0.8106060606060607,0.2859465862928406],[0.8,0.8106060606060607,0.2837826930397327],[0.81,0.8106060606060607,0.26152594402543955],[0.8200000000000001,0.8106060606060607,0.25112873255387164],[0.8300000000000001,0.8106060606060607,0.24021238043355433],[0.84,0.8106060606060607,0.230229067771459],[0.85,0.8106060606060607,0.2214872627139946],[0.86,0.8106060606060607,0.21383060242887414],[0.87,0.8106060606060607,0.2071682558787573],[0.88,0.8106060606060607,0.2011657814800845],[0.89,0.8106060606060607,0.19564367850428094],[0.9,0.8106060606060607,0.19031115802649548],[0.91,0.8106060606060607,0.18502597876368487],[0.92,0.8106060606060607,0.17950086963856587],[0.93,0.8106060606060607,0.17376121269491285],[0.9400000000000001,0.8106060606060607,0.16742074532857065],[0.9500000000000001,0.8106060606060607,0.1608113437192178],[0.96,0.8106060606060607,0.15366736700335076],[0.97,0.8106060606060607,0.14659788286277364],[0.98,0.8106060606060607,0],[0.99,0.8106060606060607,0],[1,0.8106060606060607,0],[0,0.8181818181818182,0.7204166637223008],[0.01,0.8181818181818182,0.7201817039091652],[0.02,0.8181818181818182,0.7196886976240722],[0.03,0.8181818181818182,0.7191713819540332],[0.04,0.8181818181818182,0.7185200788368769],[0.05,0.8181818181818182,0.7182009805334195],[0.06,0.8181818181818182,0.7179246730396454],[0.07,0.8181818181818182,0.7181083371777168],[0.08,0.8181818181818182,0.7182331518941705],[0.09,0.8181818181818182,0.756906663862465],[0.1,0.8181818181818182,0.7547139473083042],[0.11,0.8181818181818182,0.6876688185930102],[0.12,0.8181818181818182,0.6846873665123407],[0.13,0.8181818181818182,0.6810029422091401],[0.14,0.8181818181818182,0.6772647411204331],[0.15,0.8181818181818182,0.6734644873442082],[0.16,0.8181818181818182,0.6699547281366774],[0.17,0.8181818181818182,0.6666625371875297],[0.18,0.8181818181818182,0.6637836219835183],[0.19,0.8181818181818182,0.6615482459749282],[0.2,0.8181818181818182,0.6599416098713723],[0.21,0.8181818181818182,0.6593125163404796],[0.22,0.8181818181818182,0.6592029755275522],[0.23,0.8181818181818182,0.6596221027639335],[0.24,0.8181818181818182,0.6304642738022275],[0.25,0.8181818181818182,0.6241968604679563],[0.26,0.8181818181818182,0.617739977030543],[0.27,0.8181818181818182,0.6114123203292374],[0.28,0.8181818181818182,0.6054828892324478],[0.29,0.8181818181818182,0.5999670389170693],[0.3,0.8181818181818182,0.5947964533695032],[0.31,0.8181818181818182,0.5898413217710998],[0.32,0.8181818181818182,0.5849224612975328],[0.33,0.8181818181818182,0.5799939152264835],[0.34,0.8181818181818182,0.575140008010189],[0.35000000000000003,0.8181818181818182,0.5706170059838268],[0.36,0.8181818181818182,0.5547168961715317],[0.37,0.8181818181818182,0.5455641490897956],[0.38,0.8181818181818182,0.5446782742029177],[0.39,0.8181818181818182,0.5430061843902585],[0.4,0.8181818181818182,0.5406827411981195],[0.41000000000000003,0.8181818181818182,0.5379130801533702],[0.42,0.8181818181818182,0.5349996609818893],[0.43,0.8181818181818182,0.5325161635970626],[0.44,0.8181818181818182,0],[0.45,0.8181818181818182,0.49867993462231724],[0.46,0.8181818181818182,0.48837483972205264],[0.47000000000000003,0.8181818181818182,0.48286354396744147],[0.48,0.8181818181818182,0.42973509007034255],[0.49,0.8181818181818182,0.43079910278161093],[0.5,0.8181818181818182,0.43232938170240615],[0.51,0.8181818181818182,0.4345923155931134],[0.52,0.8181818181818182,0.4376804254316787],[0.53,0.8181818181818182,0.44181659588706296],[0.54,0.8181818181818182,0.44692943914418637],[0.55,0.8181818181818182,0.4488841681391649],[0.56,0.8181818181818182,0.43790565724988406],[0.5700000000000001,0.8181818181818182,0.42910972691547056],[0.58,0.8181818181818182,0.42226040605370563],[0.59,0.8181818181818182,0.4178219017365704],[0.6,0.8181818181818182,0.4149866897747624],[0.61,0.8181818181818182,0.41377623561450666],[0.62,0.8181818181818182,0.41347683767935356],[0.63,0.8181818181818182,0.4204397513499877],[0.64,0.8181818181818182,0.4052586512887171],[0.65,0.8181818181818182,0.3921129186758603],[0.66,0.8181818181818182,0.3803609432788172],[0.67,0.8181818181818182,0.3700422282459278],[0.68,0.8181818181818182,0.36006566988918054],[0.6900000000000001,0.8181818181818182,0.3508036293228458],[0.7000000000000001,0.8181818181818182,0.3415774258813269],[0.71,0.8181818181818182,0.33280539200186093],[0.72,0.8181818181818182,0.3241294921733325],[0.73,0.8181818181818182,0.31605850513922673],[0.74,0.8181818181818182,0.30853317647293227],[0.75,0.8181818181818182,0.3021405377223114],[0.76,0.8181818181818182,0.29687186613401595],[0.77,0.8181818181818182,0.29321290695227586],[0.78,0.8181818181818182,0.29078758321305676],[0.79,0.8181818181818182,0.2896521962935866],[0.8,0.8181818181818182,0.2323607237816845],[0.81,0.8181818181818182,0.263148060565656],[0.8200000000000001,0.8181818181818182,0.2512801267143271],[0.8300000000000001,0.8181818181818182,0.2401170710391909],[0.84,0.8181818181818182,0.23012784445643192],[0.85,0.8181818181818182,0.22131776971206982],[0.86,0.8181818181818182,0.21363002761463445],[0.87,0.8181818181818182,0.20679912607303588],[0.88,0.8181818181818182,0.20065347391250524],[0.89,0.8181818181818182,0.19491052956580152],[0.9,0.8181818181818182,0.18938928546317485],[0.91,0.8181818181818182,0.18387739569318998],[0.92,0.8181818181818182,0.17828718933059534],[0.93,0.8181818181818182,0.17236262946261954],[0.9400000000000001,0.8181818181818182,0.1662231095936355],[0.9500000000000001,0.8181818181818182,0.1595758524564295],[0.96,0.8181818181818182,0.1528739490301842],[0.97,0.8181818181818182,0.14607537373319876],[0.98,0.8181818181818182,0.1478166533917757],[0.99,0.8181818181818182,0],[1,0.8181818181818182,0],[0,0.8257575757575758,0.7154367863129983],[0.01,0.8257575757575758,0.7151495331180575],[0.02,0.8257575757575758,0.7147142604925896],[0.03,0.8257575757575758,0.7140337528493647],[0.04,0.8257575757575758,0.7135498405284157],[0.05,0.8257575757575758,0.7129836285536493],[0.06,0.8257575757575758,0.7129916288630685],[0.07,0.8257575757575758,0.7129596000565814],[0.08,0.8257575757575758,0.7130405114593674],[0.09,0.8257575757575758,0.7117675918897877],[0.1,0.8257575757575758,0],[0.11,0.8257575757575758,0.6838428758905147],[0.12,0.8257575757575758,0.6807235425942404],[0.13,0.8257575757575758,0.6770223368087263],[0.14,0.8257575757575758,0.6729694937409576],[0.15,0.8257575757575758,0.66910001400041],[0.16,0.8257575757575758,0.6653573985735901],[0.17,0.8257575757575758,0.661964058242237],[0.18,0.8257575757575758,0.6590637379073793],[0.19,0.8257575757575758,0.656687918111011],[0.2,0.8257575757575758,0.6553066900398842],[0.21,0.8257575757575758,0.6545958788277972],[0.22,0.8257575757575758,0.6548803406857994],[0.23,0.8257575757575758,0.6554588300329365],[0.24,0.8257575757575758,0.6282825425034979],[0.25,0.8257575757575758,0.6217919772622325],[0.26,0.8257575757575758,0.6152310694053407],[0.27,0.8257575757575758,0.6088816827697527],[0.28,0.8257575757575758,0.6030010986809913],[0.29,0.8257575757575758,0.5976061130431495],[0.3,0.8257575757575758,0.592639729601439],[0.31,0.8257575757575758,0.5878969194850188],[0.32,0.8257575757575758,0.5832381966364055],[0.33,0.8257575757575758,0.5785371441752676],[0.34,0.8257575757575758,0.5739001947844458],[0.35000000000000003,0.8257575757575758,0.5694937068886533],[0.36,0.8257575757575758,0],[0.37,0.8257575757575758,0.5447057175624916],[0.38,0.8257575757575758,0.5437759680376137],[0.39,0.8257575757575758,0.5420948668124792],[0.4,0.8257575757575758,0.5396876807211349],[0.41000000000000003,0.8257575757575758,0.536878654032485],[0.42,0.8257575757575758,0.5340130559005577],[0.43,0.8257575757575758,0.5316226172460398],[0.44,0.8257575757575758,0],[0.45,0.8257575757575758,0],[0.46,0.8257575757575758,0.4836607016506086],[0.47000000000000003,0.8257575757575758,0],[0.48,0.8257575757575758,0.42799054076424903],[0.49,0.8257575757575758,0.4298440878909756],[0.5,0.8257575757575758,0.43260455535824893],[0.51,0.8257575757575758,0.4361654899021174],[0.52,0.8257575757575758,0.4410327799233735],[0.53,0.8257575757575758,0.4476285404462661],[0.54,0.8257575757575758,0.45622629224422406],[0.55,0.8257575757575758,0.4595902605679526],[0.56,0.8257575757575758,0.4448931003852118],[0.5700000000000001,0.8257575757575758,0.4332089714961628],[0.58,0.8257575757575758,0.42539358272881994],[0.59,0.8257575757575758,0.42009719827962655],[0.6,0.8257575757575758,0.4174871723470776],[0.61,0.8257575757575758,0.41657103628420833],[0.62,0.8257575757575758,0.4169283795673196],[0.63,0.8257575757575758,0.42399949332953557],[0.64,0.8257575757575758,0.40795585726155337],[0.65,0.8257575757575758,0.39383671528462183],[0.66,0.8257575757575758,0.38209186974649445],[0.67,0.8257575757575758,0.37126454292443556],[0.68,0.8257575757575758,0.3615122776034257],[0.6900000000000001,0.8257575757575758,0.35194181242686967],[0.7000000000000001,0.8257575757575758,0.34295637500620524],[0.71,0.8257575757575758,0.3339995899667425],[0.72,0.8257575757575758,0.32553412727848435],[0.73,0.8257575757575758,0.31738539141378663],[0.74,0.8257575757575758,0.31011261056427863],[0.75,0.8257575757575758,0.3037732679951487],[0.76,0.8257575757575758,0.29892835919536526],[0.77,0.8257575757575758,0.29547746840345007],[0.78,0.8257575757575758,0.29361901713106286],[0.79,0.8257575757575758,0.29279634309541447],[0.8,0.8257575757575758,0],[0.81,0.8257575757575758,0.26494001520153293],[0.8200000000000001,0.8257575757575758,0.25187806413494884],[0.8300000000000001,0.8257575757575758,0.24035226921885655],[0.84,0.8257575757575758,0.23022767889485957],[0.85,0.8257575757575758,0.22139087646663713],[0.86,0.8257575757575758,0.21359051814829003],[0.87,0.8257575757575758,0.2066589777191555],[0.88,0.8257575757575758,0.20032179474124598],[0.89,0.8257575757575758,0.19438140572434598],[0.9,0.8257575757575758,0.18864209469582605],[0.91,0.8257575757575758,0.18295330925470737],[0.92,0.8257575757575758,0.17716123515966548],[0.93,0.8257575757575758,0.1712455208708651],[0.9400000000000001,0.8257575757575758,0.16498308937999273],[0.9500000000000001,0.8257575757575758,0.15860105552242684],[0.96,0.8257575757575758,0.15194228075298358],[0.97,0.8257575757575758,0.14541827789517023],[0.98,0.8257575757575758,0],[0.99,0.8257575757575758,0],[1,0.8257575757575758,0],[0,0.8333333333333334,0.7091343694094623],[0.01,0.8333333333333334,0.708902540037385],[0.02,0.8333333333333334,0.7083865472587815],[0.03,0.8333333333333334,0.7079114670856993],[0.04,0.8333333333333334,0.7072644223254178],[0.05,0.8333333333333334,0.7071204354684952],[0.06,0.8333333333333334,0.7069951356741455],[0.07,0.8333333333333334,0.7076148821246421],[0.08,0.8333333333333334,0.7080780344253397],[0.09,0.8333333333333334,0.7085678061367675],[0.1,0.8333333333333334,0.6778974898054071],[0.11,0.8333333333333334,0.6797424622636559],[0.12,0.8333333333333334,0.6765177361623425],[0.13,0.8333333333333334,0.6724924260872116],[0.14,0.8333333333333334,0.6683234308685508],[0.15,0.8333333333333334,0.6641470134603289],[0.16,0.8333333333333334,0.6602985261430618],[0.17,0.8333333333333334,0.6568051945669531],[0.18,0.8333333333333334,0.653758925946206],[0.19,0.8333333333333334,0.651556811832291],[0.2,0.8333333333333334,0.6499847585773102],[0.21,0.8333333333333334,0.6496419189437956],[0.22,0.8333333333333334,0.6498192933249929],[0.23,0.8333333333333334,0.6506842414771061],[0.24,0.8333333333333334,0.611733335523252],[0.25,0.8333333333333334,0.6191803744033731],[0.26,0.8333333333333334,0.6123796463546087],[0.27,0.8333333333333334,0.6060612001830005],[0.28,0.8333333333333334,0.6002370779477914],[0.29,0.8333333333333334,0.5950359583931806],[0.3,0.8333333333333334,0.5902857701433738],[0.31,0.8333333333333334,0.5858642170965257],[0.32,0.8333333333333334,0.5815336684647073],[0.33,0.8333333333333334,0.5772060909315864],[0.34,0.8333333333333334,0.5729804164425683],[0.35000000000000003,0.8333333333333334,0.5690881477032743],[0.36,0.8333333333333334,0.5595748118448421],[0.37,0.8333333333333334,0.5444288487199835],[0.38,0.8333333333333334,0.5434884808689557],[0.39,0.8333333333333334,0.5416038489381317],[0.4,0.8333333333333334,0.5391610312748507],[0.41000000000000003,0.8333333333333334,0.536187314913339],[0.42,0.8333333333333334,0.5333240812528831],[0.43,0.8333333333333334,0.5310010250179368],[0.44,0.8333333333333334,0.49438094604888977],[0.45,0.8333333333333334,0.4879006954762354],[0.46,0.8333333333333334,0.4766762020717207],[0.47000000000000003,0.8333333333333334,0.4831735087033668],[0.48,0.8333333333333334,0.4265249847838289],[0.49,0.8333333333333334,0.42923785066492737],[0.5,0.8333333333333334,0.4327588012331266],[0.51,0.8333333333333334,0.4375728683131698],[0.52,0.8333333333333334,0.4438799468004826],[0.53,0.8333333333333334,0.45248793812833515],[0.54,0.8333333333333334,0.4637329441019369],[0.55,0.8333333333333334,0.4689473539475445],[0.56,0.8333333333333334,0.45064664829567475],[0.5700000000000001,0.8333333333333334,0.43715949790095915],[0.58,0.8333333333333334,0.4276836061574796],[0.59,0.8333333333333334,0.42229397163779125],[0.6,0.8333333333333334,0.41945344255913153],[0.61,0.8333333333333334,0.4190837208528908],[0.62,0.8333333333333334,0.42012386352966136],[0.63,0.8333333333333334,0.4269382756265824],[0.64,0.8333333333333334,0.409867878592559],[0.65,0.8333333333333334,0.39556561868406515],[0.66,0.8333333333333334,0.383206960794811],[0.67,0.8333333333333334,0.37260652860601234],[0.68,0.8333333333333334,0.362494245142714],[0.6900000000000001,0.8333333333333334,0.35321429817688266],[0.7000000000000001,0.8333333333333334,0.3440165103439691],[0.71,0.8333333333333334,0.33531131008510207],[0.72,0.8333333333333334,0.326750126860609],[0.73,0.8333333333333334,0.31882984120040764],[0.74,0.8333333333333334,0.311579268033],[0.75,0.8333333333333334,0.3055411243681433],[0.76,0.8333333333333334,0.30083471575575643],[0.77,0.8333333333333334,0.29781325363645517],[0.78,0.8333333333333334,0.2961645108541697],[0.79,0.8333333333333334,0.29567416426156157],[0.8,0.8333333333333334,0.24777851450800373],[0.81,0.8333333333333334,0.2660569254331161],[0.8200000000000001,0.8333333333333334,0.2523251800487779],[0.8300000000000001,0.8333333333333334,0.24063493617880055],[0.84,0.8333333333333334,0.23055649528918146],[0.85,0.8333333333333334,0.22168869758896198],[0.86,0.8333333333333334,0.21385926843896916],[0.87,0.8333333333333334,0.2067969105146108],[0.88,0.8333333333333334,0.20030963135847069],[0.89,0.8333333333333334,0.19417965031851148],[0.9,0.8333333333333334,0.18822983156947895],[0.91,0.8333333333333334,0.1823435000305392],[0.92,0.8333333333333334,0.17641931027527816],[0.93,0.8333333333333334,0.17033179414348226],[0.9400000000000001,0.8333333333333334,0.16414738318523098],[0.9500000000000001,0.8333333333333334,0.15769582734868975],[0.96,0.8333333333333334,0.15131410020864328],[0.97,0.8333333333333334,0.14485799731622287],[0.98,0.8333333333333334,0],[0.99,0.8333333333333334,0],[1,0.8333333333333334,0],[0,0.8409090909090909,0.7020052100846392],[0.01,0.8409090909090909,0.7017483748983674],[0.02,0.8409090909090909,0.7013998048788926],[0.03,0.8409090909090909,0.7008381379126889],[0.04,0.8409090909090909,0.7005947041281256],[0.05,0.8409090909090909,0.7003281889617861],[0.06,0.8409090909090909,0.7008835242332936],[0.07,0.8409090909090909,0.7015634494714683],[0.08,0.8409090909090909,0.7029193549897059],[0.09,0.8409090909090909,0.7040032310752313],[0.1,0.8409090909090909,0],[0.11,0.8409090909090909,0.6756505516859423],[0.12,0.8409090909090909,0.6721084114584299],[0.13,0.8409090909090909,0.6679097207597998],[0.14,0.8409090909090909,0.6633707922020087],[0.15,0.8409090909090909,0.6590743326778521],[0.16,0.8409090909090909,0.6550293318736956],[0.17,0.8409090909090909,0.6514198032860101],[0.18,0.8409090909090909,0.6484580129655256],[0.19,0.8409090909090909,0.6460412380242573],[0.2,0.8409090909090909,0.6447832186298876],[0.21,0.8409090909090909,0.644142051854476],[0.22,0.8409090909090909,0.6446118977654014],[0.23,0.8409090909090909,0.6452352532710407],[0.24,0.8409090909090909,0],[0.25,0.8409090909090909,0.6155527460796966],[0.26,0.8409090909090909,0.6090863358402634],[0.27,0.8409090909090909,0.6029224619568415],[0.28,0.8409090909090909,0.5973481689237183],[0.29,0.8409090909090909,0.5923457863831376],[0.3,0.8409090909090909,0.5879312154980615],[0.31,0.8409090909090909,0.583841431956484],[0.32,0.8409090909090909,0.5799289000097472],[0.33,0.8409090909090909,0.5760662866550875],[0.34,0.8409090909090909,0.5723436035888476],[0.35000000000000003,0.8409090909090909,0.5690421487174877],[0.36,0.8409090909090909,0],[0.37,0.8409090909090909,0.5447292905501889],[0.38,0.8409090909090909,0.5435478473288444],[0.39,0.8409090909090909,0.5416409645586295],[0.4,0.8409090909090909,0.538818184961857],[0.41000000000000003,0.8409090909090909,0.535827431394774],[0.42,0.8409090909090909,0.5328644752256527],[0.43,0.8409090909090909,0.5306388607669769],[0.44,0.8409090909090909,0],[0.45,0.8409090909090909,0.4858930329602576],[0.46,0.8409090909090909,0.47256792642992634],[0.47000000000000003,0.8409090909090909,0],[0.48,0.8409090909090909,0.42553522162877977],[0.49,0.8409090909090909,0.42869509507000814],[0.5,0.8409090909090909,0.4330554948005198],[0.51,0.8409090909090909,0.4385529357144619],[0.52,0.8409090909090909,0.4460512989140705],[0.53,0.8409090909090909,0.4562616452288403],[0.54,0.8409090909090909,0.46966801184687623],[0.55,0.8409090909090909,0.47582070556799017],[0.56,0.8409090909090909,0.45540599160203005],[0.5700000000000001,0.8409090909090909,0.4397303624466429],[0.58,0.8409090909090909,0.4298428222149866],[0.59,0.8409090909090909,0.42363757397003743],[0.6,0.8409090909090909,0.42113046651753094],[0.61,0.8409090909090909,0.42094562759524023],[0.62,0.8409090909090909,0.4225541150196803],[0.63,0.8409090909090909,0.4289956906125632],[0.64,0.8409090909090909,0.41142526962514325],[0.65,0.8409090909090909,0.3964731541143967],[0.66,0.8409090909090909,0.38431562289808296],[0.67,0.8409090909090909,0.37334427885717403],[0.68,0.8409090909090909,0.36357945506214273],[0.6900000000000001,0.8409090909090909,0.3540684526168624],[0.7000000000000001,0.8409090909090909,0.3451772825851244],[0.71,0.8409090909090909,0.3363607083673871],[0.72,0.8409090909090909,0.32804237184610335],[0.73,0.8409090909090909,0.32013342634977987],[0.74,0.8409090909090909,0.3131111284470409],[0.75,0.8409090909090909,0.307193684971649],[0.76,0.8409090909090909,0.3027740117945439],[0.77,0.8409090909090909,0.2999223491985084],[0.78,0.8409090909090909,0.2985601134148468],[0.79,0.8409090909090909,0.29821058998189215],[0.8,0.8409090909090909,0.27512894794511517],[0.81,0.8409090909090909,0.26400106841354126],[0.8200000000000001,0.8409090909090909,0.2519450366641406],[0.8300000000000001,0.8409090909090909,0.2409209862360006],[0.84,0.8409090909090909,0.23102978564567014],[0.85,0.8409090909090909,0.22227388629550454],[0.86,0.8409090909090909,0.21440284809907817],[0.87,0.8409090909090909,0.20727779759438975],[0.88,0.8409090909090909,0.2006468101101106],[0.89,0.8409090909090909,0.19433873681694114],[0.9,0.8409090909090909,0.18821349588266995],[0.91,0.8409090909090909,0.18213151693383053],[0.92,0.8409090909090909,0.1760189049985374],[0.93,0.8409090909090909,0.16984434933698542],[0.9400000000000001,0.8409090909090909,0.163489758623715],[0.9500000000000001,0.8409090909090909,0.15715273830708107],[0.96,0.8409090909090909,0.15075868629048614],[0.97,0.8409090909090909,0.14480426881182684],[0.98,0.8409090909090909,0.13951100495666363],[0.99,0.8409090909090909,0],[1,0.8409090909090909,0],[0,0.8484848484848485,0.6946030728251681],[0.01,0.8484848484848485,0.6944347817200169],[0.02,0.8484848484848485,0.6940536558995649],[0.03,0.8484848484848485,0.6937932415416568],[0.04,0.8484848484848485,0.6934662422788015],[0.05,0.8484848484848485,0.693770726535931],[0.06,0.8484848484848485,0.6942617180227632],[0.07,0.8484848484848485,0.6957303818509766],[0.08,0.8484848484848485,0.697256736856096],[0.09,0.8484848484848485,0.6989590710892011],[0.1,0.8484848484848485,0.6610885963581217],[0.11,0.8484848484848485,0.6717887224522096],[0.12,0.8484848484848485,0.6679370512890654],[0.13,0.8484848484848485,0.6633215947646915],[0.14,0.8484848484848485,0.6586681565786614],[0.15,0.8484848484848485,0.654092116025895],[0.16,0.8484848484848485,0.6499795321926127],[0.17,0.8484848484848485,0.6463533661564891],[0.18,0.8484848484848485,0.6432374088930888],[0.19,0.8484848484848485,0.6410481983591315],[0.2,0.8484848484848485,0.6394249963521608],[0.21,0.8484848484848485,0.6390574612813884],[0.22,0.8484848484848485,0.6390682796396585],[0.23,0.8484848484848485,0.6397402564499353],[0.24,0.8484848484848485,0.602705675588442],[0.25,0.8484848484848485,0.6112851040543541],[0.26,0.8484848484848485,0.6054177605003286],[0.27,0.8484848484848485,0.5997398500410425],[0.28,0.8484848484848485,0.594451329150616],[0.29,0.8484848484848485,0.5898490323926248],[0.3,0.8484848484848485,0.5857409220332743],[0.31,0.8484848484848485,0.5820712673506827],[0.32,0.8484848484848485,0.5785873460591138],[0.33,0.8484848484848485,0.5752105823215874],[0.34,0.8484848484848485,0.5720588278552953],[0.35000000000000003,0.8484848484848485,0.5693822726727986],[0.36,0.8484848484848485,0.5778028543350129],[0.37,0.8484848484848485,0.5453747579636459],[0.38,0.8484848484848485,0.5441531191629627],[0.39,0.8484848484848485,0.5417227221271922],[0.4,0.8484848484848485,0.5389160042173907],[0.41000000000000003,0.8484848484848485,0.5355119404590348],[0.42,0.8484848484848485,0.53261395116407],[0.43,0.8484848484848485,0.5559249504264694],[0.44,0.8484848484848485,0.4952541932814346],[0.45,0.8484848484848485,0.4838176679004821],[0.46,0.8484848484848485,0.46998106170239595],[0.47000000000000003,0.8484848484848485,0.4828075825653062],[0.48,0.8484848484848485,0.42493886164097744],[0.49,0.8484848484848485,0.4285641662200336],[0.5,0.8484848484848485,0.43310817550191427],[0.51,0.8484848484848485,0.43924684742384096],[0.52,0.8484848484848485,0.44736248956812763],[0.53,0.8484848484848485,0.4586602841451549],[0.54,0.8484848484848485,0.4737511716195856],[0.55,0.8484848484848485,0.48037335569022777],[0.56,0.8484848484848485,0.45802786426479175],[0.5700000000000001,0.8484848484848485,0.44181983679899567],[0.58,0.8484848484848485,0.43073720805363486],[0.59,0.8484848484848485,0.4247816519360324],[0.6,0.8484848484848485,0.42197003486177315],[0.61,0.8484848484848485,0.42233744505410575],[0.62,0.8484848484848485,0.4247122894131824],[0.63,0.8484848484848485,0.4298038979582792],[0.64,0.8484848484848485,0.4117806697827813],[0.65,0.8484848484848485,0.397050497206749],[0.66,0.8484848484848485,0.38462591130187035],[0.67,0.8484848484848485,0.3740832327360882],[0.68,0.8484848484848485,0.3641184151485373],[0.6900000000000001,0.8484848484848485,0.35498852544631043],[0.7000000000000001,0.8484848484848485,0.34598134350126697],[0.71,0.8484848484848485,0.33745079773434566],[0.72,0.8484848484848485,0.32913313457495075],[0.73,0.8484848484848485,0.32143228690037584],[0.74,0.8484848484848485,0.3145377328401689],[0.75,0.8484848484848485,0.3088012007359327],[0.76,0.8484848484848485,0.3045688650483005],[0.77,0.8484848484848485,0.30187418113188613],[0.78,0.8484848484848485,0.30061208254280464],[0.79,0.8484848484848485,0.3003213282241166],[0.8,0.8484848484848485,0.27620344206017206],[0.81,0.8484848484848485,0.2638696006437494],[0.8200000000000001,0.8484848484848485,0.2521654811167203],[0.8300000000000001,0.8484848484848485,0.241404902899736],[0.84,0.8484848484848485,0.23178075055341005],[0.85,0.8484848484848485,0.22307498160977393],[0.86,0.8484848484848485,0.21525344972094212],[0.87,0.8484848484848485,0.20803944429210183],[0.88,0.8484848484848485,0.2013069283506259],[0.89,0.8484848484848485,0.19485340034784968],[0.9,0.8484848484848485,0.18853941201058907],[0.91,0.8484848484848485,0.1822822057066553],[0.92,0.8484848484848485,0.17599194683447256],[0.93,0.8484848484848485,0.16959018227198255],[0.9400000000000001,0.8484848484848485,0.16314749640162363],[0.9500000000000001,0.8484848484848485,0.15655396262535526],[0.96,0.8484848484848485,0.15018343900211875],[0.97,0.8484848484848485,0.14408508407401227],[0.98,0.8484848484848485,0.1387528833807617],[0.99,0.8484848484848485,0],[1,0.8484848484848485,0],[0,0.8560606060606061,0.6875278095920536],[0.01,0.8560606060606061,0.687354011679243],[0.02,0.8560606060606061,0.687151699042925],[0.03,0.8560606060606061,0.6868511849421017],[0.04,0.8560606060606061,0.6869187889970797],[0.05,0.8560606060606061,0.6871359782823822],[0.06,0.8560606060606061,0.6882331714692314],[0.07,0.8560606060606061,0.6896746567473678],[0.08,0.8560606060606061,0.6918424152314924],[0.09,0.8560606060606061,0.6937850965564936],[0.1,0.8560606060606061,0],[0.11,0.8560606060606061,0.6689645536770092],[0.12,0.8560606060606061,0.6639201402124191],[0.13,0.8560606060606061,0.6591672940216294],[0.14,0.8560606060606061,0.6542486482973817],[0.15,0.8560606060606061,0.6497046896344094],[0.16,0.8560606060606061,0.6455033234198009],[0.17,0.8560606060606061,0.6418463803393564],[0.18,0.8560606060606061,0.6388724644185418],[0.19,0.8560606060606061,0.6363908652044934],[0.2,0.8560606060606061,0.6349784718514466],[0.21,0.8560606060606061,0.6339739624101801],[0.22,0.8560606060606061,0.633968976837869],[0.23,0.8560606060606061,0.6340167450676493],[0.24,0.8560606060606061,0],[0.25,0.8560606060606061,0.6069792557560947],[0.26,0.8560606060606061,0.6017814840796245],[0.27,0.8560606060606061,0.5966201603419794],[0.28,0.8560606060606061,0.5919329185404693],[0.29,0.8560606060606061,0.5876883193300383],[0.3,0.8560606060606061,0.5840558952438031],[0.31,0.8560606060606061,0.5807367845788064],[0.32,0.8560606060606061,0.5776897965005126],[0.33,0.8560606060606061,0.5747823409609667],[0.34,0.8560606060606061,0.5721290563028367],[0.35000000000000003,0.8560606060606061,0.5700392499856352],[0.36,0.8560606060606061,0],[0.37,0.8560606060606061,0.5464875281791868],[0.38,0.8560606060606061,0.5447509274289226],[0.39,0.8560606060606061,0.5423684601046288],[0.4,0.8560606060606061,0.5388355559818017],[0.41000000000000003,0.8560606060606061,0.5355326171955159],[0.42,0.8560606060606061,0.5323249851865108],[0.43,0.8560606060606061,0],[0.44,0.8560606060606061,0],[0.45,0.8560606060606061,0.4820913937494907],[0.46,0.8560606060606061,0.46823382952150194],[0.47000000000000003,0.8560606060606061,0],[0.48,0.8560606060606061,0.42501887104019154],[0.49,0.8560606060606061,0.42850412906937024],[0.5,0.8560606060606061,0.433274079543457],[0.51,0.8560606060606061,0.439378277561106],[0.52,0.8560606060606061,0.4477382095345344],[0.53,0.8560606060606061,0.45925367116797267],[0.54,0.8560606060606061,0.47449424538337226],[0.55,0.8560606060606061,0.4816768092645629],[0.56,0.8560606060606061,0.45932466692739604],[0.5700000000000001,0.8560606060606061,0.44210486320401876],[0.58,0.8560606060606061,0.43141068732229204],[0.59,0.8560606060606061,0.42476606955697943],[0.6,0.8560606060606061,0.4223232371895834],[0.61,0.8560606060606061,0.4226655083647053],[0.62,0.8560606060606061,0.425658909709976],[0.63,0.8560606060606061,0.4286760619769495],[0.64,0.8560606060606061,0.4111613519700719],[0.65,0.8560606060606061,0.3965362583058032],[0.66,0.8560606060606061,0.3847139992642072],[0.67,0.8560606060606061,0.3741167039268939],[0.68,0.8560606060606061,0.3646459821277186],[0.6900000000000001,0.8560606060606061,0.3554397967660026],[0.7000000000000001,0.8560606060606061,0.34678851091158214],[0.71,0.8560606060606061,0.33825108824190153],[0.72,0.8560606060606061,0.3301654974956189],[0.73,0.8560606060606061,0.32258897309132245],[0.74,0.8560606060606061,0.3158245839791546],[0.75,0.8560606060606061,0.31031660568110353],[0.76,0.8560606060606061,0.3061354970346857],[0.77,0.8560606060606061,0.30360861260142163],[0.78,0.8560606060606061,0.30225432791822926],[0.79,0.8560606060606061,0.3015883800235877],[0.8,0.8560606060606061,0.27716637623981255],[0.81,0.8560606060606061,0.26443342078253246],[0.8200000000000001,0.8560606060606061,0.2527212183826703],[0.8300000000000001,0.8560606060606061,0.24222177210259005],[0.84,0.8560606060606061,0.23268278782235063],[0.85,0.8560606060606061,0.2241340493396041],[0.86,0.8560606060606061,0.21627307624002443],[0.87,0.8560606060606061,0.20905747762895305],[0.88,0.8560606060606061,0.20220697343095972],[0.89,0.8560606060606061,0.19561859673199955],[0.9,0.8560606060606061,0.18915327732706605],[0.91,0.8560606060606061,0.18270229999627408],[0.92,0.8560606060606061,0.17619050490153537],[0.93,0.8560606060606061,0.16960097329891277],[0.9400000000000001,0.8560606060606061,0.1628059604990907],[0.9500000000000001,0.8560606060606061,0.15601634531705044],[0.96,0.8560606060606061,0.14916016235611568],[0.97,0.8560606060606061,0.14284483360758005],[0.98,0.8560606060606061,0.13787865153852963],[0.99,0.8560606060606061,0],[1,0.8560606060606061,0],[0,0.8636363636363636,0.6810863172465591],[0.01,0.8636363636363636,0.6809862937935657],[0.02,0.8636363636363636,0.6807766315453129],[0.03,0.8636363636363636,0.6807058657828066],[0.04,0.8636363636363636,0.6807153286364573],[0.05,0.8636363636363636,0.6813129326901803],[0.06,0.8636363636363636,0.6823013888176565],[0.07,0.8636363636363636,0.6841810148114247],[0.08,0.8636363636363636,0.6863442391646614],[0.09,0.8636363636363636,0.688639854776418],[0.1,0.8636363636363636,0.6501864980777783],[0.11,0.8636363636363636,0.6459885265126508],[0.12,0.8636363636363636,0.6594724523716009],[0.13,0.8636363636363636,0.6551148949253525],[0.14,0.8636363636363636,0.6505404015363219],[0.15,0.8636363636363636,0.6459647438169596],[0.16,0.8636363636363636,0.6419145202889366],[0.17,0.8636363636363636,0.6383555427287397],[0.18,0.8636363636363636,0.635278564873792],[0.19,0.8636363636363636,0.6329718300376479],[0.2,0.8636363636363636,0.6309760882482255],[0.21,0.8636363636363636,0.6299322977870934],[0.22,0.8636363636363636,0.6289216065589558],[0.23,0.8636363636363636,0.6284869116071913],[0.24,0.8636363636363636,0.5830677780953766],[0.25,0.8636363636363636,0.60234159759717],[0.26,0.8636363636363636,0.5981106574140377],[0.27,0.8636363636363636,0.5939157771513746],[0.28,0.8636363636363636,0.589800937969432],[0.29,0.8636363636363636,0.5862431112605384],[0.3,0.8636363636363636,0.5829464336735719],[0.31,0.8636363636363636,0.5800823486255953],[0.32,0.8636363636363636,0.5773561219441938],[0.33,0.8636363636363636,0.5748334620977239],[0.34,0.8636363636363636,0.5725935325861455],[0.35000000000000003,0.8636363636363636,0.5709308069689074],[0.36,0.8636363636363636,0.54070277231193],[0.37,0.8636363636363636,0.5476899880306488],[0.38,0.8636363636363636,0.5458801650536659],[0.39,0.8636363636363636,0.5426487975184915],[0.4,0.8636363636363636,0.5393326905879812],[0.41000000000000003,0.8636363636363636,0.5353225680488212],[0.42,0.8636363636363636,0.5322318474844294],[0.43,0.8636363636363636,0.48827354524251],[0.44,0.8636363636363636,0.4787011753098546],[0.45,0.8636363636363636,0.480767028056076],[0.46,0.8636363636363636,0.4673332168726181],[0.47000000000000003,0.8636363636363636,0.454187935013218],[0.48,0.8636363636363636,0.4254650734452071],[0.49,0.8636363636363636,0.4288195277451106],[0.5,0.8636363636363636,0.4331918775681943],[0.51,0.8636363636363636,0.4391547297082755],[0.52,0.8636363636363636,0.44716774557668615],[0.53,0.8636363636363636,0.45821231985359373],[0.54,0.8636363636363636,0.47284540072470327],[0.55,0.8636363636363636,0.48037670020638146],[0.56,0.8636363636363636,0.4581693371872291],[0.5700000000000001,0.8636363636363636,0.4419068905945924],[0.58,0.8636363636363636,0.43059362857117855],[0.59,0.8636363636363636,0.4244604177555143],[0.6,0.8636363636363636,0.4214583236860664],[0.61,0.8636363636363636,0.4219040617759947],[0.62,0.8636363636363636,0.424757910039263],[0.63,0.8636363636363636,0.42567307215086525],[0.64,0.8636363636363636,0.40901152217608355],[0.65,0.8636363636363636,0.39542750531352416],[0.66,0.8636363636363636,0.38391562114277905],[0.67,0.8636363636363636,0.3740049912848166],[0.68,0.8636363636363636,0.36459124334812093],[0.6900000000000001,0.8636363636363636,0.35584675926650544],[0.7000000000000001,0.8636363636363636,0.3472114550523253],[0.71,0.8636363636363636,0.33896473703169505],[0.72,0.8636363636363636,0.33098562863903563],[0.73,0.8636363636363636,0.3235452046685453],[0.74,0.8636363636363636,0.31702206552069173],[0.75,0.8636363636363636,0.3115039578044999],[0.76,0.8636363636363636,0.3075903717325809],[0.77,0.8636363636363636,0.3049623280348861],[0.78,0.8636363636363636,0.3038428470965735],[0.79,0.8636363636363636,0.27092456773779944],[0.8,0.8636363636363636,0.2777148580883819],[0.81,0.8636363636363636,0.2649928415349939],[0.8200000000000001,0.8636363636363636,0.25350167797406775],[0.8300000000000001,0.8636363636363636,0.24309097043369468],[0.84,0.8636363636363636,0.23379056708398926],[0.85,0.8636363636363636,0.22524006284684958],[0.86,0.8636363636363636,0.2174840428134438],[0.87,0.8636363636363636,0.21017162544428183],[0.88,0.8636363636363636,0.20326527733052646],[0.89,0.8636363636363636,0.1965412946283325],[0.9,0.8636363636363636,0.1899113660243582],[0.91,0.8636363636363636,0.183271106271452],[0.92,0.8636363636363636,0.17655415186388287],[0.93,0.8636363636363636,0.16962944117017215],[0.9400000000000001,0.8636363636363636,0.1625832776781575],[0.9500000000000001,0.8636363636363636,0.15520916839856963],[0.96,0.8636363636363636,0.14780309249954898],[0.97,0.8636363636363636,0.14011388401379957],[0.98,0.8636363636363636,0.14781726750106758],[0.99,0.8636363636363636,0],[1,0.8636363636363636,0],[0,0.8712121212121212,0.6754126709606585],[0.01,0.8712121212121212,0.6753183409291288],[0.02,0.8712121212121212,0.6752203999803621],[0.03,0.8712121212121212,0.6751370274062758],[0.04,0.8712121212121212,0.6753498688800043],[0.05,0.8712121212121212,0.6758635515388574],[0.06,0.8712121212121212,0.6770714573788287],[0.07,0.8712121212121212,0.6788229803128221],[0.08,0.8712121212121212,0.6811011496713422],[0.09,0.8712121212121212,0.6833659348721348],[0.1,0.8712121212121212,0],[0.11,0.8712121212121212,0],[0.12,0.8712121212121212,0.6555736554707707],[0.13,0.8712121212121212,0.6517543567383772],[0.14,0.8712121212121212,0.6473693712246671],[0.15,0.8712121212121212,0.6431836291622467],[0.16,0.8712121212121212,0.6392718681404954],[0.17,0.8712121212121212,0.6358640803900294],[0.18,0.8712121212121212,0.6329688432178755],[0.19,0.8712121212121212,0.6303208339436379],[0.2,0.8712121212121212,0.628346460320118],[0.21,0.8712121212121212,0.6262847695913487],[0.22,0.8712121212121212,0.62474254605115],[0.23,0.8712121212121212,0.6225330337874337],[0.24,0.8712121212121212,0.6192238693649684],[0.25,0.8712121212121212,0.5975766742960733],[0.26,0.8712121212121212,0.5947182328615157],[0.27,0.8712121212121212,0.5914558430087457],[0.28,0.8712121212121212,0.5884203810725475],[0.29,0.8712121212121212,0.585332701142259],[0.3,0.8712121212121212,0.5826857632105867],[0.31,0.8712121212121212,0.5800391737822708],[0.32,0.8712121212121212,0.5776642665986105],[0.33,0.8712121212121212,0.5753592912580257],[0.34,0.8712121212121212,0.573384240276444],[0.35000000000000003,0.8712121212121212,0.571983645674309],[0.36,0.8712121212121212,0],[0.37,0.8712121212121212,0.5491991001204284],[0.38,0.8712121212121212,0.5466040458390549],[0.39,0.8712121212121212,0.5435594015468279],[0.4,0.8712121212121212,0.5392494819457252],[0.41000000000000003,0.8712121212121212,0.5355930110367948],[0.42,0.8712121212121212,0.5320860303017946],[0.43,0.8712121212121212,0],[0.44,0.8712121212121212,0],[0.45,0.8712121212121212,0.47995110947337855],[0.46,0.8712121212121212,0.46728809722010145],[0.47000000000000003,0.8712121212121212,0],[0.48,0.8712121212121212,0.42642676907424965],[0.49,0.8712121212121212,0.4291892964317169],[0.5,0.8712121212121212,0.4331683849361794],[0.51,0.8712121212121212,0.4384737093656341],[0.52,0.8712121212121212,0.4457169639669712],[0.53,0.8712121212121212,0.45565944789911034],[0.54,0.8712121212121212,0.4685095237568647],[0.55,0.8712121212121212,0.47659504751046844],[0.56,0.8712121212121212,0.4560660580849132],[0.5700000000000001,0.8712121212121212,0.4399239635628338],[0.58,0.8712121212121212,0.4296291372016491],[0.59,0.8712121212121212,0.4228427797605414],[0.6,0.8712121212121212,0.41994792967371775],[0.61,0.8712121212121212,0.4196779491659358],[0.62,0.8712121212121212,0.42240567686388397],[0.63,0.8712121212121212,0.42077657639014143],[0.64,0.8712121212121212,0.40573472004452027],[0.65,0.8712121212121212,0.39322079871601856],[0.66,0.8712121212121212,0.3827947837349177],[0.67,0.8712121212121212,0.3732289614508279],[0.68,0.8712121212121212,0.3644370108205539],[0.6900000000000001,0.8712121212121212,0.3558000997310881],[0.7000000000000001,0.8712121212121212,0.3475431150063211],[0.71,0.8712121212121212,0.33939474428751243],[0.72,0.8712121212121212,0.3316050735903282],[0.73,0.8712121212121212,0.32438342417621086],[0.74,0.8712121212121212,0.3178463897971646],[0.75,0.8712121212121212,0.3126322696574584],[0.76,0.8712121212121212,0.30851359858263394],[0.77,0.8712121212121212,0.3060844606060157],[0.78,0.8712121212121212,0.30479986364162326],[0.79,0.8712121212121212,0],[0.8,0.8712121212121212,0.277766907999385],[0.81,0.8712121212121212,0.26541075501706646],[0.8200000000000001,0.8712121212121212,0.2541363886485182],[0.8300000000000001,0.8712121212121212,0.24406443640082431],[0.84,0.8712121212121212,0.23481848306593567],[0.85,0.8712121212121212,0.22647985567313844],[0.86,0.8712121212121212,0.2186521593696637],[0.87,0.8712121212121212,0.211374578097401],[0.88,0.8712121212121212,0.20433571547548823],[0.89,0.8712121212121212,0.19749822924882912],[0.9,0.8712121212121212,0.19070092417146978],[0.91,0.8712121212121212,0.18387043964960897],[0.92,0.8712121212121212,0.17687678487131578],[0.93,0.8712121212121212,0.1697284546969613],[0.9400000000000001,0.8712121212121212,0.16219349717905207],[0.9500000000000001,0.8712121212121212,0.15448910482804173],[0.96,0.8712121212121212,0.1463639011645092],[0.97,0.8712121212121212,0.1381762782793884],[0.98,0.8712121212121212,0],[0.99,0.8712121212121212,0],[1,0.8712121212121212,0],[0,0.8787878787878788,0.6703850372987287],[0.01,0.8787878787878788,0.6703303792615931],[0.02,0.8787878787878788,0.6702494968613033],[0.03,0.8787878787878788,0.670264278050463],[0.04,0.8787878787878788,0.6704628348948536],[0.05,0.8787878787878788,0.671063731210596],[0.06,0.8787878787878788,0.6721785018474045],[0.07,0.8787878787878788,0.6738949114318286],[0.08,0.8787878787878788,0.6760441097593934],[0.09,0.8787878787878788,0.677865796411005],[0.1,0.8787878787878788,0.6781576725906369],[0.11,0.8787878787878788,0.6336058123776387],[0.12,0.8787878787878788,0.6521301230810572],[0.13,0.8787878787878788,0.6487776780085237],[0.14,0.8787878787878788,0.644989659566261],[0.15,0.8787878787878788,0.6410794316696823],[0.16,0.8787878787878788,0.6375857448297687],[0.17,0.8787878787878788,0.634416092226761],[0.18,0.8787878787878788,0.6315028273432287],[0.19,0.8787878787878788,0.6289759456495851],[0.2,0.8787878787878788,0.6262765055621082],[0.21,0.8787878787878788,0.6239687413862647],[0.22,0.8787878787878788,0.6211241124061594],[0.23,0.8787878787878788,0.6185590733007863],[0.24,0.8787878787878788,0.6158938519663901],[0.25,0.8787878787878788,0.5930432954569242],[0.26,0.8787878787878788,0.5913935472262924],[0.27,0.8787878787878788,0.5895913532298787],[0.28,0.8787878787878788,0.5872952979421502],[0.29,0.8787878787878788,0.585260619901514],[0.3,0.8787878787878788,0.5828549674760793],[0.31,0.8787878787878788,0.5807192129952201],[0.32,0.8787878787878788,0.5783874186322151],[0.33,0.8787878787878788,0.5762784347945874],[0.34,0.8787878787878788,0.5743816471177162],[0.35000000000000003,0.8787878787878788,0.5731233202373429],[0.36,0.8787878787878788,0.5539375030867738],[0.37,0.8787878787878788,0.5504597673391072],[0.38,0.8787878787878788,0.547753392644385],[0.39,0.8787878787878788,0.5436461436723776],[0.4,0.8787878787878788,0.5397795174343922],[0.41000000000000003,0.8787878787878788,0.5353172158551851],[0.42,0.8787878787878788,0.5321546562712396],[0.43,0.8787878787878788,0.4686019679223797],[0.44,0.8787878787878788,0.46108851947085927],[0.45,0.8787878787878788,0.4794193234432759],[0.46,0.8787878787878788,0.4679669780742852],[0.47000000000000003,0.8787878787878788,0.44340759322623746],[0.48,0.8787878787878788,0.4276603187400996],[0.49,0.8787878787878788,0.42981278852846183],[0.5,0.8787878787878788,0.4329838833815166],[0.51,0.8787878787878788,0.43747462109614743],[0.52,0.8787878787878788,0.4436314535425021],[0.53,0.8787878787878788,0.4518782396538062],[0.54,0.8787878787878788,0.462526303435637],[0.55,0.8787878787878788,0.47108760280696593],[0.56,0.8787878787878788,0.4519675205194864],[0.5700000000000001,0.8787878787878788,0.4377013572675921],[0.58,0.8787878787878788,0.4272703041559522],[0.59,0.8787878787878788,0.42104101027931967],[0.6,0.8787878787878788,0.41712563544994613],[0.61,0.8787878787878788,0.4160001942282115],[0.62,0.8787878787878788,0.4170583551667585],[0.63,0.8787878787878788,0.41314458514362384],[0.64,0.8787878787878788,0.4009510163320431],[0.65,0.8787878787878788,0.39046661487748474],[0.66,0.8787878787878788,0.380998907220453],[0.67,0.8787878787878788,0.3723173416653288],[0.68,0.8787878787878788,0.3638234522544068],[0.6900000000000001,0.8787878787878788,0.3556794070622523],[0.7000000000000001,0.8787878787878788,0.34755433579286704],[0.71,0.8787878787878788,0.33967649932277505],[0.72,0.8787878787878788,0.3320701513093577],[0.73,0.8787878787878788,0.32489493359613947],[0.74,0.8787878787878788,0.3186564342155307],[0.75,0.8787878787878788,0.3132276218240011],[0.76,0.8787878787878788,0.30937225092817267],[0.77,0.8787878787878788,0.30658500237743325],[0.78,0.8787878787878788,0.30535517792412586],[0.79,0.8787878787878788,0.2658234532488257],[0.8,0.8787878787878788,0.27732703230107786],[0.81,0.8787878787878788,0.2654242738780689],[0.8200000000000001,0.8787878787878788,0.25468165188703146],[0.8300000000000001,0.8787878787878788,0.24482152069887056],[0.84,0.8787878787878788,0.23591277325568846],[0.85,0.8787878787878788,0.22756059894811376],[0.86,0.8787878787878788,0.21986585657616892],[0.87,0.8787878787878788,0.21245930091591975],[0.88,0.8787878787878788,0.20536887054291358],[0.89,0.8787878787878788,0.19836268310138963],[0.9,0.8787878787878788,0.1913978584125855],[0.91,0.8787878787878788,0.18433217923182707],[0.92,0.8787878787878788,0.1771342602135621],[0.93,0.8787878787878788,0.16958621807942137],[0.9400000000000001,0.8787878787878788,0.1618168074457728],[0.9500000000000001,0.8787878787878788,0.15349844661889714],[0.96,0.8787878787878788,0.14496491330364797],[0.97,0.8787878787878788,0.13604603945356114],[0.98,0.8787878787878788,0.13732943844974857],[0.99,0.8787878787878788,0],[1,0.8787878787878788,0],[0,0.8863636363636364,0.6658293589280027],[0.01,0.8863636363636364,0.6657942984199311],[0.02,0.8863636363636364,0.6657583864051226],[0.03,0.8863636363636364,0.6658101485806549],[0.04,0.8863636363636364,0.6660406055138397],[0.05,0.8863636363636364,0.6666450967389226],[0.06,0.8863636363636364,0.6676868628515362],[0.07,0.8863636363636364,0.669383637954766],[0.08,0.8863636363636364,0.6714262026047495],[0.09,0.8863636363636364,0.6736139920553836],[0.1,0.8863636363636364,0.6752082672007023],[0.11,0.8863636363636364,0],[0.12,0.8863636363636364,0.6492417119146279],[0.13,0.8863636363636364,0.646361450810546],[0.14,0.8863636363636364,0.6429501412024698],[0.15,0.8863636363636364,0.6396709031314034],[0.16,0.8863636363636364,0.6365109509582212],[0.17,0.8863636363636364,0.6336362462075482],[0.18,0.8863636363636364,0.6309409487386064],[0.19,0.8863636363636364,0.628058856679911],[0.2,0.8863636363636364,0.6252949993755501],[0.21,0.8863636363636364,0.6218181164281624],[0.22,0.8863636363636364,0.6184183547992954],[0.23,0.8863636363636364,0.6143583892161866],[0.24,0.8863636363636364,0.6108794338320316],[0.25,0.8863636363636364,0.5886991645803729],[0.26,0.8863636363636364,0.5884492840561683],[0.27,0.8863636363636364,0.5875959052369368],[0.28,0.8863636363636364,0.5868097643405649],[0.29,0.8863636363636364,0.5851760819762712],[0.3,0.8863636363636364,0.5836737201869762],[0.31,0.8863636363636364,0.5815024771722174],[0.32,0.8863636363636364,0.5794834517500478],[0.33,0.8863636363636364,0.5772497842218429],[0.34,0.8863636363636364,0.5753939733181472],[0.35000000000000003,0.8863636363636364,0.5741072150223282],[0.36,0.8863636363636364,0],[0.37,0.8863636363636364,0.551664519050283],[0.38,0.8863636363636364,0.5480772976302194],[0.39,0.8863636363636364,0.5442770224369968],[0.4,0.8863636363636364,0.5393557870157936],[0.41000000000000003,0.8863636363636364,0.5354371657595941],[0.42,0.8863636363636364,0.5320229623958262],[0.43,0.8863636363636364,0],[0.44,0.8863636363636364,0],[0.45,0.8863636363636364,0.47907551496990297],[0.46,0.8863636363636364,0.4690795008200438],[0.47000000000000003,0.8863636363636364,0],[0.48,0.8863636363636364,0.4289884490007577],[0.49,0.8863636363636364,0.43040623673138734],[0.5,0.8863636363636364,0.4327937573256183],[0.51,0.8863636363636364,0.43621968144611684],[0.52,0.8863636363636364,0.44094328323647747],[0.53,0.8863636363636364,0.4473227289795769],[0.54,0.8863636363636364,0.4551830928439844],[0.55,0.8863636363636364,0.46333920295529357],[0.56,0.8863636363636364,0.4472064295718643],[0.5700000000000001,0.8863636363636364,0.43403568931406333],[0.58,0.8863636363636364,0.42503199717404816],[0.59,0.8863636363636364,0.41822231063212034],[0.6,0.8863636363636364,0.4140444886446351],[0.61,0.8863636363636364,0.41097412248255627],[0.62,0.8863636363636364,0.4084739420601707],[0.63,0.8863636363636364,0.4036070929128249],[0.64,0.8863636363636364,0.3956706203811252],[0.65,0.8863636363636364,0.3872814774318525],[0.66,0.8863636363636364,0.3791366565120341],[0.67,0.8863636363636364,0.37105752249884844],[0.68,0.8863636363636364,0.36318929453399684],[0.6900000000000001,0.8863636363636364,0.3552689098508572],[0.7000000000000001,0.8863636363636364,0.3475010282075943],[0.71,0.8863636363636364,0.33978723214255413],[0.72,0.8863636363636364,0.3323232156414352],[0.73,0.8863636363636364,0.3254073741585952],[0.74,0.8863636363636364,0.31903214151962156],[0.75,0.8863636363636364,0.3139056837966262],[0.76,0.8863636363636364,0.30963739470327906],[0.77,0.8863636363636364,0.3069729024402206],[0.78,0.8863636363636364,0.30536495917851036],[0.79,0.8863636363636364,0],[0.8,0.8863636363636364,0.27604441899923204],[0.81,0.8863636363636364,0.265033898525292],[0.8200000000000001,0.8863636363636364,0.25487389088939716],[0.8300000000000001,0.8863636363636364,0.24555303937420966],[0.84,0.8863636363636364,0.23676893287555162],[0.85,0.8863636363636364,0.22866024993106532],[0.86,0.8863636363636364,0.2208665370119765],[0.87,0.8863636363636364,0.21347776821174816],[0.88,0.8863636363636364,0.20620383484303295],[0.89,0.8863636363636364,0.19905610388901745],[0.9,0.8863636363636364,0.19186170941131322],[0.91,0.8863636363636364,0.18459113064103994],[0.92,0.8863636363636364,0.17705395155014333],[0.93,0.8863636363636364,0.1693109073045166],[0.9400000000000001,0.8863636363636364,0.1610273643658589],[0.9500000000000001,0.8863636363636364,0.152466565237026],[0.96,0.8863636363636364,0.14324987485061152],[0.97,0.8863636363636364,0.13380437537449177],[0.98,0.8863636363636364,0],[0.99,0.8863636363636364,0],[1,0.8863636363636364,0],[0,0.8939393939393939,0.6615587048708801],[0.01,0.8939393939393939,0.6615410648229829],[0.02,0.8939393939393939,0.6615542949173907],[0.03,0.8939393939393939,0.6616237204006488],[0.04,0.8939393939393939,0.6619231043204299],[0.05,0.8939393939393939,0.6624609652266966],[0.06,0.8939393939393939,0.6635515575154324],[0.07,0.8939393939393939,0.665057690008144],[0.08,0.8939393939393939,0.6672143345896379],[0.09,0.8939393939393939,0.6693852972786043],[0.1,0.8939393939393939,0.6713746873896305],[0.11,0.8939393939393939,0.6512974990935142],[0.12,0.8939393939393939,0.6472284428735757],[0.13,0.8939393939393939,0.6439885965062931],[0.14,0.8939393939393939,0.6412098445092886],[0.15,0.8939393939393939,0.638374002767923],[0.16,0.8939393939393939,0.6357646782173344],[0.17,0.8939393939393939,0.6331910767032684],[0.18,0.8939393939393939,0.6305004069598534],[0.19,0.8939393939393939,0.6277227386521917],[0.2,0.8939393939393939,0.6241614945550875],[0.21,0.8939393939393939,0.6203539988784044],[0.22,0.8939393939393939,0.6153323950733048],[0.23,0.8939393939393939,0.6101504929963899],[0.24,0.8939393939393939,0.6044857184655686],[0.25,0.8939393939393939,0.5844756549938761],[0.26,0.8939393939393939,0.5851313953707623],[0.27,0.8939393939393939,0.5859317733706741],[0.28,0.8939393939393939,0.5857445504459895],[0.29,0.8939393939393939,0.5855277610496121],[0.3,0.8939393939393939,0.5840307161420485],[0.31,0.8939393939393939,0.5825338705146492],[0.32,0.8939393939393939,0.5802501667901407],[0.33,0.8939393939393939,0.5781309152150405],[0.34,0.8939393939393939,0.5760600593901197],[0.35000000000000003,0.8939393939393939,0.5747360917387705],[0.36,0.8939393939393939,0.5889322648925734],[0.37,0.8939393939393939,0.5521830243364949],[0.38,0.8939393939393939,0.5485935497807906],[0.39,0.8939393939393939,0.5437983822429533],[0.4,0.8939393939393939,0.5394248001514841],[0.41000000000000003,0.8939393939393939,0.5348505614342564],[0.42,0.8939393939393939,0.4743059519600364],[0.43,0.8939393939393939,0.46791310179849616],[0.44,0.8939393939393939,0.4839452501427003],[0.45,0.8939393939393939,0.47814645855092675],[0.46,0.8939393939393939,0.4711971814643987],[0.47000000000000003,0.8939393939393939,0.46562411897483036],[0.48,0.8939393939393939,0.430260658361438],[0.49,0.8939393939393939,0.43106219358853676],[0.5,0.8939393939393939,0.43248382622284465],[0.51,0.8939393939393939,0.43474507395057616],[0.52,0.8939393939393939,0.4379842242619574],[0.53,0.8939393939393939,0.4421845512875866],[0.54,0.8939393939393939,0.4471957353752794],[0.55,0.8939393939393939,0.45453677043429336],[0.56,0.8939393939393939,0.44115754400134677],[0.5700000000000001,0.8939393939393939,0.4305143440833574],[0.58,0.8939393939393939,0.42185797325059526],[0.59,0.8939393939393939,0.41580298523854586],[0.6,0.8939393939393939,0.4107554947189106],[0.61,0.8939393939393939,0.4069445562224825],[0.62,0.8939393939393939,0.4029520751487657],[0.63,0.8939393939393939,0.39797617048309963],[0.64,0.8939393939393939,0.3915709718677537],[0.65,0.8939393939393939,0.38456524237128165],[0.66,0.8939393939393939,0.37726977797200834],[0.67,0.8939393939393939,0.3699093446432873],[0.68,0.8939393939393939,0.3623888231431929],[0.6900000000000001,0.8939393939393939,0.35489439156272795],[0.7000000000000001,0.8939393939393939,0.34730565982701944],[0.71,0.8939393939393939,0.33982753297768303],[0.72,0.8939393939393939,0.33257265919932444],[0.73,0.8939393939393939,0.325646439468099],[0.74,0.8939393939393939,0.31956506743036117],[0.75,0.8939393939393939,0.3141072200203665],[0.76,0.8939393939393939,0.3100517413330815],[0.77,0.8939393939393939,0.30687985017459707],[0.78,0.8939393939393939,0.3051823931003297],[0.79,0.8939393939393939,0.2809632112750535],[0.8,0.8939393939393939,0.2733201446436689],[0.81,0.8939393939393939,0.26415584685204874],[0.8200000000000001,0.8939393939393939,0.25497395486041535],[0.8300000000000001,0.8939393939393939,0.24604260622840907],[0.84,0.8939393939393939,0.23763374095058118],[0.85,0.8939393939393939,0.22950684860992493],[0.86,0.8939393939393939,0.2218059150551797],[0.87,0.8939393939393939,0.2142287549110506],[0.88,0.8939393939393939,0.20684537929614008],[0.89,0.8939393939393939,0.1994431149412158],[0.9,0.8939393939393939,0.19202944250644532],[0.91,0.8939393939393939,0.18443273462181095],[0.92,0.8939393939393939,0.17668633731352368],[0.93,0.8939393939393939,0.16849355649366754],[0.9400000000000001,0.8939393939393939,0.1600510833499525],[0.9500000000000001,0.8939393939393939,0.15090749512999152],[0.96,0.8939393939393939,0.14138869233300735],[0.97,0.8939393939393939,0.13125427229996078],[0.98,0.8939393939393939,0.14568872798974408],[0.99,0.8939393939393939,0.14332237027293243],[1,0.8939393939393939,0],[0,0.9015151515151515,0.6574359013034361],[0.01,0.9015151515151515,0.6574493824702635],[0.02,0.9015151515151515,0.6574781827872659],[0.03,0.9015151515151515,0.6576300761149089],[0.04,0.9015151515151515,0.6578938546799169],[0.05,0.9015151515151515,0.6585344646805286],[0.06,0.9015151515151515,0.6594594592237215],[0.07,0.9015151515151515,0.6610553900090695],[0.08,0.9015151515151515,0.662971979210651],[0.09,0.9015151515151515,0.6652640395574768],[0.1,0.9015151515151515,0.6672023119414701],[0.11,0.9015151515151515,0],[0.12,0.9015151515151515,0],[0.13,0.9015151515151515,0.6408266922188698],[0.14,0.9015151515151515,0.6390372685056382],[0.15,0.9015151515151515,0.6370101668606549],[0.16,0.9015151515151515,0.6347851608257193],[0.17,0.9015151515151515,0.6324974560528434],[0.18,0.9015151515151515,0.6300132027196075],[0.19,0.9015151515151515,0.6268441006486684],[0.2,0.9015151515151515,0.6232327240282642],[0.21,0.9015151515151515,0.6181798703451605],[0.22,0.9015151515151515,0.612476125684214],[0.23,0.9015151515151515,0.6052115892362554],[0.24,0.9015151515151515,0.5976047437276948],[0.25,0.9015151515151515,0.5799924012261439],[0.26,0.9015151515151515,0.5817921873524907],[0.27,0.9015151515151515,0.5832564286575339],[0.28,0.9015151515151515,0.5848289023226919],[0.29,0.9015151515151515,0.5847524327829458],[0.3,0.9015151515151515,0.5844522701510861],[0.31,0.9015151515151515,0.5826388578656566],[0.32,0.9015151515151515,0.580775304670869],[0.33,0.9015151515151515,0.5782810098841948],[0.34,0.9015151515151515,0.5761885430305517],[0.35000000000000003,0.9015151515151515,0.5746829276517651],[0.36,0.9015151515151515,0],[0.37,0.9015151515151515,0.5523583708201738],[0.38,0.9015151515151515,0.5480575435349342],[0.39,0.9015151515151515,0.543666116237411],[0.4,0.9015151515151515,0.5385478432536371],[0.41000000000000003,0.9015151515151515,0.5345059053660544],[0.42,0.9015151515151515,0],[0.43,0.9015151515151515,0],[0.44,0.9015151515151515,0.48359759196259017],[0.45,0.9015151515151515,0.47800430991556586],[0.46,0.9015151515151515,0.47194846678130764],[0.47000000000000003,0.9015151515151515,0.46660017298436873],[0.48,0.9015151515151515,0.43142437824198177],[0.49,0.9015151515151515,0.431581606306922],[0.5,0.9015151515151515,0.4321270021345578],[0.51,0.9015151515151515,0.4331309008498079],[0.52,0.9015151515151515,0.43478411133468237],[0.53,0.9015151515151515,0.43704175060474754],[0.54,0.9015151515151515,0.4395119504611139],[0.55,0.9015151515151515,0.44543477578045443],[0.56,0.9015151515151515,0.4353127432863577],[0.5700000000000001,0.9015151515151515,0.42619075377362625],[0.58,0.9015151515151515,0.41916947539125027],[0.59,0.9015151515151515,0.412993728764358],[0.6,0.9015151515151515,0.4082401669544863],[0.61,0.9015151515151515,0.40371265031433684],[0.62,0.9015151515151515,0.3993798201180996],[0.63,0.9015151515151515,0.39437193490189426],[0.64,0.9015151515151515,0.38866498933810567],[0.65,0.9015151515151515,0.38237763124626434],[0.66,0.9015151515151515,0.37574410101472944],[0.67,0.9015151515151515,0.3688100587283386],[0.68,0.9015151515151515,0.3617362167402194],[0.6900000000000001,0.9015151515151515,0.3544623476052973],[0.7000000000000001,0.9015151515151515,0.3471709771618231],[0.71,0.9015151515151515,0.3398680126621552],[0.72,0.9015151515151515,0.3327278852159907],[0.73,0.9015151515151515,0.32604512792477336],[0.74,0.9015151515151515,0.31978395315150643],[0.75,0.9015151515151515,0.31458091797583326],[0.76,0.9015151515151515,0.310049803595708],[0.77,0.9015151515151515,0.3069291611644859],[0.78,0.9015151515151515,0.3047733919563216],[0.79,0.9015151515151515,0.2802582425144313],[0.8,0.9015151515151515,0.2722760323413753],[0.81,0.9015151515151515,0.2637644749935173],[0.8200000000000001,0.9015151515151515,0.2550793768896326],[0.8300000000000001,0.9015151515151515,0.2466016234281096],[0.84,0.9015151515151515,0.23828736003859446],[0.85,0.9015151515151515,0.2303225013782707],[0.86,0.9015151515151515,0.22245907566457873],[0.87,0.9015151515151515,0.21481288134831614],[0.88,0.9015151515151515,0.20714410726400384],[0.89,0.9015151515151515,0.19950979597261104],[0.9,0.9015151515151515,0.19173469933501286],[0.91,0.9015151515151515,0.1838709590662882],[0.92,0.9015151515151515,0.1756862149298181],[0.93,0.9015151515151515,0.16732815325862146],[0.9400000000000001,0.9015151515151515,0.1583663180910308],[0.9500000000000001,0.9015151515151515,0.14909716301760634],[0.96,0.9015151515151515,0.1389784676252571],[0.97,0.9015151515151515,0.128466609214608],[0.98,0.9015151515151515,0],[0.99,0.9015151515151515,0],[1,0.9015151515151515,0],[0,0.9090909090909092,0.6533760400800206],[0.01,0.9090909090909092,0.653399141525858],[0.02,0.9090909090909092,0.653489509702181],[0.03,0.9090909090909092,0.6536361067420171],[0.04,0.9090909090909092,0.6540053696474019],[0.05,0.9090909090909092,0.6545440003492035],[0.06,0.9090909090909092,0.6555781496833095],[0.07,0.9090909090909092,0.65693102265061],[0.08,0.9090909090909092,0.6589022959077583],[0.09,0.9090909090909092,0.6609545107418693],[0.1,0.9090909090909092,0.6628471543243217],[0.11,0.9090909090909092,0.6425938109500149],[0.12,0.9090909090909092,0.6427260589889963],[0.13,0.9090909090909092,0.6378216397540225],[0.14,0.9090909090909092,0.6367007398410918],[0.15,0.9090909090909092,0.6350676181770518],[0.16,0.9090909090909092,0.63327283832141],[0.17,0.9090909090909092,0.6312071119238736],[0.18,0.9090909090909092,0.6286469375753543],[0.19,0.9090909090909092,0.6255889368098202],[0.2,0.9090909090909092,0.6211907567413772],[0.21,0.9090909090909092,0.6159432137261447],[0.22,0.9090909090909092,0.6086349027273565],[0.23,0.9090909090909092,0.6001332450816197],[0.24,0.9090909090909092,0.5897686269010266],[0.25,0.9090909090909092,0.5759828978610204],[0.26,0.9090909090909092,0.5773065648275697],[0.27,0.9090909090909092,0.5803620036312732],[0.28,0.9090909090909092,0.5822942266530127],[0.29,0.9090909090909092,0.5838836294336555],[0.3,0.9090909090909092,0.583299076687328],[0.31,0.9090909090909092,0.5823794830682036],[0.32,0.9090909090909092,0.5800389304971982],[0.33,0.9090909090909092,0.5777439050184998],[0.34,0.9090909090909092,0.5753036585484071],[0.35000000000000003,0.9090909090909092,0.573711229987557],[0.36,0.9090909090909092,0.5772623037702657],[0.37,0.9090909090909092,0.5515865900409159],[0.38,0.9090909090909092,0.5473985932670437],[0.39,0.9090909090909092,0.5423778577660725],[0.4,0.9090909090909092,0.5378918921977109],[0.41000000000000003,0.9090909090909092,0.5336966782747923],[0.42,0.9090909090909092,0.4741334705485511],[0.43,0.9090909090909092,0.4667732343500181],[0.44,0.9090909090909092,0.48304048980845904],[0.45,0.9090909090909092,0.47779861228687204],[0.46,0.9090909090909092,0.4724028621157436],[0.47000000000000003,0.9090909090909092,0.46768700619520465],[0.48,0.9090909090909092,0.4324521901533996],[0.49,0.9090909090909092,0.4320521428425017],[0.5,0.9090909090909092,0.4315808546616926],[0.51,0.9090909090909092,0.43141723863535864],[0.52,0.9090909090909092,0.4315429738636968],[0.53,0.9090909090909092,0.43200395250242085],[0.54,0.9090909090909092,0.43254666095078237],[0.55,0.9090909090909092,0.4367042633767699],[0.56,0.9090909090909092,0.4291532505749814],[0.5700000000000001,0.9090909090909092,0.4223661628506047],[0.58,0.9090909090909092,0.4159886469190839],[0.59,0.9090909090909092,0.4107909980796658],[0.6,0.9090909090909092,0.40582518017374425],[0.61,0.9090909090909092,0.4014464171465017],[0.62,0.9090909090909092,0.39683941412766943],[0.63,0.9090909090909092,0.391985251517611],[0.64,0.9090909090909092,0.38658818650556315],[0.65,0.9090909090909092,0.38074627914577086],[0.66,0.9090909090909092,0.3745047169653581],[0.67,0.9090909090909092,0.3679667169055509],[0.68,0.9090909090909092,0.36115054053161355],[0.6900000000000001,0.9090909090909092,0.3541884401453389],[0.7000000000000001,0.9090909090909092,0.34706490997734674],[0.71,0.9090909090909092,0.33996618454698446],[0.72,0.9090909090909092,0.33301298869234236],[0.73,0.9090909090909092,0.32631014958303695],[0.74,0.9090909090909092,0.32028055872456285],[0.75,0.9090909090909092,0.3147402485372264],[0.76,0.9090909090909092,0.31034528106035164],[0.77,0.9090909090909092,0.30670663259240105],[0.78,0.9090909090909092,0.3043507212432407],[0.79,0.9090909090909092,0.279871411977777],[0.8,0.9090909090909092,0.2719266508703313],[0.81,0.9090909090909092,0.26370081505122583],[0.8200000000000001,0.9090909090909092,0.25538769392532623],[0.8300000000000001,0.9090909090909092,0.247076348034189],[0.84,0.9090909090909092,0.23895914360879533],[0.85,0.9090909090909092,0.23088871069228797],[0.86,0.9090909090909092,0.2230003972043287],[0.87,0.9090909090909092,0.21506118779011357],[0.88,0.9090909090909092,0.20716739020621877],[0.89,0.9090909090909092,0.19912103695946548],[0.9,0.9090909090909092,0.19100278908021961],[0.91,0.9090909090909092,0.18263236798132104],[0.92,0.9090909090909092,0.17420008108355517],[0.93,0.9090909090909092,0.16532828549281994],[0.9400000000000001,0.9090909090909092,0.1562870379913991],[0.9500000000000001,0.9090909090909092,0.1464881585224204],[0.96,0.9090909090909092,0.1362090372956402],[0.97,0.9090909090909092,0.12513516164386207],[0.98,0.9090909090909092,0.137330042221509],[0.99,0.9090909090909092,0],[1,0.9090909090909092,0],[0,0.9166666666666667,0.6492897889126074],[0.01,0.9166666666666667,0.6493412824087066],[0.02,0.9166666666666667,0.6494394708410107],[0.03,0.9166666666666667,0.6496638937157376],[0.04,0.9166666666666667,0.6499928071792603],[0.05,0.9166666666666667,0.6506299928247483],[0.06,0.9166666666666667,0.6515009493826813],[0.07,0.9166666666666667,0.652908855900178],[0.08,0.9166666666666667,0.654618286596887],[0.09,0.9166666666666667,0.6566274078646079],[0.1,0.9166666666666667,0.6583817565173111],[0.11,0.9166666666666667,0],[0.12,0.9166666666666667,0],[0.13,0.9166666666666667,0.6346953973646523],[0.14,0.9166666666666667,0.633796974914414],[0.15,0.9166666666666667,0.6325153102563055],[0.16,0.9166666666666667,0.6308635608774942],[0.17,0.9166666666666667,0.6288804660992979],[0.18,0.9166666666666667,0.6264379749151684],[0.19,0.9166666666666667,0.622962422558929],[0.2,0.9166666666666667,0.61865106134697],[0.21,0.9166666666666667,0.6123610025202698],[0.22,0.9166666666666667,0.6047426601012558],[0.23,0.9166666666666667,0.5945752255919192],[0.24,0.9166666666666667,0.5829199083576431],[0.25,0.9166666666666667,0],[0.26,0.9166666666666667,0.5710150446586021],[0.27,0.9166666666666667,0.5756588149001931],[0.28,0.9166666666666667,0.5795912490019315],[0.29,0.9166666666666667,0.5810339357647869],[0.3,0.9166666666666667,0.5817887857919919],[0.31,0.9166666666666667,0.5803221502935798],[0.32,0.9166666666666667,0.5785583253727856],[0.33,0.9166666666666667,0.5758067296753091],[0.34,0.9166666666666667,0.5733940415907486],[0.35000000000000003,0.9166666666666667,0.5715468201838362],[0.36,0.9166666666666667,0],[0.37,0.9166666666666667,0.5500929034743225],[0.38,0.9166666666666667,0.5455538734236486],[0.39,0.9166666666666667,0.5410789983498001],[0.4,0.9166666666666667,0.5363633667476537],[0.41000000000000003,0.9166666666666667,0.5328829761411047],[0.42,0.9166666666666667,0],[0.43,0.9166666666666667,0],[0.44,0.9166666666666667,0.48227930868352953],[0.45,0.9166666666666667,0.47743822518672263],[0.46,0.9166666666666667,0.4725825900727675],[0.47000000000000003,0.9166666666666667,0.46854561334958217],[0.48,0.9166666666666667,0.433437351907221],[0.49,0.9166666666666667,0.4322608467981053],[0.5,0.9166666666666667,0.43096115266200785],[0.51,0.9166666666666667,0.4295316771073985],[0.52,0.9166666666666667,0.4283177817335235],[0.53,0.9166666666666667,0.4271744849637623],[0.54,0.9166666666666667,0.4262258596467882],[0.55,0.9166666666666667,0.42866183825424414],[0.56,0.9166666666666667,0.4236805205256977],[0.5700000000000001,0.9166666666666667,0.41825934302914836],[0.58,0.9166666666666667,0.41332453039488115],[0.59,0.9166666666666667,0.4083844873970551],[0.6,0.9166666666666667,0.404002276452776],[0.61,0.9166666666666667,0.399512554082085],[0.62,0.9166666666666667,0.39507214723170325],[0.63,0.9166666666666667,0.39026496141254463],[0.64,0.9166666666666667,0.38510460321013723],[0.65,0.9166666666666667,0.3795362989294379],[0.66,0.9166666666666667,0.37358701691457963],[0.67,0.9166666666666667,0.3673123166042499],[0.68,0.9166666666666667,0.36077619490575724],[0.6900000000000001,0.9166666666666667,0.35399352774864684],[0.7000000000000001,0.9166666666666667,0.34711334455510773],[0.71,0.9166666666666667,0.34016498380826216],[0.72,0.9166666666666667,0.3333203070253582],[0.73,0.9166666666666667,0.3267956004919065],[0.74,0.9166666666666667,0.32060016306082817],[0.75,0.9166666666666667,0.3152090761127261],[0.76,0.9166666666666667,0.310374138699276],[0.77,0.9166666666666667,0.30672327756811335],[0.78,0.9166666666666667,0.30393035360983234],[0.79,0.9166666666666667,0.279505094598518],[0.8,0.9166666666666667,0.27183252516390466],[0.81,0.9166666666666667,0.26387395707707806],[0.8200000000000001,0.9166666666666667,0.25574101340013317],[0.8300000000000001,0.9166666666666667,0.24761259966927682],[0.84,0.9166666666666667,0.23945743451199],[0.85,0.9166666666666667,0.23139895632373214],[0.86,0.9166666666666667,0.2232483042966816],[0.87,0.9166666666666667,0.2151185478540076],[0.88,0.9166666666666667,0.2067941051547043],[0.89,0.9166666666666667,0.19836774822267353],[0.9,0.9166666666666667,0.18964412013267926],[0.91,0.9166666666666667,0.1808327846840005],[0.92,0.9166666666666667,0.1718018154761299],[0.93,0.9166666666666667,0.16280455927163173],[0.9400000000000001,0.9166666666666667,0.15324364709642954],[0.9500000000000001,0.9166666666666667,0.14343325304344304],[0.96,0.9166666666666667,0.13264506164576073],[0.97,0.9166666666666667,0.12139140526093423],[0.98,0.9166666666666667,0],[0.99,0.9166666666666667,0],[1,0.9166666666666667,0],[0,0.9242424242424243,0.6451064923555043],[0.01,0.9242424242424243,0.6451640408513515],[0.02,0.9242424242424243,0.6453046116329841],[0.03,0.9242424242424243,0.645524134846652],[0.04,0.9242424242424243,0.6459218002384441],[0.05,0.9242424242424243,0.6464843538833593],[0.06,0.9242424242424243,0.6474065124338498],[0.07,0.9242424242424243,0.6486294989652607],[0.08,0.9242424242424243,0.6503021348565907],[0.09,0.9242424242424243,0.6521176113557856],[0.1,0.9242424242424243,0.6535662664299398],[0.11,0.9242424242424243,0.6535709954469578],[0.12,0.9242424242424243,0.6564207210675371],[0.13,0.9242424242424243,0.6312853994488035],[0.14,0.9242424242424243,0.6304368517455234],[0.15,0.9242424242424243,0.6291061311722896],[0.16,0.9242424242424243,0.6275045454331668],[0.17,0.9242424242424243,0.62551365796641],[0.18,0.9242424242424243,0.6228567956926037],[0.19,0.9242424242424243,0.6195038228716115],[0.2,0.9242424242424243,0.6145686408506086],[0.21,0.9242424242424243,0.6084442705235567],[0.22,0.9242424242424243,0.5997690096897919],[0.23,0.9242424242424243,0.589117464838819],[0.24,0.9242424242424243,0.5756291030189022],[0.25,0.9242424242424243,0.6482140626314822],[0.26,0.9242424242424243,0.5652324820365346],[0.27,0.9242424242424243,0.5712941573632744],[0.28,0.9242424242424243,0.5751669755263307],[0.29,0.9242424242424243,0.5780686988433392],[0.3,0.9242424242424243,0.5781844577195752],[0.31,0.9242424242424243,0.5776414398469838],[0.32,0.9242424242424243,0.5753125483273882],[0.33,0.9242424242424243,0.5728555819699451],[0.34,0.9242424242424243,0.5700569381732132],[0.35000000000000003,0.9242424242424243,0.5679851344234967],[0.36,0.9242424242424243,0.5833550342712395],[0.37,0.9242424242424243,0.547560255053724],[0.38,0.9242424242424243,0.5433026067414812],[0.39,0.9242424242424243,0.5386593354077273],[0.4,0.9242424242424243,0.5348053706079794],[0.41000000000000003,0.9242424242424243,0.5319405485047329],[0.42,0.9242424242424243,0.5477929130861536],[0.43,0.9242424242424243,0.4697069874027467],[0.44,0.9242424242424243,0.48119511114588703],[0.45,0.9242424242424243,0.4767610812813968],[0.46,0.9242424242424243,0.4724254260833699],[0.47000000000000003,0.9242424242424243,0.4690886788145238],[0.48,0.9242424242424243,0.4341333499435678],[0.49,0.9242424242424243,0.43230591296411747],[0.5,0.9242424242424243,0.43000602402706994],[0.51,0.9242424242424243,0.4276495000226551],[0.52,0.9242424242424243,0.4250484060679135],[0.53,0.9242424242424243,0.4224961842128774],[0.54,0.9242424242424243,0.4197897994903861],[0.55,0.9242424242424243,0.42170777383404046],[0.56,0.9242424242424243,0.41852150405313504],[0.5700000000000001,0.9242424242424243,0.41473311777681665],[0.58,0.9242424242424243,0.41046762893256505],[0.59,0.9242424242424243,0.4064111414956765],[0.6,0.9242424242424243,0.40216865057873474],[0.61,0.9242424242424243,0.3980359934406008],[0.62,0.9242424242424243,0.3936288554325664],[0.63,0.9242424242424243,0.38900018563826944],[0.64,0.9242424242424243,0.38400977670897907],[0.65,0.9242424242424243,0.3786389585817179],[0.66,0.9242424242424243,0.37292879514719185],[0.67,0.9242424242424243,0.3668767935318574],[0.68,0.9242424242424243,0.36053623744156327],[0.6900000000000001,0.9242424242424243,0.35399053595539565],[0.7000000000000001,0.9242424242424243,0.34725086672800987],[0.71,0.9242424242424243,0.3404881674329396],[0.72,0.9242424242424243,0.3337750077386168],[0.73,0.9242424242424243,0.3272420594049292],[0.74,0.9242424242424243,0.3211625582145133],[0.75,0.9242424242424243,0.3154635977343525],[0.76,0.9242424242424243,0.3106598345558421],[0.77,0.9242424242424243,0.30657905640997457],[0.78,0.9242424242424243,0.30368540915431846],[0.79,0.9242424242424243,0.27925094348048163],[0.8,0.9242424242424243,0.27188609687959087],[0.81,0.9242424242424243,0.26413657541965413],[0.8200000000000001,0.9242424242424243,0.25615835235364615],[0.8300000000000001,0.9242424242424243,0.24805263226909302],[0.84,0.9242424242424243,0.23993075067226272],[0.85,0.9242424242424243,0.23167358780456243],[0.86,0.9242424242424243,0.2233845947915682],[0.87,0.9242424242424243,0.214857821896727],[0.88,0.9242424242424243,0.2061897802558128],[0.89,0.9242424242424243,0.19715231879026276],[0.9,0.9242424242424243,0.1878212257982365],[0.91,0.9242424242424243,0.17807219550256342],[0.92,0.9242424242424243,0.16877030486236122],[0.93,0.9242424242424243,0.15922805956885228],[0.9400000000000001,0.9242424242424243,0.1496809251526907],[0.9500000000000001,0.9242424242424243,0.13928114813379006],[0.96,0.9242424242424243,0.12857286594939488],[0.97,0.9242424242424243,0.11738008853356495],[0.98,0.9242424242424243,0.12534418127188843],[0.99,0.9242424242424243,0],[1,0.9242424242424243,0],[0,0.9318181818181819,0.6407568010793269],[0.01,0.9318181818181819,0.6408288694327144],[0.02,0.9318181818181819,0.6409751503769682],[0.03,0.9318181818181819,0.641231319325113],[0.04,0.9318181818181819,0.6416110644450171],[0.05,0.9318181818181819,0.6422073084395179],[0.06,0.9318181818181819,0.6430470796064534],[0.07,0.9318181818181819,0.6442586697266866],[0.08,0.9318181818181819,0.6458293365230432],[0.09,0.9318181818181819,0.6476621733568472],[0.1,0.9318181818181819,0.6494137553895242],[0.11,0.9318181818181819,0.6506092509847688],[0.12,0.9318181818181819,0],[0.13,0.9318181818181819,0.6279119657005136],[0.14,0.9318181818181819,0.6265802116306983],[0.15,0.9318181818181819,0.6250343861656606],[0.16,0.9318181818181819,0.6232146779239297],[0.17,0.9318181818181819,0.6210339599712583],[0.18,0.9318181818181819,0.6183554375023864],[0.19,0.9318181818181819,0.6146228651378509],[0.2,0.9318181818181819,0.6099620055272903],[0.21,0.9318181818181819,0.6032583404717993],[0.22,0.9318181818181819,0.5949476303931278],[0.23,0.9318181818181819,0.5836563519574157],[0.24,0.9318181818181819,0.5700409831728424],[0.25,0.9318181818181819,0],[0.26,0.9318181818181819,0.5601191934850479],[0.27,0.9318181818181819,0.5661984255029406],[0.28,0.9318181818181819,0.5710966312324102],[0.29,0.9318181818181819,0.573182887406414],[0.3,0.9318181818181819,0.5742986483054304],[0.31,0.9318181818181819,0.5730139247916899],[0.32,0.9318181818181819,0.5712553148630862],[0.33,0.9318181818181819,0.5683791944574506],[0.34,0.9318181818181819,0.5655229063912913],[0.35000000000000003,0.9318181818181819,0.5625618661541907],[0.36,0.9318181818181819,0.5590604037736298],[0.37,0.9318181818181819,0.5439846852817286],[0.38,0.9318181818181819,0.5399407789493094],[0.39,0.9318181818181819,0.5360146290665825],[0.4,0.9318181818181819,0.5323225420302966],[0.41000000000000003,0.9318181818181819,0],[0.42,0.9318181818181819,0],[0.43,0.9318181818181819,0],[0.44,0.9318181818181819,0.47967703001322115],[0.45,0.9318181818181819,0.47562207949231083],[0.46,0.9318181818181819,0.47182385662415693],[0.47000000000000003,0.9318181818181819,0.46902374790178547],[0.48,0.9318181818181819,0.43449563826712584],[0.49,0.9318181818181819,0.43190390265813283],[0.5,0.9318181818181819,0.4289763620254149],[0.51,0.9318181818181819,0.4255412928243161],[0.52,0.9318181818181819,0.42201388927344563],[0.53,0.9318181818181819,0.41805733163579495],[0.54,0.9318181818181819,0.4138695121048915],[0.55,0.9318181818181819,0.41622548565457246],[0.56,0.9318181818181819,0.41429562490238553],[0.5700000000000001,0.9318181818181819,0.4113497589436663],[0.58,0.9318181818181819,0.40805422151928206],[0.59,0.9318181818181819,0.404362016944086],[0.6,0.9318181818181819,0.4006443806532021],[0.61,0.9318181818181819,0.396642561008661],[0.62,0.9318181818181819,0.39247705514125386],[0.63,0.9318181818181819,0.3879876483099588],[0.64,0.9318181818181819,0.383160641983303],[0.65,0.9318181818181819,0.3780003509633411],[0.66,0.9318181818181819,0.372461747736126],[0.67,0.9318181818181819,0.36661712697512283],[0.68,0.9318181818181819,0.3604803745412956],[0.6900000000000001,0.9318181818181819,0.3540854450959048],[0.7000000000000001,0.9318181818181819,0.34755677509064625],[0.71,0.9318181818181819,0.34090245458653895],[0.72,0.9318181818181819,0.3342965565899486],[0.73,0.9318181818181819,0.3278458205276651],[0.74,0.9318181818181819,0.32161916119618034],[0.75,0.9318181818181819,0.3159285523764662],[0.76,0.9318181818181819,0.3107208125464742],[0.77,0.9318181818181819,0.30656584375705004],[0.78,0.9318181818181819,0.3034787428691046],[0.79,0.9318181818181819,0.2792033947215037],[0.8,0.9318181818181819,0.27204008619229214],[0.81,0.9318181818181819,0.2644344817438824],[0.8200000000000001,0.9318181818181819,0.256528163012489],[0.8300000000000001,0.9318181818181819,0.24846324110329526],[0.84,0.9318181818181819,0.24022137928552714],[0.85,0.9318181818181819,0.2318782452537957],[0.86,0.9318181818181819,0.22326596377070979],[0.87,0.9318181818181819,0.21447555558697412],[0.88,0.9318181818181819,0.20528944946672073],[0.89,0.9318181818181819,0.19566206993696159],[0.9,0.9318181818181819,0.1854659918095291],[0.91,0.9318181818181819,0.17436378523649845],[0.92,0.9318181818181819,0.16455579703912912],[0.93,0.9318181818181819,0.15514794293841655],[0.9400000000000001,0.9318181818181819,0.14498358767978398],[0.9500000000000001,0.9318181818181819,0.1344616739094467],[0.96,0.9318181818181819,0.12305676118389071],[0.97,0.9318181818181819,0.11387499436414422],[0.98,0.9318181818181819,0],[0.99,0.9318181818181819,0],[1,0.9318181818181819,0],[0,0.9393939393939394,0.6362386893328336],[0.01,0.9393939393939394,0.63631524292481],[0.02,0.9393939393939394,0.6364755865114698],[0.03,0.9393939393939394,0.6367371474996224],[0.04,0.9393939393939394,0.6371306232743223],[0.05,0.9393939393939394,0.6377124711836679],[0.06,0.9393939393939394,0.6385381681261806],[0.07,0.9393939393939394,0.6397077479309556],[0.08,0.9393939393939394,0.6412364679821653],[0.09,0.9393939393939394,0.6431288481219999],[0.1,0.9393939393939394,0.645024991042694],[0.11,0.9393939393939394,0.6466336845408368],[0.12,0.9393939393939394,0.6233954467137578],[0.13,0.9393939393939394,0.6252792937609296],[0.14,0.9393939393939394,0.6223278881131837],[0.15,0.9393939393939394,0.6202832171083019],[0.16,0.9393939393939394,0.6181996444033183],[0.17,0.9393939393939394,0.6157965714905628],[0.18,0.9393939393939394,0.612812690929199],[0.19,0.9393939393939394,0.6092062479050514],[0.2,0.9393939393939394,0.6042079567929082],[0.21,0.9393939393939394,0.5980734277482875],[0.22,0.9393939393939394,0.5895748660305571],[0.23,0.9393939393939394,0.5790312853874002],[0.24,0.9393939393939394,0.5653853367832122],[0.25,0.9393939393939394,0.6054885534193722],[0.26,0.9393939393939394,0.556214235690339],[0.27,0.9393939393939394,0.5620821818248514],[0.28,0.9393939393939394,0.5658223422403836],[0.29,0.9393939393939394,0.5685207697794639],[0.3,0.9393939393939394,0.5686086389593443],[0.31,0.9393939393939394,0.5679579757943927],[0.32,0.9393939393939394,0.565662950333619],[0.33,0.9393939393939394,0.5631207165789736],[0.34,0.9393939393939394,0.560139173646897],[0.35000000000000003,0.9393939393939394,0.5574069306803892],[0.36,0.9393939393939394,0.5552236849293657],[0.37,0.9393939393939394,0.5396850658575232],[0.38,0.9393939393939394,0.536273759453973],[0.39,0.9393939393939394,0.5326444325289642],[0.4,0.9393939393939394,0.5297315579332452],[0.41000000000000003,0.9393939393939394,0.4793021014026374],[0.42,0.9393939393939394,0.4743485888834962],[0.43,0.9393939393939394,0.46858323227039295],[0.44,0.9393939393939394,0.4776116772842343],[0.45,0.9393939393939394,0.47400368990954916],[0.46,0.9393939393939394,0.4706948089128072],[0.47000000000000003,0.9393939393939394,0.46848334017294835],[0.48,0.9393939393939394,0.434427827893049],[0.49,0.9393939393939394,0.4313052422996666],[0.5,0.9393939393939394,0.42756494317411464],[0.51,0.9393939393939394,0.4235907268133856],[0.52,0.9393939393939394,0.4190375958590522],[0.53,0.9393939393939394,0.41418517835625396],[0.54,0.9393939393939394,0.40858930843512675],[0.55,0.9393939393939394,0.4120871427734991],[0.56,0.9393939393939394,0.410757094570276],[0.5700000000000001,0.9393939393939394,0.4085779887157252],[0.58,0.9393939393939394,0.405744794619209],[0.59,0.9393939393939394,0.40262246548775055],[0.6,0.9393939393939394,0.39913949762215273],[0.61,0.9393939393939394,0.3954564368084249],[0.62,0.9393939393939394,0.39145561382393634],[0.63,0.9393939393939394,0.3871523274830893],[0.64,0.9393939393939394,0.38252372911644683],[0.65,0.9393939393939394,0.3775135219276105],[0.66,0.9393939393939394,0.37218944063722825],[0.67,0.9393939393939394,0.366511872815771],[0.68,0.9393939393939394,0.36054556606244537],[0.6900000000000001,0.9393939393939394,0.3543493687819787],[0.7000000000000001,0.9393939393939394,0.3479289473441763],[0.71,0.9393939393939394,0.3414432772122877],[0.72,0.9393939393939394,0.3349019854636861],[0.73,0.9393939393939394,0.3284537084542801],[0.74,0.9393939393939394,0.32222455791805293],[0.75,0.9393939393939394,0.3162536545278122],[0.76,0.9393939393939394,0.31091975150624956],[0.77,0.9393939393939394,0.30620960829410354],[0.78,0.9393939393939394,0.2946152226460901],[0.79,0.9393939393939394,0.2791936324602818],[0.8,0.9393939393939394,0.27219677593038505],[0.81,0.9393939393939394,0.2647032689444818],[0.8200000000000001,0.9393939393939394,0.25684135956136467],[0.8300000000000001,0.9393939393939394,0.2487303500182772],[0.84,0.9393939393939394,0.24044122902986348],[0.85,0.9393939393939394,0.23186730638455058],[0.86,0.9393939393939394,0.22307449215125966],[0.87,0.9393939393939394,0.21387855555600332],[0.88,0.9393939393939394,0.20422764854104608],[0.89,0.9393939393939394,0.19395857222329058],[0.9,0.9393939393939394,0.1833433800644869],[0.91,0.9393939393939394,0.1683440842961798],[0.92,0.9393939393939394,0.15965559498065884],[0.93,0.9393939393939394,0.15016290603592503],[0.9400000000000001,0.9393939393939394,0.1400680394356127],[0.9500000000000001,0.9393939393939394,0.12818650317047062],[0.96,0.9393939393939394,0.11456065926148049],[0.97,0.9393939393939394,0.13366844575736583],[0.98,0.9393939393939394,0.12459547027991345],[0.99,0.9393939393939394,0],[1,0.9393939393939394,0],[0,0.946969696969697,0.6316299277110149],[0.01,0.946969696969697,0.6317099923688765],[0.02,0.946969696969697,0.6318809434715527],[0.03,0.946969696969697,0.6321457859018269],[0.04,0.946969696969697,0.6325546805832925],[0.05,0.946969696969697,0.6331174605127334],[0.06,0.946969696969697,0.6339561547918537],[0.07,0.946969696969697,0.6350643281244164],[0.08,0.946969696969697,0.6366155196861805],[0.09,0.946969696969697,0.6384460311198352],[0.1,0.946969696969697,0.6404873785632139],[0.11,0.946969696969697,0.6422143573880592],[0.12,0.946969696969697,0],[0.13,0.946969696969697,0],[0.14,0.946969696969697,0.6165364587702156],[0.15,0.946969696969697,0.6149354293111826],[0.16,0.946969696969697,0.6126932337348617],[0.17,0.946969696969697,0.6100057263905969],[0.18,0.946969696969697,0.6069163519259289],[0.19,0.946969696969697,0.6030382576977533],[0.2,0.946969696969697,0.5984441527873569],[0.21,0.946969696969697,0.5922781587208548],[0.22,0.946969696969697,0.5848546396691696],[0.23,0.946969696969697,0.5750284303350186],[0.24,0.946969696969697,0.5630527257529928],[0.25,0.946969696969697,0],[0.26,0.946969696969697,0.5533310504308446],[0.27,0.946969696969697,0.5577712971324265],[0.28,0.946969696969697,0.56126731989115],[0.29,0.946969696969697,0.5625455660176759],[0.3,0.946969696969697,0.5629899095079092],[0.31,0.946969696969697,0.5615249920370975],[0.32,0.946969696969697,0.5596158603522806],[0.33,0.946969696969697,0.5568540417645251],[0.34,0.946969696969697,0.5540716716056109],[0.35000000000000003,0.946969696969697,0.5514567785113206],[0.36,0.946969696969697,0.5495225635487467],[0.37,0.946969696969697,0.53482655769598],[0.38,0.946969696969697,0.5320573106561095],[0.39,0.946969696969697,0.5292392587203292],[0.4,0.946969696969697,0.5268539069881963],[0.41000000000000003,0.946969696969697,0],[0.42,0.946969696969697,0],[0.43,0.946969696969697,0.4767787763902488],[0.44,0.946969696969697,0.47487836701085895],[0.45,0.946969696969697,0.47189401800740993],[0.46,0.946969696969697,0.4691855889150376],[0.47000000000000003,0.946969696969697,0.4673784759469914],[0.48,0.946969696969697,0.4340105109535165],[0.49,0.946969696969697,0.43028338292507085],[0.5,0.946969696969697,0.4262012705748817],[0.51,0.946969696969697,0.4215088381263555],[0.52,0.946969696969697,0.41656676623388733],[0.53,0.946969696969697,0.4108635474782076],[0.54,0.946969696969697,0.40437823730991046],[0.55,0.946969696969697,0.4090929448813305],[0.56,0.946969696969697,0.40809075424177294],[0.5700000000000001,0.946969696969697,0.4062596211941595],[0.58,0.946969696969697,0.4038671329857227],[0.59,0.946969696969697,0.40101205041444393],[0.6,0.946969696969697,0.39785658947455826],[0.61,0.946969696969697,0.39436909543408305],[0.62,0.946969696969697,0.3905871943459167],[0.63,0.946969696969697,0.3864850466209669],[0.64,0.946969696969697,0.38201402209890356],[0.65,0.946969696969697,0.37722297103166724],[0.66,0.946969696969697,0.3720427503415692],[0.67,0.946969696969697,0.3665558812410453],[0.68,0.946969696969697,0.3607586296455747],[0.6900000000000001,0.946969696969697,0.35468580420737156],[0.7000000000000001,0.946969696969697,0.3484470338523359],[0.71,0.946969696969697,0.3420232683906231],[0.72,0.946969696969697,0.3355833524859103],[0.73,0.946969696969697,0.3291412791967809],[0.74,0.946969696969697,0.3228048705059492],[0.75,0.946969696969697,0.31674356992874786],[0.76,0.946969696969697,0.31108006971305474],[0.77,0.946969696969697,0.3061577479323856],[0.78,0.946969696969697,0],[0.79,0.946969696969697,0.2792198565278934],[0.8,0.946969696969697,0.2723362460748159],[0.81,0.946969696969697,0.26489359669587054],[0.8200000000000001,0.946969696969697,0.2570410836942627],[0.8300000000000001,0.946969696969697,0.24890225634940982],[0.84,0.946969696969697,0.24047263105433106],[0.85,0.946969696969697,0.23178257707269215],[0.86,0.946969696969697,0.22269547576323995],[0.87,0.946969696969697,0.2132131236634526],[0.88,0.946969696969697,0.2030069513403304],[0.89,0.946969696969697,0.1915652698762816],[0.9,0.946969696969697,0.17813567732986582],[0.91,0.946969696969697,0.1614045957481371],[0.92,0.946969696969697,0.15439452831867795],[0.93,0.946969696969697,0.14556075744383268],[0.9400000000000001,0.946969696969697,0.1349450979879792],[0.9500000000000001,0.946969696969697,0.12295668012034638],[0.96,0.946969696969697,0.10869395757228492],[0.97,0.946969696969697,0],[0.98,0.946969696969697,0],[0.99,0.946969696969697,0],[1,0.946969696969697,0],[0,0.9545454545454546,0.6270954833269702],[0.01,0.9545454545454546,0.6271839512129908],[0.02,0.9545454545454546,0.6273571510526359],[0.03,0.9545454545454546,0.6276466283031896],[0.04,0.9545454545454546,0.6280428305841008],[0.05,0.9545454545454546,0.6286434767350798],[0.06,0.9545454545454546,0.6294243521719882],[0.07,0.9545454545454546,0.6305766260531798],[0.08,0.9545454545454546,0.6320071931654985],[0.09,0.9545454545454546,0.633891142892546],[0.1,0.9545454545454546,0.6357943158423498],[0.11,0.9545454545454546,0.6375213711942835],[0.12,0.9545454545454546,0.6162884969636863],[0.13,0.9545454545454546,0.6016786333058507],[0.14,0.9545454545454546,0.6113830378866142],[0.15,0.9545454545454546,0.6096281501383118],[0.16,0.9545454545454546,0.6071251513791118],[0.17,0.9545454545454546,0.6041631535630163],[0.18,0.9545454545454546,0.6007733590768194],[0.19,0.9545454545454546,0.5969994523228985],[0.2,0.9545454545454546,0.5923266749441529],[0.21,0.9545454545454546,0.5869418295205666],[0.22,0.9545454545454546,0.5800946754926822],[0.23,0.9545454545454546,0.5722752666104308],[0.24,0.9545454545454546,0.5631716469528881],[0.25,0.9545454545454546,0.5547779573864122],[0.26,0.9545454545454546,0.5517574276119908],[0.27,0.9545454545454546,0.5545293458663255],[0.28,0.9545454545454546,0.5561263319992422],[0.29,0.9545454545454546,0.5571222388389858],[0.3,0.9545454545454546,0.5563811537565905],[0.31,0.9545454545454546,0.5551270929780802],[0.32,0.9545454545454546,0.5527862169780031],[0.33,0.9545454545454546,0.5502369979112566],[0.34,0.9545454545454546,0.5474495688308423],[0.35000000000000003,0.9545454545454546,0.5448412966339575],[0.36,0.9545454545454546,0.5427506651575464],[0.37,0.9545454545454546,0.5298220214402978],[0.38,0.9545454545454546,0.5278485135848667],[0.39,0.9545454545454546,0.5256638388850305],[0.4,0.9545454545454546,0.5239980825906412],[0.41000000000000003,0.9545454545454546,0.47078791848734075],[0.42,0.9545454545454546,0.46904541281117185],[0.43,0.9545454545454546,0.47489623410070697],[0.44,0.9545454545454546,0.47242771941601325],[0.45,0.9545454545454546,0.46974847284486154],[0.46,0.9545454545454546,0.4672999327265337],[0.47000000000000003,0.9545454545454546,0.46595885289588507],[0.48,0.9545454545454546,0.43307481436668827],[0.49,0.9545454545454546,0.42916886024489087],[0.5,0.9545454545454546,0.4246212085336789],[0.51,0.9545454545454546,0.4198030322781302],[0.52,0.9545454545454546,0.4143903861647347],[0.53,0.9545454545454546,0.4085510798790882],[0.54,0.9545454545454546,0.4016912131520365],[0.55,0.9545454545454546,0.40713478395902625],[0.56,0.9545454545454546,0.4062371148494873],[0.5700000000000001,0.9545454545454546,0.4045757804058334],[0.58,0.9545454545454546,0.40235197215437457],[0.59,0.9545454545454546,0.3997193561142749],[0.6,0.9545454545454546,0.39674229684517215],[0.61,0.9545454545454546,0.39346487959732646],[0.62,0.9545454545454546,0.38988060126268487],[0.63,0.9545454545454546,0.3859494353873365],[0.64,0.9545454545454546,0.3816972099795463],[0.65,0.9545454545454546,0.3770440158975985],[0.66,0.9545454545454546,0.3720691156403869],[0.67,0.9545454545454546,0.36672200333639215],[0.68,0.9545454545454546,0.3610695569910072],[0.6900000000000001,0.9545454545454546,0.355160215983922],[0.7000000000000001,0.9545454545454546,0.3489928782882108],[0.71,0.9545454545454546,0.3427124138864492],[0.72,0.9545454545454546,0.33628790206508863],[0.73,0.9545454545454546,0.3298665315885209],[0.74,0.9545454545454546,0.3234758936267763],[0.75,0.9545454545454546,0.31723156606938346],[0.76,0.9545454545454546,0.3114167029686442],[0.77,0.9545454545454546,0.3062459737501616],[0.78,0.9545454545454546,0.2950543824033951],[0.79,0.9545454545454546,0.27918910195244784],[0.8,0.9545454545454546,0.2723909183793396],[0.81,0.9545454545454546,0.26499684774051924],[0.8200000000000001,0.9545454545454546,0.25712387989562197],[0.8300000000000001,0.9545454545454546,0.24891665306883978],[0.84,0.9545454545454546,0.24040435790631293],[0.85,0.9545454545454546,0.23151787054402354],[0.86,0.9545454545454546,0.22227574450679966],[0.87,0.9545454545454546,0.21249727951315803],[0.88,0.9545454545454546,0.20204766129668839],[0.89,0.9545454545454546,0.19041766167697535],[0.9,0.9545454545454546,0.17759509624896008],[0.91,0.9545454545454546,0.15869688869915938],[0.92,0.9545454545454546,0.15086872212286484],[0.93,0.9545454545454546,0.14130026707779098],[0.9400000000000001,0.9545454545454546,0.13062931944846967],[0.9500000000000001,0.9545454545454546,0.11805036354993725],[0.96,0.9545454545454546,0.10410118198614579],[0.97,0.9545454545454546,0.10062332424224704],[0.98,0.9545454545454546,0],[0.99,0.9545454545454546,0],[1,0.9545454545454546,0],[0,0.9621212121212122,0.622855434095437],[0.01,0.9621212121212122,0.6229473975207382],[0.02,0.9621212121212122,0.6231447987009495],[0.03,0.9621212121212122,0.6234345648811026],[0.04,0.9621212121212122,0.6238767714150251],[0.05,0.9621212121212122,0.6244440918277484],[0.06,0.9621212121212122,0.6252837762569339],[0.07,0.9621212121212122,0.6263304014208801],[0.08,0.9621212121212122,0.6278107027246873],[0.09,0.9621212121212122,0.6295025284955551],[0.1,0.9621212121212122,0.631432778399931],[0.11,0.9621212121212122,0.632785766725591],[0.12,0.9621212121212122,0.6326950916811985],[0.13,0.9621212121212122,0],[0.14,0.9621212121212122,0.6066844991945863],[0.15,0.9621212121212122,0.6046625499411411],[0.16,0.9621212121212122,0.6018310782383179],[0.17,0.9621212121212122,0.5985299814298153],[0.18,0.9621212121212122,0.59499045126509],[0.19,0.9621212121212122,0.5910296717713663],[0.2,0.9621212121212122,0.5867130208914169],[0.21,0.9621212121212122,0.5815459849158714],[0.22,0.9621212121212122,0.5758278799354126],[0.23,0.9621212121212122,0.5691306165928258],[0.24,0.9621212121212122,0.5621717560467953],[0.25,0.9621212121212122,0.555214777115727],[0.26,0.9621212121212122,0.5504975696842183],[0.27,0.9621212121212122,0.5511957964393688],[0.28,0.9621212121212122,0.5517405225214113],[0.29,0.9621212121212122,0.5511933526550015],[0.3,0.9621212121212122,0.5502711454924032],[0.31,0.9621212121212122,0.5483036484137105],[0.32,0.9621212121212122,0.5460990138809707],[0.33,0.9621212121212122,0.5434504147508934],[0.34,0.9621212121212122,0.5407168763346297],[0.35000000000000003,0.9621212121212122,0.5380656072035396],[0.36,0.9621212121212122,0.535594479555352],[0.37,0.9621212121212122,0.5248522820663156],[0.38,0.9621212121212122,0.5236800419017005],[0.39,0.9621212121212122,0.5223188220222701],[0.4,0.9621212121212122,0.5213517464624662],[0.41000000000000003,0.9621212121212122,0],[0.42,0.9621212121212122,0],[0.43,0.9621212121212122,0.47218831231857583],[0.44,0.9621212121212122,0.46991794266888665],[0.45,0.9621212121212122,0.4673191312532008],[0.46,0.9621212121212122,0.4654088360613984],[0.47000000000000003,0.9621212121212122,0.4642062192863609],[0.48,0.9621212121212122,0.4320451550467814],[0.49,0.9621212121212122,0.4278805404080832],[0.5,0.9621212121212122,0.42330409404278146],[0.51,0.9621212121212122,0.4182074509274618],[0.52,0.9621212121212122,0.4129287417983757],[0.53,0.9621212121212122,0.4070763427056412],[0.54,0.9621212121212122,0.40062207113375287],[0.55,0.9621212121212122,0.4062020341422644],[0.56,0.9621212121212122,0.40522308282963937],[0.5700000000000001,0.9621212121212122,0.40351527021945033],[0.58,0.9621212121212122,0.4012964965953806],[0.59,0.9621212121212122,0.39873233693803223],[0.6,0.9621212121212122,0.3958797713438377],[0.61,0.9621212121212122,0.3927606173958894],[0.62,0.9621212121212122,0.38933572768775426],[0.63,0.9621212121212122,0.38560835492740275],[0.64,0.9621212121212122,0.3814947109450657],[0.65,0.9621212121212122,0.3770500878279897],[0.66,0.9621212121212122,0.3721953416953336],[0.67,0.9621212121212122,0.3670121775447137],[0.68,0.9621212121212122,0.36149286367953926],[0.6900000000000001,0.9621212121212122,0.3556729841420553],[0.7000000000000001,0.9621212121212122,0.34964931097254304],[0.71,0.9621212121212122,0.34339409271941423],[0.72,0.9621212121212122,0.3370574674467945],[0.73,0.9621212121212122,0.3306116126838216],[0.74,0.9621212121212122,0.32416642043733834],[0.75,0.9621212121212122,0.31781298494746635],[0.76,0.9621212121212122,0.3117558138554029],[0.77,0.9621212121212122,0.30627008655791577],[0.78,0.9621212121212122,0],[0.79,0.9621212121212122,0.2791455211157806],[0.8,0.9621212121212122,0.2723890503746854],[0.81,0.9621212121212122,0.2649823305921137],[0.8200000000000001,0.9621212121212122,0.25709097689763677],[0.8300000000000001,0.9621212121212122,0.2488107436426125],[0.84,0.9621212121212122,0.24017443167361324],[0.85,0.9621212121212122,0.23116258892456729],[0.86,0.9621212121212122,0.22171403078759888],[0.87,0.9621212121212122,0.21185014121126677],[0.88,0.9621212121212122,0.2012847149015091],[0.89,0.9621212121212122,0.18958975192173946],[0.9,0.9621212121212122,0],[0.91,0.9621212121212122,0.15866409140211896],[0.92,0.9621212121212122,0.14825156181584742],[0.93,0.9621212121212122,0.13787631551056562],[0.9400000000000001,0.9621212121212122,0.1262734895386775],[0.9500000000000001,0.9621212121212122,0.11369986942160867],[0.96,0.9621212121212122,0.09991173871680564],[0.97,0.9621212121212122,0],[0.98,0.9621212121212122,0],[0.99,0.9621212121212122,0],[1,0.9621212121212122,0],[0,0.9696969696969697,0.6191209020752861],[0.01,0.9696969696969697,0.619228826304179],[0.02,0.9696969696969697,0.6194360360788707],[0.03,0.9696969696969697,0.619770641335943],[0.04,0.9696969696969697,0.6202085484600635],[0.05,0.9696969696969697,0.6208392794942013],[0.06,0.9696969696969697,0.6216178952582754],[0.07,0.9696969696969697,0.622723097471584],[0.08,0.9696969696969697,0.6240499192373081],[0.09,0.9696969696969697,0.6257908368130485],[0.1,0.9696969696969697,0.6275829693061711],[0.11,0.9696969696969697,0.6292735879550734],[0.12,0.9696969696969697,0.6302678615558538],[0.13,0.9696969696969697,0.6017216567630925],[0.14,0.9696969696969697,0.6026852278724036],[0.15,0.9696969696969697,0.6002442487081465],[0.16,0.9696969696969697,0.5970409714398754],[0.17,0.9696969696969697,0.593483741360816],[0.18,0.9696969696969697,0.5896733116514167],[0.19,0.9696969696969697,0.5857462620365869],[0.2,0.9696969696969697,0.5814138961421615],[0.21,0.9696969696969697,0.5767915123535583],[0.22,0.9696969696969697,0.5715444104726394],[0.23,0.9696969696969697,0.5660629857955414],[0.24,0.9696969696969697,0.5603957168092588],[0.25,0.9696969696969697,0.555599296140147],[0.26,0.9696969696969697,0.5492017866086666],[0.27,0.9696969696969697,0.548385873322611],[0.28,0.9696969696969697,0.5472306251641961],[0.29,0.9696969696969697,0.5460197074087884],[0.3,0.9696969696969697,0.5441109978725699],[0.31,0.9696969696969697,0.5420837717098632],[0.32,0.9696969696969697,0.5396181270836193],[0.33,0.9696969696969697,0.5370543982918274],[0.34,0.9696969696969697,0.5343734746044297],[0.35000000000000003,0.9696969696969697,0.5315755734681071],[0.36,0.9696969696969697,0.5287003437350608],[0.37,0.9696969696969697,0.5205783392624852],[0.38,0.9696969696969697,0.5199633721679389],[0.39,0.9696969696969697,0.5193004031385713],[0.4,0.9696969696969697,0.5194814926465179],[0.41000000000000003,0.9696969696969697,0.46294735248876406],[0.42,0.9696969696969697,0.45671392863512683],[0.43,0.9696969696969697,0.469176868604691],[0.44,0.9696969696969697,0.4671014303492279],[0.45,0.9696969696969697,0.4650834266194497],[0.46,0.9696969696969697,0.46327180952408653],[0.47000000000000003,0.9696969696969697,0.46245056013731256],[0.48,0.9696969696969697,0.43082204743373104],[0.49,0.9696969696969697,0.42673179895196245],[0.5,0.9696969696969697,0.4220405795508616],[0.51,0.9696969696969697,0.4171255547732018],[0.52,0.9696969696969697,0.41188355675354155],[0.53,0.9696969696969697,0.406533125501811],[0.54,0.9696969696969697,0.40071025563830376],[0.55,0.9696969696969697,0.40624865662749066],[0.56,0.9696969696969697,0.404996149964195],[0.5700000000000001,0.9696969696969697,0.4030420318615665],[0.58,0.9696969696969697,0.4006830770264062],[0.59,0.9696969696969697,0.3980734174579674],[0.6,0.9696969696969697,0.3952781829341131],[0.61,0.9696969696969697,0.3922581712744735],[0.62,0.9696969696969697,0.388993755426669],[0.63,0.9696969696969697,0.3853942474879752],[0.64,0.9696969696969697,0.3814743088754697],[0.65,0.9696969696969697,0.3771385556776275],[0.66,0.9696969696969697,0.37245612173638076],[0.67,0.9696969696969697,0.367377468322333],[0.68,0.9696969696969697,0.36196728253838784],[0.6900000000000001,0.9696969696969697,0.35626827481333345],[0.7000000000000001,0.9696969696969697,0.35028473629080314],[0.71,0.9696969696969697,0.3441390525013046],[0.72,0.9696969696969697,0.33779547935117116],[0.73,0.9696969696969697,0.3313774104820529],[0.74,0.9696969696969697,0.32488022774920955],[0.75,0.9696969696969697,0.31841786757373325],[0.76,0.9696969696969697,0.3122030715115273],[0.77,0.9696969696969697,0.30642999814987365],[0.78,0.9696969696969697,0.2913580777525434],[0.79,0.9696969696969697,0.278971926017492],[0.8,0.9696969696969697,0.27227247030725965],[0.81,0.9696969696969697,0.2648905143120506],[0.8200000000000001,0.9696969696969697,0.25693767518622757],[0.8300000000000001,0.9696969696969697,0.2485914456451578],[0.84,0.9696969696969697,0.23983410212411033],[0.85,0.9696969696969697,0.23066125559942519],[0.86,0.9696969696969697,0.2210750929600166],[0.87,0.9696969696969697,0.21112921274610685],[0.88,0.9696969696969697,0.20111845397690284],[0.89,0.9696969696969697,0.1914821138570973],[0.9,0.9696969696969697,0.166036154408761],[0.91,0.9696969696969697,0.15601329880027093],[0.92,0.9696969696969697,0.1455359550959398],[0.93,0.9696969696969697,0.13428665766155887],[0.9400000000000001,0.9696969696969697,0.122173878519901],[0.9500000000000001,0.9696969696969697,0.10852045523921039],[0.96,0.9696969696969697,0.0968143159192015],[0.97,0.9696969696969697,0],[0.98,0.9696969696969697,0],[0.99,0.9696969696969697,0],[1,0.9696969696969697,0],[0,0.9772727272727273,0.6160602112748066],[0.01,0.9772727272727273,0.6161773528795645],[0.02,0.9772727272727273,0.6164197811084202],[0.03,0.9772727272727273,0.6167691902754007],[0.04,0.9772727272727273,0.6172667164592235],[0.05,0.9772727272727273,0.6178807701425898],[0.06,0.9772727272727273,0.6187214271164794],[0.07,0.9772727272727273,0.619732767736227],[0.08,0.9772727272727273,0.6210892183819636],[0.09,0.9772727272727273,0.6226498892287277],[0.1,0.9772727272727273,0.6244796688602612],[0.11,0.9772727272727273,0.6261185192816556],[0.12,0.9772727272727273,0.6273332543065212],[0.13,0.9772727272727273,0],[0.14,0.9772727272727273,0.5999660298886015],[0.15,0.9772727272727273,0.5963826494007929],[0.16,0.9772727272727273,0.5929272139188992],[0.17,0.9772727272727273,0.589123310128389],[0.18,0.9772727272727273,0.5852104558997492],[0.19,0.9772727272727273,0.5811327457296195],[0.2,0.9772727272727273,0.5769796956567251],[0.21,0.9772727272727273,0.5724877229790674],[0.22,0.9772727272727273,0.5678070554732513],[0.23,0.9772727272727273,0.5628035954548914],[0.24,0.9772727272727273,0.5578518983164522],[0.25,0.9772727272727273,0.5530850448020721],[0.26,0.9772727272727273,0.5485455744894939],[0.27,0.9772727272727273,0.5456576019935566],[0.28,0.9772727272727273,0.5434248780510536],[0.29,0.9772727272727273,0.541086876452947],[0.3,0.9772727272727273,0.5388707692382037],[0.31,0.9772727272727273,0.5364001788225352],[0.32,0.9772727272727273,0.5339671053056588],[0.33,0.9772727272727273,0.5314391751968354],[0.34,0.9772727272727273,0.5287973116774025],[0.35000000000000003,0.9772727272727273,0.5259870689945714],[0.36,0.9772727272727273,0.522608130252853],[0.37,0.9772727272727273,0.5172036785725418],[0.38,0.9772727272727273,0.5168385215814952],[0.39,0.9772727272727273,0.516356327260108],[0.4,0.9772727272727273,0],[0.41000000000000003,0.9772727272727273,0],[0.42,0.9772727272727273,0],[0.43,0.9772727272727273,0.4660438771520497],[0.44,0.9772727272727273,0.464529107712519],[0.45,0.9772727272727273,0.4626614087889308],[0.46,0.9772727272727273,0.4614335455713814],[0.47000000000000003,0.9772727272727273,0.4606602618238645],[0.48,0.9772727272727273,0.4296318382844666],[0.49,0.9772727272727273,0.4256504224284092],[0.5,0.9772727272727273,0.42115498520267547],[0.51,0.9772727272727273,0.4162899281393976],[0.52,0.9772727272727273,0.4114680885793598],[0.53,0.9772727272727273,0.40659490331804204],[0.54,0.9772727272727273,0.4018981656229821],[0.55,0.9772727272727273,0.4070923747265826],[0.56,0.9772727272727273,0.405400748636078],[0.5700000000000001,0.9772727272727273,0.4030620001534516],[0.58,0.9772727272727273,0.4004374766952],[0.59,0.9772727272727273,0.3977171944756158],[0.6,0.9772727272727273,0.3949061486717078],[0.61,0.9772727272727273,0.3919654362646291],[0.62,0.9772727272727273,0.3887910201080459],[0.63,0.9772727272727273,0.38534626871522415],[0.64,0.9772727272727273,0.3815227601066922],[0.65,0.9772727272727273,0.377349271319831],[0.66,0.9772727272727273,0.37274992545193975],[0.67,0.9772727272727273,0.3677921995489185],[0.68,0.9772727272727273,0.36247279467482324],[0.6900000000000001,0.9772727272727273,0.35683127113946844],[0.7000000000000001,0.9772727272727273,0.35094801980681756],[0.71,0.9772727272727273,0.34480976240732686],[0.72,0.9772727272727273,0.3385329855487621],[0.73,0.9772727272727273,0.3320931235180869],[0.74,0.9772727272727273,0.3255775181288416],[0.75,0.9772727272727273,0.31905555025880894],[0.76,0.9772727272727273,0.31271885985406545],[0.77,0.9772727272727273,0.30678736465941714],[0.78,0.9772727272727273,0],[0.79,0.9772727272727273,0.27896304976688285],[0.8,0.9772727272727273,0.27215905144844443],[0.81,0.9772727272727273,0.26469413696213256],[0.8200000000000001,0.9772727272727273,0.2567273278696552],[0.8300000000000001,0.9772727272727273,0.24827944484646253],[0.84,0.9772727272727273,0.23940713407625946],[0.85,0.9772727272727273,0.2300426381475867],[0.86,0.9772727272727273,0.22021261542303183],[0.87,0.9772727272727273,0.21001168339641735],[0.88,0.9772727272727273,0.19995529117751132],[0.89,0.9772727272727273,0.19209014927280366],[0.9,0.9772727272727273,0.16452283651248473],[0.91,0.9772727272727273,0.15384359396282263],[0.92,0.9772727272727273,0.1429153144609403],[0.93,0.9772727272727273,0.13119126808281753],[0.9400000000000001,0.9772727272727273,0.11734648555506186],[0.9500000000000001,0.9772727272727273,0.10077680267511956],[0.96,0.9772727272727273,0],[0.97,0.9772727272727273,0],[0.98,0.9772727272727273,0],[0.99,0.9772727272727273,0],[1,0.9772727272727273,0],[0,0.9848484848484849,0.6137586300251887],[0.01,0.9848484848484849,0.6138937661395345],[0.02,0.9848484848484849,0.6141540418278366],[0.03,0.9848484848484849,0.6145506346257256],[0.04,0.9848484848484849,0.6150596389362553],[0.05,0.9848484848484849,0.6157306516031407],[0.06,0.9848484848484849,0.6165339091448238],[0.07,0.9848484848484849,0.6175810241957032],[0.08,0.9848484848484849,0.6188134581849112],[0.09,0.9848484848484849,0.6203483123768666],[0.1,0.9848484848484849,0.6219816392892594],[0.11,0.9848484848484849,0.6235733273848707],[0.12,0.9848484848484849,0.6246348427894152],[0.13,0.9848484848484849,0],[0.14,0.9848484848484849,0.578441636018262],[0.15,0.9848484848484849,0.5923215731589175],[0.16,0.9848484848484849,0.589367042545579],[0.17,0.9848484848484849,0.5856744800624432],[0.18,0.9848484848484849,0.5816299810609263],[0.19,0.9848484848484849,0.5775587448414352],[0.2,0.9848484848484849,0.5733684034228952],[0.21,0.9848484848484849,0.569108871419223],[0.22,0.9848484848484849,0.5646063353492223],[0.23,0.9848484848484849,0.5600136759532703],[0.24,0.9848484848484849,0.5553275124075265],[0.25,0.9848484848484849,0.550820162953674],[0.26,0.9848484848484849,0.5465610442465239],[0.27,0.9848484848484849,0.5430780849908288],[0.28,0.9848484848484849,0.539944811531331],[0.29,0.9848484848484849,0.5371762476510153],[0.3,0.9848484848484849,0.5344238744423775],[0.31,0.9848484848484849,0.5318831770726956],[0.32,0.9848484848484849,0.5293809240427241],[0.33,0.9848484848484849,0.5269462761359178],[0.34,0.9848484848484849,0.5244857788267402],[0.35000000000000003,0.9848484848484849,0.5217373267688319],[0.36,0.9848484848484849,0.5182409218413541],[0.37,0.9848484848484849,0.5150720238770174],[0.38,0.9848484848484849,0.5146088271191123],[0.39,0.9848484848484849,0.5141174520543679],[0.4,0.9848484848484849,0.47056699780090394],[0.41000000000000003,0.9848484848484849,0.46486151152517236],[0.42,0.9848484848484849,0.4601206931149571],[0.43,0.9848484848484849,0.46321300399864485],[0.44,0.9848484848484849,0.46197717439976305],[0.45,0.9848484848484849,0.46075368587732013],[0.46,0.9848484848484849,0.4596210013892894],[0.47000000000000003,0.9848484848484849,0.45915993501352353],[0.48,0.9848484848484849,0.42863127728484895],[0.49,0.9848484848484849,0.4248688199141326],[0.5,0.9848484848484849,0.42047043174277904],[0.51,0.9848484848484849,0.41590657948483756],[0.52,0.9848484848484849,0.4113408734901241],[0.53,0.9848484848484849,0.4071054289728113],[0.54,0.9848484848484849,0.40284730164692056],[0.55,0.9848484848484849,0.4087402293185155],[0.56,0.9848484848484849,0.40626648156050454],[0.5700000000000001,0.9848484848484849,0.4034088890241816],[0.58,0.9848484848484849,0.40046463085846373],[0.59,0.9848484848484849,0.39757667691136167],[0.6,0.9848484848484849,0.3947306386502401],[0.61,0.9848484848484849,0.39181182817590904],[0.62,0.9848484848484849,0.3887292170418815],[0.63,0.9848484848484849,0.38535675699789773],[0.64,0.9848484848484849,0.38166329290894185],[0.65,0.9848484848484849,0.3775558867601617],[0.66,0.9848484848484849,0.3730720735041755],[0.67,0.9848484848484849,0.36817776322206597],[0.68,0.9848484848484849,0.3629275340357775],[0.6900000000000001,0.9848484848484849,0.35736110550573824],[0.7000000000000001,0.9848484848484849,0.35149889096969805],[0.71,0.9848484848484849,0.34543170213416],[0.72,0.9848484848484849,0.3391487119756957],[0.73,0.9848484848484849,0.33273708397932583],[0.74,0.9848484848484849,0.3262049118313465],[0.75,0.9848484848484849,0.3196567843139793],[0.76,0.9848484848484849,0.31329129254782695],[0.77,0.9848484848484849,0.30728170518165543],[0.78,0.9848484848484849,0.28565051722866697],[0.79,0.9848484848484849,0.2788574268334528],[0.8,0.9848484848484849,0.2719221027853638],[0.81,0.9848484848484849,0.2644801627926164],[0.8200000000000001,0.9848484848484849,0.25644887954293905],[0.8300000000000001,0.9848484848484849,0.24796244973441944],[0.84,0.9848484848484849,0.23894458203418367],[0.85,0.9848484848484849,0.22938673911642335],[0.86,0.9848484848484849,0.21917553858621922],[0.87,0.9848484848484849,0.20822652424245475],[0.88,0.9848484848484849,0.19628299766496535],[0.89,0.9848484848484849,0.21710806073655475],[0.9,0.9848484848484849,0.16170566269747932],[0.91,0.9848484848484849,0.1516610632409648],[0.92,0.9848484848484849,0.1408525208458696],[0.93,0.9848484848484849,0.12868020125524504],[0.9400000000000001,0.9848484848484849,0.11449853499868945],[0.9500000000000001,0.9848484848484849,0.09736119684685572],[0.96,0.9848484848484849,0.1269341076815929],[0.97,0.9848484848484849,0.11785464293117945],[0.98,0.9848484848484849,0],[0.99,0.9848484848484849,0],[1,0.9848484848484849,0],[0,0.9924242424242424,0.612242011475668],[0.01,0.9924242424242424,0.612386311324282],[0.02,0.9924242424242424,0.6126739796975289],[0.03,0.9924242424242424,0.6130883599883381],[0.04,0.9924242424242424,0.6136399454592816],[0.05,0.9924242424242424,0.6143097296056874],[0.06,0.9924242424242424,0.6151481464798724],[0.07,0.9924242424242424,0.6161387297156713],[0.08,0.9924242424242424,0.6173652384530874],[0.09,0.9924242424242424,0.618759420294373],[0.1,0.9924242424242424,0.6203107228298492],[0.11,0.9924242424242424,0.6217086215415432],[0.12,0.9924242424242424,0.6226390489202004],[0.13,0.9924242424242424,0],[0.14,0.9924242424242424,0],[0.15,0.9924242424242424,0.5896066427283374],[0.16,0.9924242424242424,0.5869195446623637],[0.17,0.9924242424242424,0.5832332282553825],[0.18,0.9924242424242424,0.5791893580283031],[0.19,0.9924242424242424,0.5750388594954934],[0.2,0.9924242424242424,0.5709053403649054],[0.21,0.9924242424242424,0.566673779818699],[0.22,0.9924242424242424,0.5623609729558313],[0.23,0.9924242424242424,0.5578940302652313],[0.24,0.9924242424242424,0.5534092198282834],[0.25,0.9924242424242424,0.5489610731390567],[0.26,0.9924242424242424,0.5447649451518581],[0.27,0.9924242424242424,0.5409006911453328],[0.28,0.9924242424242424,0.5374571664188376],[0.29,0.9924242424242424,0.5342380880824015],[0.3,0.9924242424242424,0.5313498897890441],[0.31,0.9924242424242424,0.52864824897047],[0.32,0.9924242424242424,0.5261866903080961],[0.33,0.9924242424242424,0.523874186049136],[0.34,0.9924242424242424,0.5215983625888452],[0.35000000000000003,0.9924242424242424,0.5192764611998919],[0.36,0.9924242424242424,0.5167939810428281],[0.37,0.9924242424242424,0.5146060459975512],[0.38,0.9924242424242424,0.513377847629654],[0.39,0.9924242424242424,0.5126270666361886],[0.4,0.9924242424242424,0],[0.41000000000000003,0.9924242424242424,0],[0.42,0.9924242424242424,0.46051030964079465],[0.43,0.9924242424242424,0.46082774085510736],[0.44,0.9924242424242424,0.46017237270395933],[0.45,0.9924242424242424,0.45909721934816183],[0.46,0.9924242424242424,0.45840539163329497],[0.47000000000000003,0.9924242424242424,0.4579823807327371],[0.48,0.9924242424242424,0.427940138274719],[0.49,0.9924242424242424,0.4243218540508038],[0.5,0.9924242424242424,0.42012419595408634],[0.51,0.9924242424242424,0.4157181091297852],[0.52,0.9924242424242424,0.4116404482961441],[0.53,0.9924242424242424,0.40812611761895834],[0.54,0.9924242424242424,0],[0.55,0.9924242424242424,0.4105362285273135],[0.56,0.9924242424242424,0.40724959175342385],[0.5700000000000001,0.9924242424242424,0.4038660656539763],[0.58,0.9924242424242424,0.40061038720170256],[0.59,0.9924242424242424,0.39757022581905965],[0.6,0.9924242424242424,0.39466583303056163],[0.61,0.9924242424242424,0.3917649366782867],[0.62,0.9924242424242424,0.3887164777380332],[0.63,0.9924242424242424,0.38542395911674854],[0.64,0.9924242424242424,0.3817773067466792],[0.65,0.9924242424242424,0.3777586164818481],[0.66,0.9924242424242424,0.3733162304225901],[0.67,0.9924242424242424,0.36848733034063363],[0.68,0.9924242424242424,0.36328352011552534],[0.6900000000000001,0.9924242424242424,0.3577465255343045],[0.7000000000000001,0.9924242424242424,0.3519373259775783],[0.71,0.9924242424242424,0.34587333174139023],[0.72,0.9924242424242424,0.339629433288964],[0.73,0.9924242424242424,0.3332141052869758],[0.74,0.9924242424242424,0.32669441676733474],[0.75,0.9924242424242424,0.3201662709322567],[0.76,0.9924242424242424,0.31385942428761093],[0.77,0.9924242424242424,0.3080589827925895],[0.78,0.9924242424242424,0.2840401330379836],[0.79,0.9924242424242424,0.2783284044927325],[0.8,0.9924242424242424,0.2716569449166145],[0.81,0.9924242424242424,0.26421520749125343],[0.8200000000000001,0.9924242424242424,0.25622533109985696],[0.8300000000000001,0.9924242424242424,0.24767183658781916],[0.84,0.9924242424242424,0.23857933756415808],[0.85,0.9924242424242424,0.2288417996101445],[0.86,0.9924242424242424,0.21836851806948707],[0.87,0.9924242424242424,0.20693368659871642],[0.88,0.9924242424242424,0.19431222094096456],[0.89,0.9924242424242424,0],[0.9,0.9924242424242424,0.15920161199443647],[0.91,0.9924242424242424,0.1499561005569928],[0.92,0.9924242424242424,0.1393536176716083],[0.93,0.9924242424242424,0.127182153271984],[0.9400000000000001,0.9924242424242424,0.11277765767212958],[0.9500000000000001,0.9924242424242424,0.09596643334839722],[0.96,0.9924242424242424,0],[0.97,0.9924242424242424,0],[0.98,0.9924242424242424,0],[0.99,0.9924242424242424,0],[1,0.9924242424242424,0],[0,1,0.6114924556043873],[0.01,1,0.6116448547439792],[0.02,1,0.611941885437027],[0.03,1,0.6123768071230312],[0.04,1,0.612936493341738],[0.05,1,0.6136287360378831],[0.06,1,0.614455049931416],[0.07,1,0.6154534213949522],[0.08,1,0.6166262792475874],[0.09,1,0.6179887417747693],[0.1,1,0.6194301149943588],[0.11,1,0.6207460816971648],[0.12,1,0.6215370368428372],[0.13,1,0.6214320569107816],[0.14,1,0],[0.15,1,0.5882275154204664],[0.16,1,0.5856403921993534],[0.17,1,0.5820014256037731],[0.18,1,0.5779184626681287],[0.19,1,0.5737690448837064],[0.2,1,0.5696162456096945],[0.21,1,0.5654390447864461],[0.22,1,0.5611608658788206],[0.23,1,0.5567885232319187],[0.24,1,0.5523437810301686],[0.25,1,0.5479473038658277],[0.26,1,0.5436960297106366],[0.27,1,0.5397368388063823],[0.28,1,0.5360701475678709],[0.29,1,0.5327460170939291],[0.3,1,0.5297123063652666],[0.31,1,0.5269964331478874],[0.32,1,0.5245443019677829],[0.33,1,0.5223017131674361],[0.34,1,0.5201797251235848],[0.35000000000000003,1,0.5180749534492719],[0.36,1,0.5159928103799786],[0.37,1,0.5141131996740553],[0.38,1,0.5127441705495097],[0.39,1,0.5118239589231621],[0.4,1,0.45111194442034824],[0.41000000000000003,1,0.4510996942958402],[0.42,1,0.4600451427830693],[0.43,1,0.4598651682483418],[0.44,1,0.4591320402833628],[0.45,1,0.45832009855379063],[0.46,1,0.4576683565203293],[0.47000000000000003,1,0.4573827893689574],[0.48,1,0.4275971434630864],[0.49,1,0.4240755577519826],[0.5,1,0.41995028892455866],[0.51,1,0.4157287612076309],[0.52,1,0.41190888778878587],[0.53,1,0.40911753318560207],[0.54,1,0.40496721550128467],[0.55,1,0.4122436040949947],[0.56,1,0.4080074410289386],[0.5700000000000001,1,0.40420299672905924],[0.58,1,0.4007377381407768],[0.59,1,0.39759532665769715],[0.6,1,0.3946569541139207],[0.61,1,0.391753011673141],[0.62,1,0.38873194984235393],[0.63,1,0.38546153418509455],[0.64,1,0.38186029668589205],[0.65,1,0.3778632565506288],[0.66,1,0.37346189816613845],[0.67,1,0.36865428418095403],[0.68,1,0.36347475601095497],[0.6900000000000001,1,0.35796368592132344],[0.7000000000000001,1,0.35216167910323426],[0.71,1,0.34612314565968083],[0.72,1,0.3398787176257356],[0.73,1,0.33347822862356447],[0.74,1,0.32696598876913474],[0.75,1,0.3204633698469921],[0.76,1,0.31424152348768947],[0.77,1,0.30868503441287465],[0.78,1,0.28459957372320815],[0.79,1,0.27831256910565694],[0.8,1,0.27150671482760336],[0.81,1,0.26408899623856075],[0.8200000000000001,1,0.25607528256981815],[0.8300000000000001,1,0.24751818472152523],[0.84,1,0.23836495719096545],[0.85,1,0.22855423070458675],[0.86,1,0.21794149427195206],[0.87,1,0.20633553527228504],[0.88,1,0.193583705839692],[0.89,1,0.151403532576192],[0.9,1,0.15782943941474162],[0.91,1,0.1490255193327505],[0.92,1,0.13859533915357994],[0.93,1,0.12644605119669078],[0.9400000000000001,1,0.11205743525633358],[0.9500000000000001,1,0.095406153732949],[0.96,1,0],[0.97,1,0],[0.98,1,0],[0.99,1,0],[1,1,0]],\"branch\":[[101,-1,-1,1],[102,-1,0,2],[103,-1,1,3],[104,-1,2,4],[105,-1,3,5],[106,-1,4,6],[107,-1,5,7],[108,-1,6,8],[109,-1,7,9],[110,-1,8,10],[111,-1,9,11],[112,-1,10,12],[113,-1,11,101810],[114,-1,12,14],[115,-1,101839,15],[116,-1,14,16],[117,-1,15,17],[118,-1,16,18],[119,-1,17,19],[120,-1,18,20],[121,-1,19,21],[122,-1,20,22],[123,-1,21,23],[124,-1,22,24],[125,-1,23,25],[126,-1,24,26],[127,-1,25,27],[128,-1,26,28],[129,-1,27,29],[130,-1,28,30],[131,-1,29,31],[132,-1,30,32],[133,-1,31,33],[134,-1,32,34],[135,-1,33,35],[136,-1,34,36],[137,-1,35,37],[138,-1,36,38],[139,-1,37,39],[140,-1,38,40],[141,-1,39,41],[142,-1,40,42],[143,-1,41,43],[144,-1,42,44],[145,-1,43,100336],[146,-1,44,46],[147,-1,45,47],[148,-1,46,48],[149,-1,47,49],[150,-1,48,50],[151,-1,49,51],[152,-1,50,52],[153,-1,51,53],[154,-1,52,54],[155,-1,53,55],[156,-1,54,56],[157,-1,55,57],[158,-1,100371,58],[159,-1,57,59],[160,-1,58,60],[161,-1,59,61],[162,-1,60,62],[163,-1,61,63],[164,-1,62,64],[165,-1,63,65],[166,-1,64,66],[167,-1,65,67],[168,-1,66,68],[169,-1,67,69],[170,-1,68,70],[171,-1,69,71],[172,-1,70,72],[173,-1,71,73],[174,-1,72,74],[175,-1,73,75],[176,-1,74,76],[177,-1,75,77],[178,-1,76,78],[179,-1,77,79],[180,-1,78,80],[181,-1,79,81],[182,-1,80,101150],[183,-1,81,83],[184,-1,101225,84],[185,-1,83,85],[186,-1,84,86],[187,-1,85,87],[188,-1,86,102054],[189,-1,87,89],[190,-1,88,90],[191,-1,89,91],[192,-1,90,92],[193,-1,91,93],[194,-1,92,94],[195,-1,93,95],[196,-1,94,96],[197,-1,95,97],[198,-1,96,98],[199,-1,97,99],[200,-1,98,100],[201,-1,99,-1],[202,0,-1,102],[203,1,101,103],[204,2,102,104],[205,3,103,105],[206,4,104,106],[207,5,105,107],[208,6,106,108],[209,7,107,109],[210,8,108,110],[211,9,109,111],[212,10,110,112],[213,11,111,113],[214,12,112,101811],[215,13,113,115],[216,14,101840,116],[217,15,115,117],[218,16,116,118],[219,17,117,119],[220,18,118,120],[221,19,119,121],[222,20,120,122],[223,21,121,123],[224,22,122,124],[225,23,123,125],[226,24,124,126],[227,25,125,127],[228,26,126,128],[229,27,127,129],[230,28,128,130],[231,29,129,131],[232,30,130,132],[233,31,131,133],[234,32,132,134],[235,33,133,135],[236,34,134,136],[237,35,135,137],[238,36,136,138],[239,37,137,139],[240,38,138,140],[241,39,139,141],[242,40,140,142],[243,41,141,143],[244,42,142,144],[245,43,143,145],[246,44,144,100337],[247,45,145,147],[248,46,146,148],[249,47,147,149],[250,48,148,150],[251,49,149,151],[252,50,150,152],[253,51,151,153],[254,52,152,154],[255,53,153,155],[256,54,154,156],[257,55,155,157],[258,-1,100372,158],[259,57,157,159],[260,58,158,160],[261,59,159,161],[262,60,160,162],[263,61,161,163],[264,62,162,164],[265,63,163,165],[266,64,164,166],[267,65,165,167],[268,66,166,168],[269,67,167,169],[270,68,168,170],[271,69,169,171],[272,70,170,172],[273,71,171,173],[274,72,172,174],[275,73,173,175],[276,74,174,176],[277,75,175,177],[278,76,176,178],[279,77,177,179],[280,78,178,180],[281,79,179,181],[282,80,180,182],[283,81,181,101151],[284,82,182,184],[285,83,101226,185],[286,84,184,186],[287,85,185,187],[288,86,186,188],[289,87,187,189],[290,-1,188,102055],[291,89,189,191],[292,90,190,192],[293,91,191,193],[294,92,192,194],[295,93,193,195],[296,94,194,196],[297,95,195,197],[298,96,196,198],[299,97,197,199],[300,98,198,200],[301,99,199,201],[302,100,200,-1],[303,101,-1,203],[304,102,202,204],[305,103,203,205],[306,104,204,206],[307,105,205,207],[308,106,206,208],[309,107,207,209],[310,108,208,210],[311,109,209,211],[312,110,210,212],[313,111,211,213],[314,112,212,214],[315,113,213,101812],[316,114,214,216],[317,115,101841,217],[318,116,216,218],[319,117,217,219],[320,118,218,220],[321,119,219,221],[322,120,220,222],[323,121,221,223],[324,122,222,224],[325,123,223,225],[326,124,224,226],[327,125,225,227],[328,126,226,228],[329,127,227,229],[330,128,228,230],[331,129,229,231],[332,130,230,232],[333,131,231,233],[334,132,232,234],[335,133,233,235],[336,134,234,236],[337,135,235,237],[338,136,236,238],[339,137,237,239],[340,138,238,240],[341,139,239,241],[342,140,240,242],[343,141,241,243],[344,142,242,244],[345,143,243,245],[346,144,244,246],[347,145,245,100338],[348,146,246,248],[349,147,247,249],[350,148,248,250],[351,149,249,251],[352,150,250,252],[353,151,251,253],[354,152,252,254],[355,153,253,255],[356,154,254,256],[357,155,255,257],[358,-1,100373,258],[359,157,257,259],[360,158,258,260],[361,159,259,261],[362,160,260,262],[363,161,261,263],[364,162,262,264],[365,163,263,265],[366,164,264,266],[367,165,265,267],[368,166,266,268],[369,167,267,269],[370,168,268,270],[371,169,269,271],[372,170,270,272],[373,171,271,273],[374,172,272,274],[375,173,273,275],[376,174,274,276],[377,175,275,277],[378,176,276,278],[379,177,277,279],[380,178,278,280],[381,179,279,281],[382,180,280,282],[383,181,281,283],[384,182,282,101152],[385,183,283,285],[-1,184,101227,286],[387,185,285,287],[388,186,286,288],[389,187,287,289],[390,188,288,290],[391,189,289,102056],[392,190,290,292],[393,191,291,293],[394,192,292,294],[395,193,293,295],[396,194,294,296],[397,195,295,297],[398,196,296,298],[399,197,297,299],[400,198,298,300],[401,199,299,301],[402,200,300,302],[403,201,301,-1],[404,202,-1,304],[405,203,303,305],[406,204,304,306],[407,205,305,307],[408,206,306,308],[409,207,307,309],[410,208,308,310],[411,209,309,311],[412,210,310,312],[413,211,311,313],[414,212,312,314],[415,213,313,315],[416,214,314,101813],[417,215,315,317],[418,216,101842,318],[419,217,317,319],[420,218,318,320],[421,219,319,321],[422,220,320,322],[423,221,321,323],[424,222,322,324],[425,223,323,325],[426,224,324,326],[427,225,325,327],[428,226,326,328],[429,227,327,329],[430,228,328,330],[431,229,329,331],[432,230,330,332],[433,231,331,333],[434,232,332,334],[435,233,333,335],[436,234,334,336],[437,235,335,337],[438,236,336,338],[439,237,337,339],[440,238,338,340],[441,239,339,341],[442,240,340,342],[443,241,341,343],[444,242,342,344],[445,243,343,345],[446,244,344,346],[447,245,345,347],[448,246,346,100339],[449,247,347,349],[450,248,348,350],[451,249,349,351],[452,250,350,352],[453,251,351,353],[454,252,352,354],[455,253,353,355],[456,254,354,356],[457,255,355,357],[458,256,356,358],[459,257,100374,359],[460,258,358,360],[461,259,359,361],[462,260,360,362],[463,261,361,363],[464,262,362,364],[465,263,363,365],[466,264,364,366],[467,265,365,367],[468,266,366,368],[469,267,367,369],[470,268,368,370],[471,269,369,371],[472,270,370,372],[473,271,371,373],[474,272,372,374],[475,273,373,375],[476,274,374,376],[477,275,375,377],[478,276,376,378],[479,277,377,379],[480,278,378,380],[481,279,379,381],[482,280,380,382],[483,281,381,383],[484,282,382,384],[485,283,383,101153],[486,284,384,386],[487,285,385,387],[488,286,101228,388],[489,287,387,389],[490,288,388,390],[491,289,389,391],[492,290,390,102057],[493,291,391,393],[494,292,392,394],[495,293,393,395],[496,294,394,396],[497,295,395,397],[498,296,396,398],[499,297,397,399],[500,298,398,400],[501,299,399,401],[502,300,400,402],[503,301,401,403],[504,302,402,-1],[505,303,-1,405],[506,304,404,406],[507,305,405,407],[508,306,406,408],[509,307,407,409],[510,308,408,410],[511,309,409,411],[512,310,410,412],[513,311,411,413],[514,312,412,414],[515,313,413,415],[516,314,414,416],[-1,315,415,101814],[518,316,416,418],[519,317,101843,419],[520,318,418,420],[521,319,419,421],[522,320,420,422],[523,321,421,423],[524,322,422,424],[525,323,423,425],[526,324,424,426],[527,325,425,427],[528,326,426,428],[529,327,427,429],[530,328,428,430],[531,329,429,431],[532,330,430,432],[533,331,431,433],[534,332,432,434],[535,333,433,435],[536,334,434,436],[537,335,435,437],[538,336,436,438],[539,337,437,439],[540,338,438,440],[541,339,439,441],[542,340,440,442],[543,341,441,443],[544,342,442,444],[545,343,443,445],[546,344,444,446],[547,345,445,447],[548,346,446,448],[549,347,447,100340],[550,348,448,450],[551,349,449,451],[552,350,450,452],[553,351,451,453],[554,352,452,454],[555,353,453,455],[556,354,454,456],[557,355,455,457],[558,356,456,458],[559,-1,100375,459],[560,358,458,460],[561,359,459,461],[562,360,460,462],[563,361,461,463],[564,362,462,464],[565,363,463,465],[566,364,464,466],[567,365,465,467],[568,366,466,468],[569,367,467,469],[570,368,468,470],[571,369,469,471],[572,370,470,472],[573,371,471,473],[574,372,472,474],[575,373,473,475],[576,374,474,476],[577,375,475,477],[578,376,476,478],[579,377,477,479],[580,378,478,480],[581,379,479,481],[582,380,480,482],[583,381,481,483],[584,382,482,484],[585,383,483,485],[586,384,484,101154],[587,385,485,487],[588,386,486,488],[589,387,101229,489],[590,388,488,490],[591,389,489,491],[592,390,490,492],[593,391,491,493],[594,-1,492,102058],[595,393,493,495],[596,394,494,496],[597,395,495,497],[598,396,496,498],[599,397,497,499],[600,398,498,500],[601,399,499,501],[602,400,500,502],[603,401,501,503],[604,402,502,504],[605,403,503,-1],[606,404,-1,506],[607,405,505,507],[608,406,506,508],[609,407,507,509],[610,408,508,510],[611,409,509,511],[612,410,510,512],[613,411,511,513],[614,412,512,514],[615,413,513,515],[616,414,514,516],[617,415,515,101815],[618,416,516,518],[619,-1,101844,519],[620,418,518,520],[621,419,519,521],[622,420,520,522],[623,421,521,523],[624,422,522,524],[625,423,523,525],[626,424,524,526],[627,425,525,527],[628,426,526,528],[629,427,527,529],[630,428,528,530],[631,429,529,531],[632,430,530,532],[633,431,531,533],[634,432,532,534],[635,433,533,535],[636,434,534,536],[637,435,535,537],[638,436,536,538],[639,437,537,539],[640,438,538,540],[641,439,539,541],[642,440,540,542],[643,441,541,543],[644,442,542,544],[645,443,543,545],[646,444,544,546],[647,445,545,547],[648,446,546,548],[649,447,547,549],[650,448,548,100341],[651,449,549,551],[652,450,550,552],[653,451,551,553],[654,452,552,554],[655,453,553,555],[656,454,554,556],[657,455,555,557],[658,456,556,558],[659,457,557,559],[660,458,100376,560],[661,459,559,561],[662,460,560,562],[663,461,561,563],[664,462,562,564],[665,463,563,565],[666,464,564,566],[667,465,565,567],[668,466,566,568],[669,467,567,569],[670,468,568,570],[671,469,569,571],[672,470,570,572],[673,471,571,573],[674,472,572,574],[675,473,573,575],[676,474,574,576],[677,475,575,577],[678,476,576,578],[679,477,577,579],[680,478,578,580],[681,479,579,581],[682,480,580,582],[683,481,581,583],[684,482,582,584],[685,483,583,585],[686,484,584,586],[687,485,585,587],[688,-1,586,101155],[689,487,587,589],[690,488,101230,590],[691,489,589,591],[692,490,590,592],[693,491,591,593],[694,492,592,594],[695,493,593,102059],[696,494,594,596],[697,495,595,597],[698,496,596,598],[699,497,597,599],[700,498,598,600],[701,499,599,601],[702,500,600,602],[703,501,601,603],[704,502,602,604],[705,503,603,605],[706,504,604,-1],[707,505,-1,607],[708,506,606,608],[709,507,607,609],[710,508,608,610],[711,509,609,611],[712,510,610,612],[713,511,611,613],[714,512,612,614],[715,513,613,615],[716,514,614,616],[717,515,615,617],[718,516,616,101816],[719,517,617,619],[720,518,101845,620],[721,519,619,621],[722,520,620,622],[723,521,621,623],[724,522,622,624],[725,523,623,625],[726,524,624,626],[727,525,625,627],[728,526,626,628],[729,527,627,629],[730,528,628,630],[731,529,629,631],[732,530,630,632],[733,531,631,633],[734,532,632,634],[735,533,633,635],[736,534,634,636],[737,535,635,637],[738,536,636,638],[739,537,637,639],[740,538,638,640],[741,539,639,641],[742,540,640,642],[743,541,641,643],[744,542,642,644],[745,543,643,645],[746,544,644,646],[747,545,645,647],[748,546,646,648],[749,547,647,649],[750,548,648,650],[751,549,649,100342],[752,550,650,652],[753,551,651,653],[754,552,652,654],[755,553,653,655],[756,554,654,656],[757,555,655,657],[758,556,656,658],[759,557,657,659],[760,-1,100377,660],[761,559,659,661],[762,560,660,662],[763,561,661,663],[764,562,662,664],[765,563,663,665],[766,564,664,666],[767,565,665,667],[768,566,666,668],[769,567,667,669],[770,568,668,670],[771,569,669,671],[772,570,670,672],[773,571,671,673],[774,572,672,674],[775,573,673,675],[776,574,674,676],[777,575,675,677],[778,576,676,678],[779,577,677,679],[780,578,678,680],[781,579,679,681],[782,580,680,682],[783,581,681,683],[784,582,682,684],[785,583,683,685],[786,584,684,686],[787,585,685,687],[788,586,686,688],[789,587,687,101156],[790,588,688,690],[791,589,101231,691],[792,590,690,692],[793,591,691,693],[794,592,692,694],[795,593,693,695],[796,594,694,102060],[797,595,695,697],[798,596,696,698],[799,597,697,699],[800,598,698,700],[801,599,699,701],[802,600,700,702],[803,601,701,703],[804,602,702,704],[805,603,703,705],[806,604,704,706],[807,605,705,-1],[808,606,-1,708],[809,607,707,709],[810,608,708,710],[811,609,709,711],[812,610,710,712],[813,611,711,713],[814,612,712,714],[815,613,713,715],[816,614,714,716],[817,615,715,717],[818,616,716,718],[819,617,717,101817],[820,618,718,720],[821,619,101846,721],[822,620,720,722],[823,621,721,723],[824,622,722,724],[825,623,723,725],[826,624,724,726],[827,625,725,727],[828,626,726,728],[829,627,727,729],[830,628,728,730],[831,629,729,731],[832,630,730,732],[833,631,731,733],[834,632,732,734],[835,633,733,735],[836,634,734,736],[837,635,735,737],[838,636,736,738],[839,637,737,739],[840,638,738,740],[841,639,739,741],[842,640,740,742],[843,641,741,743],[844,642,742,744],[845,643,743,745],[846,644,744,746],[847,645,745,747],[848,646,746,748],[849,647,747,749],[850,648,748,750],[851,649,749,751],[852,650,750,100343],[853,651,751,753],[854,652,752,754],[855,653,753,755],[856,654,754,756],[857,655,755,757],[858,656,756,758],[859,657,757,759],[860,658,758,760],[861,659,100378,761],[862,660,760,762],[863,661,761,763],[864,662,762,764],[865,663,763,765],[866,664,764,766],[867,665,765,767],[868,666,766,768],[869,667,767,769],[870,668,768,770],[871,669,769,771],[872,670,770,772],[873,671,771,773],[874,672,772,774],[875,673,773,775],[876,674,774,776],[877,675,775,777],[878,676,776,778],[879,677,777,779],[880,678,778,780],[881,679,779,781],[882,680,780,782],[883,681,781,783],[884,682,782,784],[885,683,783,785],[886,684,784,786],[887,685,785,787],[888,686,786,788],[889,687,787,789],[890,688,788,101157],[891,689,789,791],[892,690,101232,792],[893,691,791,793],[894,692,792,794],[895,693,793,795],[896,694,794,796],[897,695,795,797],[898,-1,796,102061],[899,697,797,799],[900,698,798,800],[901,699,799,801],[902,700,800,802],[903,701,801,803],[904,702,802,804],[905,703,803,805],[906,704,804,806],[907,705,805,807],[908,706,806,-1],[909,707,-1,809],[910,708,808,810],[911,709,809,811],[912,710,810,812],[913,711,811,813],[914,712,812,814],[915,713,813,815],[916,714,814,816],[917,715,815,817],[918,716,816,818],[919,717,817,819],[920,718,818,101818],[921,719,819,821],[922,720,101847,822],[923,721,821,823],[924,722,822,824],[925,723,823,825],[926,724,824,826],[927,725,825,827],[928,726,826,828],[929,727,827,829],[930,728,828,830],[931,729,829,831],[932,730,830,832],[933,731,831,833],[934,732,832,834],[935,733,833,835],[936,734,834,836],[937,735,835,837],[938,736,836,838],[939,737,837,839],[940,738,838,840],[941,739,839,841],[942,740,840,842],[943,741,841,843],[944,742,842,844],[945,743,843,845],[946,744,844,846],[947,745,845,847],[948,746,846,848],[949,747,847,849],[950,748,848,850],[951,749,849,851],[952,750,850,852],[953,751,851,100344],[954,752,852,854],[955,753,853,855],[956,754,854,856],[957,755,855,857],[958,756,856,858],[959,757,857,859],[960,758,858,860],[961,-1,100379,861],[962,760,860,862],[963,761,861,863],[964,762,862,864],[965,763,863,865],[966,764,864,866],[967,765,865,867],[968,766,866,868],[969,767,867,869],[970,768,868,870],[971,769,869,871],[972,770,870,872],[973,771,871,873],[974,772,872,874],[975,773,873,875],[976,774,874,876],[977,775,875,877],[978,776,876,878],[979,777,877,879],[980,778,878,880],[981,779,879,881],[982,780,880,882],[983,781,881,883],[984,782,882,884],[985,783,883,885],[986,784,884,886],[987,785,885,887],[988,786,886,888],[989,787,887,889],[990,788,888,890],[991,789,889,101158],[992,790,890,892],[-1,791,101233,893],[994,792,892,894],[995,793,893,895],[996,794,894,896],[997,795,895,897],[998,796,896,898],[999,797,897,102062],[1000,798,898,900],[1001,799,899,901],[1002,800,900,902],[1003,801,901,903],[1004,802,902,904],[1005,803,903,905],[1006,804,904,906],[1007,805,905,907],[1008,806,906,908],[1009,807,907,-1],[1010,808,-1,910],[1011,809,909,911],[1012,810,910,912],[1013,811,911,913],[1014,812,912,914],[1015,813,913,915],[1016,814,914,916],[1017,815,915,917],[1018,816,916,918],[1019,817,917,919],[1020,818,918,920],[1021,819,919,101819],[1022,820,920,922],[1023,821,101848,923],[1024,822,922,924],[1025,823,923,925],[1026,824,924,926],[1027,825,925,927],[1028,826,926,928],[1029,827,927,929],[1030,828,928,930],[1031,829,929,931],[1032,830,930,932],[1033,831,931,933],[1034,832,932,934],[1035,833,933,935],[1036,834,934,936],[1037,835,935,937],[1038,836,936,938],[1039,837,937,939],[1040,838,938,940],[1041,839,939,941],[1042,840,940,942],[1043,841,941,943],[1044,842,942,944],[1045,843,943,945],[1046,844,944,946],[1047,845,945,947],[1048,846,946,948],[1049,847,947,949],[1050,848,948,950],[1051,849,949,951],[1052,850,950,952],[1053,851,951,953],[-1,852,952,100345],[1055,853,953,955],[1056,854,954,956],[1057,855,955,957],[1058,856,956,958],[1059,857,957,959],[1060,858,958,960],[1061,859,959,961],[1062,860,100380,962],[1063,861,961,963],[1064,862,962,964],[1065,863,963,965],[1066,864,964,966],[1067,865,965,967],[1068,866,966,968],[1069,867,967,969],[1070,868,968,970],[1071,869,969,971],[1072,870,970,972],[1073,871,971,973],[1074,872,972,974],[1075,873,973,975],[1076,874,974,976],[1077,875,975,977],[1078,876,976,978],[1079,877,977,979],[1080,878,978,980],[1081,879,979,981],[1082,880,980,982],[1083,881,981,983],[1084,882,982,984],[1085,883,983,985],[1086,884,984,986],[1087,885,985,987],[1088,886,986,988],[1089,887,987,989],[1090,888,988,990],[1091,889,989,991],[1092,890,990,101159],[1093,891,991,993],[1094,892,992,994],[1095,893,101234,995],[1096,894,994,996],[1097,895,995,997],[1098,896,996,998],[1099,897,997,999],[1100,898,998,102063],[1101,899,999,1001],[1102,900,1000,1002],[1103,901,1001,1003],[1104,902,1002,1004],[1105,903,1003,1005],[1106,904,1004,1006],[1107,905,1005,1007],[1108,906,1006,1008],[1109,907,1007,1009],[1110,908,1008,-1],[1111,909,-1,1011],[1112,910,1010,1012],[1113,911,1011,1013],[1114,912,1012,1014],[1115,913,1013,1015],[1116,914,1014,1016],[1117,915,1015,1017],[1118,916,1016,1018],[1119,917,1017,1019],[1120,918,1018,1020],[1121,919,1019,1021],[1122,920,1020,101820],[1123,921,1021,1023],[1124,922,101849,1024],[1125,923,1023,1025],[1126,924,1024,1026],[1127,925,1025,1027],[1128,926,1026,1028],[1129,927,1027,1029],[1130,928,1028,1030],[1131,929,1029,1031],[1132,930,1030,1032],[1133,931,1031,1033],[1134,932,1032,1034],[1135,933,1033,1035],[1136,934,1034,1036],[1137,935,1035,1037],[1138,936,1036,1038],[1139,937,1037,1039],[1140,938,1038,1040],[1141,939,1039,1041],[1142,940,1040,1042],[1143,941,1041,1043],[1144,942,1042,1044],[1145,943,1043,1045],[1146,944,1044,1046],[1147,945,1045,1047],[1148,946,1046,1048],[1149,947,1047,1049],[1150,948,1048,1050],[1151,949,1049,1051],[1152,950,1050,1052],[1153,951,1051,1053],[1154,952,1052,100268],[1155,953,1053,1055],[1156,954,1054,1056],[1157,955,1055,1057],[1158,956,1056,1058],[1159,957,1057,1059],[1160,958,1058,1060],[1161,959,1059,1061],[1162,-1,100381,1062],[1163,961,1061,1063],[1164,962,1062,1064],[1165,963,1063,1065],[1166,964,1064,1066],[1167,965,1065,1067],[1168,966,1066,1068],[1169,967,1067,1069],[1170,968,1068,1070],[1171,969,1069,1071],[1172,970,1070,1072],[1173,971,1071,1073],[1174,972,1072,1074],[1175,973,1073,1075],[1176,974,1074,1076],[1177,975,1075,1077],[1178,976,1076,1078],[1179,977,1077,1079],[1180,978,1078,1080],[1181,979,1079,1081],[1182,980,1080,1082],[1183,981,1081,1083],[1184,982,1082,1084],[1185,983,1083,1085],[1186,984,1084,1086],[1187,985,1085,1087],[1188,986,1086,1088],[1189,987,1087,1089],[1190,988,1088,1090],[1191,989,1089,1091],[1192,990,1090,1092],[1193,991,1091,101160],[1194,992,1092,1094],[1195,993,1093,1095],[1196,994,101235,1096],[1197,995,1095,1097],[1198,996,1096,1098],[1199,997,1097,1099],[1200,998,1098,1100],[1201,999,1099,1101],[1202,-1,1100,102064],[1203,1001,1101,1103],[1204,1002,1102,1104],[1205,1003,1103,1105],[1206,1004,1104,1106],[1207,1005,1105,1107],[1208,1006,1106,1108],[1209,1007,1107,1109],[1210,1008,1108,1110],[1211,1009,1109,-1],[1212,1010,-1,1112],[1213,1011,1111,1113],[1214,1012,1112,1114],[1215,1013,1113,1115],[1216,1014,1114,1116],[1217,1015,1115,1117],[1218,1016,1116,1118],[1219,1017,1117,1119],[1220,1018,1118,1120],[1221,1019,1119,1121],[1222,1020,1120,1122],[1223,1021,1121,101821],[1224,1022,1122,1124],[1225,1023,101850,1125],[1226,1024,1124,1126],[1227,1025,1125,1127],[1228,1026,1126,1128],[1229,1027,1127,1129],[1230,1028,1128,1130],[1231,1029,1129,1131],[1232,1030,1130,1132],[1233,1031,1131,1133],[1234,1032,1132,1134],[1235,1033,1133,1135],[1236,1034,1134,1136],[1237,1035,1135,1137],[1238,1036,1136,1138],[1239,1037,1137,1139],[1240,1038,1138,1140],[1241,1039,1139,1141],[1242,1040,1140,1142],[1243,1041,1141,1143],[1244,1042,1142,1144],[1245,1043,1143,1145],[1246,1044,1144,1146],[1247,1045,1145,1147],[1248,1046,1146,1148],[1249,1047,1147,1149],[1250,1048,1148,1150],[1251,1049,1149,1151],[1252,1050,1150,1152],[1253,1051,1151,1153],[1254,1052,1152,1154],[1255,1053,1153,100269],[1256,1054,1154,1156],[1257,1055,1155,1157],[1258,1056,1156,1158],[1259,1057,1157,1159],[1260,1058,1158,1160],[1261,1059,1159,1161],[1262,1060,1160,1162],[1263,1061,100382,1163],[1264,1062,1162,1164],[1265,1063,1163,1165],[1266,1064,1164,1166],[1267,1065,1165,1167],[1268,1066,1166,1168],[1269,1067,1167,1169],[1270,1068,1168,1170],[1271,1069,1169,1171],[1272,1070,1170,1172],[1273,1071,1171,1173],[1274,1072,1172,1174],[1275,1073,1173,1175],[1276,1074,1174,1176],[1277,1075,1175,1177],[1278,1076,1176,1178],[1279,1077,1177,1179],[1280,1078,1178,1180],[1281,1079,1179,1181],[1282,1080,1180,1182],[1283,1081,1181,1183],[1284,1082,1182,1184],[1285,1083,1183,1185],[1286,1084,1184,1186],[1287,1085,1185,1187],[1288,1086,1186,1188],[1289,1087,1187,1189],[1290,1088,1188,1190],[1291,1089,1189,1191],[1292,1090,1190,1192],[1293,1091,1191,1193],[1294,1092,1192,101161],[1295,1093,1193,1195],[1296,1094,1194,1196],[1297,1095,101236,1197],[1298,1096,1196,1198],[1299,1097,1197,1199],[1300,1098,1198,1200],[1301,1099,1199,1201],[1302,1100,1200,1202],[1303,1101,1201,102065],[1304,1102,1202,1204],[1305,1103,1203,1205],[1306,1104,1204,1206],[1307,1105,1205,1207],[1308,1106,1206,1208],[1309,1107,1207,1209],[1310,1108,1208,1210],[1311,1109,1209,1211],[1312,1110,1210,-1],[1313,1111,-1,1213],[1314,1112,1212,1214],[1315,1113,1213,1215],[1316,1114,1214,1216],[1317,1115,1215,1217],[1318,1116,1216,1218],[1319,1117,1217,1219],[1320,1118,1218,1220],[1321,1119,1219,1221],[1322,1120,1220,1222],[1323,1121,1221,1223],[1324,1122,1222,101822],[1325,1123,1223,1225],[1326,1124,101851,1226],[1327,1125,1225,1227],[1328,1126,1226,1228],[1329,1127,1227,1229],[1330,1128,1228,1230],[1331,1129,1229,1231],[1332,1130,1230,1232],[1333,1131,1231,1233],[1334,1132,1232,1234],[1335,1133,1233,1235],[1336,1134,1234,1236],[1337,1135,1235,1237],[1338,1136,1236,1238],[1339,1137,1237,1239],[1340,1138,1238,1240],[1341,1139,1239,1241],[1342,1140,1240,1242],[1343,1141,1241,1243],[1344,1142,1242,1244],[1345,1143,1243,1245],[1346,1144,1244,1246],[1347,1145,1245,1247],[1348,1146,1246,1248],[1349,1147,1247,1249],[1350,1148,1248,1250],[1351,1149,1249,1251],[1352,1150,1250,1252],[1353,1151,1251,1253],[1354,1152,1252,1254],[1355,1153,1253,1255],[-1,1154,1254,100270],[1357,1155,1255,1257],[1358,1156,1256,1258],[1359,1157,1257,1259],[1360,1158,1258,1260],[1361,1159,1259,1261],[1362,1160,1260,1262],[1363,-1,100383,1263],[1364,1162,1262,1264],[1365,1163,1263,1265],[1366,1164,1264,1266],[1367,1165,1265,1267],[1368,1166,1266,1268],[1369,1167,1267,1269],[1370,1168,1268,1270],[1371,1169,1269,1271],[1372,1170,1270,1272],[1373,1171,1271,1273],[1374,1172,1272,1274],[1375,1173,1273,1275],[1376,1174,1274,1276],[1377,1175,1275,1277],[1378,1176,1276,1278],[1379,1177,1277,1279],[1380,1178,1278,1280],[1381,1179,1279,1281],[1382,1180,1280,1282],[1383,1181,1281,1283],[1384,1182,1282,1284],[1385,1183,1283,1285],[1386,1184,1284,1286],[1387,1185,1285,1287],[1388,1186,1286,1288],[1389,1187,1287,1289],[1390,1188,1288,1290],[1391,1189,1289,1291],[1392,1190,1290,1292],[1393,1191,1291,1293],[1394,1192,1292,1294],[1395,1193,1293,101162],[1396,1194,1294,1296],[1397,1195,1295,1297],[1398,1196,101237,1298],[1399,1197,1297,1299],[1400,1198,1298,1300],[1401,1199,1299,1301],[1402,1200,1300,1302],[1403,1201,1301,1303],[1404,1202,1302,102066],[1405,1203,1303,1305],[1406,1204,1304,1306],[1407,1205,1305,1307],[1408,1206,1306,1308],[1409,1207,1307,1309],[1410,1208,1308,1310],[1411,1209,1309,1311],[1412,1210,1310,1312],[1413,1211,1311,-1],[1414,1212,-1,1314],[1415,1213,1313,1315],[1416,1214,1314,1316],[1417,1215,1315,1317],[1418,1216,1316,1318],[1419,1217,1317,1319],[1420,1218,1318,1320],[1421,1219,1319,1321],[1422,1220,1320,1322],[1423,1221,1321,1323],[1424,1222,1322,1324],[1425,1223,1323,101823],[1426,1224,1324,1326],[1427,1225,101852,1327],[1428,1226,1326,1328],[1429,1227,1327,1329],[1430,1228,1328,1330],[1431,1229,1329,1331],[1432,1230,1330,1332],[1433,1231,1331,1333],[1434,1232,1332,1334],[1435,1233,1333,1335],[1436,1234,1334,1336],[1437,1235,1335,1337],[1438,1236,1336,1338],[1439,1237,1337,1339],[1440,1238,1338,1340],[1441,1239,1339,1341],[1442,1240,1340,1342],[1443,1241,1341,1343],[1444,1242,1342,1344],[1445,1243,1343,1345],[1446,1244,1344,1346],[1447,1245,1345,1347],[1448,1246,1346,1348],[1449,1247,1347,1349],[1450,1248,1348,1350],[1451,1249,1349,1351],[1452,1250,1350,1352],[1453,1251,1351,1353],[1454,1252,1352,1354],[1455,1253,1353,1355],[1456,1254,1354,100271],[1457,1255,1355,1357],[1458,1256,1356,1358],[1459,1257,1357,1359],[1460,1258,1358,1360],[1461,1259,1359,1361],[1462,1260,1360,1362],[1463,1261,1361,1363],[1464,1262,100384,1364],[1465,1263,1363,1365],[1466,1264,1364,1366],[1467,1265,1365,1367],[1468,1266,1366,1368],[1469,1267,1367,1369],[1470,1268,1368,1370],[1471,1269,1369,1371],[1472,1270,1370,1372],[1473,1271,1371,1373],[1474,1272,1372,1374],[1475,1273,1373,1375],[1476,1274,1374,1376],[1477,1275,1375,1377],[1478,1276,1376,1378],[1479,1277,1377,1379],[1480,1278,1378,1380],[1481,1279,1379,1381],[1482,1280,1380,1382],[1483,1281,1381,1383],[1484,1282,1382,1384],[1485,1283,1383,1385],[1486,1284,1384,1386],[1487,1285,1385,1387],[1488,1286,1386,1388],[1489,1287,1387,1389],[1490,1288,1388,1390],[1491,1289,1389,1391],[1492,1290,1390,1392],[1493,1291,1391,1393],[1494,1292,1392,1394],[1495,1293,1393,1395],[1496,1294,1394,101163],[1497,1295,1395,1397],[1498,1296,1396,1398],[1499,1297,101238,1399],[1500,1298,1398,1400],[1501,1299,1399,1401],[1502,1300,1400,1402],[1503,1301,1401,1403],[1504,1302,1402,1404],[1505,1303,1403,102067],[1506,1304,1404,1406],[1507,1305,1405,1407],[1508,1306,1406,1408],[1509,1307,1407,1409],[1510,1308,1408,1410],[1511,1309,1409,1411],[1512,1310,1410,1412],[1513,1311,1411,1413],[1514,1312,1412,-1],[1515,1313,-1,1415],[1516,1314,1414,1416],[1517,1315,1415,1417],[1518,1316,1416,1418],[1519,1317,1417,1419],[1520,1318,1418,1420],[1521,1319,1419,1421],[1522,1320,1420,1422],[1523,1321,1421,1423],[1524,1322,1422,1424],[1525,1323,1423,1425],[1526,1324,1424,101824],[1527,1325,1425,1427],[1528,1326,101853,1428],[1529,1327,1427,1429],[1530,1328,1428,1430],[1531,1329,1429,1431],[1532,1330,1430,1432],[1533,1331,1431,1433],[1534,1332,1432,1434],[1535,1333,1433,1435],[1536,1334,1434,1436],[1537,1335,1435,1437],[1538,1336,1436,1438],[1539,1337,1437,1439],[1540,1338,1438,1440],[1541,1339,1439,1441],[1542,1340,1440,1442],[1543,1341,1441,1443],[1544,1342,1442,1444],[1545,1343,1443,1445],[1546,1344,1444,1446],[1547,1345,1445,1447],[1548,1346,1446,1448],[1549,1347,1447,1449],[1550,1348,1448,1450],[1551,1349,1449,1451],[1552,1350,1450,1452],[1553,1351,1451,1453],[1554,1352,1452,1454],[1555,1353,1453,1455],[1556,1354,1454,1456],[1557,1355,1455,100272],[1558,1356,1456,1458],[1559,1357,1457,1459],[1560,1358,1458,1460],[1561,1359,1459,1461],[1562,1360,1460,1462],[1563,1361,1461,1463],[1564,-1,100385,1464],[1565,1363,1463,1465],[1566,1364,1464,1466],[1567,1365,1465,1467],[1568,1366,1466,1468],[1569,1367,1467,1469],[1570,1368,1468,1470],[1571,1369,1469,1471],[1572,1370,1470,1472],[1573,1371,1471,1473],[1574,1372,1472,1474],[1575,1373,1473,1475],[1576,1374,1474,1476],[1577,1375,1475,1477],[1578,1376,1476,1478],[1579,1377,1477,1479],[1580,1378,1478,1480],[1581,1379,1479,1481],[1582,1380,1480,1482],[1583,1381,1481,1483],[1584,1382,1482,1484],[1585,1383,1483,1485],[1586,1384,1484,1486],[1587,1385,1485,1487],[1588,1386,1486,1488],[1589,1387,1487,1489],[1590,1388,1488,1490],[1591,1389,1489,1491],[1592,1390,1490,1492],[1593,1391,1491,1493],[1594,1392,1492,1494],[1595,1393,1493,1495],[1596,1394,1494,1496],[1597,1395,1495,1497],[1598,-1,1496,101164],[1599,1397,1497,1499],[1600,1398,101239,1500],[1601,1399,1499,1501],[1602,1400,1500,1502],[1603,1401,1501,1503],[1604,1402,1502,1504],[1605,1403,1503,1505],[1606,1404,1504,1506],[1607,-1,1505,102068],[1608,1406,1506,1508],[1609,1407,1507,1509],[1610,1408,1508,1510],[1611,1409,1509,1511],[1612,1410,1510,1512],[1613,1411,1511,1513],[1614,1412,1512,1514],[1615,1413,1513,-1],[1616,1414,-1,1516],[1617,1415,1515,1517],[1618,1416,1516,1518],[1619,1417,1517,1519],[1620,1418,1518,1520],[1621,1419,1519,1521],[1622,1420,1520,1522],[1623,1421,1521,1523],[1624,1422,1522,1524],[1625,1423,1523,1525],[1626,1424,1524,1526],[1627,1425,1525,101825],[1628,1426,1526,1528],[1629,1427,101854,1529],[1630,1428,1528,1530],[1631,1429,1529,1531],[1632,1430,1530,1532],[1633,1431,1531,1533],[1634,1432,1532,1534],[1635,1433,1533,1535],[1636,1434,1534,1536],[1637,1435,1535,1537],[1638,1436,1536,1538],[1639,1437,1537,1539],[1640,1438,1538,1540],[1641,1439,1539,1541],[1642,1440,1540,1542],[1643,1441,1541,1543],[1644,1442,1542,1544],[1645,1443,1543,1545],[1646,1444,1544,1546],[1647,1445,1545,1547],[1648,1446,1546,1548],[1649,1447,1547,1549],[1650,1448,1548,1550],[1651,1449,1549,1551],[1652,1450,1550,1552],[1653,1451,1551,1553],[1654,1452,1552,1554],[1655,1453,1553,1555],[1656,1454,1554,1556],[1657,1455,1555,1557],[-1,1456,1556,100273],[1659,1457,1557,1559],[1660,1458,1558,1560],[1661,1459,1559,1561],[1662,1460,1560,1562],[1663,1461,1561,1563],[1664,1462,1562,1564],[1665,1463,100386,1565],[1666,1464,1564,1566],[1667,1465,1565,1567],[1668,1466,1566,1568],[1669,1467,1567,1569],[1670,1468,1568,1570],[1671,1469,1569,1571],[1672,1470,1570,1572],[1673,1471,1571,1573],[1674,1472,1572,1574],[1675,1473,1573,1575],[1676,1474,1574,1576],[1677,1475,1575,1577],[1678,1476,1576,1578],[1679,1477,1577,1579],[1680,1478,1578,1580],[1681,1479,1579,1581],[1682,1480,1580,1582],[1683,1481,1581,1583],[1684,1482,1582,1584],[1685,1483,1583,1585],[1686,1484,1584,1586],[1687,1485,1585,1587],[1688,1486,1586,1588],[1689,1487,1587,1589],[1690,1488,1588,1590],[1691,1489,1589,1591],[1692,1490,1590,1592],[1693,1491,1591,1593],[1694,1492,1592,1594],[1695,1493,1593,1595],[1696,1494,1594,1596],[1697,1495,1595,1597],[1698,1496,1596,1598],[1699,1497,1597,101165],[1700,1498,1598,1600],[-1,1499,101240,1601],[1702,1500,1600,1602],[1703,1501,1601,1603],[1704,1502,1602,1604],[1705,1503,1603,1605],[1706,1504,1604,1606],[1707,1505,1605,1607],[1708,1506,1606,102069],[1709,1507,1607,1609],[1710,1508,1608,1610],[1711,1509,1609,1611],[1712,1510,1610,1612],[1713,1511,1611,1613],[1714,1512,1612,1614],[1715,1513,1613,1615],[1716,1514,1614,-1],[1717,1515,-1,1617],[1718,1516,1616,1618],[1719,1517,1617,1619],[1720,1518,1618,1620],[1721,1519,1619,1621],[1722,1520,1620,1622],[1723,1521,1621,1623],[1724,1522,1622,1624],[1725,1523,1623,1625],[1726,1524,1624,1626],[1727,1525,1625,1627],[1728,1526,1626,101826],[1729,1527,1627,1629],[1730,1528,101855,1630],[1731,1529,1629,1631],[1732,1530,1630,1632],[1733,1531,1631,1633],[1734,1532,1632,1634],[1735,1533,1633,1635],[1736,1534,1634,1636],[1737,1535,1635,1637],[1738,1536,1636,1638],[1739,1537,1637,1639],[1740,1538,1638,1640],[1741,1539,1639,1641],[1742,1540,1640,1642],[1743,1541,1641,1643],[1744,1542,1642,1644],[1745,1543,1643,1645],[1746,1544,1644,1646],[1747,1545,1645,1647],[1748,1546,1646,1648],[1749,1547,1647,1649],[1750,1548,1648,1650],[1751,1549,1649,1651],[1752,1550,1650,1652],[1753,1551,1651,1653],[1754,1552,1652,1654],[1755,1553,1653,1655],[1756,1554,1654,1656],[1757,1555,1655,1657],[1758,1556,1656,100274],[1759,1557,1657,1659],[1760,1558,1658,1660],[1761,1559,1659,1661],[1762,1560,1660,1662],[1763,1561,1661,1663],[1764,1562,1662,1664],[1765,1563,1663,1665],[1766,1564,100387,1666],[1767,1565,1665,1667],[1768,1566,1666,1668],[1769,1567,1667,1669],[1770,1568,1668,1670],[1771,1569,1669,1671],[1772,1570,1670,1672],[1773,1571,1671,1673],[1774,1572,1672,1674],[1775,1573,1673,1675],[1776,1574,1674,1676],[1777,1575,1675,1677],[1778,1576,1676,1678],[1779,1577,1677,1679],[1780,1578,1678,1680],[1781,1579,1679,1681],[1782,1580,1680,1682],[1783,1581,1681,1683],[1784,1582,1682,1684],[1785,1583,1683,1685],[1786,1584,1684,1686],[1787,1585,1685,1687],[1788,1586,1686,1688],[1789,1587,1687,1689],[1790,1588,1688,1690],[1791,1589,1689,1691],[1792,1590,1690,1692],[1793,1591,1691,1693],[1794,1592,1692,1694],[1795,1593,1693,1695],[1796,1594,1694,1696],[1797,1595,1695,1697],[1798,1596,1696,1698],[1799,1597,1697,1699],[1800,1598,1698,101166],[1801,1599,1699,1701],[1802,1600,1700,1702],[1803,1601,101241,1703],[1804,1602,1702,1704],[1805,1603,1703,1705],[1806,1604,1704,1706],[1807,1605,1705,1707],[1808,1606,1706,1708],[1809,1607,1707,102070],[1810,1608,1708,1710],[1811,1609,1709,1711],[1812,1610,1710,1712],[1813,1611,1711,1713],[1814,1612,1712,1714],[1815,1613,1713,1715],[1816,1614,1714,1716],[1817,1615,1715,-1],[1818,1616,-1,1718],[1819,1617,1717,1719],[1820,1618,1718,1720],[1821,1619,1719,1721],[1822,1620,1720,1722],[1823,1621,1721,1723],[1824,1622,1722,1724],[1825,1623,1723,1725],[1826,1624,1724,1726],[1827,1625,1725,1727],[1828,1626,1726,1728],[1829,1627,1727,101827],[1830,1628,1728,1730],[1831,1629,101856,1731],[1832,1630,1730,1732],[1833,1631,1731,1733],[1834,1632,1732,1734],[1835,1633,1733,1735],[1836,1634,1734,1736],[1837,1635,1735,1737],[1838,1636,1736,1738],[1839,1637,1737,1739],[1840,1638,1738,1740],[1841,1639,1739,1741],[1842,1640,1740,1742],[1843,1641,1741,1743],[1844,1642,1742,1744],[1845,1643,1743,1745],[1846,1644,1744,1746],[1847,1645,1745,1747],[1848,1646,1746,1748],[1849,1647,1747,1749],[1850,1648,1748,1750],[1851,1649,1749,1751],[1852,1650,1750,1752],[1853,1651,1751,1753],[1854,1652,1752,1754],[1855,1653,1753,1755],[1856,1654,1754,1756],[1857,1655,1755,1757],[1858,1656,1756,1758],[1859,1657,1757,100275],[1860,1658,1758,1760],[1861,1659,1759,1761],[1862,1660,1760,1762],[1863,1661,1761,1763],[1864,1662,1762,1764],[1865,1663,1763,1765],[1866,-1,100388,1766],[1867,1665,1765,1767],[1868,1666,1766,1768],[1869,1667,1767,1769],[1870,1668,1768,1770],[1871,1669,1769,1771],[1872,1670,1770,1772],[1873,1671,1771,1773],[1874,1672,1772,1774],[1875,1673,1773,1775],[1876,1674,1774,1776],[1877,1675,1775,1777],[1878,1676,1776,1778],[1879,1677,1777,1779],[1880,1678,1778,1780],[1881,1679,1779,1781],[1882,1680,1780,1782],[1883,1681,1781,1783],[1884,1682,1782,1784],[1885,1683,1783,1785],[1886,1684,1784,1786],[1887,1685,1785,1787],[1888,1686,1786,1788],[1889,1687,1787,1789],[1890,1688,1788,1790],[1891,1689,1789,1791],[1892,1690,1790,1792],[1893,1691,1791,1793],[1894,1692,1792,1794],[1895,1693,1793,1795],[1896,1694,1794,1796],[1897,1695,1795,1797],[1898,1696,1796,1798],[1899,1697,1797,1799],[1900,1698,1798,1800],[1901,1699,1799,101167],[1902,1700,1800,1802],[1903,1701,1801,1803],[1904,1702,101242,1804],[1905,1703,1803,1805],[1906,1704,1804,1806],[1907,1705,1805,1807],[1908,1706,1806,1808],[1909,1707,1807,1809],[1910,1708,1808,1810],[1911,-1,1809,102071],[1912,1710,1810,1812],[1913,1711,1811,1813],[1914,1712,1812,1814],[1915,1713,1813,1815],[1916,1714,1814,1816],[1917,1715,1815,1817],[1918,1716,1816,-1],[1919,1717,-1,1819],[1920,1718,1818,1820],[1921,1719,1819,1821],[1922,1720,1820,1822],[1923,1721,1821,1823],[1924,1722,1822,1824],[1925,1723,1823,1825],[1926,1724,1824,1826],[1927,1725,1825,1827],[1928,1726,1826,1828],[1929,1727,1827,1829],[1930,1728,1828,101828],[1931,1729,1829,1831],[1932,1730,101857,1832],[1933,1731,1831,1833],[1934,1732,1832,1834],[1935,1733,1833,1835],[1936,1734,1834,1836],[1937,1735,1835,1837],[1938,1736,1836,1838],[1939,1737,1837,1839],[1940,1738,1838,1840],[1941,1739,1839,1841],[1942,1740,1840,1842],[1943,1741,1841,1843],[1944,1742,1842,1844],[1945,1743,1843,1845],[1946,1744,1844,1846],[1947,1745,1845,1847],[1948,1746,1846,1848],[1949,1747,1847,1849],[1950,1748,1848,1850],[1951,1749,1849,1851],[1952,1750,1850,1852],[1953,1751,1851,1853],[1954,1752,1852,1854],[1955,1753,1853,1855],[1956,1754,1854,1856],[1957,1755,1855,1857],[1958,1756,1856,1858],[1959,1757,1857,1859],[1960,1758,1858,100276],[1961,1759,1859,1861],[1962,1760,1860,1862],[1963,1761,1861,1863],[1964,1762,1862,1864],[1965,1763,1863,1865],[1966,1764,1864,1866],[1967,1765,100389,1867],[1968,1766,1866,1868],[1969,1767,1867,1869],[1970,1768,1868,1870],[1971,1769,1869,1871],[1972,1770,1870,1872],[1973,1771,1871,1873],[1974,1772,1872,1874],[1975,1773,1873,1875],[1976,1774,1874,1876],[1977,1775,1875,1877],[1978,1776,1876,1878],[1979,1777,1877,1879],[1980,1778,1878,1880],[1981,1779,1879,1881],[1982,1780,1880,1882],[1983,1781,1881,1883],[1984,1782,1882,1884],[1985,1783,1883,1885],[1986,1784,1884,1886],[1987,1785,1885,1887],[1988,1786,1886,1888],[1989,1787,1887,1889],[1990,1788,1888,1890],[1991,1789,1889,1891],[1992,1790,1890,1892],[1993,1791,1891,1893],[1994,1792,1892,1894],[1995,1793,1893,1895],[1996,1794,1894,1896],[1997,1795,1895,1897],[1998,1796,1896,1898],[1999,1797,1897,1899],[2000,1798,1898,1900],[2001,1799,1899,1901],[2002,1800,1900,101168],[2003,1801,1901,1903],[2004,1802,1902,1904],[2005,1803,101243,1905],[2006,1804,1904,1906],[2007,1805,1905,1907],[2008,1806,1906,1908],[2009,1807,1907,1909],[2010,1808,1908,1910],[2011,1809,1909,1911],[2012,1810,1910,102072],[2013,1811,1911,1913],[2014,1812,1912,1914],[2015,1813,1913,1915],[2016,1814,1914,1916],[2017,1815,1915,1917],[2018,1816,1916,1918],[2019,1817,1917,-1],[2020,1818,-1,1920],[2021,1819,1919,1921],[2022,1820,1920,1922],[2023,1821,1921,1923],[2024,1822,1922,1924],[2025,1823,1923,1925],[2026,1824,1924,1926],[2027,1825,1925,1927],[2028,1826,1926,1928],[2029,1827,1927,1929],[2030,1828,1928,1930],[-1,1829,1929,101829],[2032,1830,1930,1932],[2033,1831,101858,1933],[2034,1832,1932,1934],[2035,1833,1933,1935],[2036,1834,1934,1936],[2037,1835,1935,1937],[2038,1836,1936,1938],[2039,1837,1937,1939],[2040,1838,1938,1940],[2041,1839,1939,1941],[2042,1840,1940,1942],[2043,1841,1941,1943],[2044,1842,1942,1944],[2045,1843,1943,1945],[2046,1844,1944,1946],[2047,1845,1945,1947],[2048,1846,1946,1948],[2049,1847,1947,1949],[2050,1848,1948,1950],[2051,1849,1949,1951],[2052,1850,1950,1952],[2053,1851,1951,1953],[2054,1852,1952,1954],[2055,1853,1953,1955],[2056,1854,1954,1956],[2057,1855,1955,1957],[2058,1856,1956,1958],[2059,1857,1957,1959],[2060,1858,1958,1960],[-1,1859,1959,100277],[2062,1860,1960,1962],[2063,1861,1961,1963],[2064,1862,1962,1964],[2065,1863,1963,1965],[2066,1864,1964,1966],[2067,1865,1965,1967],[2068,1866,100390,1968],[2069,1867,1967,1969],[2070,1868,1968,1970],[2071,1869,1969,1971],[2072,1870,1970,1972],[2073,1871,1971,1973],[2074,1872,1972,1974],[2075,1873,1973,1975],[2076,1874,1974,1976],[2077,1875,1975,1977],[2078,1876,1976,1978],[2079,1877,1977,1979],[2080,1878,1978,1980],[2081,1879,1979,1981],[2082,1880,1980,1982],[2083,1881,1981,1983],[2084,1882,1982,1984],[2085,1883,1983,1985],[2086,1884,1984,1986],[2087,1885,1985,1987],[2088,1886,1986,1988],[2089,1887,1987,1989],[2090,1888,1988,1990],[2091,1889,1989,1991],[2092,1890,1990,1992],[2093,1891,1991,1993],[2094,1892,1992,1994],[2095,1893,1993,1995],[2096,1894,1994,1996],[2097,1895,1995,1997],[2098,1896,1996,1998],[2099,1897,1997,1999],[2100,1898,1998,2000],[2101,1899,1999,2001],[2102,1900,2000,2002],[2103,1901,2001,101169],[2104,1902,2002,2004],[2105,1903,2003,2005],[2106,1904,101244,2006],[2107,1905,2005,2007],[2108,1906,2006,2008],[2109,1907,2007,2009],[2110,1908,2008,2010],[2111,1909,2009,2011],[2112,1910,2010,2012],[2113,1911,2011,102073],[2114,1912,2012,2014],[2115,1913,2013,2015],[2116,1914,2014,2016],[2117,1915,2015,2017],[2118,1916,2016,2018],[2119,1917,2017,2019],[2120,1918,2018,-1],[2121,1919,-1,2021],[2122,1920,2020,2022],[2123,1921,2021,2023],[2124,1922,2022,2024],[2125,1923,2023,2025],[2126,1924,2024,2026],[2127,1925,2025,2027],[2128,1926,2026,2028],[2129,1927,2027,2029],[2130,1928,2028,2030],[2131,1929,2029,101830],[2132,1930,2030,2032],[2133,-1,101859,2033],[2134,1932,2032,2034],[2135,1933,2033,2035],[2136,1934,2034,2036],[2137,1935,2035,2037],[2138,1936,2036,2038],[2139,1937,2037,2039],[2140,1938,2038,2040],[2141,1939,2039,2041],[2142,1940,2040,2042],[2143,1941,2041,2043],[2144,1942,2042,2044],[2145,1943,2043,2045],[2146,1944,2044,2046],[2147,1945,2045,2047],[2148,1946,2046,2048],[2149,1947,2047,2049],[2150,1948,2048,2050],[2151,1949,2049,2051],[2152,1950,2050,2052],[2153,1951,2051,2053],[2154,1952,2052,2054],[2155,1953,2053,2055],[2156,1954,2054,2056],[2157,1955,2055,2057],[2158,1956,2056,2058],[2159,1957,2057,2059],[2160,1958,2058,2060],[2161,1959,2059,100278],[2162,1960,2060,2062],[2163,1961,2061,2063],[2164,1962,2062,2064],[2165,1963,2063,2065],[2166,1964,2064,2066],[2167,1965,2065,2067],[2168,-1,100391,2068],[2169,1967,2067,2069],[2170,1968,2068,2070],[2171,1969,2069,2071],[2172,1970,2070,2072],[2173,1971,2071,2073],[2174,1972,2072,2074],[2175,1973,2073,2075],[2176,1974,2074,2076],[2177,1975,2075,2077],[2178,1976,2076,2078],[2179,1977,2077,2079],[2180,1978,2078,2080],[2181,1979,2079,2081],[2182,1980,2080,2082],[2183,1981,2081,2083],[2184,1982,2082,2084],[2185,1983,2083,2085],[2186,1984,2084,2086],[2187,1985,2085,2087],[2188,1986,2086,2088],[2189,1987,2087,2089],[2190,1988,2088,2090],[2191,1989,2089,2091],[2192,1990,2090,2092],[2193,1991,2091,2093],[2194,1992,2092,2094],[2195,1993,2093,2095],[2196,1994,2094,2096],[2197,1995,2095,2097],[2198,1996,2096,2098],[2199,1997,2097,2099],[2200,1998,2098,2100],[2201,1999,2099,2101],[2202,2000,2100,2102],[2203,2001,2101,2103],[2204,2002,2102,101170],[2205,2003,2103,2105],[2206,2004,2104,2106],[2207,2005,101245,2107],[2208,2006,2106,2108],[2209,2007,2107,2109],[2210,2008,2108,2110],[2211,2009,2109,2111],[2212,2010,2110,2112],[2213,2011,2111,2113],[2214,2012,2112,102074],[2215,2013,2113,2115],[2216,2014,2114,2116],[2217,2015,2115,2117],[2218,2016,2116,2118],[2219,2017,2117,2119],[2220,2018,2118,2120],[2221,2019,2119,-1],[2222,2020,-1,2122],[2223,2021,2121,2123],[2224,2022,2122,2124],[2225,2023,2123,2125],[2226,2024,2124,2126],[2227,2025,2125,2127],[2228,2026,2126,2128],[2229,2027,2127,2129],[2230,2028,2128,2130],[2231,2029,2129,2131],[2232,2030,2130,101831],[2233,2031,2131,2133],[2234,2032,101860,2134],[2235,2033,2133,2135],[2236,2034,2134,2136],[2237,2035,2135,2137],[2238,2036,2136,2138],[2239,2037,2137,2139],[2240,2038,2138,2140],[2241,2039,2139,2141],[2242,2040,2140,2142],[2243,2041,2141,2143],[2244,2042,2142,2144],[2245,2043,2143,2145],[2246,2044,2144,2146],[2247,2045,2145,2147],[2248,2046,2146,2148],[2249,2047,2147,2149],[2250,2048,2148,2150],[2251,2049,2149,2151],[2252,2050,2150,2152],[2253,2051,2151,2153],[2254,2052,2152,2154],[2255,2053,2153,2155],[2256,2054,2154,2156],[2257,2055,2155,2157],[2258,2056,2156,2158],[2259,2057,2157,2159],[2260,2058,2158,2160],[2261,2059,2159,2161],[2262,2060,2160,100279],[2263,2061,2161,2163],[2264,2062,2162,2164],[2265,2063,2163,2165],[2266,2064,2164,2166],[2267,2065,2165,2167],[2268,2066,2166,2168],[2269,2067,100392,2169],[2270,2068,2168,2170],[2271,2069,2169,2171],[2272,2070,2170,2172],[2273,2071,2171,2173],[2274,2072,2172,2174],[2275,2073,2173,2175],[2276,2074,2174,2176],[2277,2075,2175,2177],[2278,2076,2176,2178],[2279,2077,2177,2179],[2280,2078,2178,2180],[2281,2079,2179,2181],[2282,2080,2180,2182],[2283,2081,2181,2183],[2284,2082,2182,2184],[2285,2083,2183,2185],[2286,2084,2184,2186],[2287,2085,2185,2187],[2288,2086,2186,2188],[2289,2087,2187,2189],[2290,2088,2188,2190],[2291,2089,2189,2191],[2292,2090,2190,2192],[2293,2091,2191,2193],[2294,2092,2192,2194],[2295,2093,2193,2195],[2296,2094,2194,2196],[2297,2095,2195,2197],[2298,2096,2196,2198],[2299,2097,2197,2199],[2300,2098,2198,2200],[2301,2099,2199,2201],[2302,2100,2200,2202],[2303,2101,2201,2203],[2304,2102,2202,2204],[2305,2103,2203,101171],[2306,2104,2204,2206],[2307,2105,2205,2207],[2308,2106,101246,2208],[2309,2107,2207,2209],[2310,2108,2208,2210],[2311,2109,2209,2211],[2312,2110,2210,2212],[2313,2111,2211,2213],[2314,2112,2212,2214],[2315,2113,2213,102075],[2316,2114,2214,2216],[2317,2115,2215,2217],[2318,2116,2216,2218],[2319,2117,2217,2219],[2320,2118,2218,2220],[2321,2119,2219,2221],[2322,2120,2220,-1],[2323,2121,-1,2223],[2324,2122,2222,2224],[2325,2123,2223,2225],[2326,2124,2224,2226],[2327,2125,2225,2227],[2328,2126,2226,2228],[2329,2127,2227,2229],[2330,2128,2228,2230],[2331,2129,2229,2231],[2332,2130,2230,2232],[2333,2131,2231,101832],[2334,2132,2232,2234],[2335,2133,101861,2235],[2336,2134,2234,2236],[2337,2135,2235,2237],[2338,2136,2236,2238],[2339,2137,2237,2239],[2340,2138,2238,2240],[2341,2139,2239,2241],[2342,2140,2240,2242],[2343,2141,2241,2243],[2344,2142,2242,2244],[2345,2143,2243,2245],[2346,2144,2244,2246],[2347,2145,2245,2247],[2348,2146,2246,2248],[2349,2147,2247,2249],[2350,2148,2248,2250],[2351,2149,2249,2251],[2352,2150,2250,2252],[2353,2151,2251,2253],[2354,2152,2252,2254],[2355,2153,2253,2255],[2356,2154,2254,2256],[2357,2155,2255,2257],[2358,2156,2256,2258],[2359,2157,2257,2259],[2360,2158,2258,2260],[2361,2159,2259,2261],[2362,2160,2260,2262],[2363,2161,2261,100280],[2364,2162,2262,2264],[2365,2163,2263,2265],[2366,2164,2264,2266],[2367,2165,2265,2267],[2368,2166,2266,2268],[2369,2167,2267,2269],[2370,2168,100393,2270],[2371,2169,2269,2271],[2372,2170,2270,2272],[2373,2171,2271,2273],[2374,2172,2272,2274],[2375,2173,2273,2275],[2376,2174,2274,2276],[2377,2175,2275,2277],[2378,2176,2276,2278],[2379,2177,2277,2279],[2380,2178,2278,2280],[2381,2179,2279,2281],[2382,2180,2280,2282],[2383,2181,2281,2283],[2384,2182,2282,2284],[2385,2183,2283,2285],[2386,2184,2284,2286],[2387,2185,2285,2287],[2388,2186,2286,2288],[2389,2187,2287,2289],[2390,2188,2288,2290],[2391,2189,2289,2291],[2392,2190,2290,2292],[2393,2191,2291,2293],[2394,2192,2292,2294],[2395,2193,2293,2295],[2396,2194,2294,2296],[2397,2195,2295,2297],[2398,2196,2296,2298],[2399,2197,2297,2299],[2400,2198,2298,2300],[2401,2199,2299,2301],[2402,2200,2300,2302],[2403,2201,2301,2303],[2404,2202,2302,2304],[2405,2203,2303,2305],[2406,2204,2304,101172],[2407,2205,2305,2307],[2408,2206,2306,2308],[-1,2207,101247,2309],[2410,2208,2308,2310],[2411,2209,2309,2311],[2412,2210,2310,2312],[2413,2211,2311,2313],[2414,2212,2312,2314],[2415,2213,2313,2315],[2416,2214,2314,2316],[2417,-1,2315,102076],[2418,2216,2316,2318],[2419,2217,2317,2319],[2420,2218,2318,2320],[2421,2219,2319,2321],[2422,2220,2320,2322],[2423,2221,2321,-1],[2424,2222,-1,2324],[2425,2223,2323,2325],[2426,2224,2324,2326],[2427,2225,2325,2327],[2428,2226,2326,2328],[2429,2227,2327,2329],[2430,2228,2328,2330],[2431,2229,2329,2331],[2432,2230,2330,2332],[2433,2231,2331,2333],[2434,2232,2332,101833],[2435,2233,2333,2335],[2436,2234,101862,2336],[2437,2235,2335,2337],[2438,2236,2336,2338],[2439,2237,2337,2339],[2440,2238,2338,2340],[2441,2239,2339,2341],[2442,2240,2340,2342],[2443,2241,2341,2343],[2444,2242,2342,2344],[2445,2243,2343,2345],[2446,2244,2344,2346],[2447,2245,2345,2347],[2448,2246,2346,2348],[2449,2247,2347,2349],[2450,2248,2348,2350],[2451,2249,2349,2351],[2452,2250,2350,2352],[2453,2251,2351,2353],[2454,2252,2352,2354],[2455,2253,2353,2355],[2456,2254,2354,2356],[2457,2255,2355,2357],[2458,2256,2356,2358],[2459,2257,2357,2359],[2460,2258,2358,2360],[2461,2259,2359,2361],[2462,2260,2360,2362],[2463,2261,2361,2363],[2464,2262,2362,100281],[2465,2263,2363,2365],[2466,2264,2364,2366],[2467,2265,2365,2367],[2468,2266,2366,2368],[2469,2267,2367,2369],[2470,-1,100394,2370],[2471,2269,2369,2371],[2472,2270,2370,2372],[2473,2271,2371,2373],[2474,2272,2372,2374],[2475,2273,2373,2375],[2476,2274,2374,2376],[2477,2275,2375,2377],[2478,2276,2376,2378],[2479,2277,2377,2379],[2480,2278,2378,2380],[2481,2279,2379,2381],[2482,2280,2380,2382],[2483,2281,2381,2383],[2484,2282,2382,2384],[2485,2283,2383,2385],[2486,2284,2384,2386],[2487,2285,2385,2387],[2488,2286,2386,2388],[2489,2287,2387,2389],[2490,2288,2388,2390],[2491,2289,2389,2391],[2492,2290,2390,2392],[2493,2291,2391,2393],[2494,2292,2392,2394],[2495,2293,2393,2395],[2496,2294,2394,2396],[2497,2295,2395,2397],[2498,2296,2396,2398],[2499,2297,2397,2399],[2500,2298,2398,2400],[2501,2299,2399,2401],[2502,2300,2400,2402],[2503,2301,2401,2403],[2504,2302,2402,2404],[2505,2303,2403,2405],[2506,2304,2404,2406],[2507,2305,2405,2407],[2508,-1,2406,101173],[2509,2307,2407,2409],[2510,2308,2408,2410],[2511,2309,101248,2411],[2512,2310,2410,2412],[2513,2311,2411,2413],[2514,2312,2412,2414],[2515,2313,2413,2415],[2516,2314,2414,2416],[2517,2315,2415,2417],[2518,2316,2416,102077],[2519,2317,2417,2419],[2520,2318,2418,2420],[2521,2319,2419,2421],[2522,2320,2420,2422],[2523,2321,2421,2423],[2524,2322,2422,-1],[2525,2323,-1,2425],[2526,2324,2424,2426],[2527,2325,2425,2427],[2528,2326,2426,2428],[2529,2327,2427,2429],[2530,2328,2428,2430],[2531,2329,2429,2431],[2532,2330,2430,2432],[2533,2331,2431,2433],[2534,2332,2432,2434],[2535,2333,2433,101834],[2536,2334,2434,2436],[2537,2335,101863,2437],[2538,2336,2436,2438],[2539,2337,2437,2439],[2540,2338,2438,2440],[2541,2339,2439,2441],[2542,2340,2440,100962],[2543,2341,101007,2443],[2544,2342,2442,2444],[2545,2343,2443,2445],[2546,2344,2444,2446],[2547,2345,2445,2447],[2548,2346,2446,2448],[2549,2347,2447,2449],[2550,2348,2448,2450],[2551,2349,2449,2451],[2552,2350,2450,2452],[2553,2351,2451,2453],[2554,2352,2452,2454],[2555,2353,2453,2455],[2556,2354,2454,2456],[2557,2355,2455,2457],[2558,2356,2456,2458],[2559,2357,2457,2459],[2560,2358,2458,2460],[2561,2359,2459,2461],[2562,2360,2460,2462],[2563,2361,2461,2463],[2564,2362,2462,2464],[2565,2363,2463,100282],[2566,2364,2464,2466],[2567,2365,2465,2467],[2568,2366,2466,2468],[2569,2367,2467,2469],[2570,2368,2468,2470],[2571,2369,100395,2471],[2572,2370,2470,2472],[2573,2371,2471,2473],[2574,2372,2472,2474],[2575,2373,2473,2475],[2576,2374,2474,2476],[2577,2375,2475,2477],[2578,2376,2476,2478],[2579,2377,2477,2479],[2580,2378,2478,2480],[2581,2379,2479,2481],[2582,2380,2480,2482],[2583,2381,2481,2483],[2584,2382,2482,2484],[2585,2383,2483,2485],[2586,2384,2484,2486],[2587,2385,2485,2487],[2588,2386,2486,2488],[2589,2387,2487,2489],[2590,2388,2488,2490],[2591,2389,2489,2491],[2592,2390,2490,2492],[2593,2391,2491,2493],[2594,2392,2492,2494],[2595,2393,2493,2495],[2596,2394,2494,2496],[2597,2395,2495,2497],[2598,2396,2496,2498],[2599,2397,2497,2499],[2600,2398,2498,2500],[2601,2399,2499,2501],[2602,2400,2500,2502],[2603,2401,2501,2503],[2604,2402,2502,2504],[2605,2403,2503,2505],[2606,2404,2504,2506],[2607,2405,2505,2507],[2608,2406,2506,2508],[2609,2407,2507,101174],[2610,2408,2508,2510],[2611,2409,2509,2511],[2612,2410,101249,2512],[2613,2411,2511,2513],[2614,2412,2512,2514],[2615,2413,2513,2515],[2616,2414,2514,2516],[2617,2415,2515,2517],[2618,2416,2516,2518],[2619,2417,2517,102078],[2620,2418,2518,2520],[2621,2419,2519,2521],[2622,2420,2520,2522],[2623,2421,2521,2523],[2624,2422,2522,2524],[2625,2423,2523,-1],[2626,2424,-1,2526],[2627,2425,2525,2527],[2628,2426,2526,2528],[2629,2427,2527,2529],[2630,2428,2528,2530],[2631,2429,2529,2531],[2632,2430,2530,2532],[2633,2431,2531,2533],[2634,2432,2532,2534],[2635,2433,2533,2535],[2636,2434,2534,101835],[2637,2435,2535,2537],[2638,2436,101864,2538],[2639,2437,2537,2539],[2640,2438,2538,2540],[2641,2439,2539,2541],[2642,2440,2540,2542],[2643,2441,2541,100963],[2644,2442,101008,2544],[2645,2443,2543,2545],[2646,2444,2544,2546],[2647,2445,2545,2547],[2648,2446,2546,2548],[2649,2447,2547,2549],[2650,2448,2548,2550],[2651,2449,2549,2551],[2652,2450,2550,2552],[2653,2451,2551,2553],[2654,2452,2552,2554],[2655,2453,2553,2555],[2656,2454,2554,2556],[2657,2455,2555,2557],[2658,2456,2556,2558],[2659,2457,2557,2559],[2660,2458,2558,2560],[2661,2459,2559,2561],[2662,2460,2560,2562],[2663,2461,2561,2563],[2664,2462,2562,2564],[2665,2463,2563,2565],[2666,2464,2564,100283],[2667,2465,2565,2567],[2668,2466,2566,2568],[2669,2467,2567,2569],[2670,2468,2568,2570],[2671,2469,2569,2571],[2672,2470,100396,2572],[2673,2471,2571,2573],[2674,2472,2572,2574],[2675,2473,2573,2575],[2676,2474,2574,2576],[2677,2475,2575,2577],[2678,2476,2576,2578],[2679,2477,2577,2579],[2680,2478,2578,2580],[2681,2479,2579,2581],[2682,2480,2580,2582],[2683,2481,2581,2583],[2684,2482,2582,2584],[2685,2483,2583,2585],[2686,2484,2584,2586],[2687,2485,2585,2587],[2688,2486,2586,2588],[2689,2487,2587,2589],[2690,2488,2588,2590],[2691,2489,2589,2591],[2692,2490,2590,2592],[2693,2491,2591,2593],[2694,2492,2592,2594],[2695,2493,2593,2595],[2696,2494,2594,2596],[2697,2495,2595,2597],[2698,2496,2596,2598],[2699,2497,2597,2599],[2700,2498,2598,2600],[2701,2499,2599,2601],[2702,2500,2600,2602],[2703,2501,2601,2603],[2704,2502,2602,2604],[2705,2503,2603,2605],[2706,2504,2604,2606],[2707,2505,2605,2607],[2708,2506,2606,2608],[2709,2507,2607,2609],[2710,2508,2608,101175],[2711,2509,2609,2611],[2712,2510,2610,2612],[2713,2511,101250,2613],[2714,2512,2612,2614],[2715,2513,2613,2615],[2716,2514,2614,2616],[2717,2515,2615,2617],[2718,2516,2616,2618],[2719,2517,2617,2619],[2720,2518,2618,102079],[2721,2519,2619,2621],[2722,2520,2620,2622],[2723,2521,2621,2623],[2724,2522,2622,2624],[2725,2523,2623,2625],[2726,2524,2624,-1],[2727,2525,-1,2627],[2728,2526,2626,2628],[2729,2527,2627,2629],[2730,2528,2628,2630],[2731,2529,2629,2631],[2732,2530,2630,2632],[2733,2531,2631,2633],[2734,2532,2632,2634],[2735,2533,2633,2635],[2736,2534,2634,2636],[2737,2535,2635,101836],[2738,2536,2636,2638],[2739,2537,101865,2639],[2740,2538,2638,2640],[2741,2539,2639,2641],[2742,2540,2640,2642],[2743,2541,2641,2643],[2744,2542,2642,100964],[2745,2543,101009,2645],[2746,2544,2644,2646],[2747,2545,2645,2647],[2748,2546,2646,2648],[2749,2547,2647,2649],[2750,2548,2648,2650],[2751,2549,2649,2651],[2752,2550,2650,2652],[2753,2551,2651,2653],[2754,2552,2652,2654],[2755,2553,2653,2655],[2756,2554,2654,2656],[2757,2555,2655,2657],[2758,2556,2656,2658],[2759,2557,2657,2659],[2760,2558,2658,2660],[2761,2559,2659,2661],[2762,2560,2660,2662],[2763,2561,2661,2663],[2764,2562,2662,2664],[2765,2563,2663,2665],[2766,2564,2664,2666],[2767,2565,2665,100284],[2768,2566,2666,2668],[2769,2567,2667,2669],[2770,2568,2668,2670],[2771,2569,2669,2671],[2772,2570,2670,2672],[2773,2571,100397,2673],[2774,2572,2672,2674],[2775,2573,2673,2675],[2776,2574,2674,2676],[2777,2575,2675,2677],[2778,2576,2676,2678],[2779,2577,2677,2679],[2780,2578,2678,2680],[2781,2579,2679,2681],[2782,2580,2680,2682],[2783,2581,2681,2683],[2784,2582,2682,2684],[2785,2583,2683,2685],[2786,2584,2684,2686],[2787,2585,2685,2687],[2788,2586,2686,2688],[2789,2587,2687,2689],[2790,2588,2688,2690],[2791,2589,2689,2691],[2792,2590,2690,2692],[2793,2591,2691,2693],[2794,2592,2692,2694],[2795,2593,2693,2695],[2796,2594,2694,2696],[2797,2595,2695,2697],[2798,2596,2696,2698],[2799,2597,2697,2699],[2800,2598,2698,2700],[2801,2599,2699,2701],[2802,2600,2700,2702],[2803,2601,2701,2703],[2804,2602,2702,2704],[2805,2603,2703,2705],[2806,2604,2704,2706],[2807,2605,2705,2707],[2808,2606,2706,2708],[2809,2607,2707,2709],[2810,2608,2708,2710],[2811,2609,2709,101176],[2812,2610,2710,2712],[2813,2611,2711,2713],[2814,2612,101251,2714],[2815,2613,2713,2715],[2816,2614,2714,2716],[2817,2615,2715,2717],[2818,2616,2716,2718],[2819,2617,2717,2719],[2820,2618,2718,2720],[2821,2619,2719,102080],[2822,2620,2720,2722],[2823,2621,2721,2723],[2824,2622,2722,2724],[2825,2623,2723,2725],[2826,2624,2724,2726],[2827,2625,2725,-1],[2828,2626,-1,2728],[2829,2627,2727,2729],[2830,2628,2728,2730],[2831,2629,2729,2731],[2832,2630,2730,2732],[2833,2631,2731,2733],[2834,2632,2732,2734],[2835,2633,2733,2735],[2836,2634,2734,2736],[2837,2635,2735,2737],[2838,2636,2736,101837],[2839,2637,2737,2739],[2840,2638,101866,2740],[2841,2639,2739,2741],[2842,2640,2740,2742],[2843,2641,2741,2743],[2844,2642,2742,2744],[2845,2643,2743,100965],[-1,2644,101010,2746],[2847,2645,2745,2747],[2848,2646,2746,2748],[2849,2647,2747,2749],[2850,2648,2748,2750],[2851,2649,2749,2751],[2852,2650,2750,2752],[2853,2651,2751,2753],[2854,2652,2752,2754],[2855,2653,2753,2755],[2856,2654,2754,2756],[2857,2655,2755,2757],[2858,2656,2756,2758],[2859,2657,2757,2759],[2860,2658,2758,2760],[2861,2659,2759,2761],[2862,2660,2760,2762],[2863,2661,2761,2763],[2864,2662,2762,2764],[2865,2663,2763,2765],[2866,2664,2764,2766],[2867,2665,2765,2767],[2868,2666,2766,100285],[2869,2667,2767,2769],[2870,2668,2768,2770],[2871,2669,2769,2771],[2872,2670,2770,2772],[2873,-1,100398,2773],[2874,2672,2772,2774],[2875,2673,2773,2775],[2876,2674,2774,2776],[2877,2675,2775,2777],[2878,2676,2776,2778],[2879,2677,2777,2779],[2880,2678,2778,2780],[2881,2679,2779,2781],[2882,2680,2780,2782],[2883,2681,2781,2783],[2884,2682,2782,2784],[2885,2683,2783,2785],[2886,2684,2784,2786],[2887,2685,2785,2787],[2888,2686,2786,2788],[2889,2687,2787,2789],[2890,2688,2788,2790],[2891,2689,2789,2791],[2892,2690,2790,2792],[2893,2691,2791,2793],[2894,2692,2792,2794],[2895,2693,2793,2795],[2896,2694,2794,2796],[2897,2695,2795,2797],[2898,2696,2796,2798],[2899,2697,2797,2799],[2900,2698,2798,2800],[2901,2699,2799,2801],[2902,2700,2800,2802],[2903,2701,2801,2803],[2904,2702,2802,2804],[2905,2703,2803,2805],[2906,2704,2804,2806],[2907,2705,2805,2807],[2908,2706,2806,2808],[2909,2707,2807,2809],[2910,2708,2808,2810],[2911,2709,2809,2811],[2912,2710,2810,101177],[2913,2711,2811,2813],[2914,2712,2812,2814],[2915,2713,101252,2815],[2916,2714,2814,2816],[2917,2715,2815,2817],[2918,2716,2816,2818],[2919,2717,2817,2819],[2920,2718,2818,2820],[2921,2719,2819,2821],[2922,2720,2820,102081],[2923,2721,2821,2823],[2924,2722,2822,2824],[2925,2723,2823,2825],[2926,2724,2824,2826],[2927,2725,2825,2827],[2928,2726,2826,-1],[2929,2727,-1,2829],[2930,2728,2828,2830],[2931,2729,2829,2831],[2932,2730,2830,2832],[2933,2731,2831,2833],[2934,2732,2832,2834],[2935,2733,2833,2835],[2936,2734,2834,2836],[2937,2735,2835,2837],[2938,2736,2836,2838],[2939,2737,2837,101838],[2940,-1,101867,2840],[2941,2739,2839,2841],[2942,2740,2840,2842],[2943,2741,2841,2843],[2944,2742,2842,2844],[2945,2743,2843,2845],[2946,2744,2844,101052],[2947,2745,2845,2847],[2948,2746,101101,2848],[2949,2747,2847,2849],[2950,2748,2848,2850],[2951,2749,2849,2851],[2952,2750,2850,2852],[2953,2751,2851,2853],[2954,2752,2852,2854],[2955,2753,2853,2855],[2956,2754,2854,2856],[2957,2755,2855,2857],[2958,2756,2856,2858],[2959,2757,2857,2859],[2960,2758,2858,2860],[2961,2759,2859,2861],[2962,2760,2860,2862],[2963,2761,2861,2863],[2964,2762,2862,2864],[2965,2763,2863,2865],[2966,2764,2864,2866],[2967,2765,2865,2867],[2968,2766,2866,2868],[2969,2767,2867,100286],[2970,2768,2868,2870],[2971,2769,2869,2871],[2972,2770,2870,2872],[2973,2771,2871,2873],[2974,2772,100399,2874],[2975,2773,2873,2875],[2976,2774,2874,2876],[2977,2775,2875,2877],[2978,2776,2876,2878],[2979,2777,2877,2879],[2980,2778,2878,2880],[2981,2779,2879,2881],[2982,2780,2880,2882],[2983,2781,2881,2883],[2984,2782,2882,2884],[2985,2783,2883,2885],[2986,2784,2884,2886],[2987,2785,2885,2887],[2988,2786,2886,2888],[2989,2787,2887,2889],[2990,2788,2888,2890],[2991,2789,2889,2891],[2992,2790,2890,2892],[2993,2791,2891,2893],[2994,2792,2892,2894],[2995,2793,2893,2895],[2996,2794,2894,2896],[2997,2795,2895,2897],[2998,2796,2896,2898],[2999,2797,2897,2899],[3000,2798,2898,2900],[3001,2799,2899,2901],[3002,2800,2900,2902],[3003,2801,2901,2903],[3004,2802,2902,2904],[3005,2803,2903,2905],[3006,2804,2904,2906],[3007,2805,2905,2907],[3008,2806,2906,2908],[3009,2807,2907,2909],[3010,2808,2908,2910],[3011,2809,2909,2911],[3012,2810,2910,2912],[3013,2811,2911,101178],[3014,2812,2912,2914],[3015,2813,2913,2915],[3016,2814,101253,2916],[3017,2815,2915,2917],[3018,2816,2916,2918],[3019,2817,2917,2919],[3020,2818,2918,2920],[3021,2819,2919,2921],[3022,2820,2920,2922],[3023,2821,2921,102082],[3024,2822,2922,2924],[3025,2823,2923,2925],[3026,2824,2924,2926],[3027,2825,2925,2927],[3028,2826,2926,2928],[3029,2827,2927,-1],[3030,2828,-1,2930],[3031,2829,2929,2931],[3032,2830,2930,2932],[3033,2831,2931,2933],[3034,2832,2932,2934],[3035,2833,2933,2935],[3036,2834,2934,2936],[3037,2835,2935,2937],[3038,2836,2936,2938],[3039,2837,2937,2939],[3040,2838,2938,2940],[3041,2839,2939,2941],[3042,2840,2940,2942],[3043,2841,2941,2943],[3044,2842,2942,2944],[3045,2843,2943,2945],[3046,2844,2944,2946],[3047,2845,2945,101053],[3048,2846,2946,2948],[-1,2847,101102,2949],[3050,2848,2948,2950],[3051,2849,2949,2951],[3052,2850,2950,2952],[3053,2851,2951,2953],[3054,2852,2952,2954],[3055,2853,2953,2955],[3056,2854,2954,2956],[3057,2855,2955,2957],[3058,2856,2956,2958],[3059,2857,2957,2959],[3060,2858,2958,2960],[3061,2859,2959,2961],[3062,2860,2960,2962],[3063,2861,2961,2963],[3064,2862,2962,2964],[3065,2863,2963,2965],[3066,2864,2964,2966],[3067,2865,2965,2967],[3068,2866,2966,2968],[3069,2867,2967,2969],[3070,2868,2968,100287],[3071,2869,2969,2971],[3072,2870,2970,2972],[3073,2871,2971,2973],[3074,2872,2972,2974],[3075,2873,100400,2975],[3076,2874,2974,2976],[3077,2875,2975,2977],[3078,2876,2976,2978],[3079,2877,2977,2979],[3080,2878,2978,2980],[3081,2879,2979,2981],[3082,2880,2980,2982],[3083,2881,2981,2983],[3084,2882,2982,2984],[3085,2883,2983,2985],[3086,2884,2984,2986],[3087,2885,2985,2987],[3088,2886,2986,2988],[3089,2887,2987,2989],[3090,2888,2988,2990],[3091,2889,2989,2991],[3092,2890,2990,2992],[3093,2891,2991,2993],[3094,2892,2992,2994],[3095,2893,2993,2995],[3096,2894,2994,2996],[3097,2895,2995,2997],[3098,2896,2996,2998],[3099,2897,2997,2999],[3100,2898,2998,3000],[3101,2899,2999,3001],[3102,2900,3000,3002],[3103,2901,3001,3003],[3104,2902,3002,3004],[3105,2903,3003,3005],[3106,2904,3004,3006],[3107,2905,3005,3007],[3108,2906,3006,3008],[3109,2907,3007,3009],[3110,2908,3008,3010],[3111,2909,3009,3011],[3112,2910,3010,3012],[3113,2911,3011,3013],[3114,2912,3012,101179],[3115,2913,3013,3015],[3116,2914,3014,3016],[3117,2915,101254,3017],[3118,2916,3016,3018],[3119,2917,3017,3019],[3120,2918,3018,3020],[3121,2919,3019,3021],[3122,2920,3020,3022],[3123,2921,3021,3023],[3124,2922,3022,102083],[3125,2923,3023,3025],[3126,2924,3024,3026],[3127,2925,3025,3027],[3128,2926,3026,3028],[3129,2927,3027,3029],[3130,2928,3028,-1],[3131,2929,-1,3031],[3132,2930,3030,3032],[3133,2931,3031,3033],[3134,2932,3032,3034],[3135,2933,3033,3035],[3136,2934,3034,3036],[3137,2935,3035,3037],[3138,2936,3036,3038],[3139,2937,3037,3039],[3140,2938,3038,3040],[3141,2939,3039,3041],[3142,2940,3040,3042],[3143,2941,3041,3043],[3144,2942,3042,3044],[3145,2943,3043,3045],[3146,2944,3044,3046],[3147,2945,3045,3047],[3148,2946,3046,101054],[3149,2947,3047,3049],[3150,2948,3048,3050],[3151,2949,101103,3051],[3152,2950,3050,3052],[3153,2951,3051,3053],[3154,2952,3052,3054],[3155,2953,3053,3055],[3156,2954,3054,3056],[3157,2955,3055,3057],[3158,2956,3056,3058],[3159,2957,3057,3059],[3160,2958,3058,3060],[3161,2959,3059,3061],[3162,2960,3060,3062],[3163,2961,3061,3063],[3164,2962,3062,3064],[3165,2963,3063,3065],[3166,2964,3064,3066],[3167,2965,3065,3067],[3168,2966,3066,3068],[3169,2967,3067,3069],[3170,2968,3068,3070],[3171,2969,3069,100288],[3172,2970,3070,3072],[3173,2971,3071,3073],[3174,2972,3072,3074],[3175,2973,3073,3075],[3176,2974,100401,3076],[3177,2975,3075,3077],[3178,2976,3076,3078],[3179,2977,3077,3079],[3180,2978,3078,3080],[3181,2979,3079,3081],[3182,2980,3080,3082],[3183,2981,3081,3083],[3184,2982,3082,3084],[3185,2983,3083,3085],[3186,2984,3084,3086],[3187,2985,3085,3087],[3188,2986,3086,3088],[3189,2987,3087,3089],[3190,2988,3088,3090],[3191,2989,3089,3091],[3192,2990,3090,3092],[3193,2991,3091,3093],[3194,2992,3092,3094],[3195,2993,3093,3095],[3196,2994,3094,3096],[3197,2995,3095,3097],[3198,2996,3096,3098],[3199,2997,3097,3099],[3200,2998,3098,3100],[3201,2999,3099,3101],[3202,3000,3100,3102],[3203,3001,3101,3103],[3204,3002,3102,3104],[3205,3003,3103,3105],[3206,3004,3104,3106],[3207,3005,3105,3107],[3208,3006,3106,3108],[3209,3007,3107,3109],[3210,3008,3108,3110],[3211,3009,3109,3111],[3212,3010,3110,3112],[3213,3011,3111,3113],[3214,3012,3112,3114],[3215,3013,3113,101180],[3216,3014,3114,3116],[3217,3015,3115,3117],[3218,3016,101255,3118],[3219,3017,3117,3119],[3220,3018,3118,3120],[3221,3019,3119,3121],[3222,3020,3120,3122],[3223,3021,3121,3123],[3224,3022,3122,3124],[3225,3023,3123,102084],[3226,3024,3124,3126],[3227,3025,3125,3127],[3228,3026,3126,3128],[3229,3027,3127,3129],[3230,3028,3128,3130],[3231,3029,3129,-1],[3232,3030,-1,3132],[3233,3031,3131,3133],[3234,3032,3132,3134],[3235,3033,3133,3135],[3236,3034,3134,3136],[3237,3035,3135,3137],[3238,3036,3136,3138],[3239,3037,3137,3139],[3240,3038,3138,3140],[3241,3039,3139,3141],[3242,3040,3140,3142],[3243,3041,3141,3143],[3244,3042,3142,3144],[3245,3043,3143,3145],[3246,3044,3144,3146],[3247,3045,3145,3147],[3248,3046,3146,3148],[3249,3047,3147,100969],[3250,3048,3148,3150],[3251,-1,101014,101055],[3252,3050,101104,3152],[3253,3051,3151,3153],[3254,3052,3152,3154],[3255,3053,3153,3155],[3256,3054,3154,3156],[3257,3055,3155,3157],[3258,3056,3156,3158],[3259,3057,3157,3159],[3260,3058,3158,3160],[3261,3059,3159,3161],[3262,3060,3160,3162],[3263,3061,3161,3163],[3264,3062,3162,3164],[3265,3063,3163,3165],[3266,3064,3164,3166],[3267,3065,3165,3167],[3268,3066,3166,3168],[3269,3067,3167,3169],[3270,3068,3168,3170],[3271,3069,3169,3171],[3272,3070,3170,100289],[3273,3071,3171,3173],[3274,3072,3172,3174],[3275,3073,3173,3175],[3276,3074,3174,3176],[3277,3075,100402,3177],[3278,3076,3176,3178],[3279,3077,3177,3179],[3280,3078,3178,3180],[3281,3079,3179,3181],[3282,3080,3180,3182],[3283,3081,3181,3183],[3284,3082,3182,3184],[3285,3083,3183,3185],[3286,3084,3184,3186],[3287,3085,3185,3187],[3288,3086,3186,3188],[3289,3087,3187,3189],[3290,3088,3188,3190],[3291,3089,3189,3191],[3292,3090,3190,3192],[3293,3091,3191,3193],[3294,3092,3192,3194],[3295,3093,3193,3195],[3296,3094,3194,3196],[3297,3095,3195,3197],[3298,3096,3196,3198],[3299,3097,3197,3199],[3300,3098,3198,3200],[3301,3099,3199,3201],[3302,3100,3200,3202],[3303,3101,3201,3203],[3304,3102,3202,3204],[3305,3103,3203,3205],[3306,3104,3204,3206],[3307,3105,3205,3207],[3308,3106,3206,3208],[3309,3107,3207,3209],[3310,3108,3208,3210],[3311,3109,3209,3211],[3312,3110,3210,3212],[3313,3111,3211,3213],[3314,3112,3212,3214],[3315,3113,3213,3215],[3316,3114,3214,3216],[3317,-1,3215,101181],[3318,3116,3216,3218],[-1,3117,101256,3219],[3320,3118,3218,3220],[3321,3119,3219,3221],[3322,3120,3220,3222],[3323,3121,3221,3223],[3324,3122,3222,3224],[3325,3123,3223,3225],[3326,3124,3224,102085],[3327,3125,3225,3227],[3328,3126,3226,3228],[3329,3127,3227,3229],[3330,3128,3228,3230],[3331,3129,3229,3231],[3332,3130,3230,-1],[3333,3131,-1,3233],[3334,3132,3232,3234],[3335,3133,3233,3235],[3336,3134,3234,3236],[3337,3135,3235,3237],[3338,3136,3236,3238],[3339,3137,3237,3239],[3340,3138,3238,3240],[3341,3139,3239,3241],[3342,3140,3240,3242],[3343,3141,3241,3243],[3344,3142,3242,3244],[3345,3143,3243,3245],[3346,3144,3244,3246],[3347,3145,3245,3247],[3348,3146,3246,3248],[3349,3147,3247,3249],[3350,3148,3248,100970],[3351,3149,3249,3251],[3352,3150,101015,101056],[3353,3151,101105,3253],[3354,3152,3252,3254],[3355,3153,3253,3255],[3356,3154,3254,3256],[3357,3155,3255,3257],[3358,3156,3256,3258],[3359,3157,3257,3259],[3360,3158,3258,3260],[3361,3159,3259,3261],[3362,3160,3260,3262],[3363,3161,3261,3263],[3364,3162,3262,3264],[3365,3163,3263,3265],[3366,3164,3264,3266],[3367,3165,3265,3267],[3368,3166,3266,3268],[3369,3167,3267,3269],[3370,3168,3268,3270],[3371,3169,3269,3271],[3372,3170,3270,3272],[3373,3171,3271,100290],[3374,3172,3272,3274],[3375,3173,3273,3275],[3376,3174,3274,3276],[3377,-1,100403,3277],[3378,3176,3276,3278],[3379,3177,3277,3279],[3380,3178,3278,3280],[3381,3179,3279,3281],[3382,3180,3280,3282],[3383,3181,3281,3283],[3384,3182,3282,3284],[3385,3183,3283,3285],[3386,3184,3284,3286],[3387,3185,3285,3287],[3388,3186,3286,3288],[3389,3187,3287,3289],[3390,3188,3288,3290],[3391,3189,3289,3291],[3392,3190,3290,3292],[3393,3191,3291,3293],[3394,3192,3292,3294],[3395,3193,3293,3295],[3396,3194,3294,3296],[3397,3195,3295,3297],[3398,3196,3296,3298],[3399,3197,3297,3299],[3400,3198,3298,3300],[3401,3199,3299,3301],[3402,3200,3300,3302],[3403,3201,3301,3303],[3404,3202,3302,3304],[3405,3203,3303,3305],[3406,3204,3304,3306],[3407,3205,3305,3307],[3408,3206,3306,3308],[3409,3207,3307,3309],[3410,3208,3308,3310],[3411,3209,3309,3311],[3412,3210,3310,3312],[3413,3211,3311,3313],[3414,3212,3312,3314],[3415,3213,3313,3315],[3416,3214,3314,3316],[3417,3215,3315,3317],[3418,3216,3316,101182],[3419,3217,3317,3319],[3420,3218,3318,3320],[3421,3219,101257,3321],[3422,3220,3320,3322],[3423,3221,3321,3323],[3424,3222,3322,3324],[3425,3223,3323,3325],[3426,3224,3324,3326],[3427,3225,3325,102086],[3428,3226,3326,3328],[3429,3227,3327,3329],[3430,3228,3328,3330],[3431,3229,3329,3331],[3432,3230,3330,3332],[3433,3231,3331,-1],[3434,3232,-1,3334],[3435,3233,3333,3335],[3436,3234,3334,3336],[3437,3235,3335,3337],[3438,3236,3336,3338],[3439,3237,3337,3339],[3440,3238,3338,3340],[3441,3239,3339,3341],[3442,3240,3340,3342],[3443,3241,3341,3343],[3444,3242,3342,3344],[3445,3243,3343,3345],[3446,3244,3344,3346],[3447,3245,3345,3347],[3448,3246,3346,3348],[3449,3247,3347,3349],[3450,3248,3348,3350],[-1,3249,3349,100971],[3452,3250,3350,3352],[3453,3251,101016,101057],[3454,3252,101106,3354],[3455,3253,3353,3355],[3456,3254,3354,3356],[3457,3255,3355,3357],[3458,3256,3356,3358],[3459,3257,3357,3359],[3460,3258,3358,3360],[3461,3259,3359,3361],[3462,3260,3360,3362],[3463,3261,3361,3363],[3464,3262,3362,3364],[3465,3263,3363,3365],[3466,3264,3364,3366],[3467,3265,3365,3367],[3468,3266,3366,3368],[3469,3267,3367,3369],[3470,3268,3368,3370],[3471,3269,3369,3371],[3472,3270,3370,3372],[3473,3271,3371,3373],[3474,3272,3372,100291],[3475,3273,3373,3375],[3476,3274,3374,3376],[3477,3275,3375,3377],[3478,3276,100404,3378],[3479,3277,3377,3379],[3480,3278,3378,3380],[3481,3279,3379,3381],[3482,3280,3380,3382],[3483,3281,3381,3383],[3484,3282,3382,3384],[3485,3283,3383,3385],[3486,3284,3384,3386],[3487,3285,3385,3387],[3488,3286,3386,3388],[3489,3287,3387,3389],[3490,3288,3388,3390],[3491,3289,3389,3391],[3492,3290,3390,3392],[3493,3291,3391,3393],[3494,3292,3392,3394],[3495,3293,3393,3395],[3496,3294,3394,3396],[3497,3295,3395,3397],[3498,3296,3396,3398],[3499,3297,3397,3399],[3500,3298,3398,3400],[3501,3299,3399,3401],[3502,3300,3400,3402],[3503,3301,3401,3403],[3504,3302,3402,3404],[3505,3303,3403,3405],[3506,3304,3404,3406],[3507,3305,3405,3407],[3508,3306,3406,3408],[3509,3307,3407,3409],[3510,3308,3408,3410],[3511,3309,3409,3411],[3512,3310,3410,3412],[3513,3311,3411,3413],[3514,3312,3412,3414],[3515,3313,3413,3415],[3516,3314,3414,3416],[3517,3315,3415,3417],[3518,3316,3416,3418],[3519,3317,3417,101183],[3520,3318,3418,3420],[3521,3319,3419,3421],[3522,3320,101258,3422],[3523,3321,3421,3423],[3524,3322,3422,3424],[3525,3323,3423,3425],[3526,3324,3424,3426],[3527,3325,3425,3427],[3528,3326,3426,102087],[3529,3327,3427,3429],[3530,3328,3428,3430],[3531,3329,3429,3431],[3532,3330,3430,3432],[3533,3331,3431,3433],[3534,3332,3432,-1],[3535,3333,-1,3435],[3536,3334,3434,3436],[3537,3335,3435,3437],[3538,3336,3436,3438],[3539,3337,3437,3439],[3540,3338,3438,3440],[3541,3339,3439,3441],[3542,3340,3440,3442],[3543,3341,3441,3443],[3544,3342,3442,3444],[3545,3343,3443,3445],[3546,3344,3444,3446],[3547,3345,3445,3447],[3548,3346,3446,3448],[3549,3347,3447,3449],[3550,3348,3448,3450],[3551,3349,3449,100972],[3552,3350,3450,3452],[3553,3351,3451,3453],[3554,3352,101017,101058],[-1,3353,101107,3455],[3556,3354,3454,3456],[3557,3355,3455,3457],[3558,3356,3456,3458],[3559,3357,3457,3459],[3560,3358,3458,3460],[3561,3359,3459,3461],[3562,3360,3460,3462],[3563,3361,3461,3463],[3564,3362,3462,3464],[3565,3363,3463,3465],[3566,3364,3464,3466],[3567,3365,3465,3467],[3568,3366,3466,3468],[3569,3367,3467,3469],[3570,3368,3468,3470],[3571,3369,3469,3471],[3572,3370,3470,3472],[3573,3371,3471,3473],[3574,3372,3472,3474],[3575,3373,3473,100292],[3576,3374,3474,3476],[3577,3375,3475,3477],[3578,3376,3476,3478],[3579,3377,100405,3479],[3580,3378,3478,3480],[3581,3379,3479,3481],[3582,3380,3480,3482],[3583,3381,3481,3483],[3584,3382,3482,3484],[3585,3383,3483,3485],[3586,3384,3484,3486],[3587,3385,3485,3487],[3588,3386,3486,3488],[3589,3387,3487,3489],[3590,3388,3488,3490],[3591,3389,3489,3491],[3592,3390,3490,3492],[3593,3391,3491,3493],[3594,3392,3492,3494],[3595,3393,3493,3495],[3596,3394,3494,3496],[3597,3395,3495,3497],[3598,3396,3496,3498],[3599,3397,3497,3499],[3600,3398,3498,3500],[3601,3399,3499,3501],[3602,3400,3500,3502],[3603,3401,3501,3503],[3604,3402,3502,3504],[3605,3403,3503,3505],[3606,3404,3504,3506],[3607,3405,3505,3507],[3608,3406,3506,3508],[3609,3407,3507,3509],[3610,3408,3508,3510],[3611,3409,3509,3511],[3612,3410,3510,3512],[3613,3411,3511,3513],[3614,3412,3512,3514],[3615,3413,3513,3515],[3616,3414,3514,3516],[3617,3415,3515,3517],[3618,3416,3516,3518],[3619,3417,3517,3519],[3620,3418,3518,101184],[3621,3419,3519,3521],[3622,3420,3520,3522],[3623,3421,101259,3523],[3624,3422,3522,3524],[3625,3423,3523,3525],[3626,3424,3524,3526],[3627,3425,3525,3527],[3628,3426,3526,3528],[3629,3427,3527,102088],[3630,3428,3528,3530],[3631,3429,3529,3531],[3632,3430,3530,3532],[3633,3431,3531,3533],[3634,3432,3532,3534],[3635,3433,3533,-1],[3636,3434,-1,3536],[3637,3435,3535,3537],[3638,3436,3536,3538],[3639,3437,3537,3539],[3640,3438,3538,3540],[3641,3439,3539,3541],[3642,3440,3540,3542],[3643,3441,3541,3543],[3644,3442,3542,3544],[3645,3443,3543,3545],[3646,3444,3544,3546],[3647,3445,3545,3547],[3648,3446,3546,3548],[3649,3447,3547,3549],[3650,3448,3548,3550],[3651,3449,3549,3551],[3652,3450,3550,100973],[3653,3451,3551,3553],[3654,3452,3552,3554],[3655,3453,101018,101059],[3656,3454,3554,3556],[3657,3455,101108,3557],[3658,3456,3556,3558],[3659,3457,3557,3559],[3660,3458,3558,3560],[3661,3459,3559,3561],[3662,3460,3560,3562],[3663,3461,3561,3563],[3664,3462,3562,3564],[3665,3463,3563,3565],[3666,3464,3564,3566],[3667,3465,3565,3567],[3668,3466,3566,3568],[3669,3467,3567,3569],[3670,3468,3568,3570],[3671,3469,3569,3571],[3672,3470,3570,3572],[3673,3471,3571,3573],[3674,3472,3572,3574],[3675,3473,3573,3575],[3676,3474,3574,100293],[3677,3475,3575,3577],[3678,3476,3576,3578],[3679,3477,3577,3579],[3680,3478,100328,3580],[3681,3479,3579,3581],[3682,3480,3580,3582],[3683,3481,3581,3583],[3684,3482,3582,3584],[3685,3483,3583,3585],[3686,3484,3584,3586],[3687,3485,3585,3587],[3688,3486,3586,3588],[3689,3487,3587,3589],[3690,3488,3588,3590],[3691,3489,3589,3591],[3692,3490,3590,3592],[3693,3491,3591,3593],[3694,3492,3592,3594],[3695,3493,3593,3595],[3696,3494,3594,3596],[3697,3495,3595,3597],[3698,3496,3596,3598],[3699,3497,3597,3599],[3700,3498,3598,3600],[3701,3499,3599,3601],[3702,3500,3600,3602],[3703,3501,3601,3603],[3704,3502,3602,3604],[3705,3503,3603,3605],[3706,3504,3604,3606],[3707,3505,3605,3607],[3708,3506,3606,3608],[3709,3507,3607,3609],[3710,3508,3608,3610],[3711,3509,3609,3611],[3712,3510,3610,3612],[3713,3511,3611,3613],[3714,3512,3612,3614],[3715,3513,3613,3615],[3716,3514,3614,3616],[3717,3515,3615,3617],[3718,3516,3616,3618],[3719,3517,3617,3619],[3720,3518,3618,3620],[3721,3519,3619,101185],[3722,3520,3620,3622],[3723,3521,3621,3623],[3724,3522,101260,3624],[3725,3523,3623,3625],[3726,3524,3624,3626],[3727,3525,3625,3627],[3728,3526,3626,3628],[3729,3527,3627,3629],[3730,3528,3628,102089],[3731,3529,3629,3631],[3732,3530,3630,3632],[3733,3531,3631,3633],[3734,3532,3632,3634],[3735,3533,3633,3635],[3736,3534,3634,-1],[3737,3535,-1,3637],[3738,3536,3636,3638],[3739,3537,3637,3639],[3740,3538,3638,3640],[3741,3539,3639,3641],[3742,3540,3640,3642],[3743,3541,3641,3643],[3744,3542,3642,3644],[3745,3543,3643,3645],[3746,3544,3644,3646],[3747,3545,3645,3647],[3748,3546,3646,3648],[3749,3547,3647,3649],[3750,3548,3648,3650],[3751,3549,3649,3651],[3752,3550,3650,3652],[3753,3551,3651,100974],[3754,3552,3652,3654],[3755,3553,3653,3655],[3756,3554,101019,101060],[3757,3555,3655,3657],[3758,3556,101109,3658],[3759,3557,3657,3659],[3760,3558,3658,3660],[3761,3559,3659,3661],[3762,3560,3660,3662],[3763,3561,3661,3663],[3764,3562,3662,3664],[3765,3563,3663,3665],[3766,3564,3664,3666],[3767,3565,3665,3667],[3768,3566,3666,3668],[3769,3567,3667,3669],[3770,3568,3668,3670],[3771,3569,3669,3671],[3772,3570,3670,3672],[3773,3571,3671,3673],[-1,3572,3672,101370],[3775,3573,101429,3675],[3776,3574,3674,3676],[3777,3575,3675,100294],[3778,3576,3676,3678],[3779,3577,3677,3679],[3780,3578,3678,3680],[3781,3579,100329,3681],[3782,3580,3680,3682],[3783,3581,3681,3683],[3784,3582,3682,3684],[3785,3583,3683,3685],[3786,3584,3684,3686],[3787,3585,3685,3687],[3788,3586,3686,3688],[3789,3587,3687,3689],[3790,3588,3688,3690],[3791,3589,3689,3691],[3792,3590,3690,3692],[3793,3591,3691,3693],[3794,3592,3692,3694],[3795,3593,3693,3695],[3796,3594,3694,3696],[3797,3595,3695,3697],[3798,3596,3696,3698],[3799,3597,3697,3699],[3800,3598,3698,3700],[3801,3599,3699,3701],[3802,3600,3700,3702],[3803,3601,3701,3703],[3804,3602,3702,3704],[3805,3603,3703,3705],[3806,3604,3704,3706],[3807,3605,3705,3707],[3808,3606,3706,3708],[3809,3607,3707,3709],[3810,3608,3708,3710],[3811,3609,3709,3711],[3812,3610,3710,3712],[3813,3611,3711,3713],[3814,3612,3712,3714],[3815,3613,3713,3715],[3816,3614,3714,3716],[3817,3615,3715,3717],[3818,3616,3716,3718],[3819,3617,3717,3719],[3820,3618,3718,3720],[3821,3619,3719,3721],[3822,3620,3720,101186],[3823,3621,3721,3723],[3824,3622,3722,3724],[3825,3623,101261,3725],[3826,3624,3724,3726],[3827,3625,3725,3727],[3828,3626,3726,3728],[3829,3627,3727,3729],[3830,3628,3728,3730],[3831,3629,3729,102090],[3832,3630,3730,3732],[3833,3631,3731,3733],[3834,3632,3732,3734],[3835,3633,3733,3735],[3836,3634,3734,3736],[3837,3635,3735,-1],[3838,3636,-1,3738],[3839,3637,3737,3739],[3840,3638,3738,3740],[3841,3639,3739,3741],[3842,3640,3740,3742],[3843,3641,3741,3743],[3844,3642,3742,3744],[3845,3643,3743,3745],[3846,3644,3744,3746],[3847,3645,3745,3747],[3848,3646,3746,3748],[3849,3647,3747,3749],[3850,3648,3748,3750],[3851,3649,3749,3751],[3852,3650,3750,3752],[3853,3651,3751,3753],[3854,3652,3752,100975],[3855,3653,3753,3755],[3856,3654,3754,3756],[3857,3655,101020,101061],[3858,3656,3756,3758],[3859,3657,101110,3759],[3860,3658,3758,3760],[3861,3659,3759,3761],[3862,3660,3760,3762],[3863,3661,3761,3763],[3864,3662,3762,3764],[3865,3663,3763,3765],[3866,3664,3764,3766],[3867,3665,3765,3767],[3868,3666,3766,3768],[3869,3667,3767,3769],[3870,3668,3768,3770],[3871,3669,3769,3771],[3872,3670,3770,3772],[3873,3671,3771,3773],[3874,3672,3772,101371],[3875,3673,3773,3775],[3876,3674,101430,3776],[3877,3675,3775,3777],[3878,3676,3776,100295],[3879,3677,3777,3779],[3880,3678,3778,3780],[3881,-1,100330,3781],[3882,3680,3780,3782],[3883,3681,3781,3783],[3884,3682,3782,3784],[3885,3683,3783,3785],[3886,3684,3784,3786],[3887,3685,3785,3787],[3888,3686,3786,3788],[3889,3687,3787,3789],[3890,3688,3788,3790],[3891,3689,3789,3791],[3892,3690,3790,3792],[3893,3691,3791,3793],[3894,3692,3792,3794],[3895,3693,3793,3795],[3896,3694,3794,3796],[3897,3695,3795,3797],[3898,3696,3796,3798],[3899,3697,3797,3799],[3900,3698,3798,3800],[3901,3699,3799,3801],[3902,3700,3800,3802],[3903,3701,3801,3803],[3904,3702,3802,3804],[3905,3703,3803,3805],[3906,3704,3804,3806],[3907,3705,3805,3807],[3908,3706,3806,3808],[3909,3707,3807,3809],[3910,3708,3808,3810],[3911,3709,3809,3811],[3912,3710,3810,3812],[3913,3711,3811,3813],[3914,3712,3812,3814],[3915,3713,3813,3815],[3916,3714,3814,3816],[3917,3715,3815,3817],[3918,3716,3816,3818],[3919,3717,3817,3819],[3920,3718,3818,3820],[3921,3719,3819,3821],[3922,3720,3820,3822],[3923,3721,3821,101187],[3924,3722,3822,3824],[3925,3723,3823,3825],[3926,3724,101262,3826],[3927,3725,3825,3827],[3928,3726,3826,3828],[3929,3727,3827,3829],[3930,3728,3828,3830],[3931,3729,3829,3831],[3932,3730,3830,102091],[3933,3731,3831,3833],[3934,3732,3832,3834],[3935,3733,3833,3835],[3936,3734,3834,3836],[3937,3735,3835,3837],[3938,3736,3836,-1],[3939,3737,-1,3839],[3940,3738,3838,3840],[3941,3739,3839,3841],[3942,3740,3840,3842],[3943,3741,3841,3843],[3944,3742,3842,3844],[3945,3743,3843,3845],[3946,3744,3844,3846],[3947,3745,3845,3847],[3948,3746,3846,3848],[3949,3747,3847,3849],[3950,3748,3848,3850],[3951,3749,3849,3851],[3952,3750,3850,3852],[3953,3751,3851,3853],[3954,3752,3852,3854],[3955,3753,3853,100976],[3956,3754,3854,3856],[3957,3755,3855,3857],[3958,3756,101021,3858],[3959,-1,3857,101062],[-1,3758,101111,3860],[3961,3759,3859,3861],[3962,3760,3860,3862],[3963,3761,3861,3863],[3964,3762,3862,3864],[3965,3763,3863,3865],[3966,3764,3864,3866],[3967,3765,3865,3867],[3968,3766,3866,3868],[3969,3767,3867,3869],[3970,3768,3868,3870],[3971,3769,3869,3871],[3972,3770,3870,3872],[3973,3771,3871,3873],[3974,3772,3872,3874],[3975,3773,3873,101372],[3976,3774,3874,3876],[3977,3775,101431,3877],[3978,3776,3876,3878],[3979,3777,3877,100296],[3980,3778,3878,3880],[3981,3779,3879,3881],[3982,3780,100331,3882],[3983,3781,3881,3883],[3984,3782,3882,3884],[3985,3783,3883,3885],[3986,3784,3884,3886],[3987,3785,3885,3887],[3988,3786,3886,3888],[3989,3787,3887,3889],[3990,3788,3888,3890],[3991,3789,3889,3891],[3992,3790,3890,3892],[3993,3791,3891,3893],[3994,3792,3892,3894],[3995,3793,3893,3895],[3996,3794,3894,3896],[3997,3795,3895,3897],[3998,3796,3896,3898],[3999,3797,3897,3899],[4000,3798,3898,3900],[4001,3799,3899,3901],[4002,3800,3900,3902],[4003,3801,3901,3903],[4004,3802,3902,3904],[4005,3803,3903,3905],[4006,3804,3904,3906],[4007,3805,3905,3907],[4008,3806,3906,3908],[4009,3807,3907,3909],[4010,3808,3908,3910],[4011,3809,3909,3911],[4012,3810,3910,3912],[4013,3811,3911,3913],[4014,3812,3912,3914],[4015,3813,3913,3915],[4016,3814,3914,3916],[4017,3815,3915,3917],[4018,3816,3916,3918],[4019,3817,3917,3919],[4020,3818,3918,3920],[4021,3819,3919,3921],[4022,3820,3920,3922],[4023,3821,3921,3923],[4024,3822,3922,101188],[4025,3823,3923,3925],[4026,3824,3924,3926],[4027,3825,101263,3927],[4028,3826,3926,3928],[4029,3827,3927,3929],[4030,3828,3928,3930],[4031,3829,3929,3931],[4032,3830,3930,3932],[4033,3831,3931,102092],[4034,3832,3932,3934],[4035,3833,3933,3935],[4036,3834,3934,3936],[4037,3835,3935,3937],[4038,3836,3936,3938],[4039,3837,3937,-1],[4040,3838,-1,3940],[4041,3839,3939,3941],[4042,3840,3940,3942],[4043,3841,3941,3943],[4044,3842,3942,3944],[4045,3843,3943,3945],[4046,3844,3944,3946],[4047,3845,3945,3947],[4048,3846,3946,3948],[4049,3847,3947,3949],[4050,3848,3948,3950],[4051,3849,3949,3951],[4052,3850,3950,3952],[4053,3851,3951,3953],[4054,3852,3952,3954],[4055,3853,3953,3955],[4056,3854,3954,100977],[4057,3855,3955,3957],[4058,3856,3956,3958],[4059,3857,101022,3959],[4060,3858,3958,101063],[4061,3859,3959,3961],[4062,3860,101112,3962],[4063,3861,3961,3963],[4064,3862,3962,3964],[4065,3863,3963,3965],[4066,3864,3964,3966],[4067,3865,3965,3967],[4068,3866,3966,3968],[4069,3867,3967,3969],[4070,3868,3968,3970],[4071,3869,3969,3971],[4072,3870,3970,3972],[4073,3871,3971,3973],[4074,3872,3972,3974],[4075,3873,3973,3975],[-1,3874,3974,101373],[4077,-1,101432,3977],[4078,3876,3976,3978],[4079,3877,3977,3979],[4080,3878,3978,100297],[4081,3879,3979,3981],[4082,3880,3980,3982],[4083,3881,100332,3983],[4084,3882,3982,3984],[4085,3883,3983,3985],[4086,3884,3984,3986],[4087,3885,3985,3987],[4088,3886,3986,3988],[4089,3887,3987,3989],[4090,3888,3988,3990],[4091,3889,3989,3991],[4092,3890,3990,3992],[4093,3891,3991,3993],[4094,3892,3992,3994],[4095,3893,3993,3995],[4096,3894,3994,3996],[4097,3895,3995,3997],[4098,3896,3996,3998],[4099,3897,3997,3999],[4100,3898,3998,4000],[4101,3899,3999,4001],[4102,3900,4000,4002],[4103,3901,4001,4003],[4104,3902,4002,4004],[4105,3903,4003,4005],[4106,3904,4004,4006],[4107,3905,4005,4007],[4108,3906,4006,4008],[4109,3907,4007,4009],[4110,3908,4008,4010],[4111,3909,4009,4011],[4112,3910,4010,4012],[4113,3911,4011,4013],[4114,3912,4012,4014],[4115,3913,4013,4015],[4116,3914,4014,4016],[4117,3915,4015,4017],[4118,3916,4016,4018],[4119,3917,4017,4019],[4120,3918,4018,4020],[4121,3919,4019,4021],[4122,3920,4020,4022],[4123,3921,4021,4023],[4124,3922,4022,4024],[4125,3923,4023,4025],[4126,-1,4024,101189],[4127,3925,4025,4027],[4128,3926,101264,4028],[4129,3927,4027,4029],[4130,3928,4028,4030],[4131,3929,4029,4031],[4132,3930,4030,4032],[4133,3931,4031,4033],[4134,3932,4032,102093],[4135,3933,4033,4035],[4136,3934,4034,4036],[4137,3935,4035,4037],[4138,3936,4036,4038],[4139,3937,4037,4039],[4140,3938,4038,-1],[4141,3939,-1,101868],[4142,3940,101961,4042],[4143,3941,4041,4043],[4144,3942,4042,4044],[4145,3943,4043,4045],[4146,3944,4044,4046],[4147,3945,4045,4047],[4148,3946,4046,4048],[4149,3947,4047,4049],[4150,3948,4048,4050],[4151,3949,4049,4051],[4152,3950,4050,4052],[4153,3951,4051,4053],[4154,3952,4052,4054],[4155,3953,4053,4055],[4156,3954,4054,4056],[4157,3955,4055,100978],[4158,3956,4056,4058],[4159,3957,4057,4059],[4160,3958,101023,4060],[4161,3959,4059,101064],[4162,3960,4060,4062],[4163,3961,101113,4063],[4164,3962,4062,4064],[4165,3963,4063,4065],[4166,3964,4064,4066],[4167,3965,4065,4067],[4168,3966,4066,4068],[4169,3967,4067,4069],[4170,3968,4068,4070],[4171,3969,4069,4071],[4172,3970,4070,4072],[4173,3971,4071,4073],[4174,3972,4072,4074],[4175,3973,4073,4075],[4176,3974,4074,101374],[4177,3975,4075,4077],[4178,3976,101433,4078],[4179,3977,4077,4079],[4180,3978,4078,4080],[4181,3979,4079,4081],[4182,-1,4080,100936],[4183,-1,100949,4083],[4184,3982,4082,4084],[4185,3983,4083,4085],[4186,3984,4084,4086],[4187,3985,4085,4087],[4188,3986,4086,4088],[4189,3987,4087,4089],[4190,3988,4088,4090],[4191,3989,4089,4091],[4192,3990,4090,4092],[4193,3991,4091,4093],[4194,3992,4092,4094],[4195,3993,4093,4095],[4196,3994,4094,4096],[4197,3995,4095,4097],[4198,3996,4096,4098],[4199,3997,4097,4099],[4200,3998,4098,4100],[-1,3999,4099,100805],[4202,4000,100728,4102],[4203,4001,4101,4103],[4204,4002,4102,4104],[4205,4003,4103,4105],[4206,4004,4104,4106],[4207,4005,4105,4107],[4208,4006,4106,100882],[4209,4007,100909,4109],[4210,4008,4108,4110],[4211,4009,4109,4111],[4212,4010,4110,4112],[4213,4011,4111,4113],[4214,4012,4112,4114],[4215,4013,4113,4115],[4216,4014,4114,4116],[4217,4015,4115,4117],[4218,4016,4116,4118],[4219,4017,4117,4119],[4220,4018,4118,4120],[4221,4019,4119,4121],[4222,4020,4120,4122],[4223,4021,4121,4123],[4224,4022,4122,4124],[4225,4023,4123,4125],[4226,4024,4124,4126],[4227,4025,4125,101190],[4228,4026,4126,4128],[4229,4027,101265,4129],[4230,4028,4128,4130],[4231,4029,4129,4131],[4232,4030,4130,4132],[4233,4031,4131,4133],[4234,4032,4132,4134],[4235,4033,4133,102094],[4236,4034,4134,4136],[4237,4035,4135,4137],[4238,4036,4136,4138],[4239,4037,4137,4139],[4240,4038,4138,4140],[4241,4039,4139,-1],[4242,4040,-1,101869],[-1,4041,101962,4143],[4244,4042,4142,4144],[4245,4043,4143,4145],[4246,4044,4144,4146],[4247,4045,4145,4147],[4248,4046,4146,4148],[4249,4047,4147,4149],[4250,4048,4148,4150],[4251,4049,4149,4151],[4252,4050,4150,4152],[4253,4051,4151,4153],[4254,4052,4152,4154],[4255,4053,4153,4155],[4256,4054,4154,4156],[4257,4055,4155,4157],[4258,4056,4156,100979],[4259,4057,4157,4159],[4260,4058,4158,4160],[4261,4059,101024,4161],[4262,4060,4160,101065],[4263,4061,4161,4163],[4264,4062,101114,4164],[4265,4063,4163,4165],[4266,4064,4164,4166],[4267,4065,4165,4167],[4268,4066,4166,4168],[4269,4067,4167,4169],[4270,4068,4168,4170],[4271,4069,4169,4171],[4272,4070,4170,4172],[4273,4071,4171,4173],[4274,4072,4172,4174],[4275,4073,4173,4175],[4276,4074,4174,4176],[4277,4075,4175,101375],[4278,4076,4176,4178],[4279,4077,101434,4179],[4280,4078,4178,4180],[4281,4079,4179,4181],[4282,4080,4180,4182],[4283,4081,4181,100937],[4284,4082,100950,4184],[4285,4083,4183,4185],[4286,4084,4184,4186],[4287,4085,4185,4187],[4288,4086,4186,4188],[4289,4087,4187,4189],[4290,4088,4188,4190],[4291,4089,4189,4191],[4292,4090,4190,4192],[4293,4091,4191,4193],[4294,4092,4192,4194],[4295,4093,4193,4195],[4296,4094,4194,4196],[4297,4095,4195,4197],[4298,4096,4196,4198],[4299,4097,4197,4199],[4300,4098,4198,4200],[4301,4099,4199,100806],[4302,4100,4200,4202],[4303,4101,100729,4203],[4304,4102,4202,4204],[4305,4103,4203,4205],[4306,4104,4204,4206],[4307,4105,4205,4207],[4308,4106,4206,4208],[4309,4107,4207,100883],[4310,4108,100910,4210],[4311,4109,4209,4211],[4312,4110,4210,4212],[4313,4111,4211,4213],[4314,4112,4212,4214],[4315,4113,4213,4215],[4316,4114,4214,4216],[4317,4115,4215,4217],[4318,4116,4216,4218],[4319,4117,4217,4219],[4320,4118,4218,4220],[4321,4119,4219,4221],[4322,4120,4220,4222],[4323,4121,4221,4223],[4324,4122,4222,4224],[4325,4123,4223,4225],[4326,4124,4224,4226],[4327,4125,4225,4227],[4328,4126,4226,101191],[4329,4127,4227,4229],[-1,4128,101266,4230],[4331,4129,4229,4231],[4332,4130,4230,4232],[4333,4131,4231,4233],[4334,4132,4232,4234],[4335,4133,4233,4235],[4336,4134,4234,102095],[4337,4135,4235,4237],[4338,4136,4236,4238],[4339,4137,4237,4239],[4340,4138,4238,4240],[4341,4139,4239,4241],[4342,4140,4240,-1],[4343,4141,-1,101870],[4344,4142,4242,4244],[4345,4143,101963,4245],[4346,4144,4244,4246],[4347,4145,4245,4247],[4348,4146,4246,4248],[4349,4147,4247,4249],[4350,4148,4248,4250],[4351,4149,4249,4251],[4352,4150,4250,4252],[4353,4151,4251,4253],[4354,4152,4252,4254],[4355,4153,4253,4255],[4356,4154,4254,4256],[4357,4155,4255,4257],[4358,4156,4256,4258],[4359,4157,4257,100980],[4360,4158,4258,4260],[4361,4159,4259,4261],[4362,4160,101025,4262],[4363,4161,4261,101066],[4364,4162,4262,4264],[4365,4163,101115,4265],[4366,4164,4264,4266],[4367,4165,4265,4267],[4368,4166,4266,4268],[4369,4167,4267,4269],[4370,4168,4268,4270],[4371,4169,4269,4271],[4372,4170,4270,4272],[4373,4171,4271,4273],[4374,4172,4272,4274],[4375,4173,4273,4275],[4376,4174,4274,4276],[4377,4175,4275,4277],[-1,4176,4276,101376],[4379,4177,4277,4279],[4380,4178,101435,4280],[4381,4179,4279,4281],[4382,4180,4280,4282],[4383,4181,4281,4283],[4384,4182,4282,100938],[4385,4183,100951,4285],[4386,4184,4284,4286],[4387,4185,4285,4287],[4388,4186,4286,4288],[4389,4187,4287,4289],[4390,4188,4288,4290],[4391,4189,4289,100480],[4392,4190,100571,4292],[4393,4191,4291,4293],[4394,4192,4292,4294],[4395,4193,4293,4295],[4396,4194,4294,4296],[4397,4195,4295,4297],[4398,4196,4296,4298],[4399,4197,4297,4299],[4400,4198,4298,4300],[4401,4199,4299,4301],[4402,4200,4300,100807],[4403,4201,4301,4303],[4404,4202,100730,4304],[4405,4203,4303,4305],[4406,4204,4304,4306],[4407,4205,4305,4307],[4408,4206,4306,4308],[4409,4207,4307,4309],[4410,4208,4308,100884],[4411,4209,100911,4311],[4412,4210,4310,4312],[4413,4211,4311,4313],[4414,4212,4312,4314],[4415,4213,4313,4315],[4416,4214,4314,4316],[4417,4215,4315,4317],[4418,4216,4316,4318],[4419,4217,4317,4319],[4420,4218,4318,4320],[4421,4219,4319,4321],[4422,4220,4320,4322],[4423,4221,4321,4323],[4424,4222,4322,4324],[4425,4223,4323,4325],[4426,4224,4324,4326],[4427,4225,4325,4327],[4428,4226,4326,4328],[4429,4227,4327,101192],[4430,4228,4328,4330],[4431,4229,4329,4331],[4432,4230,101267,4332],[4433,4231,4331,4333],[4434,4232,4332,4334],[4435,4233,4333,4335],[4436,4234,4334,4336],[-1,4235,4335,102096],[4438,4236,4336,4338],[4439,4237,4337,4339],[4440,4238,4338,4340],[4441,4239,4339,4341],[4442,4240,4340,4342],[4443,4241,4341,-1],[4444,4242,-1,101871],[4445,4243,4343,4345],[4446,4244,101964,4346],[4447,4245,4345,4347],[4448,4246,4346,4348],[4449,4247,4347,4349],[4450,4248,4348,4350],[4451,4249,4349,4351],[4452,4250,4350,4352],[4453,4251,4351,4353],[4454,4252,4352,4354],[4455,4253,4353,4355],[4456,4254,4354,4356],[4457,4255,4355,4357],[4458,4256,4356,4358],[4459,4257,4357,4359],[4460,4258,4358,100981],[4461,4259,4359,4361],[4462,4260,4360,4362],[4463,4261,101026,4363],[4464,4262,4362,101067],[4465,4263,4363,4365],[4466,4264,101116,4366],[4467,4265,4365,4367],[4468,4266,4366,4368],[4469,4267,4367,4369],[4470,4268,4368,4370],[4471,4269,4369,4371],[4472,4270,4370,4372],[4473,4271,4371,4373],[4474,4272,4372,4374],[4475,4273,4373,4375],[4476,4274,4374,4376],[4477,4275,4375,4377],[4478,4276,4376,101377],[4479,4277,4377,4379],[4480,4278,4378,4380],[4481,4279,101436,4381],[4482,4280,4380,4382],[4483,4281,4381,4383],[4484,4282,4382,4384],[4485,4283,4383,100939],[4486,4284,100952,4386],[4487,4285,4385,4387],[4488,4286,4386,4388],[4489,4287,4387,4389],[4490,4288,4388,4390],[4491,4289,4389,4391],[4492,4290,4390,100481],[4493,4291,100572,4393],[4494,4292,4392,4394],[4495,4293,4393,4395],[4496,4294,4394,4396],[4497,4295,4395,4397],[4498,4296,4396,4398],[4499,4297,4397,4399],[4500,4298,4398,4400],[4501,4299,4399,4401],[4502,4300,4400,4402],[4503,4301,4401,100808],[4504,4302,4402,4404],[4505,4303,100731,4405],[4506,4304,4404,4406],[4507,4305,4405,4407],[4508,4306,4406,4408],[4509,4307,4407,4409],[4510,4308,4408,4410],[4511,4309,4409,100885],[4512,4310,100912,4412],[4513,4311,4411,4413],[4514,4312,4412,4414],[4515,4313,4413,4415],[4516,4314,4414,4416],[4517,4315,4415,4417],[4518,4316,4416,4418],[4519,4317,4417,4419],[4520,4318,4418,4420],[4521,4319,4419,4421],[4522,4320,4420,4422],[4523,4321,4421,4423],[4524,4322,4422,4424],[4525,4323,4423,4425],[4526,4324,4424,4426],[4527,4325,4425,4427],[4528,4326,4426,4428],[4529,4327,4427,4429],[4530,4328,4428,101193],[4531,4329,4429,4431],[4532,4330,4430,4432],[4533,4331,101268,4433],[4534,4332,4432,4434],[4535,4333,4433,4435],[4536,4334,4434,4436],[4537,4335,4435,102097],[4538,4336,4436,4438],[4539,4337,4437,4439],[4540,4338,4438,4440],[4541,4339,4439,4441],[4542,4340,4440,4442],[4543,4341,4441,4443],[4544,4342,4442,-1],[4545,4343,-1,4445],[4546,-1,4444,101872],[-1,4345,101965,4447],[4548,4346,4446,4448],[4549,4347,4447,4449],[4550,4348,4448,4450],[4551,4349,4449,4451],[4552,4350,4450,4452],[4553,4351,4451,4453],[4554,4352,4452,4454],[4555,4353,4453,4455],[4556,4354,4454,4456],[4557,4355,4455,4457],[4558,4356,4456,4458],[4559,4357,4457,4459],[4560,4358,4458,4460],[-1,4359,4459,100982],[4562,4360,4460,4462],[4563,-1,101027,4463],[4564,4362,4462,4464],[4565,4363,4463,101068],[4566,4364,4464,4466],[-1,4365,101117,4467],[4568,4366,4466,4468],[4569,4367,4467,4469],[4570,4368,4468,4470],[4571,4369,4469,4471],[4572,4370,4470,4472],[4573,4371,4471,4473],[4574,4372,4472,4474],[4575,4373,4473,4475],[4576,4374,4474,4476],[4577,4375,4475,4477],[4578,4376,4476,4478],[4579,4377,4477,101378],[4580,4378,4478,4480],[4581,4379,4479,4481],[4582,4380,101437,4482],[4583,4381,4481,4483],[4584,4382,4482,4484],[4585,4383,4483,4485],[4586,4384,4484,100940],[4587,4385,100953,4487],[4588,4386,4486,4488],[4589,4387,4487,4489],[4590,4388,4488,4490],[4591,4389,4489,4491],[4592,4390,4490,4492],[4593,4391,4491,100482],[4594,4392,100573,4494],[4595,4393,4493,4495],[4596,4394,4494,4496],[4597,4395,4495,4497],[4598,4396,4496,4498],[4599,4397,4497,4499],[4600,4398,4498,4500],[4601,4399,4499,4501],[4602,4400,4500,4502],[4603,4401,4501,4503],[4604,4402,4502,100809],[4605,4403,4503,4505],[4606,4404,100732,4506],[4607,4405,4505,4507],[4608,4406,4506,4508],[4609,4407,4507,4509],[4610,4408,4508,4510],[4611,4409,4509,4511],[4612,4410,4510,100886],[4613,4411,100913,4513],[4614,4412,4512,4514],[4615,4413,4513,4515],[4616,4414,4514,4516],[4617,4415,4515,4517],[4618,4416,4516,4518],[4619,4417,4517,4519],[4620,4418,4518,4520],[4621,4419,4519,4521],[4622,4420,4520,4522],[4623,4421,4521,4523],[4624,4422,4522,4524],[4625,4423,4523,4525],[4626,4424,4524,4526],[4627,4425,4525,4527],[4628,4426,4526,4528],[4629,4427,4527,4529],[4630,4428,4528,4530],[4631,4429,4529,101194],[4632,4430,4530,4532],[4633,4431,4531,4533],[4634,4432,101269,4534],[4635,4433,4533,4535],[4636,4434,4534,4536],[4637,4435,4535,4537],[4638,4436,4536,102098],[4639,4437,4537,4539],[4640,4438,4538,4540],[4641,4439,4539,4541],[4642,4440,4540,4542],[4643,4441,4541,4543],[4644,4442,4542,4544],[4645,4443,4543,-1],[4646,4444,-1,4546],[4647,4445,4545,101873],[4648,4446,4546,4548],[4649,4447,101966,4549],[4650,4448,4548,4550],[4651,4449,4549,4551],[4652,4450,4550,4552],[4653,4451,4551,4553],[4654,4452,4552,4554],[4655,4453,4553,4555],[4656,4454,4554,4556],[4657,4455,4555,4557],[4658,4456,4556,4558],[4659,4457,4557,4559],[4660,4458,4558,4560],[4661,4459,4559,100983],[4662,4460,4560,4562],[4663,4461,4561,4563],[4664,4462,101028,4564],[4665,4463,4563,4565],[4666,4464,4564,4566],[4667,-1,4565,101069],[4668,4466,4566,4568],[4669,4467,101118,4569],[4670,4468,4568,4570],[4671,4469,4569,4571],[4672,4470,4570,4572],[4673,4471,4571,4573],[4674,4472,4572,4574],[4675,4473,4573,4575],[4676,4474,4574,4576],[4677,4475,4575,4577],[4678,4476,4576,4578],[4679,4477,4577,4579],[4680,4478,4578,101379],[4681,4479,4579,4581],[4682,4480,4580,4582],[4683,4481,101438,4583],[4684,4482,4582,4584],[4685,4483,4583,4585],[4686,4484,4584,4586],[4687,4485,4585,100941],[4688,4486,100954,4588],[4689,4487,4587,4589],[4690,4488,4588,4590],[4691,4489,4589,4591],[4692,4490,4590,4592],[4693,4491,4591,4593],[4694,4492,4592,100483],[4695,4493,100574,4595],[4696,4494,4594,4596],[4697,4495,4595,4597],[4698,4496,4596,4598],[4699,4497,4597,4599],[4700,4498,4598,4600],[4701,4499,4599,4601],[4702,4500,4600,4602],[4703,4501,4601,4603],[4704,4502,4602,4604],[4705,4503,4603,100810],[4706,4504,4604,4606],[4707,4505,100733,4607],[4708,4506,4606,4608],[4709,4507,4607,4609],[4710,4508,4608,4610],[4711,4509,4609,4611],[4712,4510,4610,4612],[4713,4511,4611,100887],[4714,4512,100914,4614],[4715,4513,4613,4615],[4716,4514,4614,4616],[4717,4515,4615,4617],[4718,4516,4616,4618],[4719,4517,4617,4619],[4720,4518,4618,4620],[4721,4519,4619,4621],[4722,4520,4620,4622],[4723,4521,4621,4623],[4724,4522,4622,4624],[4725,4523,4623,4625],[4726,4524,4624,4626],[4727,4525,4625,4627],[4728,4526,4626,4628],[4729,4527,4627,4629],[4730,4528,4628,4630],[4731,4529,4629,4631],[4732,4530,4630,101195],[4733,4531,4631,4633],[4734,4532,4632,4634],[4735,4533,101270,4635],[4736,4534,4634,4636],[4737,4535,4635,4637],[4738,4536,4636,4638],[4739,4537,4637,102099],[4740,4538,4638,4640],[4741,4539,4639,4641],[4742,4540,4640,4642],[4743,4541,4641,4643],[4744,4542,4642,4644],[4745,4543,4643,4645],[4746,4544,4644,-1],[4747,4545,-1,4647],[4748,4546,4646,101874],[4749,4547,4647,4649],[-1,4548,101967,4650],[4751,4549,4649,4651],[4752,4550,4650,4652],[4753,4551,4651,4653],[4754,4552,4652,4654],[4755,4553,4653,4655],[4756,4554,4654,4656],[4757,4555,4655,4657],[4758,4556,4656,4658],[4759,4557,4657,4659],[4760,4558,4658,4660],[4761,4559,4659,4661],[4762,4560,4660,100984],[4763,4561,4661,4663],[4764,4562,4662,4664],[4765,4563,101029,4665],[4766,4564,4664,4666],[4767,4565,4665,4667],[4768,4566,4666,101070],[4769,4567,4667,4669],[4770,4568,101119,4670],[4771,4569,4669,4671],[4772,4570,4670,4672],[4773,4571,4671,4673],[4774,4572,4672,4674],[4775,4573,4673,4675],[4776,4574,4674,4676],[4777,4575,4675,4677],[4778,4576,4676,4678],[4779,4577,4677,4679],[4780,4578,4678,4680],[-1,4579,4679,101380],[4782,4580,4680,4682],[4783,-1,101439,4683],[4784,4582,4682,4684],[4785,4583,4683,4685],[4786,4584,4684,4686],[4787,4585,4685,4687],[4788,4586,4686,100942],[4789,4587,100955,4689],[4790,4588,4688,4690],[4791,4589,4689,4691],[4792,4590,4690,4692],[4793,4591,4691,4693],[4794,4592,4692,4694],[4795,4593,4693,100484],[4796,4594,100575,4696],[4797,4595,4695,4697],[4798,4596,4696,4698],[4799,4597,4697,4699],[4800,4598,4698,4700],[4801,4599,4699,4701],[4802,4600,4700,4702],[4803,4601,4701,4703],[4804,4602,4702,4704],[4805,4603,4703,4705],[4806,4604,4704,100811],[4807,4605,4705,4707],[4808,4606,100734,4708],[4809,4607,4707,4709],[4810,4608,4708,4710],[4811,4609,4709,4711],[4812,4610,4710,4712],[4813,4611,4711,4713],[4814,4612,4712,100888],[4815,4613,100915,4715],[4816,4614,4714,4716],[4817,4615,4715,4717],[4818,4616,4716,4718],[4819,4617,4717,4719],[4820,4618,4718,4720],[4821,4619,4719,4721],[4822,4620,4720,4722],[4823,4621,4721,4723],[4824,4622,4722,4724],[4825,4623,4723,4725],[4826,4624,4724,4726],[4827,4625,4725,4727],[4828,4626,4726,4728],[4829,4627,4727,4729],[4830,4628,4728,4730],[4831,4629,4729,4731],[4832,4630,4730,4732],[4833,4631,4731,4733],[4834,-1,4732,101196],[4835,4633,4733,4735],[4836,4634,101271,4736],[4837,4635,4735,4737],[4838,4636,4736,4738],[4839,4637,4737,4739],[4840,4638,4738,102100],[4841,4639,4739,4741],[4842,4640,4740,4742],[4843,4641,4741,4743],[4844,4642,4742,4744],[4845,4643,4743,4745],[4846,4644,4744,4746],[4847,4645,4745,-1],[4848,4646,-1,4748],[4849,4647,4747,101875],[4850,4648,4748,4750],[4851,4649,4749,4751],[4852,4650,101968,4752],[4853,4651,4751,4753],[4854,4652,4752,4754],[4855,4653,4753,4755],[4856,4654,4754,4756],[4857,4655,4755,4757],[4858,4656,4756,4758],[4859,4657,4757,4759],[4860,4658,4758,4760],[4861,4659,4759,4761],[4862,4660,4760,4762],[4863,4661,4761,100985],[4864,4662,4762,4764],[4865,4663,4763,4765],[4866,4664,101030,4766],[4867,4665,4765,4767],[4868,4666,4766,4768],[4869,4667,4767,101071],[4870,4668,4768,4770],[4871,4669,101120,4771],[4872,4670,4770,4772],[4873,4671,4771,4773],[4874,4672,4772,4774],[4875,4673,4773,4775],[4876,4674,4774,4776],[4877,4675,4775,4777],[4878,4676,4776,4778],[4879,4677,4777,4779],[4880,4678,4778,4780],[4881,4679,4779,101381],[4882,4680,4780,4782],[4883,4681,4781,4783],[4884,4682,101440,4784],[4885,4683,4783,4785],[4886,4684,4784,4786],[4887,4685,4785,4787],[4888,4686,4786,4788],[4889,4687,4787,100943],[4890,4688,100956,4790],[4891,4689,4789,4791],[4892,4690,4790,4792],[4893,4691,4791,4793],[4894,4692,4792,4794],[4895,4693,4793,4795],[4896,4694,4794,100485],[4897,4695,100576,4797],[4898,4696,4796,4798],[4899,4697,4797,4799],[4900,4698,4798,4800],[4901,4699,4799,4801],[4902,4700,4800,4802],[4903,4701,4801,4803],[4904,4702,4802,4804],[4905,4703,4803,4805],[4906,4704,4804,4806],[4907,4705,4805,100812],[4908,4706,4806,4808],[4909,4707,100735,4809],[4910,4708,4808,4810],[4911,4709,4809,4811],[4912,4710,4810,4812],[4913,4711,4811,4813],[4914,4712,4812,4814],[4915,4713,4813,100889],[4916,4714,100916,4816],[4917,4715,4815,4817],[4918,4716,4816,4818],[4919,4717,4817,4819],[4920,4718,4818,4820],[4921,4719,4819,4821],[4922,4720,4820,4822],[4923,4721,4821,4823],[4924,4722,4822,4824],[4925,4723,4823,4825],[4926,4724,4824,4826],[4927,4725,4825,4827],[4928,4726,4826,4828],[4929,4727,4827,4829],[4930,4728,4828,4830],[4931,4729,4829,4831],[4932,4730,4830,4832],[4933,4731,4831,4833],[4934,4732,4832,4834],[4935,4733,4833,101197],[4936,4734,4834,4836],[4937,4735,101272,4837],[4938,4736,4836,4838],[4939,4737,4837,4839],[4940,4738,4838,4840],[4941,4739,4839,102101],[4942,4740,4840,4842],[4943,4741,4841,4843],[4944,4742,4842,4844],[4945,4743,4843,4845],[4946,4744,4844,4846],[4947,4745,4845,4847],[4948,4746,4846,-1],[4949,4747,-1,4849],[4950,4748,4848,4850],[4951,-1,4849,101876],[4952,4750,4850,4852],[-1,4751,101969,4853],[4954,4752,4852,4854],[4955,4753,4853,4855],[4956,4754,4854,4856],[4957,4755,4855,4857],[4958,4756,4856,4858],[4959,4757,4857,4859],[4960,4758,4858,4860],[4961,4759,4859,4861],[4962,4760,4860,4862],[4963,4761,4861,4863],[4964,4762,4862,100986],[4965,4763,4863,4865],[4966,4764,4864,4866],[4967,4765,101031,4867],[4968,4766,4866,4868],[4969,4767,4867,4869],[4970,4768,4868,101072],[4971,4769,4869,4871],[4972,4770,101121,4872],[4973,4771,4871,4873],[4974,4772,4872,4874],[4975,4773,4873,4875],[4976,4774,4874,4876],[4977,4775,4875,4877],[4978,4776,4876,4878],[4979,4777,4877,4879],[4980,4778,4878,4880],[4981,4779,4879,4881],[4982,4780,4880,101382],[4983,4781,4881,4883],[4984,4782,4882,4884],[4985,4783,101441,4885],[4986,4784,4884,4886],[4987,4785,4885,4887],[4988,4786,4886,4888],[4989,4787,4887,4889],[4990,4788,4888,100944],[4991,4789,100957,4891],[4992,4790,4890,4892],[4993,4791,4891,4893],[4994,4792,4892,4894],[4995,4793,4893,4895],[4996,4794,4894,4896],[4997,4795,4895,100486],[-1,4796,100577,4898],[4999,4797,4897,4899],[5000,4798,4898,4900],[5001,4799,4899,4901],[5002,4800,4900,4902],[5003,4801,4901,4903],[5004,4802,4902,4904],[5005,4803,4903,4905],[5006,4804,4904,4906],[5007,4805,4905,4907],[5008,4806,4906,100813],[5009,4807,4907,4909],[5010,4808,100736,4910],[5011,4809,4909,4911],[5012,4810,4910,4912],[5013,4811,4911,4913],[5014,4812,4912,4914],[5015,4813,4913,4915],[5016,4814,4914,100890],[5017,4815,100917,4917],[5018,4816,4916,4918],[5019,4817,4917,4919],[5020,4818,4918,4920],[5021,4819,4919,4921],[5022,4820,4920,4922],[5023,4821,4921,4923],[5024,4822,4922,4924],[5025,4823,4923,4925],[5026,4824,4924,4926],[5027,4825,4925,4927],[5028,4826,4926,4928],[5029,4827,4927,4929],[5030,4828,4928,4930],[5031,4829,4929,4931],[5032,4830,4930,4932],[5033,4831,4931,4933],[5034,4832,4932,4934],[5035,4833,4933,4935],[5036,4834,4934,101198],[5037,4835,4935,4937],[5038,4836,101273,4938],[5039,4837,4937,4939],[5040,4838,4938,4940],[5041,4839,4939,4941],[5042,4840,4940,102102],[5043,4841,4941,4943],[5044,4842,4942,4944],[5045,4843,4943,4945],[5046,4844,4944,4946],[5047,4845,4945,4947],[5048,4846,4946,4948],[5049,4847,4947,-1],[5050,4848,-1,4950],[5051,4849,4949,4951],[5052,4850,4950,101877],[5053,4851,4951,4953],[5054,4852,4952,4954],[5055,4853,101970,4955],[5056,4854,4954,4956],[5057,4855,4955,4957],[5058,4856,4956,4958],[5059,4857,4957,4959],[5060,4858,4958,4960],[5061,4859,4959,4961],[5062,4860,4960,4962],[5063,4861,4961,4963],[5064,4862,4962,4964],[5065,4863,4963,100987],[5066,4864,4964,4966],[5067,4865,4965,4967],[5068,4866,101032,4968],[5069,4867,4967,4969],[5070,4868,4968,4970],[5071,4869,4969,101073],[5072,4870,4970,4972],[5073,4871,101122,4973],[5074,4872,4972,4974],[5075,4873,4973,4975],[5076,4874,4974,4976],[5077,4875,4975,4977],[5078,4876,4976,4978],[5079,4877,4977,4979],[5080,4878,4978,4980],[5081,4879,4979,4981],[5082,4880,4980,4982],[5083,4881,4981,101383],[5084,4882,4982,4984],[5085,4883,4983,4985],[5086,4884,101442,4986],[5087,4885,4985,4987],[5088,4886,4986,4988],[5089,4887,4987,4989],[5090,4888,4988,4990],[5091,4889,4989,100945],[5092,4890,100958,4992],[5093,4891,4991,4993],[5094,4892,4992,4994],[5095,4893,4993,4995],[5096,4894,4994,4996],[5097,4895,4995,4997],[-1,4896,4996,100487],[5099,4897,4997,4999],[5100,4898,100578,5000],[5101,4899,4999,5001],[5102,4900,5000,5002],[5103,4901,5001,5003],[5104,4902,5002,5004],[5105,4903,5003,5005],[5106,4904,5004,5006],[5107,4905,5005,5007],[5108,4906,5006,5008],[5109,4907,5007,100814],[5110,4908,5008,5010],[5111,4909,100737,5011],[5112,4910,5010,5012],[5113,4911,5011,5013],[5114,4912,5012,5014],[5115,4913,5013,5015],[5116,4914,5014,5016],[5117,4915,5015,100891],[5118,4916,100918,5018],[5119,4917,5017,5019],[5120,4918,5018,5020],[5121,4919,5019,5021],[5122,4920,5020,5022],[5123,4921,5021,5023],[5124,4922,5022,5024],[5125,4923,5023,5025],[5126,4924,5024,5026],[5127,4925,5025,5027],[5128,4926,5026,5028],[5129,4927,5027,5029],[5130,4928,5028,5030],[5131,4929,5029,5031],[5132,4930,5030,5032],[5133,4931,5031,5033],[5134,4932,5032,5034],[5135,4933,5033,5035],[5136,4934,5034,5036],[5137,4935,5035,101199],[5138,4936,5036,5038],[5139,4937,101274,5039],[5140,4938,5038,5040],[5141,4939,5039,5041],[5142,4940,5040,5042],[5143,4941,5041,102103],[5144,4942,5042,5044],[5145,4943,5043,5045],[5146,4944,5044,5046],[5147,4945,5045,5047],[5148,4946,5046,5048],[5149,4947,5047,5049],[5150,4948,5048,-1],[5151,4949,-1,5051],[5152,4950,5050,5052],[5153,4951,5051,101878],[5154,4952,5052,5054],[5155,4953,5053,5055],[5156,4954,101971,5056],[5157,4955,5055,5057],[5158,4956,5056,5058],[5159,4957,5057,5059],[5160,4958,5058,5060],[5161,4959,5059,5061],[5162,4960,5060,5062],[5163,4961,5061,5063],[5164,4962,5062,5064],[5165,4963,5063,5065],[5166,4964,5064,100988],[5167,4965,5065,5067],[5168,4966,5066,5068],[5169,4967,101033,5069],[5170,4968,5068,5070],[5171,4969,5069,5071],[5172,4970,5070,101074],[5173,4971,5071,5073],[5174,4972,101123,5074],[5175,4973,5073,5075],[5176,4974,5074,5076],[5177,4975,5075,5077],[5178,4976,5076,5078],[5179,4977,5077,5079],[5180,4978,5078,5080],[5181,4979,5079,5081],[5182,4980,5080,5082],[5183,4981,5081,5083],[-1,4982,5082,101384],[5185,4983,5083,5085],[5186,4984,5084,5086],[5187,4985,101443,5087],[5188,4986,5086,5088],[5189,4987,5087,5089],[5190,4988,5088,5090],[5191,4989,5089,5091],[5192,4990,5090,100946],[5193,4991,100959,5093],[5194,4992,5092,5094],[5195,4993,5093,5095],[5196,4994,5094,5096],[5197,4995,5095,5097],[5198,4996,5096,100488],[5199,4997,5097,5099],[5200,4998,5098,5100],[5201,4999,100579,5101],[5202,5000,5100,5102],[5203,5001,5101,5103],[5204,5002,5102,5104],[5205,5003,5103,5105],[5206,5004,5104,5106],[5207,5005,5105,5107],[5208,5006,5106,5108],[5209,5007,5107,5109],[5210,5008,5108,100815],[5211,5009,5109,5111],[5212,5010,100738,5112],[5213,5011,5111,5113],[5214,5012,5112,5114],[5215,5013,5113,5115],[5216,5014,5114,5116],[5217,5015,5115,5117],[5218,5016,5116,100892],[5219,5017,100919,5119],[5220,5018,5118,5120],[5221,5019,5119,5121],[5222,5020,5120,5122],[5223,5021,5121,5123],[5224,5022,5122,5124],[5225,5023,5123,5125],[5226,5024,5124,5126],[5227,5025,5125,5127],[5228,5026,5126,5128],[5229,5027,5127,5129],[5230,5028,5128,5130],[5231,5029,5129,5131],[5232,5030,5130,5132],[5233,5031,5131,5133],[5234,5032,5132,5134],[5235,5033,5133,5135],[5236,5034,5134,5136],[5237,5035,5135,5137],[5238,5036,5136,101200],[5239,5037,5137,5139],[5240,5038,101275,5140],[5241,5039,5139,5141],[5242,5040,5140,5142],[5243,5041,5141,5143],[-1,5042,5142,102104],[5245,5043,5143,5145],[5246,5044,5144,5146],[5247,5045,5145,5147],[5248,5046,5146,5148],[5249,5047,5147,5149],[5250,5048,5148,5150],[5251,5049,5149,-1],[5252,5050,-1,5152],[5253,5051,5151,5153],[5254,5052,5152,101879],[5255,5053,5153,5155],[5256,5054,5154,5156],[-1,5055,101972,5157],[5258,5056,5156,5158],[5259,5057,5157,5159],[5260,5058,5158,5160],[5261,5059,5159,5161],[5262,5060,5160,5162],[5263,5061,5161,5163],[5264,5062,5162,5164],[5265,5063,5163,5165],[5266,5064,5164,5166],[5267,5065,5165,100989],[5268,5066,5166,5168],[5269,-1,101034,5169],[5270,5068,5168,5170],[5271,5069,5169,5171],[5272,5070,5170,5172],[5273,5071,5171,101075],[5274,5072,5172,5174],[5275,5073,101124,5175],[5276,5074,5174,5176],[5277,5075,5175,5177],[5278,5076,5176,5178],[5279,5077,5177,5179],[5280,5078,5178,5180],[5281,5079,5179,5181],[5282,5080,5180,5182],[5283,5081,5181,5183],[5284,5082,5182,101385],[5285,5083,5183,5185],[5286,5084,5184,5186],[5287,5085,5185,5187],[5288,5086,101444,5188],[5289,5087,5187,5189],[5290,5088,5188,5190],[5291,5089,5189,5191],[5292,5090,5190,100947],[5293,5091,100960,5193],[5294,5092,5192,5194],[5295,5093,5193,5195],[5296,5094,5194,5196],[5297,5095,5195,5197],[5298,5096,5196,5198],[5299,5097,5197,100489],[5300,5098,5198,5200],[5301,5099,5199,5201],[5302,5100,100580,5202],[5303,5101,5201,5203],[5304,5102,5202,5204],[5305,5103,5203,5205],[5306,5104,5204,5206],[5307,5105,5205,5207],[5308,5106,5206,5208],[5309,5107,5207,5209],[5310,5108,5208,5210],[5311,5109,5209,100816],[5312,5110,5210,5212],[5313,5111,100739,5213],[5314,5112,5212,5214],[5315,5113,5213,5215],[5316,5114,5214,5216],[5317,5115,5215,5217],[5318,5116,5216,5218],[5319,5117,5217,100893],[5320,5118,100920,5220],[5321,5119,5219,5221],[5322,5120,5220,5222],[5323,5121,5221,5223],[5324,5122,5222,5224],[5325,5123,5223,5225],[5326,5124,5224,5226],[5327,5125,5225,5227],[5328,5126,5226,5228],[5329,5127,5227,5229],[5330,5128,5228,5230],[5331,5129,5229,5231],[5332,5130,5230,5232],[5333,5131,5231,5233],[5334,5132,5232,5234],[5335,5133,5233,5235],[5336,5134,5234,5236],[5337,5135,5235,5237],[5338,5136,5236,5238],[5339,5137,5237,101201],[5340,5138,5238,5240],[5341,5139,101276,5241],[5342,5140,5240,5242],[5343,5141,5241,5243],[5344,5142,5242,102105],[5345,5143,5243,5245],[5346,5144,5244,5246],[5347,5145,5245,5247],[5348,5146,5246,5248],[5349,5147,5247,5249],[5350,5148,5248,5250],[5351,5149,5249,5251],[5352,5150,5250,-1],[5353,5151,-1,5253],[5354,5152,5252,5254],[5355,5153,5253,5255],[5356,-1,5254,101880],[5357,5155,5255,5257],[5358,5156,5256,5258],[5359,5157,101973,5259],[5360,5158,5258,5260],[5361,5159,5259,5261],[5362,5160,5260,5262],[5363,5161,5261,5263],[5364,5162,5262,5264],[5365,5163,5263,5265],[5366,5164,5264,5266],[5367,5165,5265,5267],[-1,5166,5266,100990],[5369,5167,5267,5269],[5370,5168,101035,5270],[5371,5169,5269,5271],[5372,5170,5270,5272],[5373,5171,5271,5273],[5374,5172,5272,101076],[5375,5173,5273,5275],[-1,5174,101125,5276],[5377,5175,5275,5277],[5378,5176,5276,5278],[5379,5177,5277,5279],[5380,5178,5278,5280],[5381,5179,5279,5281],[5382,5180,5280,5282],[5383,5181,5281,5283],[5384,5182,5282,5284],[5385,5183,5283,101386],[5386,5184,5284,5286],[5387,5185,5285,5287],[5388,5186,5286,5288],[5389,5187,101445,5289],[5390,5188,5288,5290],[5391,5189,5289,5291],[5392,5190,5290,5292],[5393,5191,5291,100948],[5394,5192,100961,5294],[5395,5193,5293,5295],[5396,5194,5294,5296],[5397,5195,5295,5297],[5398,5196,5296,5298],[5399,5197,5297,5299],[5400,5198,5298,100490],[5401,5199,5299,5301],[5402,5200,5300,5302],[5403,5201,100581,5303],[5404,5202,5302,5304],[5405,5203,5303,5305],[5406,5204,5304,5306],[5407,5205,5305,5307],[5408,5206,5306,5308],[5409,5207,5307,5309],[5410,5208,5308,5310],[5411,5209,5309,5311],[5412,5210,5310,100817],[5413,5211,5311,5313],[5414,5212,100740,5314],[5415,5213,5313,5315],[5416,5214,5314,5316],[5417,5215,5315,5317],[5418,5216,5316,5318],[5419,5217,5317,5319],[5420,5218,5318,100894],[5421,5219,100921,5321],[5422,5220,5320,5322],[5423,5221,5321,5323],[5424,5222,5322,5324],[5425,5223,5323,5325],[5426,5224,5324,5326],[5427,5225,5325,5327],[5428,5226,5326,5328],[5429,5227,5327,5329],[5430,5228,5328,5330],[5431,5229,5329,5331],[5432,5230,5330,5332],[5433,5231,5331,5333],[5434,5232,5332,5334],[5435,5233,5333,5335],[5436,5234,5334,5336],[5437,5235,5335,5337],[5438,5236,5336,5338],[5439,5237,5337,5339],[5440,5238,5338,101202],[5441,5239,5339,5341],[5442,5240,101277,5342],[5443,5241,5341,5343],[5444,5242,5342,5344],[5445,5243,5343,102106],[5446,5244,5344,5346],[5447,5245,5345,5347],[5448,5246,5346,5348],[5449,5247,5347,5349],[5450,5248,5348,5350],[5451,5249,5349,5351],[5452,5250,5350,5352],[5453,5251,5351,-1],[5454,5252,-1,5354],[5455,5253,5353,5355],[5456,5254,5354,5356],[5457,5255,5355,101881],[5458,5256,5356,5358],[5459,5257,5357,5359],[5460,5258,101974,5360],[5461,5259,5359,5361],[5462,5260,5360,5362],[5463,5261,5361,5363],[5464,5262,5362,5364],[5465,5263,5363,5365],[5466,5264,5364,5366],[5467,5265,5365,5367],[5468,5266,5366,100991],[5469,5267,5367,5369],[5470,5268,5368,5370],[5471,5269,101036,5371],[5472,5270,5370,5372],[5473,5271,5371,5373],[5474,5272,5372,5374],[5475,5273,5373,5375],[5476,-1,5374,101077],[5477,5275,5375,5377],[5478,5276,101126,5378],[5479,5277,5377,5379],[5480,5278,5378,5380],[5481,5279,5379,5381],[5482,5280,5380,5382],[5483,5281,5381,5383],[5484,5282,5382,5384],[5485,5283,5383,5385],[5486,5284,5384,101387],[5487,5285,5385,5387],[5488,5286,5386,5388],[5489,5287,5387,5389],[5490,5288,101446,5390],[5491,5289,5389,5391],[5492,5290,5390,5392],[5493,5291,5391,5393],[5494,5292,5392,5394],[5495,5293,5393,5395],[5496,5294,5394,5396],[5497,5295,5395,5397],[5498,5296,5396,5398],[5499,5297,5397,5399],[5500,5298,5398,5400],[5501,5299,5399,100491],[5502,5300,5400,5402],[5503,5301,5401,5403],[5504,5302,100582,5404],[5505,5303,5403,5405],[5506,5304,5404,5406],[5507,5305,5405,5407],[5508,5306,5406,5408],[5509,5307,5407,5409],[5510,5308,5408,5410],[5511,5309,5409,5411],[5512,5310,5410,5412],[5513,5311,5411,100818],[5514,5312,5412,5414],[5515,5313,100741,5415],[5516,5314,5414,5416],[5517,5315,5415,5417],[5518,5316,5416,5418],[5519,5317,5417,5419],[5520,5318,5418,5420],[5521,5319,5419,100895],[5522,5320,100922,5422],[5523,5321,5421,5423],[5524,5322,5422,5424],[5525,5323,5423,5425],[5526,5324,5424,5426],[5527,5325,5425,5427],[5528,5326,5426,5428],[5529,5327,5427,5429],[5530,5328,5428,5430],[5531,5329,5429,5431],[5532,5330,5430,5432],[5533,5331,5431,5433],[5534,5332,5432,5434],[5535,5333,5433,5435],[5536,5334,5434,5436],[5537,5335,5435,5437],[5538,5336,5436,5438],[5539,5337,5437,5439],[5540,5338,5438,5440],[5541,5339,5439,101203],[5542,5340,5440,5442],[5543,5341,101278,5443],[5544,5342,5442,5444],[5545,5343,5443,5445],[5546,5344,5444,102107],[5547,5345,5445,5447],[5548,5346,5446,5448],[5549,5347,5447,5449],[5550,5348,5448,5450],[5551,5349,5449,5451],[5552,5350,5450,5452],[5553,5351,5451,5453],[5554,5352,5452,-1],[5555,5353,-1,5455],[5556,5354,5454,5456],[5557,5355,5455,5457],[5558,5356,5456,101882],[5559,5357,5457,5459],[5560,5358,5458,5460],[-1,5359,101975,5461],[5562,5360,5460,5462],[5563,5361,5461,5463],[5564,5362,5462,5464],[5565,5363,5463,5465],[5566,5364,5464,5466],[5567,5365,5465,5467],[5568,5366,5466,5468],[5569,5367,5467,100992],[5570,5368,5468,5470],[5571,5369,5469,5471],[5572,5370,101037,5472],[5573,5371,5471,5473],[5574,5372,5472,5474],[5575,5373,5473,5475],[5576,5374,5474,5476],[5577,5375,5475,101078],[5578,5376,5476,5478],[5579,5377,101127,5479],[5580,5378,5478,5480],[5581,5379,5479,5481],[5582,5380,5480,5482],[5583,5381,5481,5483],[5584,5382,5482,5484],[5585,5383,5483,5485],[5586,5384,5484,5486],[5587,5385,5485,101388],[5588,5386,5486,5488],[5589,5387,5487,5489],[5590,5388,5488,5490],[5591,5389,101447,5491],[5592,5390,5490,5492],[5593,5391,5491,5493],[5594,5392,5492,5494],[5595,5393,5493,5495],[5596,5394,5494,5496],[5597,5395,5495,5497],[5598,5396,5496,5498],[5599,5397,5497,5499],[5600,5398,5498,5500],[5601,5399,5499,5501],[5602,5400,5500,100492],[5603,5401,5501,5503],[5604,5402,5502,5504],[5605,5403,100583,5505],[5606,5404,5504,5506],[5607,5405,5505,5507],[5608,5406,5506,5508],[5609,5407,5507,5509],[5610,5408,5508,5510],[5611,5409,5509,5511],[5612,5410,5510,5512],[5613,5411,5511,5513],[5614,5412,5512,100819],[5615,5413,5513,5515],[5616,5414,100742,5516],[5617,5415,5515,5517],[5618,5416,5516,5518],[5619,5417,5517,5519],[5620,5418,5518,5520],[5621,5419,5519,5521],[5622,5420,5520,100896],[5623,5421,100923,5523],[5624,5422,5522,5524],[5625,5423,5523,5525],[5626,5424,5524,5526],[5627,5425,5525,5527],[5628,5426,5526,5528],[5629,5427,5527,5529],[5630,5428,5528,5530],[5631,5429,5529,5531],[5632,5430,5530,5532],[5633,5431,5531,5533],[5634,5432,5532,5534],[5635,5433,5533,5535],[5636,5434,5534,5536],[5637,5435,5535,5537],[5638,5436,5536,5538],[5639,5437,5537,5539],[5640,5438,5538,5540],[5641,5439,5539,5541],[5642,5440,5540,101204],[5643,5441,5541,5543],[5644,5442,101279,5544],[5645,5443,5543,5545],[5646,5444,5544,5546],[5647,5445,5545,102108],[5648,5446,5546,5548],[5649,5447,5547,5549],[5650,5448,5548,5550],[5651,5449,5549,5551],[5652,5450,5550,5552],[5653,5451,5551,5553],[5654,5452,5552,5554],[5655,5453,5553,-1],[5656,5454,-1,5556],[5657,5455,5555,5557],[5658,5456,5556,5558],[5659,5457,5557,101883],[5660,5458,5558,5560],[5661,5459,5559,5561],[5662,5460,5560,5562],[5663,5461,101976,5563],[5664,5462,5562,5564],[5665,5463,5563,5565],[5666,5464,5564,5566],[5667,5465,5565,5567],[5668,5466,5566,5568],[5669,5467,5567,5569],[5670,5468,5568,100993],[5671,5469,5569,5571],[5672,5470,5570,5572],[5673,5471,101038,5573],[5674,5472,5572,5574],[5675,5473,5573,5575],[5676,5474,5574,5576],[5677,5475,5575,5577],[5678,5476,5576,101079],[5679,5477,5577,5579],[5680,5478,101128,5580],[5681,5479,5579,5581],[5682,5480,5580,5582],[5683,5481,5581,5583],[5684,5482,5582,5584],[5685,5483,5583,5585],[5686,5484,5584,5586],[5687,5485,5585,5587],[5688,5486,5586,101389],[5689,5487,5587,5589],[5690,5488,5588,5590],[5691,5489,5589,5591],[5692,5490,101448,5592],[5693,5491,5591,5593],[5694,5492,5592,5594],[5695,5493,5593,5595],[5696,5494,5594,5596],[5697,5495,5595,5597],[5698,5496,5596,5598],[5699,5497,5597,5599],[5700,5498,5598,5600],[5701,5499,5599,5601],[5702,5500,5600,5602],[5703,5501,5601,100493],[5704,5502,5602,5604],[5705,5503,5603,5605],[5706,5504,100584,5606],[5707,5505,5605,5607],[5708,5506,5606,5608],[5709,5507,5607,5609],[5710,5508,5608,5610],[5711,5509,5609,5611],[5712,5510,5610,5612],[5713,5511,5611,5613],[5714,5512,5612,5614],[5715,5513,5613,100820],[5716,5514,5614,5616],[5717,5515,100743,5617],[5718,5516,5616,5618],[5719,5517,5617,5619],[5720,5518,5618,5620],[5721,5519,5619,5621],[5722,5520,5620,5622],[5723,5521,5621,100897],[5724,5522,100924,5624],[5725,5523,5623,5625],[5726,5524,5624,5626],[5727,5525,5625,5627],[5728,5526,5626,5628],[5729,5527,5627,5629],[5730,5528,5628,5630],[5731,5529,5629,5631],[5732,5530,5630,5632],[5733,5531,5631,5633],[5734,5532,5632,5634],[5735,5533,5633,5635],[5736,5534,5634,5636],[5737,5535,5635,5637],[5738,5536,5636,5638],[5739,5537,5637,5639],[5740,5538,5638,5640],[5741,5539,5639,5641],[5742,5540,5640,5642],[5743,5541,5641,101205],[5744,5542,5642,5644],[5745,5543,101280,5645],[5746,5544,5644,5646],[5747,5545,5645,5647],[5748,5546,5646,102109],[5749,5547,5647,5649],[5750,5548,5648,5650],[5751,5549,5649,5651],[5752,5550,5650,5652],[5753,5551,5651,5653],[5754,5552,5652,5654],[5755,5553,5653,5655],[5756,5554,5654,-1],[5757,5555,-1,5657],[5758,5556,5656,5658],[5759,5557,5657,5659],[5760,5558,5658,5660],[5761,-1,5659,101884],[5762,5560,5660,5662],[5763,5561,5661,5663],[5764,5562,101977,5664],[5765,5563,5663,5665],[5766,5564,5664,5666],[5767,5565,5665,5667],[5768,5566,5666,5668],[5769,5567,5667,5669],[5770,5568,5668,5670],[5771,5569,5669,100994],[5772,5570,5670,5672],[5773,-1,101039,5673],[5774,5572,5672,5674],[5775,5573,5673,5675],[5776,5574,5674,5676],[5777,5575,5675,5677],[5778,5576,5676,5678],[5779,5577,5677,101080],[5780,5578,5678,5680],[5781,5579,101129,5681],[5782,5580,5680,5682],[5783,5581,5681,5683],[5784,5582,5682,5684],[5785,5583,5683,5685],[5786,5584,5684,5686],[5787,5585,5685,5687],[5788,5586,5686,5688],[-1,5587,5687,101390],[5790,5588,5688,5690],[5791,5589,5689,5691],[5792,-1,101449,5692],[5793,5591,5691,5693],[5794,5592,5692,5694],[5795,5593,5693,5695],[5796,5594,5694,5696],[5797,5595,5695,5697],[5798,5596,5696,5698],[5799,5597,5697,5699],[5800,5598,5698,5700],[5801,5599,5699,5701],[5802,5600,5700,5702],[5803,5601,5701,5703],[5804,5602,5702,100494],[5805,5603,5703,5705],[5806,5604,5704,5706],[5807,5605,100585,5707],[5808,5606,5706,5708],[5809,5607,5707,5709],[5810,5608,5708,5710],[5811,5609,5709,5711],[5812,5610,5710,5712],[5813,5611,5711,5713],[5814,5612,5712,5714],[5815,5613,5713,5715],[5816,5614,5714,5716],[5817,-1,5715,100821],[5818,5616,100744,5718],[5819,5617,5717,5719],[5820,5618,5718,5720],[5821,5619,5719,5721],[5822,5620,5720,5722],[5823,5621,5721,5723],[5824,5622,5722,100898],[5825,5623,100925,5725],[5826,5624,5724,5726],[5827,5625,5725,5727],[5828,5626,5726,5728],[5829,5627,5727,5729],[5830,5628,5728,5730],[5831,5629,5729,5731],[5832,5630,5730,5732],[5833,5631,5731,5733],[5834,5632,5732,5734],[5835,5633,5733,5735],[5836,5634,5734,5736],[5837,5635,5735,5737],[5838,5636,5736,5738],[5839,5637,5737,5739],[5840,5638,5738,5740],[5841,5639,5739,5741],[5842,5640,5740,5742],[5843,5641,5741,5743],[5844,5642,5742,101206],[5845,5643,5743,5745],[5846,5644,101281,5746],[5847,5645,5745,5747],[5848,5646,5746,5748],[-1,5647,5747,102110],[5850,5648,5748,5750],[5851,5649,5749,5751],[5852,5650,5750,5752],[5853,5651,5751,5753],[5854,5652,5752,5754],[5855,5653,5753,5755],[5856,5654,5754,5756],[5857,5655,5755,-1],[5858,5656,-1,5758],[5859,5657,5757,5759],[5860,5658,5758,5760],[5861,5659,5759,5761],[5862,5660,5760,101885],[5863,5661,5761,5763],[5864,5662,5762,5764],[-1,5663,101978,5765],[5866,5664,5764,5766],[5867,5665,5765,5767],[5868,5666,5766,5768],[5869,5667,5767,5769],[5870,5668,5768,5770],[5871,5669,5769,5771],[5872,5670,5770,100995],[5873,5671,5771,5773],[5874,5672,101040,5774],[5875,5673,5773,5775],[5876,5674,5774,5776],[5877,5675,5775,5777],[5878,5676,5776,5778],[5879,5677,5777,5779],[5880,5678,5778,101081],[5881,5679,5779,5781],[5882,5680,101130,5782],[5883,5681,5781,5783],[5884,5682,5782,5784],[5885,5683,5783,5785],[5886,5684,5784,5786],[5887,5685,5785,5787],[5888,5686,5786,5788],[5889,5687,5787,101391],[5890,5688,5788,5790],[5891,5689,5789,5791],[5892,5690,5790,5792],[5893,5691,101450,5793],[5894,5692,5792,5794],[5895,5693,5793,5795],[5896,5694,5794,5796],[5897,5695,5795,5797],[5898,5696,5796,5798],[5899,5697,5797,5799],[5900,5698,5798,5800],[5901,5699,5799,5801],[5902,5700,5800,5802],[5903,5701,5801,5803],[5904,5702,5802,5804],[5905,5703,5803,100495],[5906,5704,5804,5806],[5907,5705,5805,5807],[5908,5706,100586,5808],[5909,5707,5807,5809],[5910,5708,5808,5810],[5911,5709,5809,5811],[5912,5710,5810,5812],[5913,5711,5811,5813],[5914,5712,5812,5814],[5915,5713,5813,5815],[5916,5714,5814,5816],[5917,5715,5815,5817],[5918,5716,5816,100822],[5919,5717,100745,5819],[5920,5718,5818,5820],[5921,5719,5819,5821],[5922,5720,5820,5822],[5923,5721,5821,5823],[5924,5722,5822,5824],[5925,5723,5823,100899],[5926,5724,100926,5826],[5927,5725,5825,5827],[5928,5726,5826,5828],[5929,5727,5827,5829],[5930,5728,5828,5830],[5931,5729,5829,5831],[5932,5730,5830,5832],[5933,5731,5831,5833],[5934,5732,5832,5834],[5935,5733,5833,5835],[5936,5734,5834,5836],[5937,5735,5835,5837],[5938,5736,5836,5838],[5939,5737,5837,5839],[5940,5738,5838,5840],[5941,5739,5839,5841],[5942,5740,5840,5842],[5943,5741,5841,5843],[5944,5742,5842,5844],[5945,5743,5843,101207],[5946,5744,5844,5846],[5947,5745,101282,5847],[5948,5746,5846,5848],[5949,5747,5847,102111],[5950,5748,5848,5850],[5951,5749,5849,5851],[5952,5750,5850,5852],[5953,5751,5851,5853],[5954,5752,5852,5854],[5955,5753,5853,5855],[5956,5754,5854,5856],[5957,5755,5855,5857],[5958,5756,5856,-1],[5959,5757,-1,5859],[5960,5758,5858,5860],[5961,5759,5859,5861],[5962,5760,5860,5862],[5963,5761,5861,101886],[5964,5762,5862,5864],[5965,5763,5863,5865],[5966,5764,5864,5866],[5967,5765,101979,5867],[5968,5766,5866,5868],[5969,5767,5867,5869],[5970,5768,5868,5870],[5971,5769,5869,5871],[5972,5770,5870,5872],[5973,5771,5871,100996],[5974,5772,5872,5874],[5975,5773,101041,5875],[5976,5774,5874,5876],[5977,5775,5875,5877],[5978,5776,5876,5878],[5979,5777,5877,5879],[5980,5778,5878,5880],[5981,5779,5879,101082],[5982,5780,5880,5882],[5983,5781,101131,5883],[5984,5782,5882,5884],[5985,5783,5883,5885],[5986,5784,5884,5886],[5987,5785,5885,5887],[5988,5786,5886,5888],[5989,5787,5887,5889],[5990,5788,5888,101392],[5991,5789,5889,5891],[5992,5790,5890,5892],[5993,5791,5891,5893],[5994,5792,101451,101488],[5995,5793,101519,5895],[5996,5794,5894,5896],[5997,5795,5895,5897],[5998,5796,5896,5898],[5999,5797,5897,5899],[6000,5798,5898,5900],[6001,5799,5899,5901],[6002,5800,5900,5902],[6003,5801,5901,5903],[6004,5802,5902,5904],[6005,5803,5903,5905],[6006,5804,5904,100496],[6007,5805,5905,5907],[6008,5806,5906,5908],[6009,5807,100587,5909],[6010,5808,5908,5910],[6011,5809,5909,5911],[6012,5810,5910,5912],[6013,5811,5911,5913],[6014,5812,5912,5914],[6015,5813,5913,5915],[6016,5814,5914,5916],[6017,5815,5915,5917],[6018,5816,5916,5918],[6019,5817,5917,100823],[6020,5818,100746,5920],[6021,5819,5919,5921],[6022,5820,5920,5922],[6023,5821,5921,5923],[6024,5822,5922,5924],[6025,5823,5923,5925],[6026,5824,5924,100900],[6027,5825,100927,5927],[6028,5826,5926,5928],[6029,5827,5927,5929],[6030,5828,5928,5930],[6031,5829,5929,5931],[6032,5830,5930,5932],[6033,5831,5931,5933],[6034,5832,5932,5934],[6035,5833,5933,5935],[6036,5834,5934,5936],[6037,5835,5935,5937],[6038,5836,5936,5938],[6039,5837,5937,5939],[6040,5838,5938,5940],[6041,5839,5939,5941],[6042,5840,5940,5942],[6043,5841,5941,5943],[6044,5842,5942,5944],[6045,5843,5943,5945],[6046,5844,5944,101208],[6047,5845,5945,5947],[6048,5846,101283,5948],[6049,5847,5947,5949],[6050,5848,5948,102112],[6051,5849,5949,5951],[6052,5850,5950,5952],[6053,5851,5951,5953],[6054,5852,5952,5954],[6055,5853,5953,5955],[6056,5854,5954,5956],[6057,5855,5955,5957],[6058,5856,5956,5958],[6059,5857,5957,-1],[6060,5858,-1,5960],[6061,5859,5959,5961],[6062,5860,5960,5962],[6063,5861,5961,5963],[6064,5862,5962,101887],[6065,5863,5963,5965],[6066,5864,5964,5966],[6067,5865,5965,5967],[6068,5866,101980,5968],[6069,5867,5967,5969],[6070,5868,5968,5970],[6071,5869,5969,5971],[6072,5870,5970,5972],[6073,5871,5971,5973],[6074,5872,5972,100997],[6075,5873,5973,5975],[6076,5874,101042,5976],[6077,5875,5975,5977],[6078,5876,5976,5978],[6079,5877,5977,5979],[6080,5878,5978,5980],[6081,5879,5979,5981],[6082,5880,5980,101083],[6083,5881,5981,5983],[6084,5882,101132,5984],[6085,5883,5983,5985],[6086,5884,5984,5986],[6087,5885,5985,5987],[6088,5886,5986,5988],[6089,5887,5987,5989],[6090,5888,5988,5990],[6091,5889,5989,101393],[6092,5890,5990,5992],[6093,5891,5991,5993],[6094,5892,5992,5994],[6095,5893,101452,101489],[6096,5894,101520,5996],[6097,5895,5995,5997],[6098,5896,5996,5998],[6099,5897,5997,5999],[6100,5898,5998,6000],[6101,5899,5999,6001],[6102,5900,6000,6002],[6103,5901,6001,6003],[6104,5902,6002,6004],[6105,5903,6003,6005],[6106,5904,6004,6006],[6107,5905,6005,100497],[6108,5906,6006,6008],[6109,5907,6007,6009],[6110,5908,100588,6010],[6111,5909,6009,6011],[6112,5910,6010,6012],[6113,5911,6011,6013],[6114,5912,6012,6014],[6115,5913,6013,6015],[6116,5914,6014,6016],[6117,5915,6015,6017],[6118,5916,6016,6018],[6119,5917,6017,6019],[6120,5918,6018,100824],[-1,5919,100747,6021],[6122,5920,6020,6022],[6123,5921,6021,6023],[6124,5922,6022,6024],[6125,5923,6023,6025],[6126,5924,6024,6026],[6127,5925,6025,100901],[6128,5926,100928,6028],[6129,5927,6027,6029],[6130,5928,6028,6030],[6131,5929,6029,6031],[6132,5930,6030,6032],[6133,5931,6031,6033],[6134,5932,6032,6034],[6135,5933,6033,6035],[6136,5934,6034,6036],[6137,5935,6035,6037],[6138,5936,6036,6038],[6139,5937,6037,6039],[6140,5938,6038,6040],[6141,5939,6039,6041],[6142,5940,6040,6042],[6143,5941,6041,6043],[6144,5942,6042,6044],[6145,5943,6043,6045],[6146,5944,6044,6046],[6147,5945,6045,101209],[6148,5946,6046,6048],[6149,5947,101284,6049],[6150,5948,6048,6050],[6151,5949,6049,102113],[6152,5950,6050,6052],[6153,5951,6051,6053],[6154,5952,6052,6054],[6155,5953,6053,6055],[6156,5954,6054,6056],[6157,5955,6055,6057],[6158,5956,6056,6058],[6159,5957,6057,6059],[6160,5958,6058,-1],[6161,5959,-1,6061],[6162,5960,6060,6062],[6163,5961,6061,6063],[6164,5962,6062,6064],[6165,5963,6063,101888],[6166,5964,6064,6066],[6167,5965,6065,6067],[6168,5966,6066,6068],[6169,5967,101981,6069],[6170,5968,6068,6070],[6171,5969,6069,6071],[6172,5970,6070,6072],[6173,5971,6071,6073],[6174,5972,6072,6074],[6175,5973,6073,100998],[6176,5974,6074,6076],[6177,5975,101043,6077],[6178,5976,6076,6078],[6179,5977,6077,6079],[6180,5978,6078,6080],[6181,5979,6079,6081],[6182,5980,6080,6082],[6183,5981,6081,101084],[6184,5982,6082,6084],[6185,5983,101133,6085],[6186,5984,6084,6086],[6187,5985,6085,6087],[6188,5986,6086,6088],[6189,5987,6087,6089],[6190,5988,6088,6090],[6191,5989,6089,6091],[6192,5990,6090,101394],[6193,5991,6091,6093],[6194,5992,6092,6094],[6195,5993,6093,6095],[6196,5994,101453,101490],[6197,5995,101521,6097],[6198,5996,6096,6098],[6199,5997,6097,6099],[6200,5998,6098,6100],[6201,5999,6099,6101],[6202,6000,6100,6102],[6203,6001,6101,6103],[6204,6002,6102,6104],[6205,6003,6103,6105],[6206,6004,6104,6106],[6207,6005,6105,6107],[6208,6006,6106,100498],[6209,6007,6107,6109],[6210,6008,6108,6110],[6211,6009,100589,6111],[6212,6010,6110,6112],[6213,6011,6111,6113],[6214,6012,6112,6114],[6215,6013,6113,6115],[6216,6014,6114,6116],[6217,6015,6115,6117],[6218,6016,6116,6118],[6219,6017,6117,6119],[6220,6018,6118,6120],[6221,6019,6119,100825],[6222,6020,6120,6122],[6223,6021,100748,6123],[6224,6022,6122,6124],[6225,6023,6123,6125],[6226,6024,6124,6126],[6227,6025,6125,6127],[6228,6026,6126,100902],[6229,6027,100929,6129],[6230,6028,6128,6130],[6231,6029,6129,6131],[6232,6030,6130,6132],[6233,6031,6131,6133],[6234,6032,6132,6134],[6235,6033,6133,6135],[6236,6034,6134,6136],[6237,6035,6135,6137],[6238,6036,6136,6138],[6239,6037,6137,6139],[6240,6038,6138,6140],[6241,6039,6139,6141],[6242,6040,6140,6142],[6243,6041,6141,6143],[6244,6042,6142,6144],[6245,6043,6143,6145],[6246,6044,6144,6146],[6247,6045,6145,6147],[6248,6046,6146,101210],[6249,6047,6147,6149],[6250,6048,101285,6150],[6251,6049,6149,6151],[6252,6050,6150,102114],[6253,6051,6151,6153],[6254,6052,6152,6154],[6255,6053,6153,6155],[6256,6054,6154,6156],[6257,6055,6155,6157],[6258,6056,6156,6158],[6259,6057,6157,6159],[6260,6058,6158,6160],[6261,6059,6159,-1],[6262,6060,-1,6162],[6263,6061,6161,6163],[6264,6062,6162,6164],[6265,6063,6163,6165],[6266,6064,6164,6166],[6267,-1,6165,101889],[6268,6066,6166,6168],[6269,6067,6167,6169],[-1,6068,101982,6170],[6271,6069,6169,6171],[6272,6070,6170,6172],[6273,6071,6171,6173],[6274,6072,6172,6174],[6275,6073,6173,6175],[-1,6074,6174,100999],[6277,-1,101044,6177],[6278,6076,6176,6178],[6279,6077,6177,6179],[6280,6078,6178,6180],[6281,6079,6179,6181],[6282,6080,6180,6182],[6283,6081,6181,6183],[6284,6082,6182,101085],[6285,6083,6183,6185],[6286,6084,101134,6186],[6287,6085,6185,6187],[6288,6086,6186,6188],[6289,6087,6187,6189],[6290,6088,6188,6190],[6291,6089,6189,6191],[6292,6090,6190,6192],[6293,6091,6191,101395],[6294,6092,6192,6194],[6295,6093,6193,6195],[6296,6094,6194,6196],[6297,6095,101454,101491],[6298,6096,101522,6198],[6299,6097,6197,6199],[6300,6098,6198,6200],[6301,6099,6199,6201],[6302,6100,6200,6202],[6303,6101,6201,6203],[6304,6102,6202,6204],[6305,6103,6203,6205],[6306,6104,6204,6206],[6307,6105,6205,6207],[6308,6106,6206,6208],[6309,6107,6207,100499],[6310,6108,6208,6210],[6311,6109,6209,6211],[6312,6110,100590,6212],[6313,6111,6211,6213],[6314,6112,6212,6214],[6315,6113,6213,6215],[6316,6114,6214,6216],[6317,6115,6215,6217],[6318,6116,6216,6218],[6319,6117,6217,6219],[6320,6118,6218,6220],[6321,6119,6219,6221],[6322,6120,6220,100826],[6323,6121,6221,6223],[6324,6122,100749,6224],[6325,6123,6223,6225],[6326,6124,6224,6226],[6327,6125,6225,6227],[6328,6126,6226,6228],[6329,6127,6227,100903],[6330,6128,100930,6230],[6331,6129,6229,6231],[6332,6130,6230,6232],[6333,6131,6231,6233],[6334,6132,6232,6234],[6335,6133,6233,6235],[6336,6134,6234,6236],[6337,6135,6235,6237],[6338,6136,6236,6238],[6339,6137,6237,6239],[6340,6138,6238,6240],[6341,6139,6239,6241],[6342,6140,6240,6242],[6343,6141,6241,6243],[6344,6142,6242,6244],[6345,6143,6243,6245],[6346,6144,6244,6246],[6347,6145,6245,6247],[6348,6146,6246,6248],[6349,6147,6247,101211],[6350,6148,6248,6250],[6351,6149,101286,6251],[6352,6150,6250,6252],[6353,6151,6251,102115],[6354,6152,6252,6254],[6355,6153,6253,6255],[6356,6154,6254,6256],[6357,6155,6255,6257],[6358,6156,6256,6258],[6359,6157,6257,6259],[6360,6158,6258,6260],[6361,6159,6259,6261],[6362,6160,6260,-1],[6363,6161,-1,6263],[6364,6162,6262,6264],[6365,6163,6263,6265],[6366,6164,6264,6266],[6367,6165,6265,6267],[6368,6166,6266,101890],[6369,6167,6267,6269],[6370,6168,6268,6270],[6371,6169,6269,6271],[6372,6170,101983,6272],[6373,6171,6271,6273],[6374,6172,6272,6274],[6375,6173,6273,6275],[6376,6174,6274,101000],[6377,6175,6275,6277],[6378,6176,101045,6278],[6379,6177,6277,6279],[6380,6178,6278,6280],[6381,6179,6279,6281],[6382,6180,6280,6282],[6383,6181,6281,6283],[6384,6182,6282,6284],[6385,6183,6283,101086],[6386,6184,6284,6286],[6387,6185,101135,6287],[6388,6186,6286,6288],[6389,6187,6287,6289],[6390,6188,6288,6290],[6391,6189,6289,6291],[6392,6190,6290,6292],[6393,6191,6291,6293],[6394,6192,6292,101396],[6395,6193,6293,6295],[6396,6194,6294,6296],[6397,6195,6295,6297],[6398,6196,101455,101492],[6399,6197,101523,6299],[6400,6198,6298,6300],[6401,6199,6299,6301],[6402,6200,6300,6302],[6403,6201,6301,6303],[6404,6202,6302,6304],[6405,6203,6303,6305],[6406,6204,6304,6306],[6407,6205,6305,6307],[6408,6206,6306,6308],[6409,6207,6307,6309],[-1,6208,6308,100500],[6411,6209,6309,6311],[6412,6210,6310,6312],[6413,6211,100591,6313],[6414,6212,6312,6314],[6415,6213,6313,6315],[6416,6214,6314,6316],[6417,6215,6315,6317],[6418,6216,6316,6318],[6419,6217,6317,6319],[6420,6218,6318,6320],[6421,6219,6319,6321],[6422,6220,6320,6322],[6423,6221,6321,100827],[6424,6222,6322,6324],[6425,6223,100750,6325],[6426,6224,6324,6326],[6427,6225,6325,6327],[6428,6226,6326,6328],[6429,6227,6327,6329],[6430,6228,6328,100904],[6431,6229,100931,6331],[6432,6230,6330,6332],[6433,6231,6331,6333],[6434,6232,6332,6334],[6435,6233,6333,6335],[6436,6234,6334,6336],[6437,6235,6335,6337],[6438,6236,6336,6338],[6439,6237,6337,6339],[6440,6238,6338,6340],[6441,6239,6339,6341],[6442,6240,6340,6342],[6443,6241,6341,6343],[6444,6242,6342,6344],[6445,6243,6343,6345],[6446,6244,6344,6346],[6447,6245,6345,6347],[6448,6246,6346,6348],[6449,6247,6347,6349],[6450,6248,6348,101212],[6451,6249,6349,6351],[6452,6250,101287,6352],[6453,6251,6351,6353],[6454,6252,6352,102116],[6455,6253,6353,6355],[6456,6254,6354,6356],[6457,6255,6355,6357],[6458,6256,6356,6358],[6459,6257,6357,6359],[6460,6258,6358,6360],[6461,6259,6359,6361],[6462,6260,6360,6362],[6463,6261,6361,-1],[6464,6262,-1,6364],[6465,6263,6363,6365],[6466,6264,6364,6366],[6467,6265,6365,6367],[6468,6266,6366,6368],[6469,6267,6367,101891],[6470,6268,6368,6370],[6471,6269,6369,6371],[6472,6270,6370,6372],[6473,6271,101984,6373],[6474,6272,6372,6374],[6475,6273,6373,6375],[6476,6274,6374,6376],[6477,6275,6375,101001],[6478,6276,6376,6378],[6479,6277,101046,6379],[6480,6278,6378,6380],[6481,6279,6379,6381],[6482,6280,6380,6382],[6483,6281,6381,6383],[6484,6282,6382,6384],[6485,6283,6383,6385],[6486,6284,6384,101087],[6487,6285,6385,6387],[6488,6286,101136,6388],[6489,6287,6387,6389],[6490,6288,6388,6390],[6491,6289,6389,6391],[6492,6290,6390,6392],[6493,6291,6391,6393],[6494,6292,6392,6394],[6495,6293,6393,101397],[6496,6294,6394,6396],[6497,6295,6395,6397],[6498,6296,6396,6398],[6499,6297,101456,101493],[6500,6298,101524,6400],[6501,6299,6399,6401],[6502,6300,6400,6402],[6503,6301,6401,6403],[6504,6302,6402,6404],[6505,6303,6403,6405],[6506,6304,6404,6406],[6507,6305,6405,6407],[6508,6306,6406,6408],[6509,6307,6407,6409],[6510,6308,6408,100501],[6511,6309,6409,6411],[6512,6310,6410,6412],[6513,6311,6411,6413],[6514,6312,100592,6414],[6515,6313,6413,6415],[6516,6314,6414,6416],[6517,6315,6415,6417],[6518,6316,6416,6418],[6519,6317,6417,6419],[6520,6318,6418,6420],[6521,6319,6419,6421],[6522,6320,6420,6422],[6523,6321,6421,6423],[6524,6322,6422,100828],[6525,6323,6423,6425],[6526,6324,100751,6426],[6527,6325,6425,6427],[6528,6326,6426,6428],[6529,6327,6427,6429],[6530,6328,6428,6430],[6531,6329,6429,100905],[6532,6330,100932,6432],[6533,6331,6431,6433],[6534,6332,6432,6434],[6535,6333,6433,6435],[6536,6334,6434,6436],[6537,6335,6435,6437],[6538,6336,6436,6438],[6539,6337,6437,6439],[6540,6338,6438,6440],[6541,6339,6439,6441],[6542,6340,6440,6442],[6543,6341,6441,6443],[6544,6342,6442,6444],[6545,6343,6443,6445],[6546,6344,6444,6446],[6547,6345,6445,6447],[6548,6346,6446,6448],[6549,6347,6447,6449],[6550,6348,6448,6450],[6551,6349,6449,101213],[6552,6350,6450,6452],[6553,6351,101288,6453],[6554,6352,6452,6454],[6555,6353,6453,102117],[6556,6354,6454,6456],[6557,6355,6455,6457],[6558,6356,6456,6458],[6559,6357,6457,6459],[6560,6358,6458,6460],[6561,6359,6459,6461],[6562,6360,6460,6462],[6563,6361,6461,6463],[6564,6362,6462,-1],[6565,6363,-1,6465],[6566,6364,6464,6466],[6567,6365,6465,6467],[6568,6366,6466,6468],[6569,6367,6467,6469],[6570,6368,6468,101892],[6571,6369,6469,6471],[6572,6370,6470,6472],[6573,6371,6471,6473],[6574,6372,101985,6474],[6575,6373,6473,6475],[6576,6374,6474,6476],[6577,6375,6475,6477],[6578,6376,6476,101002],[6579,6377,6477,6479],[6580,6378,101047,6480],[6581,6379,6479,6481],[6582,6380,6480,6482],[6583,6381,6481,6483],[6584,6382,6482,6484],[6585,6383,6483,6485],[6586,6384,6484,6486],[6587,6385,6485,101088],[6588,6386,6486,6488],[6589,6387,101137,6489],[6590,6388,6488,6490],[6591,6389,6489,6491],[6592,6390,6490,6492],[6593,6391,6491,6493],[6594,6392,6492,6494],[6595,6393,6493,6495],[6596,6394,6494,101398],[6597,6395,6495,6497],[6598,6396,6496,6498],[6599,6397,6497,6499],[6600,6398,101457,101494],[6601,6399,101525,6501],[6602,6400,6500,6502],[6603,6401,6501,6503],[6604,6402,6502,6504],[6605,6403,6503,6505],[6606,6404,6504,6506],[6607,6405,6505,6507],[6608,6406,6506,6508],[6609,6407,6507,6509],[6610,6408,6508,6510],[6611,6409,6509,100502],[6612,6410,6510,6512],[6613,6411,6511,6513],[6614,6412,6512,6514],[6615,6413,100593,6515],[6616,6414,6514,6516],[6617,6415,6515,6517],[6618,6416,6516,6518],[6619,6417,6517,6519],[6620,6418,6518,6520],[6621,6419,6519,6521],[6622,6420,6520,6522],[6623,6421,6521,6523],[6624,6422,6522,6524],[6625,6423,6523,100829],[6626,6424,6524,6526],[6627,6425,100752,6527],[6628,6426,6526,6528],[6629,6427,6527,6529],[6630,6428,6528,6530],[6631,6429,6529,6531],[6632,6430,6530,100906],[6633,6431,100933,6533],[6634,6432,6532,6534],[6635,6433,6533,6535],[6636,6434,6534,6536],[6637,6435,6535,6537],[6638,6436,6536,6538],[6639,6437,6537,6539],[6640,6438,6538,6540],[6641,6439,6539,6541],[6642,6440,6540,6542],[6643,6441,6541,6543],[6644,6442,6542,6544],[6645,6443,6543,6545],[6646,6444,6544,6546],[6647,6445,6545,6547],[6648,6446,6546,6548],[6649,6447,6547,6549],[6650,6448,6548,6550],[6651,6449,6549,6551],[6652,6450,6550,101214],[6653,6451,6551,6553],[6654,6452,101289,6554],[6655,6453,6553,6555],[6656,6454,6554,102118],[6657,6455,6555,6557],[6658,6456,6556,6558],[6659,6457,6557,6559],[6660,6458,6558,6560],[6661,6459,6559,6561],[6662,6460,6560,6562],[6663,6461,6561,6563],[6664,6462,6562,6564],[6665,6463,6563,-1],[6666,6464,-1,6566],[6667,6465,6565,6567],[6668,6466,6566,6568],[6669,6467,6567,6569],[6670,6468,6568,6570],[6671,6469,6569,101893],[6672,6470,6570,6572],[6673,6471,6571,6573],[6674,6472,6572,6574],[6675,6473,101986,6575],[6676,6474,6574,6576],[6677,6475,6575,6577],[6678,6476,6576,6578],[6679,6477,6577,101003],[6680,6478,6578,6580],[6681,6479,101048,6581],[6682,6480,6580,6582],[6683,6481,6581,6583],[6684,6482,6582,6584],[6685,6483,6583,6585],[6686,6484,6584,6586],[6687,6485,6585,6587],[6688,6486,6586,101089],[6689,6487,6587,6589],[6690,6488,101138,6590],[6691,6489,6589,6591],[6692,6490,6590,6592],[6693,6491,6591,6593],[6694,6492,6592,6594],[6695,6493,6593,6595],[6696,6494,6594,6596],[6697,6495,6595,101399],[6698,6496,6596,6598],[6699,6497,6597,6599],[6700,6498,6598,6600],[6701,6499,101458,101495],[6702,6500,101526,6602],[6703,6501,6601,6603],[6704,6502,6602,6604],[6705,6503,6603,6605],[6706,6504,6604,6606],[6707,6505,6605,6607],[6708,6506,6606,6608],[6709,6507,6607,6609],[6710,6508,6608,6610],[6711,6509,6609,6611],[6712,6510,6610,100503],[6713,6511,6611,6613],[6714,6512,6612,6614],[6715,-1,100594,6615],[6716,6514,6614,6616],[6717,6515,6615,6617],[6718,6516,6616,6618],[6719,6517,6617,6619],[6720,6518,6618,6620],[6721,6519,6619,6621],[6722,6520,6620,6622],[6723,6521,6621,6623],[6724,6522,6622,6624],[6725,6523,6623,6625],[6726,6524,6624,6626],[6727,-1,6625,100830],[6728,6526,100753,6628],[6729,6527,6627,6629],[6730,6528,6628,6630],[6731,6529,6629,6631],[6732,6530,6630,6632],[6733,6531,6631,100907],[6734,6532,100934,6634],[6735,6533,6633,6635],[6736,6534,6634,6636],[6737,6535,6635,6637],[6738,6536,6636,6638],[6739,6537,6637,6639],[6740,6538,6638,6640],[6741,6539,6639,6641],[6742,6540,6640,6642],[6743,6541,6641,6643],[6744,6542,6642,6644],[6745,6543,6643,6645],[6746,6544,6644,6646],[6747,6545,6645,6647],[6748,6546,6646,6648],[6749,6547,6647,6649],[6750,6548,6648,6650],[6751,6549,6649,6651],[6752,6550,6650,6652],[6753,6551,6651,101215],[6754,6552,6652,6654],[6755,6553,101290,6655],[6756,6554,6654,6656],[6757,6555,6655,102119],[6758,6556,6656,6658],[6759,6557,6657,6659],[6760,6558,6658,6660],[6761,6559,6659,6661],[6762,6560,6660,6662],[6763,6561,6661,6663],[6764,6562,6662,6664],[6765,6563,6663,6665],[6766,6564,6664,-1],[6767,6565,-1,6667],[6768,6566,6666,6668],[6769,6567,6667,6669],[6770,6568,6668,6670],[6771,6569,6669,6671],[6772,6570,6670,101894],[6773,6571,6671,6673],[6774,6572,6672,6674],[6775,6573,6673,6675],[6776,6574,101987,6676],[6777,6575,6675,6677],[6778,6576,6676,6678],[6779,6577,6677,6679],[6780,6578,6678,101004],[6781,-1,101049,6681],[6782,6580,6680,6682],[6783,6581,6681,6683],[6784,6582,6682,6684],[6785,6583,6683,6685],[6786,6584,6684,6686],[6787,6585,6685,6687],[6788,6586,6686,6688],[6789,6587,6687,101090],[6790,6588,6688,6690],[6791,6589,101139,6691],[6792,6590,6690,6692],[6793,6591,6691,6693],[6794,6592,6692,6694],[6795,6593,6693,6695],[6796,6594,6694,6696],[6797,6595,6695,6697],[6798,6596,6696,101400],[6799,6597,6697,6699],[6800,6598,6698,6700],[6801,6599,6699,6701],[6802,6600,101459,101496],[6803,6601,101527,6703],[6804,6602,6702,6704],[6805,6603,6703,6705],[6806,6604,6704,6706],[6807,6605,6705,6707],[6808,6606,6706,6708],[6809,6607,6707,6709],[6810,6608,6708,6710],[6811,6609,6709,6711],[6812,6610,6710,6712],[6813,6611,6711,100504],[6814,6612,6712,6714],[6815,6613,6713,6715],[6816,6614,100595,6716],[6817,6615,6715,6717],[6818,6616,6716,6718],[6819,6617,6717,6719],[6820,6618,6718,6720],[6821,6619,6719,6721],[6822,6620,6720,6722],[6823,6621,6721,6723],[6824,6622,6722,6724],[6825,6623,6723,6725],[6826,6624,6724,6726],[6827,6625,6725,6727],[6828,6626,6726,100831],[6829,6627,100754,6729],[6830,6628,6728,6730],[6831,6629,6729,6731],[6832,6630,6730,6732],[6833,6631,6731,6733],[6834,6632,6732,100908],[6835,6633,100935,6735],[6836,6634,6734,6736],[6837,6635,6735,6737],[6838,6636,6736,6738],[6839,6637,6737,6739],[6840,6638,6738,6740],[6841,6639,6739,6741],[6842,6640,6740,6742],[6843,6641,6741,6743],[6844,6642,6742,6744],[6845,6643,6743,6745],[6846,6644,6744,6746],[6847,6645,6745,6747],[6848,6646,6746,6748],[6849,6647,6747,6749],[6850,6648,6748,6750],[6851,6649,6749,6751],[6852,6650,6750,6752],[6853,6651,6751,6753],[6854,6652,6752,101216],[6855,6653,6753,6755],[6856,6654,101291,6756],[6857,6655,6755,6757],[6858,6656,6756,102120],[6859,6657,6757,6759],[6860,6658,6758,6760],[6861,6659,6759,6761],[6862,6660,6760,6762],[6863,6661,6761,6763],[6864,6662,6762,6764],[6865,6663,6763,6765],[6866,6664,6764,6766],[6867,6665,6765,-1],[6868,6666,-1,6768],[6869,6667,6767,6769],[6870,6668,6768,6770],[6871,6669,6769,6771],[6872,6670,6770,6772],[6873,6671,6771,6773],[6874,-1,6772,101895],[6875,6673,6773,6775],[6876,6674,6774,6776],[6877,6675,101988,6777],[6878,6676,6776,6778],[6879,6677,6777,6779],[6880,6678,6778,6780],[6881,6679,6779,101005],[6882,6680,101050,6782],[6883,6681,6781,6783],[6884,6682,6782,6784],[6885,6683,6783,6785],[6886,6684,6784,6786],[6887,6685,6785,6787],[6888,6686,6786,6788],[6889,6687,6787,6789],[6890,6688,6788,101091],[6891,6689,6789,6791],[6892,6690,101140,6792],[6893,6691,6791,6793],[6894,6692,6792,6794],[6895,6693,6793,6795],[6896,6694,6794,6796],[6897,6695,6795,6797],[6898,6696,6796,6798],[-1,6697,6797,101401],[6900,6698,6798,6800],[6901,6699,6799,6801],[6902,6700,6800,6802],[6903,6701,101460,101497],[-1,6702,101528,6804],[6905,6703,6803,6805],[6906,6704,6804,6806],[6907,6705,6805,6807],[6908,6706,6806,6808],[6909,6707,6807,6809],[6910,6708,6808,6810],[6911,6709,6809,6811],[6912,6710,6810,6812],[6913,6711,6811,6813],[6914,6712,6812,100505],[6915,6713,6813,6815],[6916,6714,6814,6816],[6917,6715,100596,6817],[6918,6716,6816,6818],[6919,6717,6817,6819],[6920,6718,6818,6820],[6921,6719,6819,6821],[6922,6720,6820,6822],[6923,6721,6821,6823],[6924,6722,6822,6824],[6925,6723,6823,6825],[6926,6724,6824,6826],[6927,6725,6825,6827],[6928,6726,6826,6828],[6929,6727,6827,100832],[-1,6728,100755,6830],[6931,6729,6829,6831],[6932,6730,6830,6832],[6933,6731,6831,6833],[6934,6732,6832,6834],[6935,6733,6833,6835],[6936,6734,6834,6836],[6937,6735,6835,6837],[6938,6736,6836,6838],[6939,6737,6837,6839],[6940,6738,6838,6840],[6941,6739,6839,6841],[6942,6740,6840,6842],[6943,6741,6841,6843],[6944,6742,6842,6844],[6945,6743,6843,6845],[6946,6744,6844,6846],[6947,6745,6845,6847],[6948,6746,6846,6848],[6949,6747,6847,6849],[6950,6748,6848,6850],[6951,6749,6849,6851],[6952,6750,6850,6852],[6953,6751,6851,6853],[6954,6752,6852,6854],[6955,6753,6853,101217],[6956,6754,6854,6856],[6957,6755,101292,6857],[6958,6756,6856,6858],[6959,6757,6857,102121],[6960,6758,6858,6860],[6961,6759,6859,6861],[6962,6760,6860,6862],[6963,6761,6861,6863],[6964,6762,6862,6864],[6965,6763,6863,6865],[6966,6764,6864,6866],[6967,6765,6865,6867],[6968,6766,6866,-1],[6969,6767,-1,6869],[6970,6768,6868,6870],[6971,6769,6869,6871],[6972,6770,6870,6872],[6973,6771,6871,6873],[6974,6772,6872,6874],[6975,6773,6873,101896],[6976,6774,6874,6876],[6977,6775,6875,6877],[6978,6776,101989,6878],[6979,6777,6877,6879],[6980,6778,6878,6880],[6981,6779,6879,6881],[6982,6780,6880,101006],[6983,6781,101051,6883],[6984,6782,6882,6884],[6985,6783,6883,6885],[6986,6784,6884,6886],[6987,6785,6885,6887],[6988,6786,6886,6888],[6989,6787,6887,6889],[6990,6788,6888,6890],[6991,6789,6889,101092],[6992,6790,6890,6892],[6993,6791,101141,6893],[6994,6792,6892,6894],[6995,6793,6893,6895],[6996,6794,6894,6896],[6997,6795,6895,6897],[6998,6796,6896,6898],[6999,6797,6897,101402],[7000,6798,6898,6900],[7001,6799,6899,6901],[7002,6800,6900,6902],[7003,6801,6901,6903],[7004,6802,101461,101498],[7005,6803,6903,6905],[7006,6804,101529,6906],[7007,6805,6905,6907],[7008,6806,6906,6908],[7009,6807,6907,6909],[7010,6808,6908,6910],[7011,6809,6909,6911],[7012,6810,6910,6912],[7013,6811,6911,6913],[7014,6812,6912,6914],[-1,6813,6913,100506],[7016,6814,6914,6916],[7017,6815,6915,6917],[7018,6816,100597,6918],[7019,6817,6917,6919],[7020,6818,6918,6920],[7021,6819,6919,6921],[7022,6820,6920,6922],[7023,6821,6921,6923],[7024,6822,6922,6924],[7025,6823,6923,6925],[7026,6824,6924,6926],[7027,6825,6925,101300],[7028,6826,101335,6928],[7029,6827,6927,6929],[7030,6828,6928,100833],[7031,6829,6929,6931],[7032,6830,100756,6932],[7033,6831,6931,6933],[7034,6832,6932,6934],[7035,6833,6933,6935],[7036,6834,6934,6936],[7037,6835,6935,6937],[7038,6836,6936,6938],[7039,6837,6937,6939],[7040,6838,6938,6940],[7041,6839,6939,6941],[7042,6840,6940,6942],[7043,6841,6941,6943],[7044,6842,6942,6944],[7045,6843,6943,6945],[7046,6844,6944,6946],[7047,6845,6945,6947],[7048,6846,6946,6948],[7049,6847,6947,6949],[7050,6848,6948,6950],[7051,6849,6949,6951],[7052,6850,6950,6952],[7053,6851,6951,6953],[7054,6852,6952,6954],[7055,6853,6953,6955],[7056,6854,6954,101218],[7057,6855,6955,6957],[7058,6856,101293,6958],[7059,6857,6957,6959],[7060,6858,6958,102122],[7061,6859,6959,6961],[7062,6860,6960,6962],[7063,6861,6961,6963],[7064,6862,6962,6964],[7065,6863,6963,6965],[7066,6864,6964,6966],[7067,6865,6965,6967],[7068,6866,6966,6968],[7069,6867,6967,-1],[7070,6868,-1,6970],[7071,6869,6969,6971],[7072,6870,6970,6972],[7073,6871,6971,6973],[7074,6872,6972,6974],[7075,6873,6973,6975],[7076,6874,6974,101897],[7077,6875,6975,6977],[7078,6876,6976,6978],[-1,6877,101990,6979],[7080,6878,6978,6980],[7081,6879,6979,6981],[7082,6880,6980,6982],[7083,6881,6981,6983],[7084,6882,6982,6984],[7085,6883,6983,6985],[7086,6884,6984,6986],[7087,6885,6985,6987],[7088,6886,6986,6988],[7089,6887,6987,6989],[7090,6888,6988,6990],[7091,6889,6989,6991],[7092,6890,6990,101093],[7093,6891,6991,6993],[7094,6892,101142,6994],[7095,6893,6993,6995],[7096,6894,6994,6996],[7097,6895,6995,6997],[7098,6896,6996,6998],[7099,6897,6997,6999],[7100,6898,6998,101403],[7101,6899,6999,7001],[7102,6900,7000,7002],[7103,6901,7001,7003],[7104,6902,7002,7004],[7105,6903,101462,101499],[7106,6904,7004,7006],[7107,6905,101530,7007],[7108,6906,7006,7008],[7109,6907,7007,7009],[7110,6908,7008,7010],[7111,6909,7009,7011],[7112,6910,7010,7012],[7113,6911,7011,7013],[7114,6912,7012,7014],[7115,6913,7013,100507],[7116,6914,7014,7016],[7117,6915,7015,7017],[7118,6916,7016,7018],[7119,6917,100598,7019],[7120,6918,7018,7020],[7121,6919,7019,7021],[7122,6920,7020,7022],[7123,6921,7021,7023],[7124,6922,7022,7024],[7125,6923,7023,7025],[7126,6924,7024,7026],[7127,6925,7025,7027],[7128,6926,7026,101301],[7129,6927,101336,7029],[7130,6928,7028,7030],[7131,6929,7029,100834],[7132,6930,7030,7032],[7133,6931,100757,7033],[7134,6932,7032,7034],[7135,6933,7033,7035],[7136,6934,7034,7036],[7137,6935,7035,7037],[7138,6936,7036,7038],[7139,6937,7037,7039],[7140,6938,7038,7040],[7141,6939,7039,7041],[7142,6940,7040,7042],[7143,6941,7041,7043],[7144,6942,7042,7044],[7145,6943,7043,7045],[7146,6944,7044,7046],[7147,6945,7045,7047],[7148,6946,7046,7048],[7149,6947,7047,7049],[7150,6948,7048,7050],[7151,6949,7049,7051],[7152,6950,7050,7052],[7153,6951,7051,7053],[7154,6952,7052,7054],[7155,6953,7053,7055],[7156,6954,7054,7056],[7157,6955,7055,101219],[7158,6956,7056,7058],[7159,6957,101294,7059],[7160,6958,7058,7060],[7161,6959,7059,102123],[7162,6960,7060,7062],[7163,6961,7061,7063],[7164,6962,7062,7064],[7165,6963,7063,7065],[7166,6964,7064,7066],[7167,6965,7065,7067],[7168,6966,7066,7068],[7169,6967,7067,7069],[7170,6968,7068,-1],[7171,6969,-1,7071],[7172,6970,7070,7072],[7173,6971,7071,7073],[7174,6972,7072,7074],[7175,6973,7073,7075],[7176,6974,7074,7076],[7177,6975,7075,101898],[7178,6976,7076,7078],[7179,6977,7077,7079],[7180,6978,7078,7080],[7181,6979,101991,7081],[7182,6980,7080,7082],[7183,6981,7081,7083],[7184,6982,7082,7084],[7185,6983,7083,7085],[7186,6984,7084,7086],[7187,6985,7085,7087],[7188,6986,7086,7088],[7189,6987,7087,7089],[7190,6988,7088,7090],[7191,6989,7089,7091],[7192,6990,7090,7092],[7193,6991,7091,101094],[7194,6992,7092,7094],[7195,6993,101143,7095],[7196,6994,7094,7096],[7197,6995,7095,7097],[7198,6996,7096,7098],[7199,6997,7097,7099],[7200,6998,7098,7100],[7201,6999,7099,101404],[7202,7000,7100,7102],[7203,7001,7101,7103],[7204,7002,7102,7104],[7205,-1,101463,7105],[7206,7004,7104,101500],[7207,7005,7105,7107],[7208,7006,101531,7108],[7209,7007,7107,7109],[7210,7008,7108,7110],[7211,7009,7109,7111],[7212,7010,7110,7112],[7213,7011,7111,7113],[7214,7012,7112,7114],[7215,7013,7113,7115],[7216,7014,7114,100508],[7217,7015,7115,7117],[7218,7016,7116,7118],[7219,7017,7117,7119],[7220,7018,100599,7120],[7221,7019,7119,7121],[7222,7020,7120,7122],[7223,7021,7121,7123],[7224,7022,7122,7124],[7225,7023,7123,7125],[7226,7024,7124,7126],[7227,7025,7125,7127],[7228,7026,7126,7128],[7229,7027,7127,101302],[7230,7028,101337,7130],[7231,7029,7129,7131],[7232,7030,7130,100835],[7233,7031,7131,7133],[7234,7032,100758,7134],[7235,7033,7133,7135],[7236,7034,7134,7136],[7237,7035,7135,7137],[7238,7036,7136,7138],[7239,7037,7137,7139],[7240,7038,7138,7140],[7241,7039,7139,7141],[7242,7040,7140,7142],[7243,7041,7141,7143],[7244,7042,7142,7144],[7245,7043,7143,7145],[7246,7044,7144,7146],[7247,7045,7145,7147],[7248,7046,7146,7148],[7249,7047,7147,7149],[7250,7048,7148,7150],[7251,7049,7149,7151],[7252,7050,7150,7152],[7253,7051,7151,7153],[7254,7052,7152,7154],[7255,7053,7153,7155],[7256,7054,7154,7156],[7257,7055,7155,7157],[7258,7056,7156,101220],[7259,-1,101295,7159],[7260,7058,7158,7160],[7261,7059,7159,7161],[7262,7060,7160,102124],[7263,7061,7161,7163],[7264,7062,7162,7164],[7265,7063,7163,7165],[7266,7064,7164,7166],[7267,7065,7165,7167],[7268,7066,7166,7168],[7269,7067,7167,7169],[7270,7068,7168,7170],[7271,7069,7169,-1],[7272,7070,-1,7172],[7273,7071,7171,7173],[7274,7072,7172,7174],[7275,7073,7173,7175],[7276,7074,7174,7176],[7277,7075,7175,7177],[7278,7076,7176,101899],[7279,7077,7177,7179],[7280,7078,7178,7180],[7281,7079,7179,7181],[7282,7080,101992,7182],[7283,7081,7181,7183],[7284,7082,7182,7184],[7285,7083,7183,7185],[7286,7084,7184,7186],[7287,7085,7185,7187],[7288,7086,7186,7188],[7289,7087,7187,7189],[7290,7088,7188,7190],[7291,7089,7189,7191],[7292,7090,7190,7192],[7293,7091,7191,7193],[7294,7092,7192,101095],[7295,7093,7193,7195],[7296,7094,101144,7196],[7297,7095,7195,7197],[7298,7096,7196,7198],[7299,7097,7197,7199],[7300,7098,7198,7200],[7301,7099,7199,7201],[7302,7100,7200,101405],[7303,7101,7201,7203],[7304,7102,7202,7204],[7305,7103,7203,7205],[7306,7104,101464,7206],[7307,7105,7205,101501],[7308,7106,7206,7208],[7309,7107,101532,7209],[7310,7108,7208,7210],[7311,7109,7209,7211],[7312,7110,7210,7212],[7313,7111,7211,7213],[7314,7112,7212,7214],[7315,7113,7213,7215],[7316,7114,7214,7216],[7317,7115,7215,100509],[7318,7116,7216,7218],[7319,7117,7217,7219],[7320,7118,7218,7220],[7321,7119,100600,7221],[7322,7120,7220,7222],[7323,7121,7221,7223],[7324,7122,7222,7224],[7325,7123,7223,7225],[7326,7124,7224,7226],[7327,7125,7225,7227],[7328,7126,7226,7228],[7329,7127,7227,7229],[7330,7128,7228,101303],[7331,7129,101338,7231],[7332,7130,7230,7232],[7333,7131,7231,100836],[7334,7132,7232,7234],[7335,7133,100759,7235],[7336,7134,7234,7236],[7337,7135,7235,7237],[7338,7136,7236,7238],[7339,7137,7237,7239],[7340,7138,7238,7240],[7341,7139,7239,7241],[7342,7140,7240,7242],[7343,7141,7241,7243],[7344,7142,7242,7244],[7345,7143,7243,7245],[7346,7144,7244,7246],[7347,7145,7245,7247],[7348,7146,7246,7248],[7349,7147,7247,7249],[7350,7148,7248,7250],[7351,7149,7249,7251],[7352,7150,7250,7252],[7353,7151,7251,7253],[7354,7152,7252,7254],[7355,7153,7253,7255],[7356,7154,7254,7256],[7357,7155,7255,7257],[7358,7156,7256,7258],[7359,7157,7257,101221],[7360,7158,101296,7260],[7361,7159,7259,7261],[7362,7160,7260,7262],[7363,7161,7261,102125],[7364,7162,7262,7264],[7365,7163,7263,7265],[7366,7164,7264,7266],[7367,7165,7265,7267],[7368,7166,7266,7268],[7369,7167,7267,7269],[7370,7168,7268,7270],[7371,7169,7269,7271],[7372,7170,7270,-1],[7373,7171,-1,7273],[7374,7172,7272,7274],[7375,7173,7273,7275],[7376,7174,7274,7276],[7377,7175,7275,7277],[7378,7176,7276,7278],[7379,7177,7277,101900],[7380,7178,7278,7280],[7381,7179,7279,7281],[7382,7180,7280,7282],[7383,7181,101993,7283],[7384,7182,7282,7284],[7385,7183,7283,7285],[7386,7184,7284,7286],[7387,7185,7285,7287],[7388,7186,7286,7288],[7389,7187,7287,7289],[7390,7188,7288,7290],[7391,7189,7289,7291],[7392,7190,7290,7292],[7393,7191,7291,7293],[7394,7192,7292,7294],[7395,7193,7293,101096],[7396,7194,7294,7296],[7397,7195,101145,7297],[7398,7196,7296,7298],[7399,7197,7297,7299],[7400,7198,7298,7300],[7401,7199,7299,7301],[7402,7200,7300,7302],[7403,7201,7301,101406],[7404,7202,7302,7304],[7405,7203,7303,7305],[7406,7204,7304,7306],[7407,7205,101465,7307],[7408,7206,7306,101502],[7409,7207,7307,7309],[7410,7208,101533,7310],[7411,7209,7309,7311],[7412,7210,7310,7312],[7413,7211,7311,7313],[7414,7212,7312,7314],[7415,7213,7313,7315],[7416,7214,7314,7316],[7417,7215,7315,7317],[7418,7216,7316,100510],[7419,7217,7317,7319],[7420,7218,7318,7320],[7421,7219,7319,7321],[7422,7220,100601,7322],[7423,7221,7321,7323],[7424,7222,7322,7324],[7425,7223,7323,7325],[7426,7224,7324,7326],[7427,7225,7325,7327],[7428,7226,7326,7328],[7429,7227,7327,7329],[7430,7228,7328,7330],[7431,7229,7329,101304],[7432,7230,101339,7332],[7433,7231,7331,7333],[7434,7232,7332,100837],[7435,7233,7333,7335],[7436,7234,100760,7336],[7437,7235,7335,7337],[7438,7236,7336,7338],[7439,7237,7337,7339],[7440,7238,7338,7340],[7441,7239,7339,7341],[7442,7240,7340,7342],[7443,7241,7341,7343],[7444,7242,7342,7344],[7445,7243,7343,7345],[7446,7244,7344,7346],[7447,7245,7345,7347],[7448,7246,7346,7348],[7449,7247,7347,7349],[7450,7248,7348,7350],[7451,7249,7349,7351],[7452,7250,7350,7352],[7453,7251,7351,7353],[7454,7252,7352,7354],[7455,7253,7353,7355],[7456,7254,7354,7356],[7457,7255,7355,7357],[7458,7256,7356,7358],[7459,7257,7357,7359],[7460,7258,7358,101222],[7461,7259,101297,7361],[7462,7260,7360,7362],[7463,7261,7361,7363],[7464,7262,7362,102126],[7465,7263,7363,7365],[7466,7264,7364,7366],[7467,7265,7365,7367],[7468,7266,7366,7368],[7469,7267,7367,7369],[7470,7268,7368,7370],[7471,7269,7369,7371],[7472,7270,7370,7372],[7473,7271,7371,-1],[7474,7272,-1,7374],[7475,7273,7373,7375],[7476,7274,7374,7376],[7477,7275,7375,7377],[7478,7276,7376,7378],[7479,7277,7377,7379],[7480,7278,7378,101901],[7481,7279,7379,7381],[7482,7280,7380,7382],[7483,7281,7381,7383],[7484,7282,101994,7384],[7485,7283,7383,7385],[7486,7284,7384,7386],[7487,7285,7385,7387],[7488,7286,7386,7388],[7489,7287,7387,7389],[7490,7288,7388,7390],[7491,7289,7389,7391],[7492,7290,7390,7392],[7493,7291,7391,7393],[7494,7292,7392,7394],[7495,7293,7393,7395],[7496,7294,7394,101097],[7497,7295,7395,7397],[7498,7296,101146,7398],[7499,7297,7397,7399],[7500,7298,7398,7400],[7501,7299,7399,7401],[7502,7300,7400,7402],[7503,7301,7401,7403],[7504,7302,7402,101407],[7505,7303,7403,7405],[7506,7304,7404,7406],[7507,7305,7405,7407],[7508,7306,101466,7408],[7509,7307,7407,101503],[7510,7308,7408,7410],[7511,7309,101534,7411],[7512,7310,7410,7412],[7513,7311,7411,7413],[7514,7312,7412,7414],[7515,7313,7413,7415],[7516,7314,7414,7416],[7517,7315,7415,7417],[7518,7316,7416,7418],[7519,7317,7417,100511],[7520,7318,7418,7420],[7521,7319,7419,7421],[7522,-1,100602,7422],[7523,7321,7421,7423],[7524,7322,7422,7424],[7525,7323,7423,7425],[7526,7324,7424,7426],[7527,7325,7425,7427],[7528,7326,7426,7428],[7529,7327,7427,7429],[7530,7328,7428,7430],[7531,7329,7429,7431],[7532,7330,7430,101305],[7533,7331,101340,7433],[7534,7332,7432,7434],[7535,7333,7433,7435],[7536,-1,7434,100838],[7537,7335,100761,7437],[7538,7336,7436,7438],[7539,7337,7437,7439],[7540,7338,7438,7440],[7541,7339,7439,7441],[7542,7340,7440,7442],[7543,7341,7441,7443],[7544,7342,7442,7444],[7545,7343,7443,7445],[7546,7344,7444,7446],[7547,7345,7445,7447],[7548,7346,7446,7448],[7549,7347,7447,7449],[7550,7348,7448,7450],[7551,7349,7449,7451],[7552,7350,7450,7452],[7553,7351,7451,7453],[7554,7352,7452,7454],[7555,7353,7453,7455],[7556,7354,7454,7456],[7557,7355,7455,7457],[7558,7356,7456,7458],[7559,7357,7457,7459],[7560,7358,7458,7460],[7561,7359,7459,101223],[7562,7360,101298,7462],[7563,7361,7461,7463],[7564,7362,7462,7464],[7565,7363,7463,102127],[7566,7364,7464,7466],[7567,7365,7465,7467],[7568,7366,7466,7468],[7569,7367,7467,7469],[7570,7368,7468,7470],[7571,7369,7469,7471],[7572,7370,7470,7472],[7573,7371,7471,7473],[7574,7372,7472,-1],[7575,7373,-1,7475],[7576,7374,7474,7476],[7577,7375,7475,7477],[7578,7376,7476,7478],[7579,7377,7477,7479],[7580,7378,7478,7480],[7581,7379,7479,101902],[7582,7380,7480,7482],[7583,7381,7481,7483],[7584,7382,7482,7484],[7585,7383,101995,7485],[7586,7384,7484,7486],[7587,7385,7485,7487],[7588,7386,7486,7488],[7589,7387,7487,7489],[7590,7388,7488,7490],[7591,7389,7489,7491],[7592,7390,7490,7492],[7593,7391,7491,7493],[7594,7392,7492,7494],[7595,7393,7493,7495],[7596,7394,7494,7496],[7597,7395,7495,101098],[7598,-1,101147,7498],[7599,7397,7497,7499],[7600,7398,7498,7500],[7601,7399,7499,7501],[7602,7400,7500,7502],[7603,7401,7501,7503],[7604,7402,7502,7504],[7605,7403,7503,101408],[7606,7404,7504,7506],[7607,7405,7505,7507],[7608,7406,7506,7508],[7609,7407,101467,7509],[7610,7408,7508,7510],[7611,-1,7509,101504],[7612,7410,101535,7512],[7613,7411,7511,7513],[7614,7412,7512,7514],[7615,7413,7513,7515],[7616,7414,7514,7516],[7617,7415,7515,7517],[7618,7416,7516,7518],[7619,7417,7517,7519],[7620,7418,7518,100512],[7621,7419,7519,7521],[7622,7420,7520,7522],[7623,7421,100603,7523],[7624,7422,7522,7524],[7625,7423,7523,7525],[7626,7424,7524,7526],[7627,7425,7525,7527],[7628,7426,7526,7528],[7629,7427,7527,7529],[7630,7428,7528,7530],[7631,7429,7529,7531],[7632,7430,7530,7532],[7633,7431,7531,101306],[7634,7432,101341,7534],[7635,7433,7533,7535],[7636,7434,7534,7536],[7637,7435,7535,100839],[7638,7436,100762,7538],[7639,7437,7537,7539],[7640,7438,7538,7540],[7641,7439,7539,7541],[7642,7440,7540,7542],[7643,7441,7541,7543],[7644,7442,7542,7544],[7645,7443,7543,7545],[7646,7444,7544,7546],[7647,7445,7545,7547],[7648,7446,7546,7548],[7649,7447,7547,7549],[7650,7448,7548,7550],[7651,7449,7549,7551],[7652,7450,7550,7552],[7653,7451,7551,7553],[7654,7452,7552,7554],[7655,7453,7553,7555],[7656,7454,7554,7556],[7657,7455,7555,7557],[7658,7456,7556,7558],[7659,7457,7557,7559],[7660,7458,7558,7560],[7661,7459,7559,7561],[7662,7460,7560,7562],[7663,7461,7561,7563],[7664,7462,7562,7564],[7665,7463,7563,7565],[7666,7464,7564,102128],[7667,7465,7565,7567],[7668,7466,7566,7568],[7669,7467,7567,7569],[7670,7468,7568,7570],[7671,7469,7569,7571],[7672,7470,7570,7572],[7673,7471,7571,7573],[7674,7472,7572,7574],[7675,7473,7573,-1],[7676,7474,-1,7576],[7677,7475,7575,7577],[7678,7476,7576,7578],[7679,7477,7577,7579],[7680,7478,7578,7580],[7681,7479,7579,7581],[7682,7480,7580,101903],[7683,7481,7581,7583],[7684,7482,7582,7584],[7685,7483,7583,7585],[7686,7484,101996,7586],[7687,7485,7585,7587],[7688,7486,7586,7588],[7689,7487,7587,7589],[7690,7488,7588,7590],[7691,7489,7589,7591],[7692,7490,7590,7592],[7693,7491,7591,7593],[7694,7492,7592,7594],[7695,7493,7593,7595],[7696,7494,7594,7596],[7697,7495,7595,7597],[7698,7496,7596,101099],[7699,7497,101148,7599],[7700,7498,7598,7600],[7701,7499,7599,7601],[7702,7500,7600,7602],[7703,7501,7601,7603],[7704,7502,7602,7604],[7705,7503,7603,7605],[7706,7504,7604,101409],[7707,7505,7605,7607],[7708,7506,7606,7608],[7709,7507,7607,7609],[7710,7508,101468,7610],[7711,7509,7609,7611],[7712,7510,7610,101505],[7713,7511,101536,7613],[7714,7512,7612,7614],[7715,7513,7613,7615],[7716,7514,7614,7616],[7717,7515,7615,7617],[7718,7516,7616,7618],[7719,7517,7617,7619],[7720,7518,7618,7620],[-1,7519,7619,100513],[7722,7520,7620,7622],[7723,7521,7621,7623],[7724,7522,100604,7624],[7725,7523,7623,7625],[7726,7524,7624,7626],[7727,7525,7625,7627],[7728,7526,7626,7628],[7729,7527,7627,7629],[7730,7528,7628,7630],[7731,7529,7629,7631],[7732,7530,7630,7632],[7733,7531,7631,7633],[7734,7532,7632,101307],[7735,7533,101342,7635],[7736,7534,7634,7636],[7737,7535,7635,7637],[7738,7536,7636,100840],[7739,7537,100763,7639],[7740,7538,7638,7640],[7741,7539,7639,7641],[7742,7540,7640,7642],[7743,7541,7641,7643],[7744,7542,7642,7644],[7745,7543,7643,7645],[7746,7544,7644,7646],[7747,7545,7645,7647],[7748,7546,7646,7648],[7749,7547,7647,7649],[7750,7548,7648,7650],[7751,7549,7649,7651],[7752,7550,7650,7652],[7753,7551,7651,7653],[7754,7552,7652,7654],[7755,7553,7653,7655],[7756,7554,7654,7656],[7757,7555,7655,7657],[7758,7556,7656,7658],[7759,7557,7657,7659],[7760,7558,7658,7660],[7761,7559,7659,7661],[7762,7560,7660,7662],[7763,7561,7661,7663],[7764,7562,7662,7664],[7765,7563,7663,7665],[7766,7564,7664,7666],[7767,7565,7665,102129],[7768,7566,7666,7668],[7769,7567,7667,7669],[7770,7568,7668,7670],[7771,7569,7669,7671],[7772,7570,7670,7672],[7773,7571,7671,7673],[7774,7572,7672,7674],[7775,7573,7673,7675],[7776,7574,7674,-1],[7777,7575,-1,7677],[7778,7576,7676,7678],[7779,7577,7677,7679],[7780,7578,7678,7680],[7781,7579,7679,7681],[7782,7580,7680,7682],[7783,7581,7681,101904],[7784,7582,7682,7684],[7785,7583,7683,7685],[7786,7584,7684,7686],[7787,7585,101997,7687],[7788,7586,7686,7688],[7789,7587,7687,7689],[7790,7588,7688,7690],[7791,7589,7689,7691],[7792,7590,7690,7692],[7793,7591,7691,7693],[7794,7592,7692,7694],[7795,7593,7693,7695],[7796,7594,7694,7696],[7797,7595,7695,7697],[7798,7596,7696,7698],[7799,7597,7697,101100],[7800,7598,101149,7700],[7801,7599,7699,7701],[7802,7600,7700,7702],[7803,7601,7701,7703],[7804,7602,7702,7704],[7805,7603,7703,7705],[7806,7604,7704,7706],[7807,7605,7705,101410],[7808,7606,7706,7708],[7809,7607,7707,7709],[7810,7608,7708,7710],[7811,7609,101469,7711],[7812,7610,7710,7712],[7813,7611,7711,101506],[-1,7612,101537,7714],[7815,7613,7713,7715],[7816,7614,7714,7716],[7817,7615,7715,7717],[7818,7616,7716,7718],[7819,7617,7717,7719],[7820,7618,7718,7720],[7821,7619,7719,100514],[7822,7620,7720,7722],[7823,7621,7721,7723],[7824,7622,7722,7724],[7825,7623,100605,7725],[7826,7624,7724,7726],[7827,7625,7725,7727],[7828,7626,7726,7728],[7829,7627,7727,7729],[7830,7628,7728,7730],[7831,7629,7729,7731],[7832,7630,7730,7732],[7833,7631,7731,7733],[7834,7632,7732,7734],[7835,7633,7733,101308],[7836,7634,101343,7736],[7837,7635,7735,7737],[7838,7636,7736,7738],[7839,7637,7737,100841],[7840,7638,100764,7740],[7841,7639,7739,7741],[7842,7640,7740,7742],[7843,7641,7741,7743],[7844,7642,7742,7744],[7845,7643,7743,7745],[7846,7644,7744,7746],[7847,7645,7745,7747],[7848,7646,7746,7748],[7849,7647,7747,7749],[7850,7648,7748,7750],[7851,7649,7749,7751],[7852,7650,7750,7752],[7853,7651,7751,7753],[7854,7652,7752,7754],[7855,7653,7753,7755],[7856,7654,7754,7756],[7857,7655,7755,7757],[7858,7656,7756,7758],[7859,7657,7757,7759],[7860,7658,7758,7760],[7861,7659,7759,7761],[7862,7660,7760,7762],[7863,7661,7761,7763],[7864,7662,7762,7764],[7865,7663,7763,7765],[7866,7664,7764,7766],[7867,7665,7765,7767],[7868,7666,7766,102130],[7869,7667,7767,7769],[7870,7668,7768,7770],[7871,7669,7769,7771],[7872,7670,7770,7772],[7873,7671,7771,7773],[7874,7672,7772,7774],[7875,7673,7773,7775],[7876,7674,7774,7776],[7877,7675,7775,-1],[7878,7676,-1,7778],[7879,7677,7777,7779],[7880,7678,7778,7780],[7881,7679,7779,7781],[7882,7680,7780,7782],[7883,7681,7781,7783],[7884,7682,7782,101905],[7885,7683,7783,7785],[7886,7684,7784,7786],[7887,7685,7785,7787],[7888,7686,101998,7788],[7889,7687,7787,7789],[7890,7688,7788,7790],[7891,7689,7789,7791],[7892,7690,7790,7792],[7893,7691,7791,7793],[7894,7692,7792,7794],[7895,7693,7793,7795],[7896,7694,7794,7796],[7897,7695,7795,7797],[7898,7696,7796,7798],[7899,7697,7797,7799],[7900,7698,7798,7800],[7901,7699,7799,7801],[7902,7700,7800,7802],[7903,7701,7801,7803],[7904,7702,7802,7804],[7905,7703,7803,7805],[7906,7704,7804,7806],[7907,7705,7805,7807],[7908,7706,7806,101411],[7909,7707,7807,7809],[7910,7708,7808,7810],[7911,7709,7809,7811],[7912,7710,101470,7812],[7913,7711,7811,7813],[7914,7712,7812,101507],[7915,7713,7813,7815],[7916,7714,101538,7816],[7917,7715,7815,7817],[7918,7716,7816,7818],[7919,7717,7817,7819],[7920,7718,7818,7820],[7921,7719,7819,7821],[7922,7720,7820,100515],[7923,7721,7821,7823],[7924,7722,7822,7824],[7925,7723,7823,7825],[7926,7724,100606,7826],[7927,7725,7825,7827],[7928,7726,7826,7828],[7929,7727,7827,7829],[7930,7728,7828,7830],[7931,7729,7829,7831],[7932,7730,7830,7832],[7933,7731,7831,7833],[7934,7732,7832,7834],[7935,7733,7833,7835],[7936,7734,7834,101309],[7937,7735,101344,7837],[7938,7736,7836,7838],[7939,7737,7837,7839],[7940,7738,7838,100842],[-1,7739,100765,7841],[7942,7740,7840,7842],[7943,7741,7841,7843],[7944,7742,7842,7844],[7945,7743,7843,7845],[7946,7744,7844,7846],[7947,7745,7845,7847],[7948,7746,7846,7848],[7949,7747,7847,7849],[7950,7748,7848,7850],[7951,7749,7849,7851],[7952,7750,7850,7852],[7953,7751,7851,7853],[7954,7752,7852,7854],[7955,7753,7853,7855],[7956,7754,7854,7856],[7957,7755,7855,7857],[7958,7756,7856,7858],[7959,7757,7857,7859],[7960,7758,7858,7860],[7961,7759,7859,7861],[7962,7760,7860,7862],[7963,7761,7861,7863],[7964,7762,7862,7864],[7965,7763,7863,7865],[7966,7764,7864,7866],[7967,7765,7865,7867],[7968,7766,7866,7868],[7969,7767,7867,102131],[7970,7768,7868,7870],[7971,7769,7869,7871],[7972,7770,7870,7872],[7973,7771,7871,7873],[7974,7772,7872,7874],[7975,7773,7873,7875],[7976,7774,7874,7876],[7977,7775,7875,7877],[7978,7776,7876,-1],[7979,7777,-1,7879],[7980,7778,7878,7880],[7981,7779,7879,7881],[7982,7780,7880,7882],[7983,7781,7881,7883],[7984,7782,7882,7884],[7985,7783,7883,101906],[7986,7784,7884,7886],[7987,7785,7885,7887],[7988,7786,7886,7888],[7989,7787,101999,7889],[7990,7788,7888,7890],[7991,7789,7889,7891],[7992,7790,7890,7892],[7993,7791,7891,7893],[7994,7792,7892,7894],[7995,7793,7893,7895],[7996,7794,7894,7896],[7997,7795,7895,7897],[7998,7796,7896,7898],[7999,7797,7897,7899],[8000,7798,7898,7900],[8001,7799,7899,7901],[8002,7800,7900,7902],[8003,7801,7901,7903],[8004,7802,7902,7904],[8005,7803,7903,7905],[8006,7804,7904,7906],[8007,7805,7905,7907],[8008,7806,7906,7908],[8009,7807,7907,101412],[8010,7808,7908,7910],[8011,7809,7909,7911],[8012,7810,7910,7912],[8013,7811,101471,7913],[8014,7812,7912,7914],[8015,7813,7913,101508],[8016,7814,7914,7916],[8017,7815,101539,7917],[8018,7816,7916,7918],[8019,7817,7917,7919],[8020,7818,7918,7920],[8021,7819,7919,7921],[8022,7820,7920,7922],[8023,7821,7921,100516],[8024,7822,7922,7924],[8025,7823,7923,7925],[8026,7824,7924,7926],[8027,7825,100607,7927],[8028,7826,7926,7928],[8029,7827,7927,7929],[8030,7828,7928,7930],[8031,7829,7929,7931],[8032,7830,7930,7932],[8033,7831,7931,7933],[8034,7832,7932,7934],[8035,7833,7933,7935],[8036,7834,7934,7936],[8037,7835,7935,101310],[8038,7836,101345,7938],[8039,7837,7937,7939],[8040,7838,7938,7940],[8041,7839,7939,100843],[8042,7840,7940,7942],[8043,7841,100766,7943],[8044,7842,7942,7944],[8045,7843,7943,7945],[8046,7844,7944,7946],[8047,7845,7945,7947],[8048,7846,7946,7948],[8049,7847,7947,7949],[8050,7848,7948,7950],[8051,7849,7949,7951],[8052,7850,7950,7952],[8053,7851,7951,7953],[8054,7852,7952,7954],[8055,7853,7953,7955],[8056,7854,7954,7956],[8057,7855,7955,7957],[8058,7856,7956,7958],[8059,7857,7957,7959],[8060,7858,7958,7960],[8061,7859,7959,7961],[8062,7860,7960,7962],[8063,7861,7961,7963],[8064,7862,7962,7964],[8065,7863,7963,7965],[8066,7864,7964,7966],[8067,7865,7965,7967],[8068,7866,7966,7968],[8069,7867,7967,7969],[8070,7868,7968,7970],[8071,-1,7969,102132],[8072,7870,7970,7972],[8073,7871,7971,7973],[8074,7872,7972,7974],[8075,7873,7973,7975],[8076,7874,7974,7976],[8077,7875,7975,7977],[8078,7876,7976,7978],[8079,7877,7977,-1],[8080,7878,-1,7980],[8081,7879,7979,7981],[8082,7880,7980,7982],[8083,7881,7981,7983],[8084,7882,7982,7984],[8085,7883,7983,7985],[8086,7884,7984,101907],[8087,7885,7985,7987],[8088,7886,7986,7988],[8089,7887,7987,7989],[8090,7888,102000,7990],[8091,7889,7989,7991],[8092,7890,7990,7992],[8093,7891,7991,7993],[8094,7892,7992,7994],[8095,7893,7993,7995],[8096,7894,7994,7996],[8097,7895,7995,7997],[8098,7896,7996,7998],[8099,7897,7997,7999],[8100,7898,7998,8000],[8101,7899,7999,8001],[8102,7900,8000,8002],[8103,7901,8001,8003],[8104,7902,8002,8004],[8105,7903,8003,8005],[8106,7904,8004,8006],[8107,7905,8005,8007],[8108,7906,8006,8008],[8109,7907,8007,8009],[8110,7908,8008,101413],[8111,7909,8009,8011],[8112,7910,8010,8012],[8113,-1,101472,8013],[8114,7912,8012,8014],[8115,7913,8013,8015],[8116,7914,8014,101509],[8117,7915,8015,8017],[8118,7916,101540,8018],[8119,7917,8017,8019],[8120,7918,8018,8020],[8121,7919,8019,8021],[8122,7920,8020,8022],[8123,7921,8021,8023],[8124,7922,8022,100517],[8125,7923,8023,8025],[8126,7924,8024,8026],[8127,7925,8025,8027],[8128,7926,100608,8028],[8129,7927,8027,8029],[8130,7928,8028,8030],[8131,7929,8029,8031],[8132,7930,8030,8032],[8133,7931,8031,8033],[8134,7932,8032,8034],[8135,7933,8033,8035],[8136,7934,8034,8036],[8137,7935,8035,8037],[8138,7936,8036,101311],[8139,7937,101346,8039],[8140,7938,8038,8040],[8141,7939,8039,8041],[8142,7940,8040,100844],[8143,7941,8041,8043],[8144,7942,100767,8044],[8145,7943,8043,8045],[8146,7944,8044,8046],[8147,7945,8045,8047],[8148,7946,8046,8048],[8149,7947,8047,8049],[8150,7948,8048,8050],[8151,7949,8049,8051],[8152,7950,8050,8052],[8153,7951,8051,8053],[8154,7952,8052,8054],[8155,7953,8053,8055],[8156,7954,8054,8056],[8157,7955,8055,8057],[8158,7956,8056,8058],[8159,7957,8057,8059],[8160,7958,8058,8060],[8161,7959,8059,8061],[8162,7960,8060,8062],[8163,7961,8061,8063],[8164,7962,8062,8064],[8165,7963,8063,8065],[8166,7964,8064,8066],[8167,7965,8065,8067],[8168,7966,8066,8068],[8169,7967,8067,8069],[8170,7968,8068,8070],[8171,7969,8069,8071],[8172,7970,8070,102133],[8173,7971,8071,8073],[8174,7972,8072,8074],[8175,7973,8073,8075],[8176,7974,8074,8076],[8177,7975,8075,8077],[8178,7976,8076,8078],[8179,7977,8077,8079],[8180,7978,8078,-1],[8181,7979,-1,8081],[8182,7980,8080,8082],[8183,7981,8081,8083],[8184,7982,8082,8084],[8185,7983,8083,8085],[8186,7984,8084,8086],[8187,7985,8085,101908],[8188,7986,8086,8088],[8189,7987,8087,8089],[8190,7988,8088,8090],[8191,7989,102001,8091],[8192,7990,8090,8092],[8193,7991,8091,8093],[8194,7992,8092,8094],[8195,7993,8093,8095],[8196,7994,8094,8096],[8197,7995,8095,8097],[8198,7996,8096,8098],[8199,7997,8097,8099],[8200,7998,8098,8100],[8201,7999,8099,8101],[8202,8000,8100,8102],[8203,8001,8101,8103],[8204,8002,8102,8104],[8205,8003,8103,8105],[8206,8004,8104,8106],[8207,8005,8105,8107],[8208,8006,8106,8108],[8209,8007,8107,8109],[8210,8008,8108,8110],[8211,8009,8109,101414],[8212,8010,8110,8112],[8213,8011,8111,8113],[8214,8012,101473,8114],[8215,8013,8113,8115],[8216,8014,8114,8116],[8217,8015,8115,8117],[8218,-1,8116,101510],[8219,8017,101541,8119],[8220,8018,8118,8120],[8221,8019,8119,8121],[8222,8020,8120,8122],[8223,8021,8121,8123],[8224,8022,8122,8124],[8225,8023,8123,100518],[8226,8024,8124,8126],[8227,8025,8125,8127],[8228,8026,8126,8128],[8229,8027,100609,8129],[8230,8028,8128,8130],[8231,8029,8129,8131],[8232,8030,8130,8132],[8233,8031,8131,8133],[8234,8032,8132,8134],[8235,8033,8133,8135],[8236,8034,8134,8136],[8237,8035,8135,8137],[8238,8036,8136,8138],[8239,8037,8137,101312],[8240,8038,101347,8140],[8241,8039,8139,8141],[8242,8040,8140,8142],[8243,8041,8141,100845],[8244,8042,8142,8144],[8245,8043,100768,8145],[8246,8044,8144,8146],[8247,8045,8145,8147],[8248,8046,8146,8148],[8249,8047,8147,8149],[8250,8048,8148,8150],[8251,8049,8149,8151],[8252,8050,8150,8152],[8253,8051,8151,8153],[8254,8052,8152,8154],[8255,8053,8153,8155],[8256,8054,8154,8156],[8257,8055,8155,8157],[8258,8056,8156,8158],[8259,8057,8157,8159],[8260,8058,8158,8160],[8261,8059,8159,8161],[8262,8060,8160,8162],[8263,8061,8161,8163],[8264,8062,8162,8164],[8265,8063,8163,8165],[8266,8064,8164,8166],[8267,8065,8165,8167],[8268,8066,8166,8168],[8269,8067,8167,8169],[8270,8068,8168,8170],[8271,8069,8169,8171],[8272,8070,8170,8172],[8273,8071,8171,102134],[8274,8072,8172,8174],[8275,8073,8173,8175],[8276,8074,8174,8176],[8277,8075,8175,8177],[8278,8076,8176,8178],[8279,8077,8177,8179],[8280,8078,8178,8180],[8281,8079,8179,-1],[8282,8080,-1,8182],[8283,8081,8181,8183],[8284,8082,8182,8184],[8285,8083,8183,8185],[8286,8084,8184,8186],[8287,8085,8185,8187],[8288,8086,8186,101909],[8289,8087,8187,8189],[8290,8088,8188,8190],[8291,8089,8189,8191],[8292,8090,102002,8192],[8293,8091,8191,8193],[8294,8092,8192,8194],[8295,8093,8193,8195],[8296,8094,8194,8196],[8297,8095,8195,8197],[8298,8096,8196,8198],[8299,8097,8197,8199],[8300,8098,8198,8200],[8301,8099,8199,8201],[8302,8100,8200,8202],[8303,8101,8201,8203],[8304,8102,8202,8204],[8305,8103,8203,8205],[8306,8104,8204,8206],[8307,8105,8205,8207],[8308,8106,8206,8208],[8309,8107,8207,8209],[8310,8108,8208,8210],[8311,8109,8209,8211],[8312,8110,8210,101415],[8313,8111,8211,8213],[8314,8112,8212,8214],[8315,8113,101474,8215],[8316,8114,8214,8216],[8317,8115,8215,8217],[8318,8116,8216,8218],[8319,8117,8217,101511],[8320,8118,101542,8220],[8321,8119,8219,8221],[8322,8120,8220,8222],[8323,8121,8221,8223],[8324,8122,8222,8224],[8325,8123,8223,8225],[8326,8124,8224,100519],[8327,8125,8225,8227],[8328,8126,8226,8228],[8329,8127,8227,8229],[8330,8128,100610,8230],[8331,8129,8229,8231],[8332,8130,8230,8232],[8333,8131,8231,8233],[8334,8132,8232,8234],[8335,8133,8233,8235],[8336,8134,8234,8236],[8337,8135,8235,8237],[8338,8136,8236,8238],[8339,8137,8237,8239],[8340,8138,8238,101313],[8341,8139,101348,8241],[8342,8140,8240,8242],[8343,8141,8241,8243],[8344,8142,8242,100846],[8345,8143,8243,8245],[8346,8144,100769,8246],[8347,8145,8245,8247],[8348,8146,8246,8248],[8349,8147,8247,8249],[8350,8148,8248,8250],[8351,8149,8249,8251],[8352,8150,8250,8252],[8353,8151,8251,8253],[8354,8152,8252,8254],[8355,8153,8253,8255],[8356,8154,8254,8256],[8357,8155,8255,8257],[8358,8156,8256,8258],[8359,8157,8257,8259],[8360,8158,8258,8260],[8361,8159,8259,8261],[8362,8160,8260,8262],[8363,8161,8261,8263],[8364,8162,8262,8264],[8365,8163,8263,8265],[8366,8164,8264,8266],[8367,8165,8265,8267],[8368,8166,8266,8268],[8369,8167,8267,8269],[8370,8168,8268,8270],[8371,8169,8269,8271],[8372,8170,8270,8272],[8373,8171,8271,8273],[8374,8172,8272,102135],[8375,8173,8273,8275],[8376,8174,8274,8276],[8377,8175,8275,8277],[8378,8176,8276,8278],[8379,8177,8277,8279],[8380,8178,8278,8280],[8381,8179,8279,8281],[8382,8180,8280,-1],[8383,8181,-1,8283],[8384,8182,8282,8284],[8385,8183,8283,8285],[8386,8184,8284,8286],[8387,8185,8285,8287],[8388,8186,8286,8288],[8389,8187,8287,8289],[8390,-1,8288,101910],[8391,8189,8289,8291],[8392,8190,8290,8292],[8393,8191,102003,8293],[8394,8192,8292,8294],[8395,8193,8293,8295],[8396,8194,8294,8296],[8397,8195,8295,8297],[8398,8196,8296,8298],[8399,8197,8297,8299],[8400,8198,8298,8300],[8401,8199,8299,8301],[8402,8200,8300,8302],[8403,8201,8301,8303],[8404,8202,8302,8304],[8405,8203,8303,8305],[8406,8204,8304,8306],[8407,8205,8305,8307],[8408,8206,8306,8308],[8409,8207,8307,8309],[8410,8208,8308,8310],[8411,8209,8309,8311],[8412,8210,8310,8312],[8413,8211,8311,101416],[8414,8212,8312,8314],[8415,8213,8313,8315],[8416,8214,101475,8316],[8417,8215,8315,8317],[8418,8216,8316,8318],[8419,8217,8317,8319],[8420,8218,8318,101512],[8421,8219,101543,8321],[8422,8220,8320,8322],[8423,8221,8321,8323],[8424,8222,8322,8324],[8425,8223,8323,8325],[8426,8224,8324,8326],[8427,8225,8325,100520],[8428,8226,8326,8328],[8429,8227,8327,8329],[8430,8228,8328,8330],[8431,8229,100611,8331],[8432,8230,8330,8332],[8433,8231,8331,8333],[8434,8232,8332,8334],[8435,8233,8333,8335],[8436,8234,8334,8336],[8437,8235,8335,8337],[8438,8236,8336,8338],[8439,8237,8337,8339],[8440,8238,8338,8340],[8441,8239,8339,101314],[8442,8240,101349,8342],[8443,8241,8341,8343],[8444,8242,8342,8344],[8445,8243,8343,100847],[8446,8244,8344,8346],[8447,8245,100770,8347],[8448,8246,8346,8348],[8449,8247,8347,8349],[8450,8248,8348,8350],[8451,8249,8349,8351],[8452,8250,8350,8352],[8453,8251,8351,8353],[8454,8252,8352,8354],[8455,8253,8353,8355],[8456,8254,8354,8356],[8457,8255,8355,8357],[8458,8256,8356,8358],[8459,8257,8357,8359],[8460,8258,8358,8360],[8461,8259,8359,8361],[8462,8260,8360,8362],[8463,8261,8361,8363],[8464,8262,8362,8364],[8465,8263,8363,8365],[8466,8264,8364,8366],[8467,8265,8365,8367],[8468,8266,8366,8368],[8469,8267,8367,8369],[8470,8268,8368,8370],[8471,8269,8369,8371],[8472,8270,8370,8372],[8473,8271,8371,8373],[8474,8272,8372,8374],[8475,8273,8373,102136],[8476,8274,8374,8376],[8477,8275,8375,8377],[8478,8276,8376,8378],[8479,8277,8377,8379],[8480,8278,8378,8380],[8481,8279,8379,8381],[8482,8280,8380,8382],[8483,8281,8381,-1],[8484,8282,-1,8384],[8485,8283,8383,8385],[8486,8284,8384,8386],[8487,8285,8385,8387],[8488,8286,8386,8388],[8489,8287,8387,8389],[8490,8288,8388,8390],[8491,8289,8389,101911],[8492,8290,8390,8392],[8493,-1,102004,8393],[8494,8292,8392,8394],[8495,8293,8393,8395],[8496,8294,8394,8396],[8497,8295,8395,8397],[8498,8296,8396,8398],[8499,8297,8397,8399],[8500,8298,8398,8400],[8501,8299,8399,8401],[8502,8300,8400,8402],[8503,8301,8401,8403],[8504,8302,8402,8404],[8505,8303,8403,8405],[8506,8304,8404,8406],[8507,8305,8405,8407],[8508,8306,8406,8408],[8509,8307,8407,8409],[8510,8308,8408,8410],[8511,8309,8409,8411],[8512,8310,8410,8412],[8513,8311,8411,8413],[8514,8312,8412,101417],[8515,8313,8413,8415],[8516,8314,8414,8416],[8517,8315,101476,8417],[8518,8316,8416,8418],[8519,8317,8417,8419],[8520,8318,8418,8420],[8521,8319,8419,101513],[-1,8320,101544,8422],[8523,8321,8421,8423],[8524,8322,8422,8424],[8525,8323,8423,8425],[8526,8324,8424,8426],[8527,8325,8425,8427],[8528,8326,8426,100521],[8529,8327,8427,8429],[8530,8328,8428,8430],[8531,-1,100612,8431],[8532,8330,8430,8432],[8533,8331,8431,8433],[8534,8332,8432,8434],[8535,8333,8433,8435],[8536,8334,8434,8436],[8537,8335,8435,8437],[8538,8336,8436,8438],[8539,8337,8437,8439],[8540,8338,8438,8440],[8541,8339,8439,8441],[8542,8340,8440,101315],[8543,8341,101350,8443],[8544,8342,8442,8444],[8545,8343,8443,8445],[8546,8344,8444,100848],[8547,8345,8445,8447],[8548,8346,100771,8448],[8549,8347,8447,8449],[8550,8348,8448,8450],[8551,8349,8449,8451],[8552,8350,8450,8452],[8553,8351,8451,8453],[8554,8352,8452,8454],[8555,8353,8453,8455],[8556,8354,8454,8456],[8557,8355,8455,8457],[8558,8356,8456,8458],[8559,8357,8457,8459],[8560,8358,8458,8460],[8561,8359,8459,8461],[8562,8360,8460,8462],[8563,8361,8461,8463],[8564,8362,8462,8464],[8565,8363,8463,8465],[8566,8364,8464,8466],[8567,8365,8465,8467],[8568,8366,8466,8468],[8569,8367,8467,8469],[8570,8368,8468,8470],[8571,8369,8469,8471],[8572,8370,8470,8472],[8573,8371,8471,8473],[8574,8372,8472,8474],[8575,8373,8473,8475],[8576,8374,8474,8476],[8577,-1,8475,102137],[8578,8376,8476,8478],[8579,8377,8477,8479],[8580,8378,8478,8480],[8581,8379,8479,8481],[8582,8380,8480,8482],[8583,8381,8481,8483],[8584,8382,8482,-1],[8585,8383,-1,8485],[8586,8384,8484,8486],[8587,8385,8485,8487],[8588,8386,8486,8488],[8589,8387,8487,8489],[8590,8388,8488,8490],[8591,8389,8489,8491],[8592,8390,8490,101912],[8593,8391,8491,8493],[8594,8392,102005,8494],[8595,8393,8493,8495],[8596,8394,8494,8496],[8597,8395,8495,8497],[8598,8396,8496,8498],[8599,8397,8497,8499],[8600,8398,8498,8500],[8601,8399,8499,8501],[8602,8400,8500,8502],[8603,8401,8501,8503],[8604,8402,8502,8504],[8605,8403,8503,8505],[8606,8404,8504,8506],[8607,8405,8505,8507],[8608,8406,8506,8508],[8609,8407,8507,8509],[8610,8408,8508,8510],[8611,8409,8509,8511],[8612,8410,8510,8512],[8613,8411,8511,8513],[8614,8412,8512,8514],[8615,8413,8513,101418],[8616,8414,8514,8516],[8617,8415,8515,8517],[8618,8416,101477,8518],[8619,8417,8517,8519],[8620,8418,8518,8520],[8621,8419,8519,8521],[8622,8420,8520,101514],[8623,8421,8521,8523],[8624,8422,101545,8524],[8625,8423,8523,8525],[8626,8424,8524,8526],[8627,8425,8525,8527],[8628,8426,8526,8528],[8629,8427,8527,100522],[8630,8428,8528,8530],[8631,8429,8529,8531],[8632,8430,100613,8532],[8633,8431,8531,8533],[8634,8432,8532,8534],[8635,8433,8533,8535],[8636,8434,8534,8536],[8637,8435,8535,8537],[8638,8436,8536,8538],[8639,8437,8537,8539],[8640,8438,8538,8540],[8641,8439,8539,8541],[8642,8440,8540,8542],[8643,8441,8541,101316],[8644,8442,101351,8544],[8645,8443,8543,8545],[8646,8444,8544,8546],[8647,8445,8545,100849],[8648,8446,8546,8548],[8649,8447,100772,8549],[8650,8448,8548,8550],[8651,8449,8549,8551],[8652,8450,8550,8552],[8653,8451,8551,8553],[8654,8452,8552,8554],[8655,8453,8553,8555],[8656,8454,8554,8556],[8657,8455,8555,8557],[8658,8456,8556,8558],[8659,8457,8557,8559],[8660,8458,8558,8560],[8661,8459,8559,8561],[8662,8460,8560,8562],[8663,8461,8561,8563],[8664,8462,8562,8564],[8665,8463,8563,8565],[8666,8464,8564,8566],[8667,8465,8565,8567],[8668,8466,8566,8568],[8669,8467,8567,8569],[8670,8468,8568,8570],[8671,8469,8569,8571],[8672,8470,8570,8572],[8673,8471,8571,8573],[8674,8472,8572,8574],[8675,8473,8573,8575],[8676,8474,8574,8576],[8677,8475,8575,8577],[8678,8476,8576,102138],[8679,8477,8577,8579],[8680,8478,8578,8580],[8681,8479,8579,8581],[8682,8480,8580,8582],[8683,8481,8581,8583],[8684,8482,8582,8584],[8685,8483,8583,-1],[8686,8484,-1,8586],[8687,8485,8585,8587],[8688,8486,8586,8588],[8689,8487,8587,8589],[8690,8488,8588,8590],[8691,8489,8589,8591],[8692,8490,8590,8592],[8693,8491,8591,101913],[8694,8492,8592,8594],[8695,8493,102006,8595],[8696,8494,8594,8596],[8697,8495,8595,8597],[8698,8496,8596,8598],[8699,8497,8597,8599],[8700,8498,8598,8600],[8701,8499,8599,8601],[8702,8500,8600,8602],[8703,8501,8601,8603],[8704,8502,8602,8604],[8705,8503,8603,8605],[8706,8504,8604,8606],[8707,8505,8605,8607],[8708,8506,8606,8608],[8709,8507,8607,8609],[8710,8508,8608,8610],[8711,8509,8609,8611],[8712,8510,8610,8612],[8713,8511,8611,8613],[8714,8512,8612,8614],[8715,8513,8613,8615],[8716,8514,8614,101419],[8717,8515,8615,8617],[8718,8516,8616,8618],[8719,8517,101478,8619],[8720,8518,8618,8620],[8721,8519,8619,8621],[8722,8520,8620,8622],[8723,8521,8621,8623],[8724,-1,8622,101515],[8725,8523,101546,8625],[8726,8524,8624,8626],[8727,8525,8625,8627],[8728,8526,8626,8628],[8729,8527,8627,8629],[8730,8528,8628,100523],[8731,8529,8629,8631],[8732,8530,8630,8632],[8733,8531,100614,8633],[8734,8532,8632,8634],[8735,8533,8633,8635],[8736,8534,8634,8636],[8737,8535,8635,8637],[8738,8536,8636,8638],[8739,8537,8637,8639],[8740,8538,8638,8640],[8741,8539,8639,8641],[8742,8540,8640,8642],[8743,8541,8641,8643],[8744,8542,8642,101317],[8745,8543,101352,8645],[8746,8544,8644,8646],[8747,8545,8645,8647],[8748,8546,8646,100850],[8749,8547,8647,8649],[8750,8548,100773,8650],[8751,8549,8649,8651],[8752,8550,8650,8652],[8753,8551,8651,8653],[8754,8552,8652,8654],[8755,8553,8653,8655],[8756,8554,8654,8656],[8757,8555,8655,8657],[8758,8556,8656,8658],[8759,8557,8657,8659],[8760,8558,8658,8660],[8761,8559,8659,8661],[8762,8560,8660,8662],[8763,8561,8661,8663],[8764,8562,8662,8664],[8765,8563,8663,8665],[8766,8564,8664,8666],[8767,8565,8665,8667],[8768,8566,8666,8668],[8769,8567,8667,8669],[8770,8568,8668,8670],[8771,8569,8669,8671],[8772,8570,8670,8672],[8773,8571,8671,8673],[8774,8572,8672,8674],[8775,8573,8673,8675],[8776,8574,8674,8676],[8777,8575,8675,8677],[8778,8576,8676,8678],[8779,8577,8677,102139],[8780,8578,8678,8680],[8781,8579,8679,8681],[8782,8580,8680,8682],[8783,8581,8681,8683],[8784,8582,8682,8684],[8785,8583,8683,8685],[8786,8584,8684,-1],[8787,8585,-1,8687],[8788,8586,8686,8688],[8789,8587,8687,8689],[8790,8588,8688,8690],[8791,8589,8689,8691],[8792,8590,8690,8692],[8793,8591,8691,8693],[8794,8592,8692,101914],[8795,8593,8693,8695],[8796,8594,102007,8696],[8797,8595,8695,8697],[8798,8596,8696,8698],[8799,8597,8697,8699],[8800,8598,8698,8700],[8801,8599,8699,8701],[8802,8600,8700,8702],[8803,8601,8701,8703],[8804,8602,8702,8704],[8805,8603,8703,8705],[8806,8604,8704,8706],[8807,8605,8705,8707],[8808,8606,8706,8708],[8809,8607,8707,8709],[8810,8608,8708,8710],[8811,8609,8709,8711],[8812,8610,8710,8712],[8813,8611,8711,8713],[8814,8612,8712,8714],[8815,8613,8713,8715],[8816,8614,8714,8716],[8817,8615,8715,101420],[8818,8616,8716,8718],[8819,8617,8717,8719],[8820,8618,101479,8720],[8821,8619,8719,8721],[8822,8620,8720,8722],[8823,8621,8721,8723],[8824,8622,8722,8724],[8825,8623,8723,101516],[8826,8624,101547,8726],[8827,8625,8725,8727],[8828,8626,8726,8728],[8829,8627,8727,8729],[8830,8628,8728,8730],[8831,8629,8729,100524],[8832,8630,8730,8732],[8833,8631,8731,8733],[8834,8632,100615,8734],[8835,8633,8733,8735],[8836,8634,8734,8736],[8837,8635,8735,8737],[8838,8636,8736,8738],[8839,8637,8737,8739],[8840,8638,8738,8740],[8841,8639,8739,8741],[8842,8640,8740,8742],[8843,8641,8741,8743],[8844,8642,8742,8744],[8845,8643,8743,101318],[8846,8644,101353,8746],[8847,8645,8745,8747],[8848,8646,8746,8748],[8849,8647,8747,100851],[8850,8648,8748,8750],[8851,8649,100774,8751],[8852,8650,8750,8752],[8853,8651,8751,8753],[8854,8652,8752,8754],[8855,8653,8753,8755],[8856,8654,8754,8756],[8857,8655,8755,8757],[8858,8656,8756,8758],[8859,8657,8757,8759],[8860,8658,8758,8760],[8861,8659,8759,8761],[8862,8660,8760,8762],[8863,8661,8761,8763],[8864,8662,8762,8764],[8865,8663,8763,8765],[8866,8664,8764,8766],[8867,8665,8765,8767],[8868,8666,8766,8768],[8869,8667,8767,8769],[8870,8668,8768,8770],[8871,8669,8769,8771],[8872,8670,8770,8772],[8873,8671,8771,8773],[8874,8672,8772,8774],[8875,8673,8773,8775],[8876,8674,8774,8776],[8877,8675,8775,8777],[8878,8676,8776,8778],[8879,8677,8777,8779],[8880,8678,8778,102140],[8881,8679,8779,8781],[8882,8680,8780,8782],[8883,8681,8781,8783],[8884,8682,8782,8784],[8885,8683,8783,8785],[8886,8684,8784,8786],[8887,8685,8785,-1],[8888,8686,-1,8788],[8889,8687,8787,8789],[8890,8688,8788,8790],[8891,8689,8789,8791],[8892,8690,8790,8792],[8893,8691,8791,8793],[8894,8692,8792,8794],[8895,8693,8793,101915],[8896,8694,8794,8796],[8897,8695,102008,8797],[8898,8696,8796,8798],[8899,8697,8797,8799],[8900,8698,8798,8800],[8901,8699,8799,8801],[8902,8700,8800,8802],[8903,8701,8801,8803],[8904,8702,8802,8804],[8905,8703,8803,8805],[8906,8704,8804,8806],[8907,8705,8805,8807],[8908,8706,8806,8808],[8909,8707,8807,8809],[8910,8708,8808,8810],[8911,8709,8809,8811],[8912,8710,8810,8812],[8913,8711,8811,8813],[8914,8712,8812,8814],[8915,8713,8813,8815],[8916,8714,8814,8816],[8917,8715,8815,8817],[8918,8716,8816,8818],[8919,-1,8817,101421],[8920,8718,8818,8820],[8921,8719,101480,8821],[8922,8720,8820,8822],[8923,8721,8821,8823],[8924,8722,8822,8824],[8925,8723,8823,8825],[8926,8724,8824,101517],[8927,8725,101548,8827],[8928,8726,8826,8828],[8929,8727,8827,8829],[8930,8728,8828,8830],[8931,8729,8829,8831],[8932,8730,8830,100525],[8933,8731,8831,8833],[8934,8732,8832,8834],[8935,8733,100616,8835],[8936,8734,8834,8836],[8937,8735,8835,8837],[8938,8736,8836,8838],[8939,8737,8837,8839],[8940,8738,8838,8840],[8941,8739,8839,8841],[8942,8740,8840,8842],[8943,8741,8841,8843],[8944,8742,8842,8844],[8945,8743,8843,8845],[8946,8744,8844,101319],[8947,8745,101354,8847],[8948,8746,8846,8848],[8949,8747,8847,8849],[8950,8748,8848,100852],[8951,8749,8849,8851],[8952,8750,100775,8852],[8953,8751,8851,8853],[8954,8752,8852,8854],[8955,8753,8853,8855],[8956,8754,8854,8856],[8957,8755,8855,8857],[8958,8756,8856,8858],[8959,8757,8857,8859],[8960,8758,8858,8860],[8961,8759,8859,8861],[8962,8760,8860,8862],[8963,8761,8861,8863],[8964,8762,8862,8864],[8965,8763,8863,8865],[8966,8764,8864,8866],[8967,8765,8865,8867],[8968,8766,8866,8868],[8969,8767,8867,8869],[8970,8768,8868,8870],[8971,8769,8869,8871],[8972,8770,8870,8872],[8973,8771,8871,8873],[8974,8772,8872,8874],[8975,8773,8873,8875],[8976,8774,8874,8876],[8977,8775,8875,8877],[8978,8776,8876,8878],[8979,8777,8877,8879],[8980,8778,8878,8880],[8981,8779,8879,8881],[8982,-1,8880,102141],[8983,8781,8881,8883],[8984,8782,8882,8884],[8985,8783,8883,8885],[8986,8784,8884,8886],[8987,8785,8885,8887],[8988,8786,8886,-1],[8989,8787,-1,8889],[8990,8788,8888,8890],[8991,8789,8889,8891],[8992,8790,8890,8892],[8993,8791,8891,8893],[8994,8792,8892,8894],[8995,8793,8893,8895],[8996,8794,8894,101916],[8997,8795,8895,8897],[8998,8796,102009,8898],[8999,8797,8897,8899],[9000,8798,8898,8900],[9001,8799,8899,8901],[9002,8800,8900,8902],[9003,8801,8901,8903],[9004,8802,8902,8904],[9005,8803,8903,8905],[9006,8804,8904,8906],[9007,8805,8905,8907],[9008,8806,8906,8908],[9009,8807,8907,8909],[9010,8808,8908,101550],[9011,8809,101591,8911],[9012,8810,8910,8912],[9013,8811,8911,8913],[9014,8812,8912,8914],[9015,8813,8913,8915],[9016,8814,8914,8916],[9017,8815,8915,8917],[9018,8816,8916,8918],[9019,8817,8917,8919],[9020,8818,8918,101422],[9021,8819,8919,8921],[9022,8820,101481,8922],[9023,8821,8921,8923],[9024,8822,8922,8924],[9025,8823,8923,8925],[9026,8824,8924,8926],[9027,8825,8925,8927],[9028,8826,8926,8928],[9029,8827,8927,8929],[9030,8828,8928,8930],[9031,8829,8929,8931],[9032,8830,8930,8932],[9033,8831,8931,100526],[9034,8832,8932,8934],[9035,8833,8933,8935],[9036,8834,100617,8936],[9037,8835,8935,8937],[9038,8836,8936,8938],[9039,8837,8937,8939],[9040,8838,8938,8940],[9041,8839,8939,8941],[9042,8840,8940,8942],[9043,8841,8941,8943],[9044,8842,8942,8944],[9045,8843,8943,8945],[9046,8844,8944,8946],[9047,8845,8945,101320],[9048,8846,101355,8948],[9049,8847,8947,8949],[9050,8848,8948,8950],[9051,8849,8949,100853],[9052,8850,8950,8952],[9053,8851,100776,8953],[9054,8852,8952,8954],[9055,8853,8953,8955],[9056,8854,8954,8956],[9057,8855,8955,8957],[9058,8856,8956,8958],[9059,8857,8957,8959],[9060,8858,8958,8960],[9061,8859,8959,8961],[9062,8860,8960,8962],[9063,8861,8961,8963],[9064,8862,8962,8964],[9065,8863,8963,8965],[9066,8864,8964,8966],[9067,8865,8965,8967],[9068,8866,8966,8968],[9069,8867,8967,8969],[9070,8868,8968,8970],[9071,8869,8969,8971],[9072,8870,8970,8972],[9073,8871,8971,8973],[9074,8872,8972,8974],[9075,8873,8973,8975],[9076,8874,8974,8976],[9077,8875,8975,8977],[9078,8876,8976,8978],[9079,8877,8977,8979],[9080,8878,8978,8980],[9081,8879,8979,8981],[9082,8880,8980,8982],[9083,8881,8981,102142],[9084,8882,8982,8984],[9085,8883,8983,8985],[9086,8884,8984,8986],[9087,8885,8985,8987],[9088,8886,8986,8988],[9089,8887,8987,-1],[9090,8888,-1,8990],[9091,8889,8989,8991],[9092,8890,8990,8992],[9093,8891,8991,8993],[9094,8892,8992,8994],[9095,8893,8993,8995],[9096,8894,8994,8996],[9097,8895,8995,101917],[9098,8896,8996,8998],[9099,8897,102010,8999],[9100,8898,8998,9000],[9101,8899,8999,9001],[9102,8900,9000,9002],[9103,8901,9001,9003],[9104,8902,9002,9004],[9105,8903,9003,9005],[9106,8904,9004,9006],[9107,8905,9005,9007],[9108,8906,9006,9008],[9109,8907,9007,9009],[9110,8908,9008,9010],[9111,8909,9009,101551],[9112,8910,101592,9012],[9113,8911,9011,9013],[9114,8912,9012,9014],[9115,8913,9013,9015],[9116,8914,9014,9016],[9117,8915,9015,9017],[9118,8916,9016,9018],[9119,8917,9017,9019],[9120,8918,9018,9020],[9121,8919,9019,101423],[9122,8920,9020,9022],[9123,8921,101482,9023],[9124,8922,9022,9024],[9125,8923,9023,9025],[9126,8924,9024,9026],[9127,8925,9025,9027],[9128,8926,9026,9028],[9129,8927,9027,9029],[9130,8928,9028,9030],[9131,8929,9029,9031],[9132,8930,9030,9032],[9133,8931,9031,9033],[9134,8932,9032,100527],[9135,8933,9033,9035],[9136,8934,9034,9036],[9137,8935,100618,9037],[9138,8936,9036,9038],[9139,8937,9037,9039],[9140,8938,9038,9040],[9141,8939,9039,9041],[9142,8940,9040,9042],[9143,8941,9041,9043],[9144,8942,9042,9044],[9145,8943,9043,9045],[9146,8944,9044,9046],[9147,8945,9045,9047],[9148,8946,9046,101321],[9149,8947,101356,9049],[9150,8948,9048,9050],[9151,8949,9049,9051],[9152,8950,9050,100854],[9153,8951,9051,9053],[9154,8952,100777,9054],[9155,8953,9053,9055],[9156,8954,9054,9056],[9157,8955,9055,9057],[9158,8956,9056,9058],[9159,8957,9057,9059],[9160,8958,9058,9060],[9161,8959,9059,9061],[9162,8960,9060,9062],[9163,8961,9061,9063],[9164,8962,9062,9064],[9165,8963,9063,9065],[9166,8964,9064,9066],[9167,8965,9065,9067],[9168,8966,9066,9068],[9169,8967,9067,9069],[9170,8968,9068,9070],[9171,8969,9069,9071],[9172,8970,9070,9072],[9173,8971,9071,9073],[9174,8972,9072,9074],[9175,8973,9073,9075],[9176,8974,9074,9076],[9177,8975,9075,9077],[9178,8976,9076,9078],[9179,8977,9077,9079],[9180,8978,9078,9080],[9181,8979,9079,9081],[9182,8980,9080,9082],[9183,8981,9081,9083],[9184,8982,9082,102143],[9185,8983,9083,9085],[9186,8984,9084,9086],[9187,8985,9085,9087],[9188,8986,9086,9088],[9189,8987,9087,9089],[9190,8988,9088,-1],[9191,8989,-1,9091],[9192,8990,9090,9092],[9193,8991,9091,9093],[9194,8992,9092,9094],[9195,8993,9093,9095],[9196,8994,9094,9096],[9197,8995,9095,9097],[9198,8996,9096,101918],[9199,8997,9097,9099],[9200,8998,102011,9100],[9201,8999,9099,9101],[9202,9000,9100,9102],[9203,9001,9101,9103],[9204,9002,9102,9104],[9205,9003,9103,9105],[9206,9004,9104,9106],[9207,9005,9105,9107],[9208,9006,9106,9108],[9209,9007,9107,9109],[9210,9008,9108,9110],[9211,9009,9109,9111],[9212,9010,9110,101552],[-1,9011,101593,9113],[9214,9012,9112,9114],[9215,9013,9113,9115],[9216,9014,9114,9116],[9217,9015,9115,9117],[9218,9016,9116,9118],[9219,9017,9117,9119],[9220,9018,9118,9120],[9221,9019,9119,9121],[9222,9020,9120,101424],[9223,9021,9121,9123],[9224,9022,101483,9124],[9225,9023,9123,9125],[9226,9024,9124,9126],[9227,9025,9125,9127],[9228,9026,9126,9128],[9229,9027,9127,9129],[9230,9028,9128,9130],[9231,9029,9129,9131],[9232,9030,9130,9132],[9233,9031,9131,9133],[9234,9032,9132,9134],[9235,9033,9133,100528],[9236,9034,9134,9136],[9237,9035,9135,9137],[9238,9036,100619,9138],[9239,9037,9137,9139],[9240,9038,9138,9140],[9241,9039,9139,9141],[9242,9040,9140,9142],[9243,9041,9141,9143],[9244,9042,9142,9144],[9245,9043,9143,9145],[9246,9044,9144,9146],[9247,9045,9145,9147],[9248,9046,9146,9148],[9249,9047,9147,101322],[9250,9048,101357,9150],[9251,9049,9149,9151],[9252,9050,9150,9152],[9253,9051,9151,100855],[9254,9052,9152,9154],[9255,9053,100778,9155],[9256,9054,9154,9156],[9257,9055,9155,9157],[9258,9056,9156,9158],[9259,9057,9157,9159],[9260,9058,9158,9160],[9261,9059,9159,9161],[9262,9060,9160,9162],[9263,9061,9161,9163],[9264,9062,9162,9164],[9265,9063,9163,9165],[9266,9064,9164,9166],[9267,9065,9165,9167],[9268,9066,9166,9168],[9269,9067,9167,9169],[9270,9068,9168,9170],[9271,9069,9169,9171],[9272,9070,9170,9172],[9273,9071,9171,9173],[9274,9072,9172,9174],[9275,9073,9173,9175],[9276,9074,9174,9176],[9277,9075,9175,9177],[9278,9076,9176,9178],[9279,9077,9177,9179],[9280,9078,9178,9180],[9281,9079,9179,9181],[9282,9080,9180,9182],[9283,9081,9181,9183],[9284,9082,9182,9184],[9285,9083,9183,102144],[9286,9084,9184,9186],[9287,9085,9185,9187],[9288,9086,9186,9188],[9289,9087,9187,9189],[9290,9088,9188,9190],[9291,9089,9189,-1],[9292,9090,-1,9192],[9293,9091,9191,9193],[9294,9092,9192,9194],[9295,9093,9193,9195],[9296,9094,9194,9196],[9297,9095,9195,9197],[9298,9096,9196,9198],[9299,9097,9197,101919],[9300,9098,9198,9200],[9301,9099,102012,9201],[9302,9100,9200,9202],[9303,9101,9201,9203],[9304,9102,9202,9204],[9305,9103,9203,9205],[9306,9104,9204,9206],[9307,9105,9205,9207],[9308,9106,9206,9208],[9309,9107,9207,9209],[9310,9108,9208,9210],[9311,9109,9209,9211],[9312,9110,9210,9212],[9313,9111,9211,101553],[9314,9112,9212,9214],[9315,9113,101594,9215],[9316,9114,9214,9216],[9317,9115,9215,9217],[9318,9116,9216,9218],[9319,9117,9217,9219],[9320,9118,9218,9220],[9321,9119,9219,9221],[9322,9120,9220,9222],[9323,9121,9221,101425],[9324,-1,101484,9224],[9325,9123,9223,9225],[9326,9124,9224,9226],[9327,9125,9225,9227],[9328,9126,9226,9228],[9329,9127,9227,9229],[9330,9128,9228,9230],[9331,9129,9229,9231],[9332,9130,9230,9232],[9333,9131,9231,9233],[9334,9132,9232,9234],[9335,9133,9233,9235],[9336,9134,9234,100529],[9337,9135,9235,9237],[9338,9136,9236,9238],[9339,9137,100620,9239],[9340,9138,9238,9240],[9341,9139,9239,9241],[9342,9140,9240,9242],[9343,9141,9241,9243],[9344,9142,9242,9244],[9345,9143,9243,9245],[9346,9144,9244,9246],[9347,9145,9245,9247],[9348,9146,9246,9248],[9349,9147,9247,9249],[9350,9148,9248,101323],[9351,9149,101358,9251],[9352,9150,9250,9252],[9353,9151,9251,9253],[9354,9152,9252,100856],[9355,9153,9253,9255],[9356,9154,100779,9256],[9357,9155,9255,9257],[9358,9156,9256,9258],[9359,9157,9257,9259],[9360,9158,9258,9260],[9361,9159,9259,9261],[9362,9160,9260,9262],[9363,9161,9261,9263],[9364,9162,9262,9264],[9365,9163,9263,9265],[9366,9164,9264,9266],[9367,9165,9265,9267],[9368,9166,9266,9268],[9369,9167,9267,9269],[9370,9168,9268,9270],[9371,9169,9269,9271],[9372,9170,9270,9272],[9373,9171,9271,9273],[9374,9172,9272,9274],[9375,9173,9273,9275],[9376,9174,9274,9276],[9377,9175,9275,9277],[9378,9176,9276,9278],[9379,9177,9277,9279],[9380,9178,9278,9280],[9381,9179,9279,9281],[9382,9180,9280,9282],[9383,9181,9281,9283],[9384,9182,9282,9284],[9385,9183,9283,9285],[9386,9184,9284,9286],[9387,-1,9285,102145],[9388,9186,9286,9288],[9389,9187,9287,9289],[9390,9188,9288,9290],[9391,9189,9289,9291],[9392,9190,9290,-1],[9393,9191,-1,9293],[9394,9192,9292,9294],[9395,9193,9293,9295],[9396,9194,9294,9296],[9397,9195,9295,9297],[9398,9196,9296,9298],[9399,9197,9297,9299],[9400,9198,9298,101920],[9401,9199,9299,9301],[9402,9200,102013,9302],[9403,9201,9301,9303],[9404,9202,9302,9304],[9405,9203,9303,9305],[9406,9204,9304,9306],[9407,9205,9305,9307],[9408,9206,9306,9308],[9409,9207,9307,9309],[9410,9208,9308,9310],[9411,9209,9309,9311],[9412,9210,9310,9312],[9413,9211,9311,9313],[9414,9212,9312,101554],[9415,9213,9313,9315],[9416,9214,101595,9316],[9417,9215,9315,9317],[9418,9216,9316,9318],[9419,9217,9317,9319],[9420,9218,9318,9320],[9421,9219,9319,9321],[9422,9220,9320,9322],[9423,9221,9321,9323],[9424,9222,9322,101426],[9425,9223,101485,9325],[9426,9224,9324,9326],[9427,9225,9325,101632],[9428,9226,101671,9328],[9429,9227,9327,9329],[9430,9228,9328,9330],[9431,9229,9329,9331],[9432,9230,9330,9332],[9433,9231,9331,9333],[9434,9232,9332,9334],[9435,9233,9333,9335],[9436,9234,9334,9336],[9437,9235,9335,100530],[9438,9236,9336,9338],[9439,9237,9337,9339],[9440,9238,100621,9340],[9441,9239,9339,9341],[9442,9240,9340,9342],[9443,9241,9341,9343],[9444,9242,9342,9344],[9445,9243,9343,9345],[9446,9244,9344,9346],[9447,9245,9345,9347],[9448,9246,9346,9348],[9449,9247,9347,9349],[9450,9248,9348,9350],[9451,9249,9349,101324],[9452,9250,101359,9352],[9453,9251,9351,9353],[9454,9252,9352,9354],[9455,9253,9353,100857],[9456,9254,9354,9356],[9457,9255,100780,9357],[9458,9256,9356,9358],[9459,9257,9357,9359],[9460,9258,9358,9360],[9461,9259,9359,9361],[9462,9260,9360,9362],[9463,9261,9361,9363],[9464,9262,9362,9364],[9465,9263,9363,9365],[9466,9264,9364,9366],[9467,9265,9365,9367],[9468,9266,9366,9368],[9469,9267,9367,9369],[9470,9268,9368,9370],[9471,9269,9369,9371],[9472,9270,9370,9372],[9473,9271,9371,9373],[9474,9272,9372,9374],[9475,9273,9373,9375],[9476,9274,9374,9376],[9477,9275,9375,9377],[9478,9276,9376,101728],[9479,9277,101769,9379],[9480,9278,9378,9380],[9481,9279,9379,9381],[9482,9280,9380,9382],[9483,9281,9381,9383],[9484,9282,9382,9384],[9485,9283,9383,9385],[9486,9284,9384,9386],[9487,9285,9385,9387],[9488,9286,9386,102146],[9489,9287,9387,9389],[9490,9288,9388,9390],[9491,9289,9389,9391],[9492,9290,9390,9392],[9493,9291,9391,-1],[9494,9292,-1,9394],[9495,9293,9393,9395],[9496,9294,9394,9396],[9497,9295,9395,9397],[9498,9296,9396,9398],[9499,9297,9397,9399],[9500,9298,9398,9400],[9501,9299,9399,101921],[9502,9300,9400,9402],[9503,9301,102014,9403],[9504,9302,9402,9404],[9505,9303,9403,9405],[9506,9304,9404,9406],[9507,9305,9405,9407],[9508,9306,9406,9408],[9509,9307,9407,9409],[9510,9308,9408,9410],[9511,9309,9409,9411],[9512,9310,9410,9412],[9513,9311,9411,9413],[9514,9312,9412,9414],[9515,9313,9413,9415],[9516,-1,9414,101555],[9517,9315,101596,9417],[9518,9316,9416,9418],[9519,9317,9417,9419],[9520,9318,9418,9420],[9521,9319,9419,9421],[9522,9320,9420,9422],[9523,9321,9421,9423],[9524,9322,9422,9424],[9525,9323,9423,101427],[9526,9324,101486,9426],[9527,9325,9425,9427],[9528,9326,9426,101633],[9529,9327,101672,9429],[9530,9328,9428,9430],[9531,9329,9429,9431],[9532,9330,9430,9432],[9533,9331,9431,9433],[9534,9332,9432,9434],[9535,9333,9433,9435],[9536,9334,9434,9436],[9537,9335,9435,9437],[9538,9336,9436,100531],[9539,9337,9437,9439],[9540,9338,9438,9440],[-1,9339,100622,9441],[9542,9340,9440,9442],[9543,9341,9441,9443],[9544,9342,9442,9444],[9545,9343,9443,9445],[9546,9344,9444,9446],[9547,9345,9445,9447],[9548,9346,9446,9448],[9549,9347,9447,9449],[9550,9348,9448,9450],[9551,9349,9449,9451],[9552,9350,9450,101325],[9553,9351,101360,9453],[9554,9352,9452,9454],[9555,9353,9453,9455],[9556,9354,9454,100858],[9557,9355,9455,9457],[9558,9356,100781,9458],[9559,9357,9457,9459],[9560,9358,9458,9460],[9561,9359,9459,9461],[9562,9360,9460,9462],[9563,9361,9461,9463],[9564,9362,9462,9464],[9565,9363,9463,9465],[9566,9364,9464,9466],[9567,9365,9465,9467],[9568,9366,9466,9468],[9569,9367,9467,9469],[9570,9368,9468,9470],[9571,9369,9469,9471],[9572,9370,9470,9472],[9573,9371,9471,9473],[9574,9372,9472,9474],[9575,9373,9473,9475],[9576,9374,9474,9476],[9577,9375,9475,9477],[9578,9376,9476,9478],[9579,9377,9477,101729],[9580,9378,101770,9480],[9581,9379,9479,9481],[9582,9380,9480,9482],[9583,9381,9481,9483],[9584,9382,9482,9484],[9585,9383,9483,9485],[9586,9384,9484,9486],[9587,9385,9485,9487],[9588,9386,9486,9488],[9589,9387,9487,102147],[9590,9388,9488,9490],[9591,9389,9489,9491],[9592,9390,9490,9492],[9593,9391,9491,9493],[9594,9392,9492,-1],[9595,9393,-1,9495],[9596,9394,9494,9496],[9597,9395,9495,9497],[9598,9396,9496,9498],[9599,9397,9497,9499],[9600,9398,9498,9500],[9601,9399,9499,9501],[9602,9400,9500,101922],[9603,9401,9501,9503],[9604,9402,102015,9504],[9605,9403,9503,9505],[9606,9404,9504,9506],[9607,9405,9505,9507],[9608,9406,9506,9508],[9609,9407,9507,9509],[9610,9408,9508,9510],[9611,9409,9509,9511],[9612,9410,9510,9512],[9613,9411,9511,9513],[9614,9412,9512,9514],[9615,9413,9513,9515],[9616,9414,9514,9516],[9617,9415,9515,101556],[9618,9416,101597,9518],[9619,9417,9517,9519],[9620,9418,9518,9520],[9621,9419,9519,9521],[9622,9420,9520,9522],[9623,9421,9521,9523],[9624,9422,9522,9524],[9625,9423,9523,9525],[9626,9424,9524,101428],[9627,9425,101487,9527],[9628,9426,9526,9528],[9629,9427,9527,101634],[9630,9428,101673,9530],[9631,9429,9529,9531],[9632,9430,9530,9532],[9633,9431,9531,9533],[9634,9432,9532,9534],[9635,9433,9533,9535],[9636,9434,9534,9536],[9637,9435,9535,9537],[9638,9436,9536,9538],[9639,9437,9537,100532],[9640,9438,9538,9540],[9641,9439,9539,9541],[9642,9440,9540,9542],[9643,9441,100623,9543],[9644,9442,9542,9544],[9645,9443,9543,9545],[9646,9444,9544,9546],[9647,9445,9545,9547],[9648,9446,9546,9548],[9649,9447,9547,9549],[9650,9448,9548,9550],[9651,9449,9549,9551],[9652,9450,9550,9552],[9653,9451,9551,101326],[9654,9452,101361,9554],[9655,9453,9553,9555],[9656,9454,9554,9556],[9657,9455,9555,100859],[9658,9456,9556,9558],[9659,9457,100782,9559],[9660,9458,9558,9560],[9661,9459,9559,9561],[9662,9460,9560,9562],[9663,9461,9561,9563],[9664,9462,9562,9564],[9665,9463,9563,9565],[9666,9464,9564,9566],[9667,9465,9565,9567],[9668,9466,9566,9568],[9669,9467,9567,9569],[9670,9468,9568,9570],[9671,9469,9569,9571],[9672,9470,9570,9572],[9673,9471,9571,9573],[9674,9472,9572,9574],[9675,9473,9573,9575],[9676,9474,9574,9576],[9677,9475,9575,9577],[9678,9476,9576,9578],[9679,9477,9577,101730],[9680,9478,101771,9580],[9681,9479,9579,9581],[9682,9480,9580,9582],[9683,9481,9581,9583],[9684,9482,9582,9584],[9685,9483,9583,9585],[9686,9484,9584,9586],[9687,9485,9585,9587],[9688,9486,9586,9588],[9689,9487,9587,9589],[9690,9488,9588,102148],[9691,9489,9589,9591],[9692,9490,9590,9592],[9693,9491,9591,9593],[9694,9492,9592,9594],[9695,9493,9593,-1],[9696,9494,-1,9596],[9697,9495,9595,9597],[9698,9496,9596,9598],[9699,9497,9597,9599],[9700,9498,9598,9600],[9701,9499,9599,9601],[9702,9500,9600,9602],[9703,9501,9601,101923],[9704,9502,9602,9604],[-1,9503,102016,9605],[9706,9504,9604,9606],[9707,9505,9605,9607],[9708,9506,9606,9608],[9709,9507,9607,9609],[9710,9508,9608,9610],[9711,9509,9609,9611],[9712,9510,9610,9612],[9713,9511,9611,9613],[9714,9512,9612,9614],[9715,9513,9613,9615],[9716,9514,9614,9616],[9717,9515,9615,9617],[9718,9516,9616,101557],[9719,9517,101598,9619],[9720,9518,9618,9620],[9721,9519,9619,9621],[9722,9520,9620,9622],[9723,9521,9621,9623],[9724,9522,9622,9624],[9725,9523,9623,9625],[9726,9524,9624,9626],[9727,9525,9625,9627],[9728,9526,9626,9628],[9729,9527,9627,9629],[9730,9528,9628,101635],[-1,9529,101674,9631],[9732,9530,9630,9632],[9733,9531,9631,9633],[9734,9532,9632,9634],[9735,9533,9633,9635],[9736,9534,9634,9636],[9737,9535,9635,9637],[9738,9536,9636,9638],[9739,9537,9637,9639],[9740,9538,9638,100533],[9741,9539,9639,9641],[9742,9540,9640,9642],[9743,9541,9641,9643],[9744,9542,100624,9644],[9745,9543,9643,9645],[9746,9544,9644,9646],[9747,9545,9645,9647],[9748,9546,9646,9648],[9749,9547,9647,9649],[9750,9548,9648,9650],[9751,9549,9649,9651],[9752,9550,9650,9652],[9753,9551,9651,9653],[9754,9552,9652,101327],[9755,9553,101362,9655],[9756,9554,9654,9656],[9757,9555,9655,9657],[9758,9556,9656,100860],[9759,9557,9657,9659],[9760,9558,100783,9660],[9761,9559,9659,9661],[9762,9560,9660,9662],[9763,9561,9661,9663],[9764,9562,9662,9664],[9765,9563,9663,9665],[9766,9564,9664,9666],[9767,9565,9665,9667],[9768,9566,9666,9668],[9769,9567,9667,9669],[9770,9568,9668,9670],[9771,9569,9669,9671],[9772,9570,9670,9672],[9773,9571,9671,9673],[9774,9572,9672,9674],[9775,9573,9673,9675],[9776,9574,9674,9676],[9777,9575,9675,9677],[9778,9576,9676,9678],[9779,9577,9677,9679],[-1,9578,9678,101731],[9781,9579,101772,9681],[9782,9580,9680,9682],[9783,9581,9681,9683],[9784,9582,9682,9684],[9785,9583,9683,9685],[9786,9584,9684,9686],[9787,9585,9685,9687],[9788,9586,9686,9688],[9789,9587,9687,9689],[9790,9588,9688,9690],[9791,9589,9689,9691],[9792,-1,9690,102149],[9793,9591,9691,9693],[9794,9592,9692,9694],[9795,9593,9693,9695],[9796,9594,9694,-1],[9797,9595,-1,9697],[9798,9596,9696,9698],[9799,9597,9697,9699],[9800,9598,9698,9700],[9801,9599,9699,9701],[9802,9600,9700,9702],[9803,9601,9701,9703],[9804,9602,9702,101924],[9805,9603,9703,9705],[9806,9604,9704,9706],[9807,9605,102017,9707],[9808,9606,9706,9708],[9809,9607,9707,9709],[9810,9608,9708,9710],[9811,9609,9709,9711],[9812,9610,9710,9712],[9813,9611,9711,9713],[9814,9612,9712,9714],[9815,9613,9713,9715],[9816,9614,9714,9716],[9817,9615,9715,9717],[9818,9616,9716,9718],[9819,9617,9717,101558],[9820,9618,101599,9720],[9821,9619,9719,9721],[9822,9620,9720,9722],[9823,9621,9721,9723],[9824,9622,9722,9724],[9825,9623,9723,9725],[9826,9624,9724,9726],[9827,9625,9725,9727],[9828,9626,9726,9728],[9829,9627,9727,9729],[9830,9628,9728,9730],[9831,9629,9729,101636],[9832,9630,9730,9732],[9833,9631,101675,9733],[9834,9632,9732,9734],[9835,9633,9733,9735],[9836,9634,9734,9736],[9837,9635,9735,9737],[9838,9636,9736,9738],[9839,9637,9737,9739],[9840,9638,9738,9740],[9841,9639,9739,100534],[9842,9640,9740,9742],[9843,9641,9741,9743],[9844,9642,9742,9744],[9845,9643,100625,9745],[9846,9644,9744,9746],[9847,9645,9745,9747],[9848,9646,9746,9748],[9849,9647,9747,9749],[9850,9648,9748,9750],[9851,9649,9749,9751],[9852,9650,9750,9752],[9853,9651,9751,9753],[9854,9652,9752,9754],[9855,9653,9753,101328],[9856,9654,101363,9756],[9857,9655,9755,9757],[9858,9656,9756,9758],[9859,9657,9757,100861],[9860,9658,9758,9760],[9861,9659,100784,9761],[9862,9660,9760,9762],[9863,9661,9761,9763],[9864,9662,9762,9764],[9865,9663,9763,9765],[9866,9664,9764,9766],[9867,9665,9765,9767],[9868,9666,9766,9768],[9869,9667,9767,9769],[9870,9668,9768,9770],[9871,9669,9769,9771],[9872,9670,9770,9772],[9873,9671,9771,9773],[9874,9672,9772,9774],[9875,9673,9773,9775],[9876,9674,9774,9776],[9877,9675,9775,9777],[9878,9676,9776,9778],[9879,9677,9777,9779],[9880,9678,9778,101732],[9881,9679,9779,9781],[9882,9680,101773,9782],[9883,9681,9781,9783],[9884,9682,9782,9784],[9885,9683,9783,9785],[9886,9684,9784,9786],[9887,9685,9785,9787],[9888,9686,9786,9788],[9889,9687,9787,9789],[9890,9688,9788,9790],[9891,9689,9789,9791],[9892,9690,9790,9792],[9893,9691,9791,102150],[9894,9692,9792,9794],[9895,9693,9793,9795],[9896,9694,9794,9796],[9897,9695,9795,-1],[9898,9696,-1,9798],[9899,9697,9797,9799],[9900,9698,9798,9800],[9901,9699,9799,9801],[9902,9700,9800,9802],[9903,9701,9801,9803],[9904,9702,9802,9804],[9905,9703,9803,101925],[9906,9704,9804,9806],[9907,9705,9805,9807],[9908,9706,102018,9808],[9909,9707,9807,9809],[9910,9708,9808,9810],[9911,9709,9809,9811],[9912,9710,9810,9812],[9913,9711,9811,9813],[9914,9712,9812,9814],[9915,9713,9813,9815],[9916,9714,9814,9816],[9917,9715,9815,9817],[9918,9716,9816,9818],[9919,9717,9817,9819],[9920,9718,9818,101559],[9921,9719,101600,9821],[9922,9720,9820,9822],[9923,9721,9821,9823],[9924,9722,9822,9824],[9925,9723,9823,9825],[9926,9724,9824,9826],[9927,9725,9825,9827],[9928,9726,9826,9828],[9929,9727,9827,9829],[9930,9728,9828,9830],[9931,9729,9829,9831],[9932,9730,9830,101637],[9933,9731,9831,9833],[9934,9732,101676,9834],[9935,9733,9833,9835],[9936,9734,9834,9836],[9937,9735,9835,9837],[9938,9736,9836,9838],[9939,9737,9837,9839],[9940,9738,9838,9840],[9941,9739,9839,9841],[9942,9740,9840,100535],[9943,9741,9841,9843],[9944,9742,9842,9844],[9945,9743,9843,9845],[9946,9744,100626,9846],[9947,9745,9845,9847],[9948,9746,9846,9848],[9949,9747,9847,9849],[9950,9748,9848,9850],[9951,9749,9849,9851],[9952,9750,9850,9852],[9953,9751,9851,9853],[9954,9752,9852,9854],[9955,9753,9853,9855],[9956,9754,9854,101329],[9957,9755,101364,9857],[9958,9756,9856,9858],[9959,9757,9857,9859],[9960,9758,9858,100862],[9961,9759,9859,9861],[9962,9760,100785,9862],[9963,9761,9861,9863],[9964,9762,9862,9864],[9965,9763,9863,9865],[9966,9764,9864,9866],[9967,9765,9865,9867],[9968,9766,9866,9868],[9969,9767,9867,9869],[9970,9768,9868,9870],[9971,9769,9869,9871],[9972,9770,9870,9872],[9973,9771,9871,9873],[9974,9772,9872,9874],[9975,9773,9873,9875],[9976,9774,9874,9876],[9977,9775,9875,9877],[9978,9776,9876,9878],[9979,9777,9877,9879],[9980,9778,9878,9880],[9981,9779,9879,101733],[9982,-1,101774,9882],[9983,9781,9881,9883],[9984,9782,9882,9884],[9985,9783,9883,9885],[9986,9784,9884,9886],[9987,9785,9885,9887],[9988,9786,9886,9888],[9989,9787,9887,9889],[9990,9788,9888,9890],[9991,9789,9889,9891],[9992,9790,9890,9892],[9993,9791,9891,9893],[9994,9792,9892,102151],[9995,9793,9893,9895],[9996,9794,9894,9896],[9997,9795,9895,9897],[9998,9796,9896,-1],[9999,9797,-1,9899],[10000,9798,9898,9900],[10001,9799,9899,9901],[10002,9800,9900,9902],[10003,9801,9901,9903],[10004,9802,9902,9904],[10005,9803,9903,9905],[10006,9804,9904,101926],[10007,9805,9905,9907],[10008,9806,9906,9908],[10009,9807,102019,9909],[10010,9808,9908,9910],[10011,9809,9909,9911],[10012,9810,9910,9912],[10013,9811,9911,9913],[10014,9812,9912,9914],[10015,9813,9913,9915],[10016,9814,9914,9916],[10017,9815,9915,9917],[10018,9816,9916,9918],[10019,9817,9917,9919],[10020,9818,9918,9920],[10021,9819,9919,101560],[10022,9820,101601,9922],[10023,9821,9921,9923],[10024,9822,9922,9924],[10025,9823,9923,9925],[10026,9824,9924,9926],[10027,9825,9925,9927],[10028,9826,9926,9928],[10029,9827,9927,9929],[10030,9828,9928,9930],[10031,9829,9929,9931],[10032,9830,9930,9932],[10033,9831,9931,101638],[10034,9832,9932,9934],[10035,9833,101677,9935],[10036,9834,9934,9936],[10037,9835,9935,9937],[10038,9836,9936,9938],[10039,9837,9937,9939],[10040,9838,9938,9940],[10041,9839,9939,9941],[10042,9840,9940,9942],[10043,9841,9941,100536],[10044,9842,9942,9944],[10045,9843,9943,9945],[10046,9844,9944,9946],[10047,9845,100627,9947],[10048,9846,9946,9948],[10049,9847,9947,9949],[10050,9848,9948,9950],[10051,9849,9949,9951],[10052,9850,9950,9952],[10053,9851,9951,9953],[10054,9852,9952,9954],[10055,9853,9953,9955],[10056,9854,9954,9956],[10057,9855,9955,101330],[10058,9856,101365,9958],[10059,9857,9957,9959],[10060,9858,9958,9960],[10061,9859,9959,100863],[10062,9860,9960,9962],[10063,9861,100786,9963],[10064,9862,9962,9964],[10065,9863,9963,9965],[10066,9864,9964,9966],[10067,9865,9965,9967],[10068,9866,9966,9968],[10069,9867,9967,9969],[10070,9868,9968,9970],[10071,9869,9969,9971],[10072,9870,9970,9972],[10073,9871,9971,9973],[10074,9872,9972,9974],[10075,9873,9973,9975],[10076,9874,9974,9976],[10077,9875,9975,9977],[10078,9876,9976,9978],[10079,9877,9977,9979],[10080,9878,9978,9980],[10081,9879,9979,9981],[-1,9880,9980,101734],[10083,9881,101775,9983],[10084,9882,9982,9984],[10085,9883,9983,9985],[10086,9884,9984,9986],[10087,9885,9985,9987],[10088,9886,9986,9988],[10089,9887,9987,9989],[10090,9888,9988,9990],[10091,9889,9989,9991],[10092,9890,9990,9992],[10093,9891,9991,9993],[10094,9892,9992,9994],[10095,9893,9993,102152],[10096,9894,9994,9996],[10097,9895,9995,9997],[10098,9896,9996,9998],[10099,9897,9997,-1],[10100,9898,-1,10000],[10101,9899,9999,10001],[10102,9900,10000,10002],[10103,9901,10001,10003],[10104,9902,10002,10004],[10105,9903,10003,10005],[10106,9904,10004,10006],[10107,9905,10005,101927],[10108,9906,10006,10008],[10109,9907,10007,10009],[10110,9908,102020,10010],[10111,9909,10009,10011],[10112,9910,10010,10012],[10113,9911,10011,10013],[10114,9912,10012,10014],[10115,9913,10013,10015],[10116,9914,10014,10016],[10117,9915,10015,10017],[10118,9916,10016,10018],[10119,9917,10017,10019],[10120,9918,10018,10020],[10121,9919,10019,10021],[10122,9920,10020,101561],[-1,9921,101602,10023],[10124,9922,10022,10024],[10125,9923,10023,10025],[10126,9924,10024,10026],[10127,9925,10025,10027],[10128,9926,10026,10028],[10129,9927,10027,10029],[10130,9928,10028,10030],[10131,9929,10029,10031],[10132,9930,10030,10032],[10133,9931,10031,10033],[10134,9932,10032,101639],[10135,9933,10033,10035],[10136,9934,101678,10036],[10137,9935,10035,10037],[10138,9936,10036,10038],[10139,9937,10037,10039],[10140,9938,10038,10040],[10141,9939,10039,10041],[10142,9940,10040,10042],[10143,9941,10041,10043],[10144,9942,10042,100537],[10145,9943,10043,10045],[10146,9944,10044,10046],[10147,9945,10045,10047],[10148,9946,100628,10048],[10149,9947,10047,10049],[10150,9948,10048,10050],[10151,9949,10049,10051],[10152,9950,10050,10052],[10153,9951,10051,10053],[10154,9952,10052,10054],[10155,9953,10053,10055],[10156,9954,10054,10056],[10157,9955,10055,10057],[10158,9956,10056,101331],[10159,9957,101366,10059],[10160,9958,10058,10060],[10161,9959,10059,10061],[10162,9960,10060,100864],[10163,9961,10061,10063],[10164,9962,100787,10064],[10165,9963,10063,10065],[10166,9964,10064,10066],[10167,9965,10065,10067],[10168,9966,10066,10068],[10169,9967,10067,10069],[10170,9968,10068,10070],[10171,9969,10069,10071],[10172,9970,10070,10072],[10173,9971,10071,10073],[10174,9972,10072,10074],[10175,9973,10073,10075],[10176,9974,10074,10076],[10177,9975,10075,10077],[10178,9976,10076,10078],[10179,9977,10077,10079],[10180,9978,10078,10080],[10181,9979,10079,10081],[10182,9980,10080,101735],[10183,9981,10081,10083],[10184,9982,101776,10084],[10185,9983,10083,10085],[10186,9984,10084,10086],[10187,9985,10085,10087],[10188,9986,10086,10088],[10189,9987,10087,10089],[10190,9988,10088,10090],[10191,9989,10089,10091],[10192,9990,10090,10092],[10193,9991,10091,10093],[10194,9992,10092,10094],[10195,9993,10093,10095],[10196,9994,10094,102153],[10197,9995,10095,10097],[10198,9996,10096,10098],[10199,9997,10097,10099],[10200,9998,10098,-1],[10201,9999,-1,10101],[10202,10000,10100,10102],[10203,10001,10101,10103],[10204,10002,10102,10104],[10205,10003,10103,10105],[10206,10004,10104,10106],[10207,10005,10105,10107],[10208,10006,10106,10108],[10209,-1,10107,101928],[10210,10008,10108,10110],[10211,10009,102021,10111],[10212,10010,10110,10112],[10213,10011,10111,10113],[10214,10012,10112,10114],[10215,10013,10113,10115],[10216,10014,10114,10116],[10217,10015,10115,10117],[10218,10016,10116,10118],[10219,10017,10117,10119],[10220,10018,10118,10120],[10221,10019,10119,10121],[10222,10020,10120,10122],[10223,10021,10121,101562],[10224,10022,10122,10124],[10225,10023,101603,10125],[10226,10024,10124,10126],[10227,10025,10125,10127],[10228,10026,10126,10128],[10229,10027,10127,10129],[10230,10028,10128,10130],[10231,10029,10129,10131],[10232,10030,10130,10132],[10233,10031,10131,10133],[10234,10032,10132,10134],[10235,10033,10133,101640],[10236,10034,10134,10136],[10237,10035,101679,10137],[10238,10036,10136,10138],[10239,10037,10137,10139],[10240,10038,10138,10140],[10241,10039,10139,10141],[10242,10040,10140,10142],[10243,10041,10141,10143],[10244,10042,10142,10144],[10245,10043,10143,10145],[10246,-1,10144,100538],[10247,10045,10145,10147],[10248,10046,10146,10148],[10249,10047,100629,10149],[10250,10048,10148,10150],[10251,10049,10149,10151],[10252,10050,10150,10152],[10253,10051,10151,10153],[10254,10052,10152,100695],[10255,10053,100662,10155],[10256,10054,10154,10156],[10257,10055,10155,10157],[10258,10056,10156,10158],[10259,10057,10157,101332],[10260,10058,101367,10160],[10261,10059,10159,10161],[10262,10060,10160,10162],[10263,10061,10161,100865],[10264,10062,10162,10164],[10265,10063,100788,10165],[10266,10064,10164,10166],[10267,10065,10165,10167],[10268,10066,10166,10168],[10269,10067,10167,10169],[10270,10068,10168,10170],[10271,10069,10169,10171],[10272,10070,10170,10172],[10273,10071,10171,10173],[10274,10072,10172,10174],[10275,10073,10173,10175],[10276,10074,10174,10176],[10277,10075,10175,10177],[10278,10076,10176,10178],[10279,10077,10177,10179],[10280,10078,10178,10180],[10281,10079,10179,10181],[10282,10080,10180,10182],[10283,10081,10181,101736],[10284,-1,101777,10184],[10285,10083,10183,10185],[10286,10084,10184,10186],[10287,10085,10185,10187],[10288,10086,10186,10188],[10289,10087,10187,10189],[10290,10088,10188,10190],[10291,10089,10189,10191],[10292,10090,10190,10192],[10293,10091,10191,10193],[10294,10092,10192,10194],[10295,10093,10193,10195],[10296,10094,10194,10196],[10297,10095,10195,10197],[10298,-1,10196,102154],[10299,10097,10197,10199],[10300,10098,10198,10200],[10301,10099,10199,-1],[10302,10100,-1,10202],[10303,10101,10201,10203],[10304,10102,10202,10204],[10305,10103,10203,10205],[10306,10104,10204,10206],[10307,10105,10205,10207],[10308,10106,10206,10208],[10309,10107,10207,10209],[10310,10108,10208,101929],[10311,10109,10209,10211],[10312,10110,102022,10212],[10313,10111,10211,10213],[10314,10112,10212,10214],[10315,10113,10213,10215],[10316,10114,10214,10216],[10317,10115,10215,10217],[10318,10116,10216,10218],[10319,10117,10217,10219],[10320,10118,10218,10220],[10321,10119,10219,10221],[10322,10120,10220,10222],[10323,10121,10221,10223],[10324,10122,10222,101563],[10325,10123,10223,10225],[10326,10124,101604,10226],[10327,10125,10225,10227],[10328,10126,10226,10228],[10329,10127,10227,10229],[10330,10128,10228,10230],[10331,10129,10229,10231],[10332,10130,10230,10232],[10333,10131,10231,10233],[10334,10132,10232,10234],[10335,10133,10233,10235],[10336,10134,10234,101641],[10337,10135,10235,10237],[10338,10136,101680,10238],[10339,10137,10237,10239],[10340,10138,10238,10240],[10341,10139,10239,10241],[10342,10140,10240,10242],[10343,10141,10241,10243],[10344,10142,10242,10244],[10345,10143,10243,10245],[10346,10144,10244,10246],[10347,10145,10245,100539],[10348,10146,10246,10248],[10349,10147,10247,10249],[10350,10148,100630,10250],[10351,10149,10249,10251],[10352,10150,10250,10252],[10353,10151,10251,10253],[10354,10152,10252,10254],[10355,10153,10253,100696],[10356,10154,100663,10256],[10357,10155,10255,10257],[10358,10156,10256,10258],[10359,10157,10257,10259],[10360,10158,10258,101333],[10361,10159,101368,10261],[10362,10160,10260,10262],[10363,10161,10261,10263],[10364,10162,10262,100866],[10365,-1,100789,10265],[10366,10164,10264,10266],[10367,10165,10265,10267],[10368,10166,10266,10268],[10369,10167,10267,10269],[10370,10168,10268,10270],[10371,10169,10269,10271],[10372,10170,10270,10272],[10373,10171,10271,10273],[10374,10172,10272,10274],[10375,10173,10273,10275],[10376,10174,10274,10276],[10377,10175,10275,10277],[10378,10176,10276,10278],[10379,10177,10277,10279],[10380,10178,10278,10280],[10381,10179,10279,10281],[10382,10180,10280,10282],[10383,10181,10281,10283],[-1,10182,10282,101737],[10385,10183,101778,10285],[10386,10184,10284,10286],[10387,10185,10285,10287],[10388,10186,10286,10288],[10389,10187,10287,10289],[10390,10188,10288,10290],[10391,10189,10289,10291],[10392,10190,10290,10292],[10393,10191,10291,10293],[10394,10192,10292,10294],[10395,10193,10293,10295],[10396,10194,10294,10296],[10397,10195,10295,10297],[10398,10196,10296,10298],[10399,10197,10297,102155],[10400,10198,10298,10300],[10401,10199,10299,10301],[10402,10200,10300,-1],[10403,10201,-1,10303],[10404,10202,10302,10304],[10405,10203,10303,10305],[10406,10204,10304,10306],[10407,10205,10305,10307],[10408,10206,10306,10308],[10409,10207,10307,10309],[10410,10208,10308,10310],[10411,10209,10309,101930],[10412,10210,10310,10312],[10413,10211,102023,10313],[10414,10212,10312,10314],[10415,10213,10313,10315],[10416,10214,10314,10316],[10417,10215,10315,10317],[10418,10216,10316,10318],[10419,10217,10317,10319],[10420,10218,10318,10320],[10421,10219,10319,10321],[10422,10220,10320,10322],[10423,10221,10321,10323],[10424,10222,10322,10324],[10425,10223,10323,101564],[10426,10224,10324,10326],[10427,10225,101605,10327],[10428,10226,10326,10328],[10429,10227,10327,10329],[10430,10228,10328,10330],[10431,10229,10329,10331],[10432,10230,10330,10332],[10433,10231,10331,10333],[10434,10232,10332,10334],[10435,10233,10333,10335],[10436,10234,10334,10336],[10437,10235,10335,10337],[10438,-1,10336,101642],[10439,10237,101681,10339],[10440,10238,10338,10340],[10441,10239,10339,10341],[10442,10240,10340,10342],[10443,10241,10341,10343],[10444,10242,10342,10344],[10445,10243,10343,10345],[10446,10244,10344,10346],[10447,10245,10345,10347],[-1,10246,10346,100540],[10449,10247,10347,10349],[10450,10248,10348,10350],[10451,10249,100631,10351],[10452,10250,10350,10352],[10453,10251,10351,10353],[10454,10252,10352,10354],[10455,10253,10353,10355],[10456,10254,10354,100697],[10457,10255,100664,10357],[10458,10256,10356,10358],[10459,10257,10357,10359],[10460,10258,10358,10360],[10461,10259,10359,101334],[10462,10260,101369,10362],[10463,10261,10361,10363],[10464,10262,10362,10364],[10465,10263,10363,100867],[10466,10264,100790,10366],[10467,10265,10365,10367],[10468,10266,10366,10368],[10469,10267,10367,10369],[10470,10268,10368,10370],[10471,10269,10369,10371],[10472,10270,10370,10372],[10473,10271,10371,10373],[10474,10272,10372,10374],[10475,10273,10373,10375],[10476,10274,10374,10376],[10477,10275,10375,10377],[10478,10276,10376,10378],[10479,10277,10377,10379],[10480,10278,10378,10380],[10481,10279,10379,10381],[10482,10280,10380,10382],[10483,10281,10381,10383],[10484,10282,10382,101738],[10485,10283,10383,10385],[10486,10284,101779,10386],[10487,10285,10385,10387],[10488,10286,10386,10388],[10489,10287,10387,10389],[10490,10288,10388,10390],[10491,10289,10389,10391],[10492,10290,10390,10392],[10493,10291,10391,10393],[10494,10292,10392,10394],[10495,10293,10393,10395],[10496,10294,10394,10396],[10497,10295,10395,10397],[10498,10296,10396,10398],[10499,10297,10397,10399],[10500,10298,10398,102156],[10501,10299,10399,10401],[10502,10300,10400,10402],[10503,10301,10401,-1],[10504,10302,-1,10404],[10505,10303,10403,10405],[10506,10304,10404,10406],[10507,10305,10405,10407],[10508,10306,10406,10408],[10509,10307,10407,10409],[10510,10308,10408,10410],[10511,10309,10409,10411],[10512,10310,10410,101931],[10513,10311,10411,10413],[10514,10312,102024,10414],[10515,10313,10413,10415],[10516,10314,10414,10416],[10517,10315,10415,10417],[10518,10316,10416,10418],[10519,10317,10417,10419],[10520,10318,10418,10420],[10521,10319,10419,10421],[10522,10320,10420,10422],[10523,10321,10421,10423],[10524,10322,10422,10424],[10525,10323,10423,10425],[10526,10324,10424,101565],[10527,10325,10425,10427],[10528,10326,101606,10428],[10529,10327,10427,10429],[10530,10328,10428,10430],[10531,10329,10429,10431],[10532,10330,10430,10432],[10533,10331,10431,10433],[10534,10332,10432,10434],[10535,10333,10433,10435],[10536,10334,10434,10436],[10537,10335,10435,10437],[10538,10336,10436,10438],[10539,10337,10437,101643],[10540,10338,101682,10440],[10541,10339,10439,10441],[10542,10340,10440,10442],[10543,10341,10441,10443],[10544,10342,10442,10444],[10545,10343,10443,10445],[10546,10344,10444,10446],[10547,10345,10445,10447],[10548,10346,10446,100413],[10549,10347,10447,10449],[10550,10348,10448,10450],[10551,10349,10449,10451],[10552,10350,100632,10452],[10553,10351,10451,10453],[10554,10352,10452,10454],[10555,10353,10453,10455],[10556,10354,10454,10456],[10557,10355,10455,100698],[-1,10356,100665,10458],[10559,10357,10457,10459],[10560,10358,10458,10460],[10561,10359,10459,10461],[10562,10360,10460,10462],[10563,10361,10461,10463],[10564,10362,10462,10464],[10565,10363,10463,10465],[10566,10364,10464,100868],[10567,10365,100791,10467],[10568,10366,10466,10468],[10569,10367,10467,10469],[10570,10368,10468,10470],[10571,10369,10469,10471],[10572,10370,10470,10472],[10573,10371,10471,10473],[10574,10372,10472,10474],[10575,10373,10473,10475],[10576,10374,10474,10476],[10577,10375,10475,10477],[10578,10376,10476,10478],[10579,10377,10477,10479],[10580,10378,10478,10480],[10581,10379,10479,10481],[10582,10380,10480,10482],[10583,10381,10481,10483],[10584,10382,10482,10484],[10585,10383,10483,101739],[10586,-1,101780,10486],[10587,10385,10485,10487],[10588,10386,10486,10488],[10589,10387,10487,10489],[10590,10388,10488,10490],[10591,10389,10489,10491],[10592,10390,10490,10492],[10593,10391,10491,10493],[10594,10392,10492,10494],[10595,10393,10493,10495],[10596,10394,10494,10496],[10597,10395,10495,10497],[10598,10396,10496,10498],[10599,10397,10497,10499],[10600,10398,10498,10500],[10601,10399,10499,102157],[10602,10400,10500,10502],[10603,10401,10501,10503],[10604,10402,10502,-1],[10605,10403,-1,10505],[10606,10404,10504,10506],[10607,10405,10505,10507],[10608,10406,10506,10508],[10609,10407,10507,10509],[10610,10408,10508,10510],[10611,10409,10509,10511],[10612,10410,10510,10512],[10613,10411,10511,101932],[10614,10412,10512,10514],[10615,10413,102025,10515],[10616,10414,10514,10516],[10617,10415,10515,10517],[10618,10416,10516,10518],[10619,10417,10517,10519],[10620,10418,10518,10520],[10621,10419,10519,10521],[10622,10420,10520,10522],[10623,10421,10521,10523],[10624,10422,10522,10524],[10625,10423,10523,10525],[10626,10424,10524,10526],[10627,10425,10525,101566],[10628,10426,10526,10528],[10629,10427,101607,10529],[10630,10428,10528,10530],[10631,10429,10529,10531],[10632,10430,10530,10532],[10633,10431,10531,10533],[10634,10432,10532,10534],[10635,10433,10533,10535],[10636,10434,10534,10536],[10637,10435,10535,10537],[10638,10436,10536,10538],[10639,10437,10537,10539],[10640,10438,10538,101644],[-1,10439,101683,10541],[10642,10440,10540,10542],[10643,10441,10541,10543],[10644,10442,10542,10544],[10645,10443,10543,10545],[10646,10444,10544,10546],[10647,10445,10545,10547],[10648,10446,10546,10548],[10649,10447,10547,100414],[10650,10448,10548,10550],[10651,10449,10549,10551],[10652,10450,10550,10552],[10653,10451,100633,10553],[10654,10452,10552,10554],[10655,10453,10553,10555],[10656,10454,10554,10556],[10657,10455,10555,10557],[10658,10456,10556,100699],[10659,10457,10557,10559],[10660,10458,100666,10560],[10661,10459,10559,10561],[10662,10460,10560,10562],[10663,10461,10561,10563],[10664,10462,10562,10564],[10665,10463,10563,10565],[10666,10464,10564,10566],[10667,10465,10565,100869],[10668,10466,100792,10568],[10669,10467,10567,10569],[10670,10468,10568,10570],[10671,10469,10569,10571],[10672,10470,10570,10572],[10673,10471,10571,10573],[10674,10472,10572,10574],[10675,10473,10573,10575],[10676,10474,10574,10576],[10677,10475,10575,10577],[10678,10476,10576,10578],[10679,10477,10577,10579],[10680,10478,10578,10580],[10681,10479,10579,10581],[10682,10480,10580,10582],[10683,10481,10581,10583],[10684,10482,10582,10584],[10685,10483,10583,10585],[-1,10484,10584,101740],[10687,10485,101781,10587],[10688,10486,10586,10588],[10689,10487,10587,10589],[10690,10488,10588,10590],[10691,10489,10589,10591],[10692,10490,10590,10592],[10693,10491,10591,10593],[10694,10492,10592,10594],[10695,10493,10593,10595],[10696,10494,10594,10596],[10697,10495,10595,10597],[10698,10496,10596,10598],[10699,10497,10597,10599],[10700,10498,10598,10600],[10701,10499,10599,10601],[10702,10500,10600,102158],[10703,10501,10601,10603],[10704,10502,10602,10604],[10705,10503,10603,-1],[10706,10504,-1,10606],[10707,10505,10605,10607],[10708,10506,10606,10608],[10709,10507,10607,10609],[10710,10508,10608,10610],[10711,10509,10609,10611],[10712,10510,10610,10612],[10713,10511,10611,10613],[10714,10512,10612,101933],[10715,10513,10613,10615],[10716,10514,102026,10616],[10717,10515,10615,10617],[10718,10516,10616,10618],[10719,10517,10617,10619],[10720,10518,10618,10620],[10721,10519,10619,10621],[10722,10520,10620,10622],[10723,10521,10621,10623],[10724,10522,10622,10624],[10725,10523,10623,10625],[10726,10524,10624,10626],[10727,10525,10625,10627],[10728,10526,10626,101567],[10729,10527,10627,10629],[10730,10528,101608,10630],[10731,10529,10629,10631],[10732,10530,10630,10632],[10733,10531,10631,10633],[10734,10532,10632,10634],[10735,10533,10633,10635],[10736,10534,10634,10636],[10737,10535,10635,10637],[10738,10536,10636,10638],[10739,10537,10637,10639],[10740,10538,10638,10640],[10741,10539,10639,101645],[10742,10540,10640,10642],[10743,10541,101684,10643],[10744,10542,10642,10644],[10745,10543,10643,10645],[10746,10544,10644,10646],[10747,10545,10645,10647],[10748,10546,10646,10648],[10749,10547,10647,10649],[10750,10548,10648,100415],[10751,10549,10649,10651],[10752,10550,10650,10652],[10753,10551,10651,10653],[10754,10552,100634,10654],[10755,10553,10653,10655],[10756,10554,10654,10656],[10757,10555,10655,10657],[10758,10556,10656,10658],[10759,10557,10657,10659],[10760,-1,10658,100700],[10761,10559,100667,10661],[10762,10560,10660,10662],[10763,10561,10661,10663],[10764,10562,10662,10664],[10765,10563,10663,10665],[10766,10564,10664,10666],[10767,10565,10665,10667],[10768,10566,10666,100870],[10769,10567,100793,10669],[10770,10568,10668,10670],[10771,10569,10669,10671],[10772,10570,10670,10672],[10773,10571,10671,10673],[10774,10572,10672,10674],[10775,10573,10673,10675],[10776,10574,10674,10676],[10777,10575,10675,10677],[10778,10576,10676,10678],[10779,10577,10677,10679],[10780,10578,10678,10680],[10781,10579,10679,10681],[10782,10580,10680,10682],[10783,10581,10681,10683],[10784,10582,10682,10684],[10785,10583,10683,10685],[10786,10584,10684,101741],[10787,10585,10685,10687],[10788,10586,101782,10688],[10789,10587,10687,10689],[10790,10588,10688,10690],[10791,10589,10689,10691],[10792,10590,10690,10692],[10793,10591,10691,10693],[10794,10592,10692,10694],[10795,10593,10693,10695],[10796,10594,10694,10696],[10797,10595,10695,10697],[10798,10596,10696,10698],[10799,10597,10697,10699],[10800,10598,10698,10700],[10801,10599,10699,10701],[10802,10600,10700,10702],[10803,10601,10701,102159],[10804,10602,10702,10704],[10805,10603,10703,10705],[10806,10604,10704,-1],[10807,10605,-1,10707],[10808,10606,10706,10708],[10809,10607,10707,10709],[10810,10608,10708,10710],[10811,10609,10709,10711],[10812,10610,10710,10712],[10813,10611,10711,10713],[10814,10612,10712,10714],[10815,10613,10713,101934],[10816,10614,10714,10716],[-1,10615,102027,10717],[10818,10616,10716,10718],[10819,10617,10717,10719],[10820,10618,10718,10720],[10821,10619,10719,10721],[10822,10620,10720,10722],[10823,10621,10721,10723],[10824,10622,10722,10724],[10825,10623,10723,10725],[10826,10624,10724,10726],[10827,10625,10725,10727],[10828,10626,10726,10728],[10829,10627,10727,10729],[10830,-1,10728,101568],[10831,10629,101609,10731],[10832,10630,10730,10732],[10833,10631,10731,10733],[10834,10632,10732,10734],[10835,10633,10733,10735],[10836,10634,10734,10736],[10837,10635,10735,10737],[10838,10636,10736,10738],[10839,10637,10737,10739],[10840,10638,10738,10740],[10841,10639,10739,10741],[10842,10640,10740,101646],[10843,10641,10741,10743],[10844,10642,101685,10744],[10845,10643,10743,10745],[10846,10644,10744,10746],[10847,10645,10745,10747],[10848,10646,10746,10748],[10849,10647,10747,10749],[10850,10648,10748,10750],[-1,10649,10749,100416],[10852,10650,10750,10752],[10853,10651,10751,10753],[10854,10652,10752,10754],[10855,10653,100635,10755],[10856,10654,10754,10756],[10857,10655,10755,10757],[10858,10656,10756,10758],[10859,10657,10757,10759],[10860,10658,10758,10760],[10861,10659,10759,100701],[10862,10660,100668,10762],[10863,10661,10761,10763],[10864,10662,10762,10764],[10865,10663,10763,10765],[10866,10664,10764,10766],[10867,10665,10765,10767],[10868,10666,10766,10768],[10869,10667,10767,100871],[10870,10668,100794,10770],[10871,10669,10769,10771],[10872,10670,10770,10772],[10873,10671,10771,10773],[10874,10672,10772,10774],[10875,10673,10773,10775],[10876,10674,10774,10776],[10877,10675,10775,10777],[10878,10676,10776,10778],[10879,10677,10777,10779],[10880,10678,10778,10780],[10881,10679,10779,10781],[10882,10680,10780,10782],[10883,10681,10781,10783],[10884,10682,10782,10784],[10885,10683,10783,10785],[10886,10684,10784,10786],[10887,10685,10785,101742],[10888,10686,10786,10788],[10889,10687,101783,10789],[10890,10688,10788,10790],[10891,10689,10789,10791],[10892,10690,10790,10792],[10893,10691,10791,10793],[10894,10692,10792,10794],[10895,10693,10793,10795],[10896,10694,10794,10796],[10897,10695,10795,10797],[10898,10696,10796,10798],[10899,10697,10797,10799],[10900,10698,10798,10800],[10901,10699,10799,10801],[10902,10700,10800,10802],[10903,10701,10801,10803],[10904,10702,10802,102160],[10905,10703,10803,10805],[10906,10704,10804,10806],[10907,10705,10805,-1],[10908,10706,-1,10808],[10909,10707,10807,10809],[10910,10708,10808,10810],[10911,10709,10809,10811],[10912,10710,10810,10812],[10913,10711,10811,10813],[10914,10712,10812,10814],[10915,10713,10813,10815],[10916,10714,10814,101935],[10917,10715,10815,10817],[10918,10716,10816,10818],[10919,10717,102028,10819],[10920,10718,10818,10820],[10921,10719,10819,10821],[10922,10720,10820,10822],[10923,10721,10821,10823],[10924,10722,10822,10824],[10925,10723,10823,10825],[10926,10724,10824,10826],[10927,10725,10825,10827],[10928,10726,10826,10828],[10929,10727,10827,10829],[10930,10728,10828,10830],[10931,10729,10829,101569],[10932,10730,101610,10832],[10933,10731,10831,10833],[10934,10732,10832,10834],[10935,10733,10833,10835],[10936,10734,10834,10836],[10937,10735,10835,10837],[10938,10736,10836,10838],[10939,10737,10837,10839],[10940,10738,10838,10840],[10941,10739,10839,10841],[10942,10740,10840,10842],[10943,10741,10841,101647],[10944,10742,10842,10844],[10945,10743,101686,10845],[10946,10744,10844,10846],[10947,10745,10845,10847],[10948,10746,10846,10848],[10949,10747,10847,10849],[10950,10748,10848,10850],[10951,10749,10849,100417],[10952,10750,10850,10852],[10953,10751,10851,10853],[10954,-1,100454,100545],[10955,10753,10853,10855],[10956,10754,100636,10856],[10957,10755,10855,10857],[10958,10756,10856,10858],[10959,10757,10857,10859],[10960,10758,10858,10860],[10961,10759,10859,10861],[10962,10760,10860,100702],[10963,10761,100669,10863],[10964,10762,10862,10864],[10965,10763,10863,10865],[10966,10764,10864,10866],[10967,10765,10865,10867],[10968,10766,10866,10868],[10969,10767,10867,10869],[10970,10768,10868,100872],[10971,10769,100795,10871],[10972,10770,10870,10872],[10973,10771,10871,10873],[10974,10772,10872,10874],[10975,10773,10873,10875],[10976,10774,10874,10876],[10977,10775,10875,10877],[10978,10776,10876,10878],[10979,10777,10877,10879],[10980,10778,10878,10880],[10981,10779,10879,10881],[10982,10780,10880,10882],[10983,10781,10881,10883],[10984,10782,10882,10884],[10985,10783,10883,10885],[10986,10784,10884,10886],[10987,10785,10885,10887],[-1,10786,10886,101743],[10989,-1,101784,10889],[10990,10788,10888,10890],[10991,10789,10889,10891],[10992,10790,10890,10892],[10993,10791,10891,10893],[10994,10792,10892,10894],[10995,10793,10893,10895],[10996,10794,10894,10896],[10997,10795,10895,10897],[10998,10796,10896,10898],[10999,10797,10897,10899],[11000,10798,10898,10900],[11001,10799,10899,10901],[11002,10800,10900,10902],[11003,10801,10901,10903],[11004,10802,10902,10904],[11005,10803,10903,102161],[11006,10804,10904,10906],[11007,10805,10905,10907],[11008,10806,10906,-1],[11009,10807,-1,10909],[11010,10808,10908,10910],[11011,10809,10909,10911],[11012,10810,10910,10912],[11013,10811,10911,10913],[11014,10812,10912,10914],[11015,10813,10913,10915],[11016,10814,10914,10916],[11017,10815,10915,101936],[11018,10816,10916,10918],[11019,10817,10917,10919],[11020,10818,102029,10920],[11021,10819,10919,10921],[11022,10820,10920,10922],[11023,10821,10921,10923],[11024,10822,10922,10924],[11025,10823,10923,10925],[11026,10824,10924,10926],[11027,10825,10925,10927],[11028,10826,10926,10928],[11029,10827,10927,10929],[11030,10828,10928,10930],[11031,10829,10929,10931],[11032,10830,10930,101570],[11033,10831,101611,10933],[11034,10832,10932,10934],[11035,10833,10933,10935],[11036,10834,10934,10936],[11037,10835,10935,10937],[11038,10836,10936,10938],[11039,10837,10937,10939],[11040,10838,10938,10940],[11041,10839,10939,10941],[11042,10840,10940,10942],[11043,10841,10941,10943],[11044,10842,10942,101648],[11045,10843,10943,10945],[11046,10844,101687,10946],[11047,10845,10945,10947],[11048,10846,10946,10948],[11049,10847,10947,10949],[11050,10848,10948,10950],[11051,10849,10949,10951],[11052,10850,10950,100418],[11053,10851,10951,10953],[11054,10852,10952,10954],[11055,10853,100455,100546],[11056,10854,10954,10956],[11057,10855,100637,10957],[11058,10856,10956,10958],[11059,10857,10957,10959],[11060,10858,10958,10960],[11061,10859,10959,10961],[11062,10860,10960,10962],[11063,10861,10961,100703],[11064,10862,100670,10964],[11065,10863,10963,10965],[11066,10864,10964,10966],[11067,10865,10965,10967],[11068,10866,10966,10968],[11069,10867,10967,10969],[11070,10868,10968,10970],[11071,10869,10969,100873],[11072,10870,100796,10972],[11073,10871,10971,10973],[11074,10872,10972,10974],[11075,10873,10973,10975],[11076,10874,10974,10976],[11077,10875,10975,10977],[11078,10876,10976,10978],[11079,10877,10977,10979],[11080,10878,10978,10980],[11081,10879,10979,10981],[11082,10880,10980,10982],[11083,10881,10981,10983],[11084,10882,10982,10984],[11085,10883,10983,10985],[11086,10884,10984,10986],[11087,10885,10985,10987],[11088,10886,10986,101744],[11089,10887,10987,10989],[11090,10888,101785,10990],[11091,10889,10989,10991],[11092,10890,10990,10992],[11093,10891,10991,10993],[11094,10892,10992,10994],[11095,10893,10993,10995],[11096,10894,10994,10996],[11097,10895,10995,10997],[11098,10896,10996,10998],[11099,10897,10997,10999],[11100,10898,10998,11000],[11101,10899,10999,11001],[11102,10900,11000,11002],[11103,10901,11001,11003],[11104,10902,11002,11004],[11105,10903,11003,11005],[11106,10904,11004,102162],[11107,10905,11005,11007],[11108,10906,11006,11008],[11109,10907,11007,-1],[11110,10908,-1,11010],[11111,10909,11009,11011],[11112,10910,11010,11012],[11113,10911,11011,11013],[11114,10912,11012,11014],[11115,10913,11013,11015],[11116,10914,11014,11016],[11117,10915,11015,11017],[11118,10916,11016,11018],[11119,-1,11017,101937],[11120,10918,11018,11020],[11121,10919,102030,11021],[11122,10920,11020,11022],[11123,10921,11021,11023],[11124,10922,11022,11024],[11125,10923,11023,11025],[11126,10924,11024,11026],[11127,10925,11025,11027],[11128,10926,11026,11028],[11129,10927,11027,11029],[11130,10928,11028,11030],[11131,10929,11029,11031],[11132,10930,11030,11032],[11133,10931,11031,101571],[-1,10932,101612,11034],[11135,10933,11033,11035],[11136,10934,11034,11036],[11137,10935,11035,11037],[11138,10936,11036,11038],[11139,10937,11037,11039],[11140,10938,11038,11040],[11141,10939,11039,11041],[11142,10940,11040,11042],[11143,10941,11041,11043],[11144,10942,11042,11044],[11145,10943,11043,101649],[11146,10944,11044,11046],[11147,10945,101688,11047],[11148,10946,11046,11048],[11149,10947,11047,11049],[11150,10948,11048,11050],[11151,10949,11049,11051],[11152,10950,11050,11052],[11153,10951,11051,100419],[11154,10952,11052,11054],[11155,10953,11053,11055],[11156,10954,100456,100547],[11157,10955,11055,11057],[11158,10956,100638,11058],[11159,10957,11057,11059],[11160,10958,11058,11060],[11161,10959,11059,11061],[11162,10960,11060,11062],[11163,10961,11061,11063],[11164,10962,11062,100704],[11165,10963,100671,11065],[11166,10964,11064,11066],[11167,10965,11065,11067],[11168,10966,11066,11068],[11169,10967,11067,11069],[11170,10968,11068,11070],[11171,10969,11069,11071],[11172,10970,11070,100874],[11173,10971,100797,11073],[11174,10972,11072,11074],[11175,10973,11073,11075],[11176,10974,11074,11076],[11177,10975,11075,11077],[11178,10976,11076,11078],[11179,10977,11077,11079],[11180,10978,11078,11080],[11181,10979,11079,11081],[11182,10980,11080,11082],[11183,10981,11081,11083],[11184,10982,11082,11084],[11185,10983,11083,11085],[11186,10984,11084,11086],[11187,10985,11085,11087],[11188,10986,11086,11088],[11189,10987,11087,101745],[11190,10988,11088,11090],[11191,10989,101786,11091],[11192,10990,11090,11092],[11193,10991,11091,11093],[11194,10992,11092,11094],[11195,10993,11093,11095],[11196,10994,11094,11096],[11197,10995,11095,11097],[11198,10996,11096,11098],[11199,10997,11097,11099],[11200,10998,11098,11100],[11201,10999,11099,11101],[11202,11000,11100,11102],[11203,11001,11101,11103],[11204,11002,11102,11104],[11205,11003,11103,11105],[11206,11004,11104,11106],[11207,11005,11105,102163],[11208,11006,11106,11108],[11209,11007,11107,11109],[11210,11008,11108,-1],[11211,11009,-1,11111],[11212,11010,11110,11112],[11213,11011,11111,11113],[11214,11012,11112,11114],[11215,11013,11113,11115],[11216,11014,11114,11116],[11217,11015,11115,11117],[11218,11016,11116,11118],[11219,11017,11117,11119],[11220,11018,11118,101938],[11221,11019,11119,11121],[11222,11020,102031,11122],[11223,11021,11121,11123],[11224,11022,11122,11124],[11225,11023,11123,11125],[11226,11024,11124,11126],[11227,11025,11125,11127],[11228,11026,11126,11128],[11229,11027,11127,11129],[11230,11028,11128,11130],[11231,11029,11129,11131],[11232,11030,11130,11132],[11233,11031,11131,11133],[11234,11032,11132,101572],[11235,11033,11133,11135],[11236,11034,101613,11136],[11237,11035,11135,11137],[11238,11036,11136,11138],[11239,11037,11137,11139],[11240,11038,11138,11140],[11241,11039,11139,11141],[11242,11040,11140,11142],[11243,11041,11141,11143],[11244,11042,11142,11144],[11245,11043,11143,11145],[11246,11044,11144,101650],[11247,11045,11145,11147],[11248,11046,101689,11148],[11249,11047,11147,11149],[11250,11048,11148,11150],[11251,11049,11149,11151],[11252,11050,11150,11152],[11253,11051,11151,11153],[11254,11052,11152,100420],[11255,11053,11153,11155],[11256,-1,100457,11156],[11257,11055,11155,100548],[11258,11056,11156,11158],[11259,11057,100639,11159],[11260,11058,11158,11160],[11261,11059,11159,11161],[11262,11060,11160,11162],[11263,11061,11161,11163],[11264,11062,11162,11164],[11265,11063,11163,100705],[11266,11064,100672,11166],[11267,11065,11165,11167],[11268,11066,11166,11168],[11269,11067,11167,11169],[11270,11068,11168,11170],[11271,11069,11169,11171],[11272,11070,11170,11172],[11273,11071,11171,100875],[11274,11072,100798,11174],[11275,11073,11173,11175],[11276,11074,11174,11176],[11277,11075,11175,11177],[11278,11076,11176,11178],[11279,11077,11177,11179],[11280,11078,11178,11180],[11281,11079,11179,11181],[11282,11080,11180,11182],[11283,11081,11181,11183],[11284,11082,11182,11184],[11285,11083,11183,11185],[11286,11084,11184,11186],[11287,11085,11185,11187],[11288,11086,11186,11188],[11289,11087,11187,11189],[11290,11088,11188,101746],[11291,11089,11189,11191],[11292,11090,101787,11192],[11293,11091,11191,11193],[11294,11092,11192,11194],[11295,11093,11193,11195],[11296,11094,11194,11196],[11297,11095,11195,11197],[11298,11096,11196,11198],[11299,11097,11197,11199],[11300,11098,11198,11200],[11301,11099,11199,11201],[11302,11100,11200,11202],[11303,11101,11201,11203],[11304,11102,11202,11204],[11305,11103,11203,11205],[11306,11104,11204,11206],[11307,11105,11205,11207],[11308,11106,11206,102164],[11309,11107,11207,11209],[11310,11108,11208,11210],[11311,11109,11209,-1],[11312,11110,-1,11212],[11313,11111,11211,11213],[11314,11112,11212,11214],[11315,11113,11213,11215],[11316,11114,11214,11216],[11317,11115,11215,11217],[11318,11116,11216,11218],[11319,11117,11217,11219],[11320,11118,11218,11220],[11321,11119,11219,101939],[11322,11120,11220,11222],[11323,11121,102032,11223],[11324,11122,11222,11224],[11325,11123,11223,11225],[11326,11124,11224,11226],[11327,11125,11225,11227],[11328,11126,11226,11228],[11329,11127,11227,11229],[11330,11128,11228,11230],[11331,11129,11229,11231],[11332,11130,11230,11232],[11333,11131,11231,11233],[11334,11132,11232,11234],[11335,11133,11233,101573],[11336,11134,11234,11236],[11337,11135,101614,11237],[11338,11136,11236,11238],[11339,11137,11237,11239],[11340,11138,11238,11240],[11341,11139,11239,11241],[11342,11140,11240,11242],[11343,11141,11241,11243],[11344,11142,11242,11244],[11345,11143,11243,11245],[11346,11144,11244,11246],[11347,11145,11245,101651],[11348,11146,11246,11248],[11349,11147,101690,11249],[11350,11148,11248,11250],[11351,11149,11249,11251],[11352,11150,11250,11252],[11353,11151,11251,11253],[11354,11152,11252,11254],[-1,11153,11253,100421],[11356,11154,11254,11256],[11357,11155,100458,11257],[11358,11156,11256,100549],[11359,11157,11257,11259],[11360,11158,100640,11260],[11361,11159,11259,11261],[11362,11160,11260,11262],[11363,11161,11261,11263],[11364,11162,11262,11264],[11365,11163,11263,11265],[11366,11164,11264,100706],[11367,11165,100673,11267],[11368,11166,11266,11268],[11369,11167,11267,11269],[11370,11168,11268,11270],[11371,11169,11269,11271],[11372,11170,11270,11272],[11373,11171,11271,11273],[11374,11172,11272,100876],[11375,11173,100799,11275],[11376,11174,11274,11276],[11377,11175,11275,11277],[11378,11176,11276,11278],[11379,11177,11277,11279],[11380,11178,11278,11280],[11381,11179,11279,11281],[11382,11180,11280,11282],[11383,11181,11281,11283],[11384,11182,11282,11284],[11385,11183,11283,11285],[11386,11184,11284,11286],[11387,11185,11285,11287],[11388,11186,11286,11288],[11389,11187,11287,11289],[11390,11188,11288,11290],[11391,11189,11289,101747],[11392,-1,101788,11292],[11393,11191,11291,11293],[11394,11192,11292,11294],[11395,11193,11293,11295],[11396,11194,11294,11296],[11397,11195,11295,11297],[11398,11196,11296,11298],[11399,11197,11297,11299],[11400,11198,11298,11300],[11401,11199,11299,11301],[11402,11200,11300,11302],[11403,11201,11301,11303],[11404,11202,11302,11304],[11405,11203,11303,11305],[11406,11204,11304,11306],[11407,11205,11305,11307],[11408,11206,11306,11308],[11409,11207,11307,11309],[11410,-1,11308,102165],[11411,11209,11309,11311],[11412,11210,11310,-1],[11413,11211,-1,11313],[11414,11212,11312,11314],[11415,11213,11313,11315],[11416,11214,11314,11316],[11417,11215,11315,11317],[11418,11216,11316,11318],[11419,11217,11317,11319],[11420,11218,11318,11320],[11421,11219,11319,11321],[11422,11220,11320,101940],[11423,11221,11321,11323],[11424,11222,102033,11324],[11425,11223,11323,11325],[11426,11224,11324,11326],[11427,11225,11325,11327],[11428,11226,11326,11328],[11429,11227,11327,11329],[11430,11228,11328,11330],[11431,11229,11329,11331],[11432,11230,11330,11332],[11433,11231,11331,11333],[11434,11232,11332,11334],[11435,11233,11333,11335],[11436,11234,11334,101574],[11437,11235,11335,11337],[11438,11236,101615,11338],[11439,11237,11337,11339],[11440,11238,11338,11340],[11441,11239,11339,11341],[11442,11240,11340,11342],[11443,11241,11341,11343],[11444,11242,11342,11344],[11445,11243,11343,11345],[11446,11244,11344,11346],[11447,11245,11345,11347],[11448,11246,11346,101652],[11449,11247,11347,11349],[11450,11248,101691,11350],[11451,11249,11349,11351],[11452,11250,11350,11352],[11453,11251,11351,11353],[11454,11252,11352,11354],[11455,11253,11353,100422],[11456,11254,11354,11356],[11457,11255,11355,11357],[11458,11256,100459,11358],[11459,11257,11357,100550],[11460,11258,11358,11360],[11461,11259,100641,11361],[11462,11260,11360,11362],[11463,11261,11361,11363],[11464,11262,11362,11364],[11465,11263,11363,11365],[11466,11264,11364,11366],[11467,11265,11365,100707],[11468,11266,100674,11368],[11469,11267,11367,11369],[11470,11268,11368,11370],[11471,11269,11369,11371],[11472,11270,11370,11372],[11473,11271,11371,11373],[11474,11272,11372,11374],[11475,11273,11373,100877],[11476,11274,100800,11376],[11477,11275,11375,11377],[11478,11276,11376,11378],[11479,11277,11377,11379],[11480,11278,11378,11380],[11481,11279,11379,11381],[11482,11280,11380,11382],[11483,11281,11381,11383],[11484,11282,11382,11384],[11485,11283,11383,11385],[11486,11284,11384,11386],[11487,11285,11385,11387],[11488,11286,11386,11388],[11489,11287,11387,11389],[11490,11288,11388,11390],[11491,11289,11389,11391],[11492,11290,11390,101748],[11493,11291,101789,11393],[11494,11292,11392,11394],[11495,11293,11393,11395],[11496,11294,11394,11396],[11497,11295,11395,11397],[11498,11296,11396,11398],[11499,11297,11397,11399],[11500,11298,11398,11400],[11501,11299,11399,11401],[11502,11300,11400,11402],[11503,11301,11401,11403],[11504,11302,11402,11404],[11505,11303,11403,11405],[11506,11304,11404,11406],[11507,11305,11405,11407],[11508,11306,11406,11408],[11509,11307,11407,11409],[11510,11308,11408,11410],[11511,11309,11409,102166],[11512,11310,11410,11412],[11513,11311,11411,-1],[11514,11312,-1,11414],[11515,11313,11413,11415],[11516,11314,11414,11416],[11517,11315,11415,11417],[11518,11316,11416,11418],[11519,11317,11417,11419],[11520,11318,11418,11420],[11521,11319,11419,11421],[11522,11320,11420,11422],[11523,11321,11421,101941],[11524,11322,11422,11424],[-1,11323,102034,11425],[11526,11324,11424,11426],[11527,11325,11425,11427],[11528,11326,11426,11428],[11529,11327,11427,11429],[11530,11328,11428,11430],[11531,11329,11429,11431],[11532,11330,11430,11432],[11533,11331,11431,11433],[11534,11332,11432,11434],[11535,11333,11433,11435],[11536,11334,11434,11436],[11537,11335,11435,101575],[11538,11336,11436,11438],[11539,11337,101616,11439],[11540,11338,11438,11440],[11541,11339,11439,11441],[11542,11340,11440,11442],[11543,11341,11441,11443],[11544,11342,11442,11444],[11545,11343,11443,11445],[11546,11344,11444,11446],[11547,11345,11445,11447],[11548,11346,11446,11448],[11549,11347,11447,101653],[11550,11348,11448,11450],[11551,11349,101692,11451],[11552,11350,11450,11452],[11553,11351,11451,11453],[11554,11352,11452,11454],[11555,11353,11453,11455],[11556,11354,11454,100423],[11557,11355,11455,11457],[11558,11356,11456,11458],[11559,11357,100460,11459],[11560,11358,11458,100551],[11561,11359,11459,11461],[11562,11360,100642,11462],[11563,11361,11461,11463],[11564,11362,11462,11464],[11565,11363,11463,11465],[11566,11364,11464,11466],[11567,11365,11465,11467],[11568,11366,11466,100708],[11569,11367,100675,11469],[11570,11368,11468,11470],[11571,11369,11469,11471],[11572,11370,11470,11472],[11573,11371,11471,11473],[11574,11372,11472,11474],[11575,11373,11473,11475],[11576,11374,11474,100878],[11577,11375,100801,11477],[11578,11376,11476,11478],[11579,11377,11477,11479],[11580,11378,11478,11480],[11581,11379,11479,11481],[11582,11380,11480,11482],[11583,11381,11481,11483],[11584,11382,11482,11484],[11585,11383,11483,11485],[11586,11384,11484,11486],[11587,11385,11485,11487],[11588,11386,11486,11488],[11589,11387,11487,11489],[11590,11388,11488,11490],[11591,11389,11489,11491],[11592,11390,11490,11492],[-1,11391,11491,101749],[11594,11392,101790,11494],[11595,11393,11493,11495],[11596,11394,11494,11496],[11597,11395,11495,11497],[11598,11396,11496,11498],[11599,11397,11497,11499],[11600,11398,11498,11500],[11601,11399,11499,11501],[11602,11400,11500,11502],[11603,11401,11501,11503],[11604,11402,11502,11504],[11605,11403,11503,11505],[11606,11404,11504,11506],[11607,11405,11505,11507],[11608,11406,11506,11508],[11609,11407,11507,11509],[11610,11408,11508,11510],[11611,11409,11509,11511],[-1,11410,11510,102167],[11613,11411,11511,11513],[11614,11412,11512,-1],[11615,11413,-1,11515],[11616,11414,11514,11516],[11617,11415,11515,11517],[11618,11416,11516,11518],[11619,11417,11517,11519],[11620,11418,11518,11520],[11621,11419,11519,11521],[11622,11420,11520,11522],[11623,11421,11521,11523],[11624,11422,11522,101942],[11625,11423,11523,11525],[11626,11424,11524,11526],[11627,11425,102035,11527],[11628,11426,11526,11528],[11629,11427,11527,11529],[11630,11428,11528,11530],[11631,11429,11529,11531],[11632,11430,11530,11532],[11633,11431,11531,11533],[11634,11432,11532,11534],[11635,11433,11533,11535],[11636,11434,11534,11536],[11637,11435,11535,11537],[11638,11436,11536,101576],[11639,11437,11537,11539],[11640,11438,101617,11540],[11641,11439,11539,11541],[11642,11440,11540,11542],[11643,11441,11541,11543],[11644,11442,11542,11544],[11645,11443,11543,11545],[11646,11444,11544,11546],[11647,11445,11545,11547],[11648,11446,11546,11548],[11649,11447,11547,11549],[11650,11448,11548,101654],[11651,11449,11549,11551],[11652,11450,101693,11552],[11653,11451,11551,11553],[11654,11452,11552,11554],[11655,11453,11553,11555],[11656,11454,11554,11556],[11657,11455,11555,100424],[11658,11456,11556,11558],[11659,11457,11557,11559],[11660,11458,100461,11560],[11661,11459,11559,100552],[11662,11460,11560,11562],[11663,11461,100643,11563],[11664,11462,11562,11564],[11665,11463,11563,11565],[11666,11464,11564,11566],[11667,11465,11565,11567],[11668,11466,11566,11568],[11669,11467,11567,100709],[11670,11468,100676,11570],[11671,11469,11569,11571],[11672,11470,11570,11572],[11673,11471,11571,11573],[11674,11472,11572,11574],[11675,11473,11573,11575],[11676,11474,11574,11576],[11677,11475,11575,100879],[11678,11476,100802,11578],[11679,11477,11577,11579],[11680,11478,11578,11580],[11681,11479,11579,11581],[11682,11480,11580,11582],[11683,11481,11581,11583],[11684,11482,11582,11584],[11685,11483,11583,11585],[11686,11484,11584,11586],[11687,11485,11585,11587],[11688,11486,11586,11588],[11689,11487,11587,11589],[11690,11488,11588,11590],[11691,11489,11589,11591],[11692,11490,11590,11592],[11693,11491,11591,101750],[11694,11492,11592,11594],[11695,11493,101791,11595],[11696,11494,11594,11596],[11697,11495,11595,11597],[11698,11496,11596,11598],[11699,11497,11597,11599],[11700,11498,11598,11600],[11701,11499,11599,11601],[11702,11500,11600,11602],[11703,11501,11601,11603],[11704,11502,11602,11604],[11705,11503,11603,11605],[11706,11504,11604,11606],[11707,11505,11605,11607],[11708,11506,11606,11608],[11709,11507,11607,11609],[11710,11508,11608,11610],[11711,11509,11609,11611],[11712,11510,11610,102168],[11713,11511,11611,11613],[11714,11512,11612,11614],[11715,11513,11613,-1],[11716,11514,-1,11616],[11717,11515,11615,11617],[11718,11516,11616,11618],[11719,11517,11617,11619],[11720,11518,11618,11620],[11721,11519,11619,11621],[11722,11520,11620,11622],[11723,11521,11621,11623],[11724,11522,11622,11624],[11725,11523,11623,101943],[11726,11524,11624,11626],[11727,11525,11625,11627],[11728,11526,102036,11628],[11729,11527,11627,11629],[11730,11528,11628,11630],[11731,11529,11629,11631],[11732,11530,11630,11632],[11733,11531,11631,11633],[11734,11532,11632,11634],[11735,11533,11633,11635],[11736,11534,11634,11636],[11737,11535,11635,11637],[11738,11536,11636,11638],[11739,11537,11637,11639],[11740,-1,11638,101577],[11741,11539,101618,11641],[11742,11540,11640,11642],[11743,11541,11641,11643],[11744,11542,11642,11644],[11745,11543,11643,11645],[11746,11544,11644,11646],[11747,11545,11645,11647],[11748,11546,11646,11648],[11749,11547,11647,11649],[11750,11548,11648,11650],[11751,11549,11649,101655],[11752,11550,11650,11652],[11753,11551,101694,11653],[11754,11552,11652,11654],[11755,11553,11653,11655],[11756,11554,11654,11656],[11757,11555,11655,11657],[11758,11556,11656,100425],[11759,11557,11657,11659],[11760,11558,11658,11660],[11761,11559,100462,11661],[11762,11560,11660,100553],[11763,11561,11661,11663],[11764,11562,100644,11664],[11765,11563,11663,11665],[11766,11564,11664,11666],[11767,11565,11665,11667],[11768,11566,11666,11668],[11769,11567,11667,11669],[11770,11568,11668,100710],[11771,11569,100677,11671],[11772,11570,11670,11672],[11773,11571,11671,11673],[11774,11572,11672,11674],[11775,11573,11673,11675],[11776,11574,11674,11676],[11777,11575,11675,11677],[11778,11576,11676,100880],[11779,11577,100803,11679],[11780,11578,11678,11680],[11781,11579,11679,11681],[11782,11580,11680,11682],[11783,11581,11681,11683],[11784,11582,11682,11684],[11785,11583,11683,11685],[11786,11584,11684,11686],[11787,11585,11685,11687],[11788,11586,11686,11688],[11789,11587,11687,11689],[11790,11588,11688,11690],[11791,11589,11689,11691],[11792,11590,11690,11692],[11793,11591,11691,11693],[11794,11592,11692,101751],[11795,11593,11693,11695],[11796,11594,101792,11696],[11797,11595,11695,11697],[11798,11596,11696,11698],[11799,11597,11697,11699],[11800,11598,11698,11700],[11801,11599,11699,11701],[11802,11600,11700,11702],[11803,11601,11701,11703],[11804,11602,11702,11704],[11805,11603,11703,11705],[11806,11604,11704,11706],[11807,11605,11705,11707],[11808,11606,11706,11708],[11809,11607,11707,11709],[11810,11608,11708,11710],[11811,11609,11709,11711],[11812,11610,11710,11712],[11813,11611,11711,102169],[11814,11612,11712,11714],[11815,11613,11713,11715],[11816,11614,11714,-1],[11817,11615,-1,11717],[11818,11616,11716,11718],[11819,11617,11717,11719],[11820,11618,11718,11720],[11821,11619,11719,11721],[11822,11620,11720,11722],[11823,11621,11721,11723],[11824,11622,11722,11724],[11825,11623,11723,11725],[11826,11624,11724,11726],[11827,-1,11725,101944],[11828,11626,11726,11728],[11829,11627,102037,11729],[11830,11628,11728,11730],[11831,11629,11729,11731],[11832,11630,11730,11732],[11833,11631,11731,11733],[11834,11632,11732,11734],[11835,11633,11733,11735],[11836,11634,11734,11736],[11837,11635,11735,11737],[11838,11636,11736,11738],[11839,11637,11737,11739],[11840,11638,11738,11740],[11841,11639,11739,101578],[11842,11640,101619,11742],[11843,11641,11741,11743],[11844,11642,11742,11744],[11845,11643,11743,11745],[11846,11644,11744,11746],[11847,11645,11745,11747],[11848,11646,11746,11748],[11849,11647,11747,11749],[11850,11648,11748,11750],[11851,11649,11749,11751],[11852,11650,11750,101656],[11853,11651,11751,11753],[11854,11652,101695,11754],[11855,11653,11753,11755],[11856,11654,11754,11756],[11857,11655,11755,11757],[11858,11656,11756,11758],[11859,11657,11757,100426],[11860,11658,11758,11760],[11861,11659,11759,11761],[11862,11660,100463,11762],[11863,11661,11761,100554],[11864,11662,11762,11764],[11865,11663,100645,11765],[11866,11664,11764,11766],[11867,11665,11765,11767],[11868,11666,11766,11768],[11869,11667,11767,11769],[11870,11668,11768,11770],[11871,11669,11769,100711],[11872,11670,100678,11772],[11873,11671,11771,11773],[11874,11672,11772,11774],[11875,11673,11773,11775],[11876,11674,11774,11776],[11877,11675,11775,11777],[11878,11676,11776,11778],[11879,11677,11777,100881],[11880,11678,100804,11780],[11881,11679,11779,11781],[11882,11680,11780,11782],[11883,11681,11781,11783],[11884,11682,11782,11784],[11885,11683,11783,11785],[11886,11684,11784,11786],[11887,11685,11785,11787],[11888,11686,11786,11788],[11889,11687,11787,11789],[11890,11688,11788,11790],[11891,11689,11789,11791],[11892,11690,11790,11792],[11893,11691,11791,11793],[11894,11692,11792,11794],[11895,11693,11793,101752],[11896,11694,11794,11796],[11897,11695,101793,11797],[11898,11696,11796,11798],[11899,11697,11797,11799],[11900,11698,11798,11800],[11901,11699,11799,11801],[11902,11700,11800,11802],[11903,11701,11801,11803],[11904,11702,11802,11804],[11905,11703,11803,11805],[11906,11704,11804,11806],[11907,11705,11805,11807],[11908,11706,11806,11808],[11909,11707,11807,11809],[11910,11708,11808,11810],[11911,11709,11809,11811],[11912,11710,11810,11812],[11913,11711,11811,11813],[11914,11712,11812,102170],[11915,11713,11813,11815],[11916,11714,11814,11816],[11917,11715,11815,-1],[11918,11716,-1,11818],[11919,11717,11817,11819],[11920,11718,11818,11820],[11921,11719,11819,11821],[11922,11720,11820,11822],[11923,11721,11821,11823],[11924,11722,11822,11824],[11925,11723,11823,11825],[11926,11724,11824,11826],[11927,11725,11825,11827],[11928,11726,11826,101945],[11929,11727,11827,11829],[11930,11728,102038,11830],[11931,11729,11829,11831],[11932,11730,11830,11832],[11933,11731,11831,11833],[11934,11732,11832,11834],[11935,11733,11833,11835],[11936,11734,11834,11836],[11937,11735,11835,11837],[11938,11736,11836,11838],[11939,11737,11837,11839],[11940,11738,11838,11840],[11941,11739,11839,11841],[11942,11740,11840,101579],[11943,11741,101620,11843],[11944,11742,11842,11844],[11945,11743,11843,11845],[11946,11744,11844,11846],[11947,11745,11845,11847],[11948,11746,11846,11848],[11949,11747,11847,11849],[11950,11748,11848,11850],[11951,11749,11849,11851],[11952,11750,11850,11852],[11953,11751,11851,101657],[11954,11752,11852,11854],[11955,11753,101696,11855],[11956,11754,11854,11856],[11957,11755,11855,11857],[11958,11756,11856,11858],[11959,11757,11857,11859],[-1,11758,11858,100427],[11961,11759,11859,11861],[11962,11760,11860,11862],[11963,11761,100464,11863],[11964,11762,11862,100555],[11965,11763,11863,11865],[11966,11764,100646,11866],[11967,11765,11865,11867],[11968,11766,11866,11868],[11969,11767,11867,11869],[11970,11768,11868,11870],[11971,11769,11869,11871],[11972,11770,11870,100712],[11973,11771,100679,11873],[11974,11772,11872,11874],[11975,11773,11873,11875],[11976,11774,11874,11876],[11977,11775,11875,11877],[11978,11776,11876,11878],[11979,11777,11877,11879],[11980,11778,11878,11880],[11981,11779,11879,11881],[11982,11780,11880,11882],[11983,11781,11881,11883],[11984,11782,11882,11884],[11985,11783,11883,11885],[11986,11784,11884,11886],[11987,11785,11885,11887],[11988,11786,11886,11888],[11989,11787,11887,11889],[11990,11788,11888,11890],[11991,11789,11889,11891],[11992,11790,11890,11892],[11993,11791,11891,11893],[11994,11792,11892,11894],[11995,11793,11893,11895],[11996,11794,11894,101753],[11997,11795,11895,11897],[11998,11796,101794,11898],[11999,11797,11897,11899],[12000,11798,11898,11900],[12001,11799,11899,11901],[12002,11800,11900,11902],[12003,11801,11901,11903],[12004,11802,11902,11904],[12005,11803,11903,11905],[12006,11804,11904,11906],[12007,11805,11905,11907],[12008,11806,11906,11908],[12009,11807,11907,11909],[12010,11808,11908,11910],[12011,11809,11909,11911],[12012,11810,11910,11912],[12013,11811,11911,11913],[12014,11812,11912,11914],[12015,11813,11913,102171],[12016,11814,11914,11916],[12017,11815,11915,11917],[12018,11816,11916,-1],[12019,11817,-1,11919],[12020,11818,11918,11920],[12021,11819,11919,11921],[12022,11820,11920,11922],[12023,11821,11921,11923],[12024,11822,11922,11924],[12025,11823,11923,11925],[12026,11824,11924,11926],[12027,11825,11925,11927],[12028,11826,11926,11928],[12029,11827,11927,101946],[12030,11828,11928,11930],[-1,11829,102039,11931],[12032,11830,11930,11932],[12033,11831,11931,11933],[12034,11832,11932,11934],[12035,11833,11933,11935],[12036,11834,11934,11936],[12037,11835,11935,11937],[12038,11836,11936,11938],[12039,11837,11937,11939],[12040,11838,11938,11940],[12041,11839,11939,11941],[12042,11840,11940,11942],[12043,11841,11941,101580],[12044,11842,101621,11944],[12045,11843,11943,11945],[12046,11844,11944,11946],[12047,11845,11945,11947],[12048,11846,11946,11948],[12049,11847,11947,11949],[12050,11848,11948,11950],[12051,11849,11949,11951],[12052,11850,11950,11952],[12053,11851,11951,11953],[12054,11852,11952,101658],[12055,11853,11953,11955],[12056,11854,101697,11956],[12057,11855,11955,11957],[12058,11856,11956,11958],[12059,11857,11957,11959],[12060,11858,11958,100428],[12061,11859,11959,11961],[12062,11860,11960,11962],[12063,-1,100465,11963],[12064,11862,11962,11964],[12065,11863,11963,11965],[12066,-1,11964,100556],[12067,11865,100647,11967],[12068,11866,11966,11968],[12069,11867,11967,11969],[12070,11868,11968,11970],[12071,11869,11969,11971],[12072,11870,11970,11972],[12073,11871,11971,100713],[12074,11872,100680,11974],[12075,11873,11973,11975],[12076,11874,11974,11976],[12077,11875,11975,11977],[12078,11876,11976,11978],[12079,11877,11977,11979],[12080,11878,11978,11980],[12081,11879,11979,11981],[12082,11880,11980,11982],[12083,11881,11981,11983],[12084,11882,11982,11984],[12085,11883,11983,11985],[12086,11884,11984,11986],[12087,11885,11985,11987],[12088,11886,11986,11988],[12089,11887,11987,11989],[12090,11888,11988,11990],[12091,11889,11989,11991],[12092,11890,11990,11992],[12093,11891,11991,11993],[12094,11892,11992,11994],[12095,11893,11993,11995],[12096,11894,11994,11996],[12097,11895,11995,101754],[12098,-1,101795,11998],[12099,11897,11997,11999],[12100,11898,11998,12000],[12101,11899,11999,12001],[12102,11900,12000,12002],[12103,11901,12001,12003],[12104,11902,12002,12004],[12105,11903,12003,12005],[12106,11904,12004,12006],[12107,11905,12005,12007],[12108,11906,12006,12008],[12109,11907,12007,12009],[12110,11908,12008,12010],[12111,11909,12009,12011],[12112,11910,12010,12012],[12113,11911,12011,12013],[12114,11912,12012,12014],[12115,11913,12013,12015],[12116,11914,12014,102172],[12117,11915,12015,12017],[12118,11916,12016,12018],[12119,11917,12017,-1],[12120,11918,-1,12020],[12121,11919,12019,12021],[12122,11920,12020,12022],[12123,11921,12021,12023],[12124,11922,12022,12024],[12125,11923,12023,12025],[12126,11924,12024,12026],[12127,11925,12025,12027],[12128,11926,12026,12028],[12129,11927,12027,12029],[12130,11928,12028,101947],[12131,11929,12029,12031],[12132,11930,12030,12032],[12133,11931,102040,12033],[12134,11932,12032,12034],[12135,11933,12033,12035],[12136,11934,12034,12036],[12137,11935,12035,12037],[12138,11936,12036,12038],[12139,11937,12037,12039],[12140,11938,12038,12040],[12141,11939,12039,12041],[12142,11940,12040,12042],[12143,11941,12041,12043],[12144,11942,12042,101581],[12145,11943,101622,12045],[12146,11944,12044,12046],[12147,11945,12045,12047],[12148,11946,12046,12048],[12149,11947,12047,12049],[12150,11948,12048,12050],[12151,11949,12049,12051],[12152,11950,12050,12052],[12153,11951,12051,12053],[12154,11952,12052,12054],[12155,11953,12053,101659],[12156,11954,12054,12056],[12157,11955,101698,12057],[12158,11956,12056,12058],[12159,11957,12057,12059],[12160,11958,12058,12060],[12161,11959,12059,100429],[12162,11960,12060,12062],[12163,11961,12061,12063],[12164,11962,100466,12064],[12165,11963,12063,12065],[12166,11964,12064,12066],[12167,11965,12065,100557],[12168,11966,100648,12068],[12169,11967,12067,12069],[12170,11968,12068,12070],[12171,11969,12069,12071],[12172,11970,12070,12072],[12173,11971,12071,12073],[12174,11972,12072,100714],[12175,11973,100681,12075],[12176,11974,12074,12076],[12177,11975,12075,12077],[12178,11976,12076,12078],[12179,11977,12077,12079],[12180,11978,12078,12080],[12181,11979,12079,12081],[12182,11980,12080,12082],[12183,11981,12081,12083],[12184,11982,12082,12084],[12185,11983,12083,12085],[12186,11984,12084,12086],[12187,11985,12085,12087],[12188,11986,12086,12088],[12189,11987,12087,12089],[12190,11988,12088,12090],[12191,11989,12089,12091],[12192,11990,12090,12092],[12193,11991,12091,12093],[12194,11992,12092,12094],[12195,11993,12093,12095],[12196,11994,12094,12096],[12197,11995,12095,12097],[12198,11996,12096,101755],[12199,11997,101796,12099],[12200,11998,12098,12100],[12201,11999,12099,12101],[12202,12000,12100,12102],[12203,12001,12101,12103],[12204,12002,12102,12104],[12205,12003,12103,12105],[12206,12004,12104,12106],[12207,12005,12105,12107],[12208,12006,12106,12108],[12209,12007,12107,12109],[12210,12008,12108,12110],[12211,12009,12109,12111],[12212,12010,12110,12112],[12213,12011,12111,12113],[12214,12012,12112,12114],[12215,12013,12113,12115],[12216,12014,12114,12116],[12217,12015,12115,102173],[12218,12016,12116,12118],[12219,12017,12117,12119],[12220,12018,12118,-1],[12221,12019,-1,12121],[12222,12020,12120,12122],[12223,12021,12121,12123],[12224,12022,12122,12124],[12225,12023,12123,12125],[12226,12024,12124,12126],[12227,12025,12125,12127],[12228,12026,12126,12128],[12229,12027,12127,12129],[12230,12028,12128,12130],[12231,12029,12129,101948],[12232,12030,12130,12132],[12233,12031,12131,12133],[12234,12032,102041,12134],[12235,12033,12133,12135],[12236,12034,12134,12136],[12237,12035,12135,12137],[12238,12036,12136,12138],[12239,12037,12137,12139],[12240,12038,12138,12140],[12241,12039,12139,12141],[12242,12040,12140,12142],[12243,12041,12141,12143],[12244,12042,12142,12144],[12245,12043,12143,101582],[-1,12044,101623,12146],[12247,12045,12145,12147],[12248,12046,12146,12148],[12249,12047,12147,12149],[12250,12048,12148,12150],[12251,12049,12149,12151],[12252,12050,12150,12152],[12253,12051,12151,12153],[12254,12052,12152,12154],[12255,12053,12153,12155],[12256,12054,12154,101660],[12257,12055,12155,12157],[12258,12056,101699,12158],[12259,12057,12157,12159],[12260,12058,12158,12160],[12261,12059,12159,12161],[12262,12060,12160,100430],[12263,12061,12161,12163],[12264,12062,12162,12164],[12265,12063,100467,12165],[12266,12064,12164,12166],[12267,12065,12165,12167],[12268,12066,12166,100558],[12269,12067,100649,12169],[12270,12068,12168,12170],[12271,12069,12169,12171],[12272,12070,12170,12172],[12273,12071,12171,12173],[12274,12072,12172,12174],[12275,12073,12173,100715],[12276,12074,100682,12176],[12277,12075,12175,12177],[12278,12076,12176,12178],[12279,12077,12177,12179],[12280,12078,12178,12180],[12281,12079,12179,12181],[12282,12080,12180,12182],[12283,12081,12181,12183],[12284,12082,12182,12184],[12285,12083,12183,12185],[12286,12084,12184,12186],[12287,12085,12185,12187],[12288,12086,12186,12188],[12289,12087,12187,12189],[12290,12088,12188,12190],[12291,12089,12189,12191],[12292,12090,12190,12192],[12293,12091,12191,12193],[12294,12092,12192,12194],[12295,12093,12193,12195],[12296,12094,12194,12196],[12297,12095,12195,12197],[12298,12096,12196,12198],[12299,12097,12197,101756],[12300,12098,101797,12200],[12301,12099,12199,12201],[12302,12100,12200,12202],[12303,12101,12201,12203],[12304,12102,12202,12204],[12305,12103,12203,12205],[12306,12104,12204,12206],[12307,12105,12205,12207],[12308,12106,12206,12208],[12309,12107,12207,12209],[12310,12108,12208,12210],[12311,12109,12209,12211],[12312,12110,12210,12212],[12313,12111,12211,12213],[12314,12112,12212,12214],[12315,12113,12213,12215],[12316,12114,12214,12216],[12317,12115,12215,12217],[12318,12116,12216,102174],[12319,12117,12217,12219],[12320,12118,12218,12220],[12321,12119,12219,-1],[12322,12120,-1,12222],[12323,12121,12221,12223],[12324,12122,12222,12224],[12325,12123,12223,12225],[12326,12124,12224,12226],[12327,12125,12225,12227],[12328,12126,12226,12228],[12329,12127,12227,12229],[12330,12128,12228,12230],[12331,12129,12229,12231],[12332,12130,12230,101949],[12333,12131,12231,12233],[12334,12132,12232,12234],[12335,12133,102042,12235],[12336,12134,12234,12236],[12337,12135,12235,12237],[12338,12136,12236,12238],[12339,12137,12237,12239],[12340,12138,12238,12240],[12341,12139,12239,12241],[12342,12140,12240,12242],[12343,12141,12241,12243],[12344,12142,12242,12244],[12345,12143,12243,12245],[12346,12144,12244,101583],[12347,12145,12245,12247],[12348,12146,101624,12248],[12349,12147,12247,12249],[12350,12148,12248,12250],[12351,12149,12249,12251],[12352,12150,12250,12252],[12353,12151,12251,12253],[12354,12152,12252,12254],[12355,12153,12253,12255],[12356,12154,12254,12256],[12357,12155,12255,101661],[12358,12156,12256,12258],[12359,12157,101700,12259],[12360,12158,12258,12260],[12361,12159,12259,12261],[12362,12160,12260,12262],[12363,12161,12261,100431],[12364,12162,12262,12264],[12365,12163,12263,12265],[12366,12164,100468,12266],[12367,12165,12265,12267],[12368,12166,12266,12268],[12369,12167,12267,100559],[12370,12168,100650,12270],[12371,12169,12269,12271],[12372,12170,12270,12272],[12373,12171,12271,12273],[12374,12172,12272,12274],[12375,12173,12273,12275],[12376,12174,12274,100716],[12377,12175,100683,12277],[12378,12176,12276,12278],[12379,12177,12277,12279],[12380,12178,12278,12280],[12381,12179,12279,12281],[12382,12180,12280,12282],[12383,12181,12281,12283],[12384,12182,12282,12284],[12385,12183,12283,12285],[12386,12184,12284,12286],[12387,12185,12285,12287],[12388,12186,12286,12288],[12389,12187,12287,12289],[12390,12188,12288,12290],[12391,12189,12289,12291],[12392,12190,12290,12292],[12393,12191,12291,12293],[12394,12192,12292,12294],[12395,12193,12293,12295],[12396,12194,12294,12296],[12397,12195,12295,12297],[12398,12196,12296,12298],[12399,12197,12297,12299],[12400,12198,12298,101757],[12401,12199,101798,12301],[12402,12200,12300,12302],[12403,12201,12301,12303],[12404,12202,12302,12304],[12405,12203,12303,12305],[12406,12204,12304,12306],[12407,12205,12305,12307],[12408,12206,12306,12308],[12409,12207,12307,12309],[12410,12208,12308,12310],[12411,12209,12309,12311],[12412,12210,12310,12312],[12413,12211,12311,12313],[12414,12212,12312,12314],[12415,12213,12313,12315],[12416,12214,12314,12316],[12417,12215,12315,12317],[12418,12216,12316,12318],[12419,12217,12317,102175],[12420,12218,12318,12320],[12421,12219,12319,12321],[12422,12220,12320,-1],[12423,12221,-1,12323],[12424,12222,12322,12324],[12425,12223,12323,12325],[12426,12224,12324,12326],[12427,12225,12325,12327],[12428,12226,12326,12328],[12429,12227,12327,12329],[12430,12228,12328,12330],[12431,12229,12329,12331],[12432,12230,12330,12332],[12433,12231,12331,12333],[12434,-1,12332,101950],[12435,12233,12333,12335],[12436,12234,102043,12336],[12437,12235,12335,12337],[12438,12236,12336,12338],[12439,12237,12337,12339],[12440,12238,12338,12340],[12441,12239,12339,12341],[12442,12240,12340,12342],[12443,12241,12341,12343],[12444,12242,12342,12344],[12445,12243,12343,12345],[12446,12244,12344,12346],[12447,12245,12345,101584],[12448,12246,12346,12348],[12449,12247,101625,12349],[12450,12248,12348,12350],[12451,12249,12349,12351],[12452,12250,12350,12352],[12453,12251,12351,12353],[12454,12252,12352,12354],[12455,12253,12353,12355],[12456,12254,12354,12356],[12457,12255,12355,12357],[12458,12256,12356,101662],[12459,12257,12357,12359],[12460,12258,101701,12360],[12461,12259,12359,12361],[12462,12260,12360,12362],[12463,12261,12361,12363],[-1,12262,12362,100432],[12465,12263,12363,12365],[12466,12264,12364,12366],[12467,12265,100469,12367],[12468,12266,12366,12368],[12469,12267,12367,12369],[12470,12268,12368,100560],[12471,12269,100651,12371],[12472,12270,12370,12372],[12473,12271,12371,12373],[12474,12272,12372,12374],[12475,12273,12373,12375],[12476,12274,12374,12376],[12477,12275,12375,100717],[12478,12276,100684,12378],[12479,12277,12377,12379],[12480,12278,12378,12380],[12481,12279,12379,12381],[12482,12280,12380,12382],[12483,12281,12381,12383],[12484,12282,12382,12384],[12485,12283,12383,12385],[12486,12284,12384,12386],[12487,12285,12385,12387],[12488,12286,12386,12388],[12489,12287,12387,12389],[12490,12288,12388,12390],[12491,12289,12389,12391],[12492,12290,12390,12392],[12493,12291,12391,12393],[12494,12292,12392,12394],[12495,12293,12393,12395],[12496,12294,12394,12396],[12497,12295,12395,12397],[12498,12296,12396,12398],[12499,12297,12397,12399],[12500,12298,12398,12400],[12501,12299,12399,101758],[12502,12300,101799,12402],[12503,12301,12401,12403],[12504,12302,12402,12404],[12505,12303,12403,12405],[12506,12304,12404,12406],[12507,12305,12405,12407],[12508,12306,12406,12408],[12509,12307,12407,12409],[12510,12308,12408,12410],[12511,12309,12409,12411],[12512,12310,12410,12412],[12513,12311,12411,12413],[12514,12312,12412,12414],[12515,12313,12413,12415],[12516,12314,12414,12416],[12517,12315,12415,12417],[12518,12316,12416,12418],[12519,12317,12417,12419],[12520,12318,12418,102176],[12521,12319,12419,12421],[12522,12320,12420,12422],[12523,12321,12421,-1],[12524,12322,-1,12424],[12525,12323,12423,12425],[12526,12324,12424,12426],[12527,12325,12425,12427],[12528,12326,12426,12428],[12529,12327,12427,12429],[12530,12328,12428,12430],[12531,12329,12429,12431],[12532,12330,12430,12432],[12533,12331,12431,12433],[12534,12332,12432,12434],[12535,12333,12433,101951],[12536,12334,12434,12436],[12537,12335,102044,12437],[12538,12336,12436,12438],[12539,12337,12437,12439],[12540,12338,12438,12440],[12541,12339,12439,12441],[12542,12340,12440,12442],[12543,12341,12441,12443],[12544,12342,12442,12444],[12545,12343,12443,12445],[12546,12344,12444,12446],[12547,12345,12445,12447],[12548,12346,12446,101585],[12549,12347,12447,12449],[12550,12348,101626,12450],[12551,12349,12449,12451],[12552,12350,12450,12452],[12553,12351,12451,12453],[12554,12352,12452,12454],[12555,12353,12453,12455],[12556,12354,12454,12456],[12557,12355,12455,12457],[12558,12356,12456,12458],[12559,12357,12457,12459],[12560,-1,12458,101663],[12561,12359,101702,12461],[12562,12360,12460,12462],[12563,12361,12461,12463],[12564,12362,12462,100433],[12565,12363,12463,12465],[12566,12364,12464,12466],[12567,12365,12465,12467],[12568,12366,100470,12468],[12569,12367,12467,12469],[12570,12368,12468,12470],[12571,12369,12469,100561],[12572,12370,100652,12472],[12573,12371,12471,12473],[12574,12372,12472,12474],[12575,12373,12473,12475],[12576,12374,12474,12476],[12577,12375,12475,12477],[12578,12376,12476,100718],[12579,12377,100685,12479],[12580,12378,12478,12480],[12581,12379,12479,12481],[12582,12380,12480,12482],[12583,12381,12481,12483],[12584,12382,12482,12484],[12585,12383,12483,12485],[12586,12384,12484,12486],[12587,12385,12485,12487],[12588,12386,12486,12488],[12589,12387,12487,12489],[12590,12388,12488,12490],[12591,12389,12489,12491],[12592,12390,12490,12492],[12593,12391,12491,12493],[12594,12392,12492,12494],[12595,12393,12493,12495],[12596,12394,12494,12496],[12597,12395,12495,12497],[12598,12396,12496,12498],[12599,12397,12497,12499],[12600,12398,12498,12500],[12601,12399,12499,12501],[-1,12400,12500,101759],[12603,12401,101800,12503],[12604,12402,12502,12504],[12605,12403,12503,12505],[12606,12404,12504,12506],[12607,12405,12505,12507],[12608,12406,12506,12508],[12609,12407,12507,12509],[12610,12408,12508,12510],[12611,12409,12509,12511],[12612,12410,12510,12512],[12613,12411,12511,12513],[12614,12412,12512,12514],[12615,12413,12513,12515],[12616,12414,12514,12516],[12617,12415,12515,12517],[12618,12416,12516,12518],[12619,12417,12517,12519],[12620,12418,12518,12520],[-1,12419,12519,102177],[12622,12420,12520,12522],[12623,12421,12521,12523],[12624,12422,12522,-1],[12625,12423,-1,12525],[12626,12424,12524,12526],[12627,12425,12525,12527],[12628,12426,12526,12528],[12629,12427,12527,12529],[12630,12428,12528,12530],[12631,12429,12529,12531],[12632,12430,12530,12532],[12633,12431,12531,12533],[12634,12432,12532,12534],[12635,12433,12533,12535],[12636,12434,12534,101952],[12637,12435,12535,12537],[-1,12436,102045,12538],[12639,12437,12537,12539],[12640,12438,12538,12540],[12641,12439,12539,12541],[12642,12440,12540,12542],[12643,12441,12541,12543],[12644,12442,12542,12544],[12645,12443,12543,12545],[12646,12444,12544,12546],[12647,12445,12545,12547],[12648,12446,12546,12548],[12649,12447,12547,101586],[12650,12448,12548,12550],[12651,12449,101627,12551],[12652,12450,12550,12552],[12653,12451,12551,12553],[12654,12452,12552,12554],[12655,12453,12553,12555],[12656,12454,12554,12556],[12657,12455,12555,12557],[12658,12456,12556,12558],[12659,12457,12557,12559],[12660,12458,12558,12560],[12661,12459,12559,101664],[12662,12460,101703,12562],[12663,12461,12561,12563],[12664,12462,12562,12564],[12665,12463,12563,100434],[12666,12464,12564,12566],[12667,12465,12565,12567],[12668,12466,12566,12568],[12669,12467,100471,12569],[12670,12468,12568,12570],[12671,12469,12569,12571],[12672,12470,12570,100562],[12673,12471,100653,12573],[12674,12472,12572,12574],[12675,12473,12573,12575],[12676,12474,12574,12576],[12677,12475,12575,12577],[12678,12476,12576,12578],[12679,12477,12577,100719],[12680,12478,100686,12580],[12681,12479,12579,12581],[12682,12480,12580,12582],[12683,12481,12581,12583],[12684,12482,12582,12584],[12685,12483,12583,12585],[12686,12484,12584,12586],[12687,12485,12585,12587],[12688,12486,12586,12588],[12689,12487,12587,12589],[12690,12488,12588,12590],[12691,12489,12589,12591],[12692,12490,12590,12592],[12693,12491,12591,12593],[12694,12492,12592,12594],[12695,12493,12593,12595],[12696,12494,12594,12596],[12697,12495,12595,12597],[12698,12496,12596,12598],[12699,12497,12597,12599],[12700,12498,12598,12600],[12701,12499,12599,12601],[12702,12500,12600,101760],[12703,12501,12601,12603],[12704,12502,101801,12604],[12705,12503,12603,12605],[12706,12504,12604,12606],[12707,12505,12605,12607],[12708,12506,12606,12608],[12709,12507,12607,12609],[12710,12508,12608,12610],[12711,12509,12609,12611],[12712,12510,12610,12612],[12713,12511,12611,12613],[12714,12512,12612,12614],[12715,12513,12613,101710],[12716,12514,101719,12616],[12717,12515,12615,12617],[12718,12516,12616,12618],[12719,12517,12617,12619],[12720,12518,12618,12620],[12721,12519,12619,102178],[12722,12520,12620,12622],[12723,12521,12621,12623],[12724,12522,12622,12624],[12725,12523,12623,-1],[12726,12524,-1,12626],[12727,12525,12625,12627],[12728,12526,12626,12628],[12729,12527,12627,12629],[12730,12528,12628,12630],[12731,12529,12629,12631],[12732,12530,12630,12632],[12733,12531,12631,12633],[12734,12532,12632,12634],[12735,12533,12633,12635],[12736,12534,12634,12636],[12737,12535,12635,101953],[12738,12536,12636,12638],[12739,12537,12637,12639],[12740,12538,102046,12640],[12741,12539,12639,12641],[12742,12540,12640,12642],[12743,12541,12641,12643],[12744,12542,12642,12644],[12745,12543,12643,12645],[12746,12544,12644,12646],[12747,12545,12645,12647],[12748,12546,12646,12648],[12749,12547,12647,12649],[12750,12548,12648,101587],[12751,12549,12649,12651],[12752,12550,101628,12652],[12753,12551,12651,12653],[12754,12552,12652,12654],[12755,12553,12653,12655],[12756,12554,12654,12656],[12757,12555,12655,12657],[12758,12556,12656,12658],[12759,12557,12657,12659],[12760,12558,12658,12660],[12761,12559,12659,12661],[12762,12560,12660,101665],[12763,12561,101704,12663],[12764,12562,12662,12664],[12765,12563,12663,12665],[12766,12564,12664,100435],[12767,12565,12665,12667],[12768,12566,12666,12668],[12769,-1,100472,12669],[12770,12568,12668,12670],[12771,12569,12669,12671],[12772,12570,12670,12672],[12773,12571,12671,100563],[12774,12572,100654,12674],[12775,12573,12673,12675],[12776,12574,12674,12676],[12777,12575,12675,12677],[12778,12576,12676,12678],[12779,12577,12677,12679],[12780,12578,12678,100720],[12781,12579,100687,12681],[12782,12580,12680,12682],[12783,12581,12681,12683],[12784,12582,12682,12684],[12785,12583,12683,12685],[12786,12584,12684,12686],[12787,12585,12685,12687],[12788,12586,12686,12688],[12789,12587,12687,12689],[12790,12588,12688,12690],[12791,12589,12689,12691],[12792,12590,12690,12692],[12793,12591,12691,12693],[12794,12592,12692,12694],[12795,12593,12693,12695],[12796,12594,12694,12696],[12797,12595,12695,12697],[12798,12596,12696,12698],[12799,12597,12697,12699],[12800,12598,12698,12700],[12801,12599,12699,12701],[12802,12600,12700,12702],[12803,12601,12701,101761],[12804,12602,12702,12704],[12805,12603,101802,12705],[12806,12604,12704,12706],[12807,12605,12705,12707],[12808,12606,12706,12708],[12809,12607,12707,12709],[12810,12608,12708,12710],[12811,12609,12709,12711],[12812,12610,12710,12712],[12813,12611,12711,12713],[12814,12612,12712,12714],[12815,12613,12713,12715],[12816,12614,12714,101711],[12817,12615,101720,12717],[12818,12616,12716,12718],[12819,12617,12717,12719],[12820,12618,12718,12720],[12821,12619,12719,12721],[12822,12620,12720,102179],[12823,12621,12721,12723],[12824,12622,12722,12724],[12825,12623,12723,12725],[12826,12624,12724,-1],[12827,12625,-1,12727],[12828,12626,12726,12728],[12829,12627,12727,12729],[12830,12628,12728,12730],[12831,12629,12729,12731],[12832,12630,12730,12732],[12833,12631,12731,12733],[12834,12632,12732,12734],[12835,12633,12733,12735],[12836,12634,12734,12736],[12837,12635,12735,12737],[12838,12636,12736,101954],[12839,12637,12737,12739],[12840,12638,12738,12740],[12841,12639,102047,12741],[12842,12640,12740,12742],[12843,12641,12741,12743],[12844,12642,12742,12744],[12845,12643,12743,12745],[12846,12644,12744,12746],[12847,12645,12745,12747],[12848,12646,12746,12748],[12849,12647,12747,12749],[12850,12648,12748,12750],[12851,12649,12749,12751],[12852,-1,12750,101588],[12853,12651,101629,12753],[12854,12652,12752,12754],[12855,12653,12753,12755],[12856,12654,12754,12756],[12857,12655,12755,12757],[12858,12656,12756,12758],[12859,12657,12757,12759],[12860,12658,12758,12760],[12861,12659,12759,12761],[12862,12660,12760,12762],[12863,12661,12761,101666],[12864,12662,101705,12764],[12865,12663,12763,12765],[12866,12664,12764,12766],[12867,12665,12765,100436],[12868,12666,12766,12768],[12869,12667,12767,12769],[12870,12668,100473,12770],[12871,12669,12769,12771],[12872,12670,12770,12772],[12873,12671,12771,12773],[12874,12672,12772,100564],[12875,12673,100655,12775],[12876,12674,12774,12776],[12877,12675,12775,12777],[12878,12676,12776,12778],[12879,12677,12777,12779],[12880,12678,12778,12780],[12881,12679,12779,100721],[12882,12680,100688,12782],[12883,12681,12781,12783],[12884,12682,12782,12784],[12885,12683,12783,12785],[12886,12684,12784,12786],[12887,12685,12785,12787],[12888,12686,12786,12788],[12889,12687,12787,12789],[12890,12688,12788,12790],[12891,12689,12789,12791],[12892,12690,12790,12792],[12893,12691,12791,12793],[12894,12692,12792,12794],[12895,12693,12793,12795],[12896,12694,12794,12796],[12897,12695,12795,12797],[12898,12696,12796,12798],[12899,12697,12797,12799],[12900,12698,12798,12800],[12901,12699,12799,12801],[12902,12700,12800,12802],[12903,12701,12801,12803],[12904,12702,12802,101762],[12905,12703,12803,12805],[12906,12704,101803,12806],[12907,12705,12805,12807],[12908,12706,12806,12808],[12909,12707,12807,12809],[12910,12708,12808,12810],[12911,12709,12809,12811],[12912,12710,12810,12812],[12913,12711,12811,12813],[12914,12712,12812,12814],[12915,12713,12813,12815],[12916,12714,12814,12816],[-1,12715,12815,101712],[12918,12716,101721,12818],[12919,12717,12817,12819],[12920,12718,12818,12820],[12921,12719,12819,12821],[12922,12720,12820,12822],[12923,12721,12821,102180],[12924,12722,12822,12824],[12925,12723,12823,12825],[12926,12724,12824,12826],[12927,12725,12825,-1],[12928,12726,-1,12828],[12929,12727,12827,12829],[12930,12728,12828,12830],[12931,12729,12829,12831],[12932,12730,12830,12832],[12933,12731,12831,12833],[12934,12732,12832,12834],[12935,12733,12833,12835],[12936,12734,12834,12836],[12937,12735,12835,12837],[12938,12736,12836,12838],[12939,12737,12837,12839],[12940,-1,12838,101955],[12941,12739,12839,12841],[12942,12740,102048,12842],[12943,12741,12841,12843],[12944,12742,12842,12844],[12945,12743,12843,12845],[12946,12744,12844,12846],[12947,12745,12845,12847],[12948,12746,12846,12848],[12949,12747,12847,12849],[12950,12748,12848,12850],[12951,12749,12849,12851],[12952,12750,12850,12852],[12953,12751,12851,101589],[12954,12752,101630,12854],[12955,12753,12853,12855],[12956,12754,12854,12856],[12957,12755,12855,12857],[12958,12756,12856,12858],[12959,12757,12857,12859],[12960,12758,12858,12860],[12961,12759,12859,12861],[12962,12760,12860,12862],[12963,12761,12861,12863],[12964,12762,12862,101667],[12965,12763,101706,12865],[12966,12764,12864,12866],[12967,12765,12865,12867],[12968,12766,12866,100437],[12969,12767,12867,12869],[12970,12768,12868,12870],[12971,12769,100474,12871],[12972,12770,12870,12872],[12973,12771,12871,12873],[12974,12772,12872,12874],[12975,12773,12873,100565],[12976,12774,100656,12876],[12977,12775,12875,12877],[12978,12776,12876,12878],[12979,12777,12877,12879],[12980,12778,12878,12880],[12981,12779,12879,12881],[12982,12780,12880,100722],[12983,12781,100689,12883],[12984,12782,12882,12884],[12985,12783,12883,12885],[12986,12784,12884,12886],[12987,12785,12885,12887],[12988,12786,12886,12888],[12989,12787,12887,12889],[12990,12788,12888,12890],[12991,12789,12889,12891],[12992,12790,12890,12892],[12993,12791,12891,12893],[12994,12792,12892,12894],[12995,12793,12893,12895],[12996,12794,12894,12896],[12997,12795,12895,12897],[12998,12796,12896,12898],[12999,12797,12897,12899],[13000,12798,12898,12900],[13001,12799,12899,12901],[13002,12800,12900,12902],[13003,12801,12901,12903],[13004,12802,12902,12904],[13005,12803,12903,101763],[13006,12804,12904,12906],[13007,12805,101804,12907],[13008,12806,12906,12908],[13009,12807,12907,12909],[13010,12808,12908,12910],[13011,12809,12909,12911],[13012,12810,12910,12912],[13013,12811,12911,12913],[13014,12812,12912,12914],[13015,12813,12913,12915],[13016,12814,12914,12916],[13017,12815,12915,101713],[13018,12816,12916,12918],[13019,12817,101722,12919],[13020,12818,12918,12920],[13021,12819,12919,12921],[13022,12820,12920,12922],[13023,12821,12921,12923],[13024,12822,12922,102181],[13025,12823,12923,12925],[13026,12824,12924,12926],[13027,12825,12925,12927],[13028,12826,12926,-1],[13029,12827,-1,12929],[13030,12828,12928,12930],[13031,12829,12929,12931],[13032,12830,12930,12932],[13033,12831,12931,12933],[13034,12832,12932,12934],[13035,12833,12933,12935],[13036,12834,12934,12936],[13037,12835,12935,12937],[13038,12836,12936,12938],[13039,12837,12937,12939],[13040,12838,12938,12940],[13041,12839,12939,101956],[13042,12840,12940,12942],[13043,12841,102049,12943],[13044,12842,12942,12944],[13045,12843,12943,12945],[13046,12844,12944,12946],[13047,12845,12945,12947],[13048,12846,12946,12948],[13049,12847,12947,12949],[13050,12848,12948,12950],[13051,12849,12949,12951],[13052,12850,12950,12952],[13053,12851,12951,12953],[13054,12852,12952,101590],[13055,12853,101631,12955],[13056,12854,12954,12956],[13057,12855,12955,12957],[13058,12856,12956,12958],[13059,12857,12957,12959],[13060,12858,12958,12960],[13061,12859,12959,12961],[13062,12860,12960,12962],[13063,12861,12961,12963],[13064,12862,12962,12964],[13065,12863,12963,101668],[13066,12864,101707,12966],[13067,12865,12965,12967],[13068,12866,12966,12968],[-1,12867,12967,100438],[13070,12868,12968,12970],[13071,12869,12969,12971],[13072,12870,100475,12972],[13073,12871,12971,12973],[13074,12872,12972,12974],[13075,12873,12973,12975],[13076,12874,12974,100566],[13077,12875,100657,12977],[13078,12876,12976,12978],[13079,12877,12977,12979],[13080,12878,12978,12980],[13081,12879,12979,12981],[13082,12880,12980,12982],[13083,12881,12981,100723],[13084,12882,100690,12984],[13085,12883,12983,12985],[13086,12884,12984,12986],[13087,12885,12985,12987],[13088,12886,12986,12988],[13089,12887,12987,12989],[13090,12888,12988,12990],[13091,12889,12989,12991],[13092,12890,12990,12992],[13093,12891,12991,12993],[13094,12892,12992,12994],[13095,12893,12993,12995],[13096,12894,12994,12996],[13097,12895,12995,12997],[13098,12896,12996,12998],[13099,12897,12997,12999],[13100,12898,12998,13000],[13101,12899,12999,13001],[13102,12900,13000,13002],[13103,12901,13001,13003],[13104,12902,13002,13004],[13105,12903,13003,13005],[13106,12904,13004,101764],[13107,12905,13005,13007],[13108,12906,101805,13008],[13109,12907,13007,13009],[13110,12908,13008,13010],[13111,12909,13009,13011],[13112,12910,13010,13012],[13113,12911,13011,13013],[13114,12912,13012,13014],[13115,12913,13013,13015],[13116,12914,13014,13016],[13117,12915,13015,13017],[13118,12916,13016,101714],[13119,-1,101723,13019],[13120,12918,13018,13020],[13121,12919,13019,13021],[13122,12920,13020,13022],[13123,12921,13021,13023],[13124,12922,13022,13024],[-1,12923,13023,102182],[13126,12924,13024,13026],[13127,12925,13025,13027],[13128,12926,13026,13028],[13129,12927,13027,-1],[13130,12928,-1,13030],[13131,12929,13029,13031],[13132,12930,13030,13032],[13133,12931,13031,13033],[13134,12932,13032,13034],[13135,12933,13033,13035],[13136,12934,13034,13036],[13137,12935,13035,13037],[13138,12936,13036,13038],[13139,12937,13037,13039],[13140,12938,13038,13040],[13141,12939,13039,13041],[13142,12940,13040,101957],[13143,12941,13041,13043],[-1,12942,102050,13044],[13145,12943,13043,13045],[13146,12944,13044,13046],[13147,12945,13045,13047],[13148,12946,13046,13048],[13149,12947,13047,13049],[13150,12948,13048,13050],[13151,12949,13049,13051],[13152,12950,13050,13052],[13153,12951,13051,13053],[13154,12952,13052,13054],[13155,12953,13053,13055],[13156,12954,13054,13056],[13157,12955,13055,13057],[13158,12956,13056,13058],[13159,12957,13057,13059],[13160,12958,13058,13060],[13161,12959,13059,13061],[13162,12960,13060,13062],[13163,12961,13061,13063],[13164,12962,13062,13064],[13165,12963,13063,13065],[13166,12964,13064,101669],[13167,12965,101708,13067],[13168,12966,13066,13068],[13169,12967,13067,100439],[13170,12968,13068,13070],[13171,12969,13069,13071],[13172,12970,13070,13072],[13173,12971,100476,13073],[13174,12972,13072,13074],[13175,12973,13073,13075],[13176,12974,13074,13076],[13177,12975,13075,100567],[13178,12976,100658,13078],[13179,12977,13077,13079],[13180,12978,13078,13080],[13181,12979,13079,13081],[13182,12980,13080,13082],[13183,12981,13081,13083],[13184,12982,13082,100724],[13185,12983,100691,13085],[13186,12984,13084,13086],[13187,12985,13085,13087],[13188,12986,13086,13088],[13189,12987,13087,13089],[13190,12988,13088,13090],[13191,12989,13089,13091],[13192,12990,13090,13092],[13193,12991,13091,13093],[13194,12992,13092,13094],[13195,12993,13093,13095],[13196,12994,13094,13096],[13197,12995,13095,13097],[13198,12996,13096,13098],[13199,12997,13097,13099],[13200,12998,13098,13100],[13201,12999,13099,13101],[13202,13000,13100,13102],[13203,13001,13101,13103],[13204,13002,13102,13104],[13205,13003,13103,13105],[13206,13004,13104,13106],[13207,13005,13105,101765],[13208,13006,13106,13108],[13209,13007,101806,13109],[13210,13008,13108,13110],[13211,13009,13109,13111],[13212,13010,13110,13112],[13213,13011,13111,13113],[13214,13012,13112,13114],[13215,13013,13113,13115],[13216,13014,13114,13116],[13217,13015,13115,13117],[13218,13016,13116,13118],[-1,13017,13117,101715],[13220,13018,101724,13120],[13221,13019,13119,13121],[13222,13020,13120,13122],[13223,13021,13121,13123],[13224,13022,13122,13124],[13225,13023,13123,102183],[13226,13024,13124,13126],[13227,13025,13125,13127],[13228,13026,13126,13128],[13229,13027,13127,13129],[13230,13028,13128,-1],[13231,13029,-1,13131],[13232,13030,13130,13132],[13233,13031,13131,13133],[13234,13032,13132,13134],[13235,13033,13133,13135],[13236,13034,13134,13136],[13237,13035,13135,13137],[13238,13036,13136,13138],[13239,13037,13137,13139],[13240,13038,13138,13140],[13241,13039,13139,13141],[13242,13040,13140,13142],[13243,13041,13141,101958],[13244,13042,13142,13144],[13245,13043,13143,13145],[13246,13044,102051,13146],[13247,13045,13145,13147],[13248,13046,13146,13148],[13249,13047,13147,13149],[13250,13048,13148,13150],[13251,13049,13149,13151],[13252,13050,13150,13152],[13253,13051,13151,13153],[13254,13052,13152,13154],[13255,13053,13153,13155],[13256,13054,13154,13156],[13257,13055,13155,13157],[13258,13056,13156,13158],[13259,13057,13157,13159],[13260,13058,13158,13160],[13261,13059,13159,13161],[13262,13060,13160,13162],[13263,13061,13161,13163],[13264,13062,13162,13164],[13265,13063,13163,13165],[13266,13064,13164,13166],[13267,13065,13165,101670],[13268,13066,101709,13168],[13269,13067,13167,13169],[13270,13068,13168,100440],[13271,13069,13169,13171],[13272,13070,13170,13172],[13273,13071,13171,13173],[13274,13072,100477,13174],[13275,13073,13173,13175],[13276,13074,13174,13176],[13277,13075,13175,13177],[13278,13076,13176,100568],[13279,13077,100659,13179],[13280,13078,13178,13180],[13281,13079,13179,13181],[13282,13080,13180,13182],[13283,13081,13181,13183],[13284,13082,13182,13184],[-1,13083,13183,100725],[13286,13084,100692,13186],[13287,13085,13185,13187],[13288,13086,13186,13188],[13289,13087,13187,13189],[13290,13088,13188,13190],[13291,13089,13189,13191],[13292,13090,13190,13192],[13293,13091,13191,13193],[13294,13092,13192,13194],[13295,13093,13193,13195],[13296,13094,13194,13196],[13297,13095,13195,13197],[13298,13096,13196,13198],[13299,13097,13197,13199],[13300,13098,13198,13200],[13301,13099,13199,13201],[13302,13100,13200,13202],[13303,13101,13201,13203],[13304,13102,13202,13204],[13305,13103,13203,13205],[13306,13104,13204,13206],[13307,13105,13205,13207],[13308,13106,13206,101766],[13309,13107,13207,13209],[13310,13108,101807,13210],[13311,13109,13209,13211],[13312,13110,13210,13212],[13313,13111,13211,13213],[13314,13112,13212,13214],[13315,13113,13213,13215],[13316,13114,13214,13216],[13317,13115,13215,13217],[13318,13116,13216,13218],[13319,13117,13217,101716],[13320,13118,13218,13220],[13321,13119,101725,13221],[13322,13120,13220,13222],[13323,13121,13221,13223],[13324,13122,13222,13224],[13325,13123,13223,13225],[13326,13124,13224,102184],[13327,13125,13225,13227],[13328,13126,13226,13228],[13329,13127,13227,13229],[13330,13128,13228,13230],[13331,13129,13229,-1],[13332,13130,-1,13232],[13333,13131,13231,13233],[13334,13132,13232,13234],[13335,13133,13233,13235],[13336,13134,13234,13236],[13337,13135,13235,13237],[13338,13136,13236,13238],[13339,13137,13237,13239],[13340,13138,13238,13240],[13341,13139,13239,13241],[13342,13140,13240,13242],[13343,13141,13241,13243],[13344,13142,13242,101959],[13345,13143,13243,13245],[13346,13144,13244,13246],[13347,13145,102052,13247],[13348,13146,13246,13248],[13349,13147,13247,13249],[13350,13148,13248,13250],[13351,13149,13249,13251],[13352,13150,13250,13252],[13353,13151,13251,13253],[13354,13152,13252,13254],[13355,13153,13253,13255],[13356,13154,13254,13256],[13357,13155,13255,13257],[13358,13156,13256,13258],[13359,13157,13257,13259],[13360,13158,13258,13260],[13361,13159,13259,13261],[13362,13160,13260,13262],[13363,13161,13261,13263],[13364,13162,13262,13264],[13365,13163,13263,13265],[13366,13164,13264,13266],[13367,13165,13265,13267],[13368,13166,13266,13268],[13369,13167,13267,13269],[13370,13168,13268,13270],[13371,13169,13269,100441],[13372,13170,13270,13272],[13373,13171,13271,13273],[13374,-1,100478,13274],[13375,13173,13273,13275],[13376,13174,13274,13276],[13377,13175,13275,13277],[13378,13176,13276,13278],[13379,13177,13277,100569],[13380,13178,100660,13280],[13381,13179,13279,13281],[13382,13180,13280,13282],[13383,13181,13281,13283],[13384,13182,13282,13284],[13385,13183,13283,100726],[13386,13184,13284,13286],[13387,13185,100693,13287],[13388,13186,13286,13288],[13389,13187,13287,13289],[13390,13188,13288,13290],[13391,13189,13289,13291],[13392,13190,13290,13292],[13393,13191,13291,13293],[13394,13192,13292,13294],[13395,13193,13293,13295],[13396,13194,13294,13296],[13397,13195,13295,13297],[13398,13196,13296,13298],[13399,13197,13297,13299],[13400,13198,13298,13300],[13401,13199,13299,13301],[13402,13200,13300,13302],[13403,13201,13301,13303],[13404,13202,13302,13304],[13405,13203,13303,13305],[13406,13204,13304,13306],[13407,13205,13305,13307],[13408,13206,13306,13308],[13409,13207,13307,101767],[13410,-1,101808,13310],[13411,13209,13309,13311],[13412,13210,13310,13312],[13413,13211,13311,13313],[13414,13212,13312,13314],[13415,13213,13313,13315],[13416,13214,13314,13316],[13417,13215,13315,13317],[13418,13216,13316,13318],[13419,13217,13317,13319],[13420,13218,13318,101717],[13421,13219,13319,13321],[13422,13220,101726,13322],[13423,13221,13321,13323],[13424,13222,13322,13324],[13425,13223,13323,13325],[13426,13224,13324,13326],[13427,13225,13325,102185],[13428,13226,13326,13328],[13429,13227,13327,13329],[13430,13228,13328,13330],[13431,13229,13329,13331],[13432,13230,13330,-1],[-1,13231,-1,13333],[-1,13232,13332,13334],[-1,13233,13333,13335],[-1,13234,13334,13336],[-1,13235,13335,13337],[-1,13236,13336,13338],[-1,13237,13337,13339],[-1,13238,13338,13340],[-1,13239,13339,13341],[-1,13240,13340,13342],[-1,13241,13341,13343],[-1,13242,13342,13344],[-1,13243,13343,13345],[-1,-1,13344,101960],[-1,13245,13345,13347],[-1,13246,102053,13348],[-1,13247,13347,13349],[-1,13248,13348,13350],[-1,13249,13349,13351],[-1,13250,13350,13352],[-1,13251,13351,13353],[-1,13252,13352,13354],[-1,13253,13353,13355],[-1,13254,13354,13356],[-1,13255,13355,13357],[-1,13256,13356,13358],[-1,13257,13357,13359],[-1,13258,13358,13360],[-1,13259,13359,13361],[-1,13260,13360,13362],[-1,13261,13361,13363],[-1,13262,13362,13364],[-1,13263,13363,13365],[-1,13264,13364,13366],[-1,13265,13365,13367],[-1,13266,13366,13368],[-1,13267,13367,13369],[-1,13268,13368,13370],[-1,13269,13369,13371],[-1,13270,13370,100442],[-1,13271,13371,13373],[-1,13272,13372,13374],[-1,13273,100479,13375],[-1,13274,13374,13376],[-1,13275,13375,13377],[-1,13276,13376,13378],[-1,13277,13377,13379],[-1,13278,13378,100570],[-1,13279,100661,13381],[-1,13280,13380,13382],[-1,13281,13381,13383],[-1,13282,13382,13384],[-1,13283,13383,13385],[-1,13284,13384,100727],[-1,13285,13385,13387],[-1,13286,100694,13388],[-1,13287,13387,13389],[-1,13288,13388,13390],[-1,13289,13389,13391],[-1,13290,13390,13392],[-1,13291,13391,13393],[-1,13292,13392,13394],[-1,13293,13393,13395],[-1,13294,13394,13396],[-1,13295,13395,13397],[-1,13296,13396,13398],[-1,13297,13397,13399],[-1,13298,13398,13400],[-1,13299,13399,13401],[-1,13300,13400,13402],[-1,13301,13401,13403],[-1,13302,13402,13404],[-1,13303,13403,13405],[-1,13304,13404,13406],[-1,13305,13405,13407],[-1,13306,13406,13408],[-1,13307,13407,13409],[-1,13308,13408,101768],[-1,13309,101809,13411],[-1,13310,13410,13412],[-1,13311,13411,13413],[-1,13312,13412,13414],[-1,13313,13413,13415],[-1,13314,13414,13416],[-1,13315,13415,13417],[-1,13316,13416,13418],[-1,13317,13417,13419],[-1,13318,13418,13420],[-1,13319,13419,101718],[-1,13320,13420,13422],[-1,13321,101727,13423],[-1,13322,13422,13424],[-1,13323,13423,13425],[-1,13324,13424,13426],[-1,13325,13425,13427],[-1,13326,13426,102186],[-1,13327,13427,13429],[-1,13328,13428,13430],[-1,13329,13429,13431],[-1,13330,13430,13432],[-1,13331,13431,-1]]},\"crossPoint\":{\"positions\":[[1.0150610510858574e-16,0,0.9848092007877866],[1.0150610510858574e-16,0.007575757575757576,0.9865228869855324],[0,0.015151515151515152,0.9870832639756765],[1.0150610510858574e-16,0.022727272727272728,0.9866742784377732],[1.0150610510858574e-16,0.030303030303030304,0.9854798770513765],[1.0150610510858574e-16,0.03787878787878788,0.9837019507369316],[1.0150610510858574e-16,0.045454545454545456,0.9816141673784514],[1.0150610510858574e-16,0.05303030303030303,0.9801124021938222],[0,0.06060606060606061,0.9825095827728603],[0,0.06818181818181818,0.9903443836740813],[1.0150610510858574e-16,0.07575757575757576,0.9956414149588729],[0,0.08333333333333333,0.9904400363339726],[1.0150610510858574e-16,0.09090909090909091,0.976352670584651],[0,0.09848484848484848,0.958318028328846],[1.0150610510858574e-16,0.10606060606060606,0.9450069084366367],[1.0150610510858574e-16,0.11363636363636363,0.9430007225702155],[2.0301221021717148e-16,0.12121212121212122,0.9467912453080949],[1.0150610510858574e-16,0.12878787878787878,0.9491227975267686],[1.0150610510858574e-16,0.13636363636363635,0.9478395223783396],[0,0.14393939393939395,0.9426913548795326],[1.0150610510858574e-16,0.15151515151515152,0.9359515752299534],[2.0301221021717148e-16,0.1590909090909091,0.931202617829236],[2.0301221021717148e-16,0.16666666666666666,0.9347401886942474],[1.0150610510858574e-16,0.17424242424242425,0.9492247393718594],[1.0150610510858574e-16,0.18181818181818182,0.9600624319117279],[1.0150610510858574e-16,0.1893939393939394,0.9530827876879748],[1.0150610510858574e-16,0.19696969696969696,0.9330630548697967],[1.0150610510858574e-16,0.20454545454545456,0.9088227336145872],[1.0150610510858574e-16,0.21212121212121213,0.886402605237452],[1.0150610510858574e-16,0.2196969696969697,0.8727216611082808],[1.0150610510858574e-16,0.22727272727272727,0.8809904516583856],[1.0150610510858574e-16,0.23484848484848486,0.916360522612235],[1.0150610510858574e-16,0.24242424242424243,0.9454558418054969],[0,0.25,0.9384854004013182],[0,0.25757575757575757,0.9185258607615584],[0,0.26515151515151514,0.9116071881991533],[0,0.2727272727272727,0.9027048886326291],[0,0.2803030303030303,0.8747666534799563],[0,0.2878787878787879,0.8436833755512897],[0,0.29545454545454547,0.8303043925284557],[0,0.30303030303030304,0.8423696201877812],[0,0.3106060606060606,0.8755288486516033],[0,0.3181818181818182,0.8901807873317965],[0,0.32575757575757575,0.857791693440012],[0,0.3333333333333333,0.82934909609747],[0,0.3409090909090909,0.853299605968889],[0,0.3484848484848485,0.8884048879834172],[0,0.3560606060606061,0.8886033168204917],[0,0.36363636363636365,0.8782250518962766],[0,0.3712121212121212,0.8851929212725637],[0,0.3787878787878788,0.8814086428569251],[0,0.38636363636363635,0.8412704560004686],[0,0.3939393939393939,0.8051837959826612],[0,0.4015151515151515,0.8130573087401958],[0,0.4090909090909091,0.8368052869103112],[0,0.4166666666666667,0.8421470722865306],[0,0.42424242424242425,0.8380165565869669],[0,0.4318181818181818,0.8399599075944342],[0,0.4393939393939394,0.846757847425962],[0,0.44696969696969696,0.8538375059719481],[0,0.45454545454545453,0.8599770898820468],[0,0.4621212121212121,0.8636811532230602],[0,0.4696969696969697,0.8590085629711193],[0,0.4772727272727273,0.842230071732346],[0,0.48484848484848486,0.8229096617234939],[0,0.49242424242424243,0.8122747055312327],[0,0.5,0.8149129076112653],[0,0.5075757575757576,0.8293697256180983],[0,0.5151515151515151,0.8366612981324263],[0,0.5227272727272727,0.8217896221587738],[0,0.5303030303030303,0.8032294474708028],[0,0.5378787878787878,0.8004000717112656],[0,0.5454545454545454,0.8030262312301428],[0,0.553030303030303,0.7974908295373154],[0,0.5606060606060606,0.7865040000750332],[0,0.5681818181818182,0.7759093657808116],[0,0.5757575757575758,0.7677572776408585],[0,0.5833333333333334,0.762333508249809],[0,0.5909090909090909,0.7566587885873151],[0,0.5984848484848485,0.7488356930723875],[0,0.6060606060606061,0.744559211496458],[0,0.6136363636363636,0.7484754411780893],[0,0.6212121212121212,0.7534424941719496],[0,0.6287878787878788,0.7521270207887223],[0,0.6363636363636364,0.7482178096270421],[0,0.6439393939393939,0.746746622137052],[0,0.6515151515151515,0.7470949728869691],[0,0.6590909090909091,0.7479565848297668],[0,0.6666666666666666,0.750924261339362],[0,0.6742424242424242,0.7570438233042261],[0,0.6818181818181818,0.7622740812501042],[0,0.6893939393939394,0.7630634803643127],[0,0.696969696969697,0.7629060148431798],[0,0.7045454545454546,0.765010084374403],[0,0.7121212121212122,0.764396161602145],[0,0.7196969696969697,0.7567348529910327],[0,0.7272727272727273,0.7484852273310848],[0,0.7348484848484849,0.7469102896232778],[0,0.7424242424242424,0.7517003273870271],[0,0.75,0.7589959241295356],[0,0.7575757575757576,0.7583115647907188],[0,0.7651515151515151,0.7421960776755756],[0,0.7727272727272727,0.7219617631167303],[0,0.7803030303030303,0.7103446621515725],[0,0.7878787878787878,0.7070123066089294],[0,0.7954545454545454,0.7101502054639061],[0,0.803030303030303,0.7250842854852826],[0,0.8106060606060606,0.7532413927911384],[0,0.8181818181818182,0.7733116331030738],[0,0.8257575757575758,0.7648357540620164],[0,0.8333333333333334,0.733493811382678],[0,0.8409090909090909,0.6929128986811658],[0,0.8484848484848485,0.6623689531053829],[0,0.8560606060606061,0.6568778475453373],[0,0.8636363636363636,0.6687663543276596],[0,0.8712121212121212,0.6845870661149255],[0,0.8787878787878788,0.6904849574768697],[0,0.8863636363636364,0.6776684778598827],[0,0.8939393939393939,0.6580075943098208],[0,0.9015151515151515,0.6455271778226603],[0,0.9090909090909091,0.6422101975953969],[0,0.9166666666666666,0.6459678329990005],[0,0.9242424242424242,0.6504660058993217],[0,0.9318181818181818,0.6497139845947624],[0,0.9393939393939394,0.6433396806190524],[1.0150610510858574e-16,0.946969696969697,0.6328749927504027],[1.0150610510858574e-16,0.9545454545454546,0.6218491255096195],[0,0.9621212121212122,0.613710336971173],[1.0150610510858574e-16,0.9696969696969697,0.6095857936815958],[1.0150610510858574e-16,0.9772727272727273,0.6093888267545208],[1.0150610510858574e-16,0.9848484848484849,0.6104985170999255],[1.0150610510858574e-16,0.9924242424242424,0.609660383076874],[1.0150610510858574e-16,1,0.60361994304443],[1.0150610510858574e-16,0,0.9848092007877866],[1.0150610510858574e-16,0.007575757575757576,0.9865228869855324],[0,0.015151515151515152,0.9870832639756765],[1.0150610510858574e-16,0.022727272727272728,0.9866742784377732],[1.0150610510858574e-16,0.030303030303030304,0.9854798770513765],[1.0150610510858574e-16,0.03787878787878788,0.9837019507369316],[1.0150610510858574e-16,0.045454545454545456,0.9816141673784514],[1.0150610510858574e-16,0.05303030303030303,0.9801124021938222],[0,0.06060606060606061,0.9825095827728603],[0,0.06818181818181818,0.9903443836740813],[1.0150610510858574e-16,0.07575757575757576,0.9956414149588729],[0,0.08333333333333333,0.9904400363339726],[1.0150610510858574e-16,0.09090909090909091,0.976352670584651],[0,0.09848484848484848,0.958318028328846],[1.0150610510858574e-16,0.10606060606060606,0.9450069084366367],[1.0150610510858574e-16,0.11363636363636363,0.9430007225702155],[2.0301221021717148e-16,0.12121212121212122,0.9467912453080949],[1.0150610510858574e-16,0.12878787878787878,0.9491227975267686],[1.0150610510858574e-16,0.13636363636363635,0.9478395223783396],[0,0.14393939393939395,0.9426913548795326],[1.0150610510858574e-16,0.15151515151515152,0.9359515752299534],[2.0301221021717148e-16,0.1590909090909091,0.931202617829236],[2.0301221021717148e-16,0.16666666666666666,0.9347401886942474],[1.0150610510858574e-16,0.17424242424242425,0.9492247393718594],[1.0150610510858574e-16,0.18181818181818182,0.9600624319117279],[1.0150610510858574e-16,0.1893939393939394,0.9530827876879748],[1.0150610510858574e-16,0.19696969696969696,0.9330630548697967],[1.0150610510858574e-16,0.20454545454545456,0.9088227336145872],[1.0150610510858574e-16,0.21212121212121213,0.886402605237452],[1.0150610510858574e-16,0.2196969696969697,0.8727216611082808],[1.0150610510858574e-16,0.22727272727272727,0.8809904516583856],[1.0150610510858574e-16,0.23484848484848486,0.916360522612235],[1.0150610510858574e-16,0.24242424242424243,0.9454558418054969],[0,0.25,0.9384854004013182],[0,0.25757575757575757,0.9185258607615584],[0,0.26515151515151514,0.9116071881991533],[0,0.2727272727272727,0.9027048886326291],[0,0.2803030303030303,0.8747666534799563],[0,0.2878787878787879,0.8436833755512897],[0,0.29545454545454547,0.8303043925284557],[0,0.30303030303030304,0.8423696201877812],[0,0.3106060606060606,0.8755288486516033],[0,0.3181818181818182,0.8901807873317965],[0,0.32575757575757575,0.857791693440012],[0,0.3333333333333333,0.82934909609747],[0,0.3409090909090909,0.853299605968889],[0,0.3484848484848485,0.8884048879834172],[0,0.3560606060606061,0.8886033168204917],[0,0.36363636363636365,0.8782250518962766],[0,0.3712121212121212,0.8851929212725637],[0,0.3787878787878788,0.8814086428569251],[0,0.38636363636363635,0.8412704560004686],[0,0.3939393939393939,0.8051837959826612],[0,0.4015151515151515,0.8130573087401958],[0,0.4090909090909091,0.8368052869103112],[0,0.4166666666666667,0.8421470722865306],[0,0.42424242424242425,0.8380165565869669],[0,0.4318181818181818,0.8399599075944342],[0,0.4393939393939394,0.846757847425962],[0,0.44696969696969696,0.8538375059719481],[0,0.45454545454545453,0.8599770898820468],[0,0.4621212121212121,0.8636811532230602],[0,0.4696969696969697,0.8590085629711193],[0,0.4772727272727273,0.842230071732346],[0,0.48484848484848486,0.8229096617234939],[0,0.49242424242424243,0.8122747055312327],[0,0.5,0.8149129076112653],[0,0.5075757575757576,0.8293697256180983],[0,0.5151515151515151,0.8366612981324263],[0,0.5227272727272727,0.8217896221587738],[0,0.5303030303030303,0.8032294474708028],[0,0.5378787878787878,0.8004000717112656],[0,0.5454545454545454,0.8030262312301428],[0,0.553030303030303,0.7974908295373154],[0,0.5606060606060606,0.7865040000750332],[0,0.5681818181818182,0.7759093657808116],[0,0.5757575757575758,0.7677572776408585],[0,0.5833333333333334,0.762333508249809],[0,0.5909090909090909,0.7566587885873151],[0,0.5984848484848485,0.7488356930723875],[0,0.6060606060606061,0.744559211496458],[0,0.6136363636363636,0.7484754411780893],[0,0.6212121212121212,0.7534424941719496],[0,0.6287878787878788,0.7521270207887223],[0,0.6363636363636364,0.7482178096270421],[0,0.6439393939393939,0.746746622137052],[0,0.6515151515151515,0.7470949728869691],[0,0.6590909090909091,0.7479565848297668],[0,0.6666666666666666,0.750924261339362],[0,0.6742424242424242,0.7570438233042261],[0,0.6818181818181818,0.7622740812501042],[0,0.6893939393939394,0.7630634803643127],[0,0.696969696969697,0.7629060148431798],[0,0.7045454545454546,0.765010084374403],[0,0.7121212121212122,0.764396161602145],[0,0.7196969696969697,0.7567348529910327],[0,0.7272727272727273,0.7484852273310848],[0,0.7348484848484849,0.7469102896232778],[0,0.7424242424242424,0.7517003273870271],[0,0.75,0.7589959241295356],[0,0.7575757575757576,0.7583115647907188],[0,0.7651515151515151,0.7421960776755756],[0,0.7727272727272727,0.7219617631167303],[0,0.7803030303030303,0.7103446621515725],[0,0.7878787878787878,0.7070123066089294],[0,0.7954545454545454,0.7101502054639061],[0,0.803030303030303,0.7250842854852826],[0,0.8106060606060606,0.7532413927911384],[0,0.8181818181818182,0.7733116331030738],[0,0.8257575757575758,0.7648357540620164],[0,0.8333333333333334,0.733493811382678],[0,0.8409090909090909,0.6929128986811658],[0,0.8484848484848485,0.6623689531053829],[0,0.8560606060606061,0.6568778475453373],[0,0.8636363636363636,0.6687663543276596],[0,0.8712121212121212,0.6845870661149255],[0,0.8787878787878788,0.6904849574768697],[0,0.8863636363636364,0.6776684778598827],[0,0.8939393939393939,0.6580075943098208],[0,0.9015151515151515,0.6455271778226603],[0,0.9090909090909091,0.6422101975953969],[0,0.9166666666666666,0.6459678329990005],[0,0.9242424242424242,0.6504660058993217],[0,0.9318181818181818,0.6497139845947624],[0,0.9393939393939394,0.6433396806190524],[1.0150610510858574e-16,0.946969696969697,0.6328749927504027],[1.0150610510858574e-16,0.9545454545454546,0.6218491255096195],[0,0.9621212121212122,0.613710336971173],[1.0150610510858574e-16,0.9696969696969697,0.6095857936815958],[1.0150610510858574e-16,0.9772727272727273,0.6093888267545208],[1.0150610510858574e-16,0.9848484848484849,0.6104985170999255],[1.0150610510858574e-16,0.9924242424242424,0.609660383076874],[1.0150610510858574e-16,1,0.60361994304443],[0.44464285714285723,0.06060606060606061,0.8044372202152844],[0.44598916071428574,0.06818181818181818,0.8076087748435593],[0.4473124642857145,0.07575757575757576,0.8114812740273135],[0.4485910178571429,0.08333333333333333,0.8154342111907703],[0.4498030000000001,0.09090909090909091,0.8188413266972097],[0.450927017857143,0.09848484848484848,0.8210188902281946],[0.451943142857143,0.10606060606060606,0.8208580142687893],[0.4528322857142859,0.11363636363636363,0.8186804507378045],[0.45357730357142867,0.12121212121212122,0.8144861996352398],[0.4541621607142859,0.12878787878787878,0.8088210826181128],[0.454573392857143,0.13636363636363635,0.8023056212441294],[0.4547990357142858,0.14393939393939395,0.7959682800304524],[0.45483014285714296,0.15151515151515152,0.7905387388734193],[0.45465944642857153,0.1590909090909091,0.7863329966308972],[0.45428307142857144,0.16666666666666666,0.7835061911832771],[0.4536988392857145,0.17424242424242425,0.7817250644898618],[0.4529080714285715,0.18181818181818182,0.7805817035550535],[0.4519136964285716,0.1893939393939394,0.7791855375411797],[0.45072182142857153,0.19696969696969696,0.7771918322495152],[0.4493399821428573,0.20454545454545456,0.7739973103232545],[0.44777825000000004,0.21212121212121213,0.7695042895817944],[0.44604775000000013,0.2196969696969697,0.7637817168648798],[0.44416132142857145,0.22727272727272727,0.7572203059129959],[0.442132392857143,0.23484848484848486,0.7503428811213155],[0.43997514285714295,0.24242424242424243,0.7431781778306971],[0.4377038571428572,0.25,0.7353067769236562],[0.4353327321428573,0.25757575757575757,0.7260219658018405],[0.4328756785714287,0.26515151515151514,0.7137954378328295],[0.4303458214285715,0.2727272727272727,0.6973976410411691],[0.4277558392857144,0.2803030303030303,0.6764263855283458],[0.4251173035714287,0.2878787878787879,0.6512637404615],[0.42244126785714287,0.29545454545454547,0.6248888026020305],[0.41973758928571436,0.30303030303030304,0.6018922299262123],[0.417015892857143,0.3106060606060606,0.5872382098776228],[0.41428571428571437,0.3181818181818182,0.5833657106938687],[0.44464285714285723,0.06060606060606061,0.8044372202152844],[0.44116512500000005,0.06818181818181818,0.7972725319065955],[0.43771360714285734,0.07575757575757576,0.7903089160742689],[0.4343123928571429,0.08333333333333333,0.7833568063638294],[0.43098558928571445,0.09090909090909091,0.7754854054567883],[0.42775671428571443,0.09848484848484848,0.7662982615336468],[0.42464687500000003,0.10606060606060606,0.7560884211362157],[0.4216759821428573,0.11363636363636363,0.7447064844631175],[0.41886132142857146,0.12121212121212122,0.7328821463926197],[0.4162187857142859,0.12878787878787878,0.7211210170828531],[0.41376132142857147,0.13636363636363635,0.7098999563691604],[0.4115004642857144,0.14393939393939395,0.6997590628114744],[0.4094448571428573,0.15151515151515152,0.69139354288626],[0.407601892857143,0.1590909090909091,0.6844414181938909],[0.4059764285714286,0.16666666666666666,0.6789084567772402],[0.4045721607142858,0.17424242424242425,0.6743982068168085],[0.4033907142857144,0.18181818181818182,0.6705314457120685],[0.40243273214285724,0.1893939393939394,0.6667910871468609],[0.4016970892857144,0.19696969696969696,0.6628783764642203],[0.4011817500000001,0.20454545454545456,0.6586726342216981],[0.4008831250000001,0.21212121212121213,0.6545473299588787],[0.4007966964285715,0.2196969696969697,0.6507265334139686],[0.4009163214285716,0.22727272727272727,0.6474343293071042],[0.40123494642857155,0.23484848484848486,0.6450269429769688],[0.4017436250000001,0.24242424242424243,0.6435043744235625],[0.4024324285714287,0.25,0.6418037006917794],[0.4032893392857144,0.25757575757575757,0.6389883714021873],[0.4043013392857144,0.26515151515151514,0.6337541796244319],[0.4054531607142858,0.2727272727272727,0.6250266962815207],[0.40672858928571437,0.2803030303030303,0.6125128898135719],[0.4081094285714286,0.2878787878787879,0.5972871743156487],[0.4095765892857144,0.29545454545454547,0.5824349283573097],[0.4111092321428572,0.30303030303030304,0.5725525929396323],[0.4126860357142859,0.3106060606060606,0.5723399993594536],[0.41428571428571437,0.3181818181818182,0.5833657106938687],[0.5602515714285714,0,0.8620481477748445],[0.5543948928571429,0.007575757575757576,0.8519441696915461],[0.5485640892857143,0.015151515151515152,0.8452915038068314],[0.5427828214285716,0.022727272727272728,0.8394923284841765],[0.5370748392857143,0.030303030303030304,0.8298806416236474],[0.5314631607142858,0.03787878787878788,0.8168016418637855],[0.5259683392857144,0.045454545454545456,0.8052213294616424],[0.5206094821428572,0.05303030303030303,0.7972909896437893],[0.5154026964285715,0.06060606060606061,0.7890194513625822],[0.5103623571428572,0.06818181818181818,0.776902995629905],[0.505499,0.07575757575757576,0.7634811194305804],[0.5008212857142859,0.08333333333333333,0.7521669010790052],[0.4963337142857143,0.09090909090909091,0.7413762112732911],[0.49203883928571435,0.09848484848484848,0.7279386489937376],[0.48793519642857147,0.10606060606060606,0.7123846494557244],[0.4840194285714287,0.11363636363636363,0.6975722254661038],[0.4802846785714287,0.12121212121212122,0.6842602117560993],[0.4767225714285716,0.12878787878787878,0.6701600436787609],[0.473322017857143,0.13636363636363635,0.652985448822358],[0.4700708750000001,0.14393939393939395,0.6342218855008256],[0.46695535714285724,0.15151515151515152,0.6192735005006255],[0.4639611964285715,0.1590909090909091,0.611736795899518],[0.4610736785714288,0.16666666666666666,0.607415962474266],[0.45827812500000015,0.17424242424242425,0.5974847110566394],[0.45556044642857146,0.18181818181818182,0.5791808083153372],[0.45290716071428583,0.1893939393939394,0.5602011456421133],[0.4503061607142859,0.19696969696969696,0.5500957143116495],[0.44774623214285725,0.20454545454545456,0.5499219389109099],[0.445218125,0.21212121212121213,0.5535686753984191],[0.4427135000000002,0.2196969696969697,0.557302112312179],[0.4402259642857143,0.22727272727272727,0.56324420026072],[0.4377500357142859,0.23484848484848486,0.5726806584733442],[0.43528205357142874,0.24242424242424243,0.5803228658222754],[0.4328188214285716,0.25,0.5788608092822829],[0.43035714285714294,0.25757575757575757,0.5681980202090555],[0.4484029642857143,0,0.6537542315547963],[0.44823975000000016,0.007575757575757576,0.6578111433092637],[0.4480792857142858,0.015151515151515152,0.6611074974106106],[0.4479233392857145,0.022727272727272728,0.6608173423812008],[0.44777366071428576,0.030303030303030304,0.657842620343228],[0.44763178571428586,0.03787878787878788,0.655814112029241],[0.44749805357142874,0.045454545454545456,0.6570580616389838],[0.4473722678571429,0.05303030303030303,0.6600142660120446],[0.4472530000000001,0.06060606060606061,0.6609949981016915],[0.44713810714285723,0.06818181818181818,0.6582412745063698],[0.44702407142857153,0.07575757575757576,0.653567107254836],[0.4469066785714287,0.08333333333333333,0.6497099345850018],[0.44678037500000006,0.09090909090909091,0.6467494903258811],[0.4466390892857144,0.09848484848484848,0.6422741782251378],[0.4464756785714287,0.10606060606060606,0.6350545511808242],[0.44628269642857155,0.11363636363636363,0.6268596304872869],[0.44605214285714306,0.12121212121212122,0.619379992055799],[0.4457759642857144,0.12878787878787878,0.6108450414894118],[0.44544625000000004,0.13636363636363635,0.5984608586758469],[0.44505533928571445,0.14393939393939395,0.5841890426317636],[0.44459646428571437,0.15151515151515152,0.5746822592418767],[0.4440633928571431,0.1590909090909091,0.5731870476918111],[0.44345150000000016,0.16666666666666666,0.5736790093121305],[0.4427570357142858,0.17424242424242425,0.5666020851466896],[0.4419783035714286,0.18181818181818182,0.5503731197190204],[0.44111475000000017,0.1893939393939394,0.5339936757910468],[0.44016821428571434,0.19696969696969696,0.5270912161951044],[0.4391417321428572,0.20454545454545456,0.530101475369947],[0.43804082142857154,0.21212121212121213,0.5365980595127093],[0.43687208928571436,0.2196969696969697,0.5430226105382414],[0.4356442678571429,0.22727272727272727,0.5517708887993549],[0.4343670892857145,0.23484848484848486,0.5641891854664833],[0.4330521428571429,0.24242424242424243,0.5748168568968679],[0.4317114821428572,0.25,0.5761643166578057],[0.43035714285714294,0.25757575757575757,0.5681980202090555],[0.4642857142857144,0.7272727272727273,0.5358003916201172],[0.46317917857142876,0.7348484848484849,0.5310137400415941],[0.462075017857143,0.7424242424242424,0.5284461219750236],[0.4609748214285715,0.75,0.5274242794707179],[0.45988023214285717,0.7575757575757576,0.5270389592248673],[0.4587925892857144,0.7651515151515151,0.5270966096897389],[0.45771241071428576,0.7727272727272727,0.5274808812005217],[0.45663978571428593,0.7803030303030303,0.52752396922988],[0.4555738214285716,0.7878787878787878,0.5276079129810951],[0.4545132142857143,0.7954545454545454,0.5275487643232695],[0.45345562500000014,0.803030303030303,0.5270030924855474],[0.45239828571428575,0.8106060606060606,0.5265096326722739],[0.4513375892857144,0.8181818181818182,0.5260444137961842],[0.4502696428571429,0.8257575757575758,0.52566018723119],[0.4491899821428572,0.8333333333333334,0.5253135952732014],[0.4480940357142859,0.8409090909090909,0.5250451190958368],[0.4469771250000001,0.8484848484848485,0.5248778907983064],[0.4458345892857144,0.8560606060606061,0.5246092348377872],[0.44466210714285714,0.8636363636363636,0.5245182945254767],[0.4434556071428573,0.8712121212121212,0.5245783420990748],[0.4422117500000002,0.8787878787878788,0.5249584486334453],[0.44092758928571435,0.8863636363636364,0.5250673822431339],[0.4396011250000002,0.8939393939393939,0.5249422531676121],[0.438230892857143,0.9015151515151515,0.5251632366283336],[0.436816517857143,0.9090909090909091,0.5249701045746278],[0.43535814285714297,0.9166666666666666,0.524710332898326],[0.4338569821428573,0.9242424242424242,0.5237403877979484],[0.43231471428571433,0.9318181818181818,0.5234265013921465],[0.4307339107142859,0.9393939393939394,0.5221337556378904],[0.42911751785714286,0.946969696969697,0.520729858948374],[0.42746916071428587,0.9545454545454546,0.519040781230055],[0.42579271428571447,0.9621212121212122,0.517138960112262],[0.4240925178571429,0.9696969696969697,0.5151665890882628],[0.42237300000000005,0.9772727272727273,0.5134263031347749],[0.4206389107142857,0.9848484848484849,0.5115029230203729],[0.4188950714285715,0.9924242424242424,0.5093688220669847],[0.4171462321428573,1,0.5075205014195806],[0.4642857142857144,0.7272727272727273,0.5357264857616942],[0.46195928571428574,0.7348484848484849,0.5288363113479749],[0.4596383571428572,0.7424242424242424,0.5245796455269448],[0.4573275535714287,0.75,0.52192773912478],[0.45503148214285727,0.7575757575757576,0.5199211194098514],[0.4527545535714287,0.7651515151515151,0.5184557368815009],[0.4505002142857144,0.7727272727272727,0.5170130369944745],[0.4482715000000002,0.7803030303030303,0.515706777539773],[0.44607050000000015,0.7878787878787878,0.5140795751904562],[0.4438988392857144,0.7954545454545454,0.5121291976390225],[0.4417572857142859,0.803030303030303,0.5100266636111761],[0.4396461964285715,0.8106060606060606,0.5077723476551554],[0.43756532142857146,0.8181818181818182,0.505873702706425],[0.43551410714285715,0.8257575757575758,0.5032309952089977],[0.4334916250000001,0.8333333333333334,0.5017724294585881],[0.4314968392857144,0.8409090909090909,0.4997939607892662],[0.4295285535714286,0.8484848484848485,0.4981900403584551],[0.42758557142857145,0.8560606060606061,0.4969953213691822],[0.425666642857143,0.8636363636363636,0.4959362637518979],[0.4237705892857143,0.8712121212121212,0.4954283913224066],[0.42189621428571444,0.8787878787878788,0.4949213428990398],[0.42004235714285715,0.8863636363636364,0.49482529374875606],[0.4182078214285715,0.8939393939393939,0.49432954170026283],[0.41639139285714294,0.9015151515151515,0.4940869393152146],[0.41459182142857154,0.9090909090909091,0.4934648296729773],[0.41280778571428584,0.9166666666666666,0.4927600047977473],[0.41103791071428586,0.9242424242424242,0.49167790497282976],[0.40928076785714296,0.9318181818181818,0.4902471606655768],[0.40753489285714295,0.9393939393939394,0.48833444768500767],[0.4057988035714286,0.946969696969697,0.4855832260719193],[0.4040710892857144,0.9545454545454546,0.4828102057513495],[0.4023502857142859,0.9621212121212122,0.47961938436168533],[0.40063510714285727,0.9696969696969697,0.47573869006247255],[0.3989242500000001,0.9772727272727273,0.4717292560427189],[0.39721658928571435,0.9848484848484849,0.46753560421733575],[0.39551100000000006,0.9924242424242424,0.46345618960469853],[0.393806392857143,1,0.45944327977729144],[0.480357142857143,0.3181818181818182,0.49841622254872725],[0.4819539642857144,0.32575757575757575,0.5006850859583315],[0.4835310892857144,0.3333333333333333,0.5008384409891076],[0.48507016071428577,0.3409090909090909,0.5002652922926084],[0.4865528571428573,0.3484848484848485,0.4984970650405273],[0.48796121428571443,0.3560606060606061,0.4961904771323402],[0.4892788750000001,0.36363636363636365,0.4934615036846193],[0.4904903571428573,0.3712121212121212,0.4902150543905715],[0.4915821071428572,0.3787878787878788,0.4876913183956252],[0.49254158928571445,0.38636363636363635,0.4846726993040989],[0.49335871428571443,0.3939393939393939,0.4817988356157924],[0.49402464285714304,0.4015151515151515,0.47960966108941355],[0.4945331071428572,0.4090909090909091,0.4777716180456741],[0.4948792321428573,0.4166666666666667,0.47535157198507716],[0.49506080357142873,0.42424242424242425,0.47443706002399905],[0.49507696428571446,0.4318181818181818,0.4733523683252711],[0.4949294642857143,0.4393939393939394,0.4731657084651268],[0.4946213571428573,0.44696969696969696,0.47292267160412177],[0.49415812500000017,0.45454545454545453,0.47396649259906337],[0.49354644642857165,0.4621212121212121,0.4750242168246185],[0.49279517857142857,0.4696969696969697,0.4771453134631656],[0.49191425000000016,0.4772727272727273,0.4796923913043359],[0.49091551785714294,0.48484848484848486,0.4820477603751068],[0.4898117321428573,0.49242424242424243,0.4853830824751885],[0.48861721428571436,0.5,0.4889089297732359],[0.48734696428571445,0.5075757575757576,0.49222470045526723],[0.4860171785714287,0.5151515151515151,0.49602131616589906],[0.4846444464285715,0.5227272727272727,0.49959133019223173],[0.4832459285714286,0.5303030303030303,0.5023966066071021],[0.48183894642857145,0.5378787878787878,0.5060550889273709],[0.48044066071428587,0.5454545454545454,0.5092293403029634],[0.47906794642857153,0.553030303030303,0.5122393747488628],[0.4777367500000002,0.5606060606060606,0.514499054235659],[0.47646235714285734,0.5681818181818182,0.517590021064936],[0.475258267857143,0.5757575757575758,0.5199995198471365],[0.4741369464285716,0.5833333333333334,0.521892366789135],[0.4731084107142858,0.5909090909090909,0.5245946724022739],[0.47218133928571443,0.5984848484848485,0.5270327716879671],[0.4713615714285716,0.6060606060606061,0.5299856051268812],[0.4706535000000001,0.6136363636363636,0.5328076013751187],[0.4700586250000002,0.6212121212121212,0.5352899273168154],[0.4695770357142857,0.6287878787878788,0.5386994998596993],[0.46920630357142873,0.6363636363636364,0.5420599766194795],[0.46894283928571434,0.6439393939393939,0.5454685004272957],[0.46878108928571444,0.6515151515151515,0.548978931319846],[0.46871480357142864,0.6590909090909091,0.5519996628634374],[0.46873650000000006,0.6666666666666666,0.5551034991701896],[0.4688383750000001,0.6742424242424242,0.5575581684699547],[0.469012267857143,0.6818181818181818,0.5601710619275962],[0.4692499285714286,0.6893939393939394,0.5617520899700693],[0.46954339285714297,0.696969696969697,0.5624233703050584],[0.4698848571428573,0.7045454545454546,0.5622679178041468],[0.47026710714285713,0.7121212121212122,0.5614484062582846],[0.4706832142857143,0.7196969696969697,0.5595474540924048],[0.4711268571428573,0.7272727272727273,0.5561858387059798],[0.4715919821428572,0.7348484848484849,0.5522003158457726],[0.47207305357142865,0.7424242424242424,0.5474524524828295],[0.47256467857142864,0.75,0.54136556418528],[0.47306180357142874,0.7575757575757576,0.5341761257289903],[0.4735594285714286,0.7651515151515151,0.526798798894334],[0.4740527142857144,0.7727272727272727,0.5189479831584817],[0.47453694642857147,0.7803030303030303,0.5107609129960236],[0.47500751785714285,0.7878787878787878,0.5024264805746057],[0.47545998214285734,0.7954545454545454,0.49415579626338246],[0.475890267857143,0.803030303030303,0.4860285489455793],[0.4762945000000001,0.8106060606060606,0.4788861537480467],[0.47666946428571433,0.8181818181818182,0.47228881612912477],[0.4770123214285715,0.8257575757575758,0.46633400852240386],[0.47732117857142864,0.8333333333333334,0.4618470854262666],[0.4775946071428573,0.8409090909090909,0.45785849127050365],[0.47783225000000007,0.8484848484848485,0.45546602694219057],[0.47803433928571426,0.8560606060606061,0.45360272436524596],[0.4782021607142859,0.8636363636363636,0.4527529343397825],[0.4783374464285715,0.8712121212121212,0.45301979246875684],[0.4784428571428572,0.8787878787878788,0.45428142075535743],[0.4785213750000002,0.8863636363636364,0.45568467322190376],[0.4785764642857145,0.8939393939393939,0.4574419187196317],[0.4786117857142858,0.9015151515151515,0.4593336719807736],[0.4786310714285716,0.9090909090909091,0.46130198290186725],[0.47863801785714294,0.9166666666666666,0.46287628405797676],[0.4786360178571429,0.9242424242424242,0.4645230078614848],[0.47862823214285716,0.9318181818181818,0.4650404687258822],[0.4786172678571429,0.9393939393939394,0.46552404046565893],[0.4786054107142859,0.946969696969697,0.4650792269776032],[0.47859417857142866,0.9545454545454546,0.46454558562930226],[0.4785848214285716,0.9621212121212122,0.4630423287830735],[0.47857783928571446,0.9696969696969697,0.4615984303416839],[0.47857348214285733,0.9772727272727273,0.46004706651970073],[0.4785713214285716,0.9848484848484849,0.4584521652104731],[0.47857082142857144,0.9924242424242424,0.4573044894799572],[0.47857142857142865,1,0.45678633944680097],[0.480357142857143,0.3181818181818182,0.49841622254872725],[0.48041323214285736,0.32575757575757575,0.4964703695400147],[0.4804586250000001,0.3333333333333333,0.4928882501146134],[0.48048310714285736,0.3409090909090909,0.48789896793905563],[0.48047639285714294,0.3484848484848485,0.48219434357373053],[0.48042841071428577,0.3560606060606061,0.4760352273938665],[0.48032960714285733,0.36363636363636365,0.4691302957795499],[0.4801708214285716,0.3712121212121212,0.46218226115394534],[0.4799436964285715,0.3787878787878788,0.45545944987512227],[0.4796403392857143,0.38636363636363635,0.4490007849960267],[0.4792541428571431,0.3939393939393939,0.4426520275520399],[0.4787791428571429,0.4015151515151515,0.43701142097164103],[0.47821091071428573,0.4090909090909091,0.4315586428418907],[0.4775459464285716,0.4166666666666667,0.42638837895748455],[0.47678251785714293,0.42424242424242425,0.4228100499602569],[0.4759198571428573,0.4318181818181818,0.418925220648491],[0.4749591964285716,0.4393939393939394,0.41621344645588254],[0.4739027321428573,0.44696969696969696,0.41454113351671945],[0.4727545892857144,0.45454545454545453,0.4131942580510337],[0.47151980357142875,0.4621212121212121,0.41303065538045214],[0.47020512500000017,0.4696969696969697,0.4136740093987778],[0.468818017857143,0.4772727272727273,0.4147119724592691],[0.46736732142857146,0.48484848484848486,0.41683554111619026],[0.4658624107142859,0.49242424242424243,0.4185207235328286],[0.4643135357142858,0.5,0.42118374652671253],[0.4627312500000001,0.5075757575757576,0.4239145627517668],[0.46112657142857144,0.5151515151515151,0.42641287441228315],[0.45951057142857155,0.5227272727272727,0.4296848079684792],[0.4578944464285715,0.5303030303030303,0.43208731018958435],[0.4562892500000001,0.5378787878787878,0.43511810958982694],[0.454705892857143,0.5454545454545454,0.43728265382404125],[0.4531550357142859,0.553030303030303,0.439244013129828],[0.45164705357142876,0.5606060606060606,0.4409384543789224],[0.45019201785714297,0.5681818181818182,0.4429830682671655],[0.448799642857143,0.5757575757575758,0.44449846047632197],[0.44747933928571443,0.5833333333333334,0.4458379498507442],[0.44624012500000004,0.5909090909090909,0.4474206109235373],[0.44509075000000003,0.5984848484848485,0.44916846275144334],[0.4440394821428572,0.6060606060606061,0.4511283088823466],[0.4430943392857144,0.6136363636363636,0.4526198648416044],[0.44226276785714297,0.6212121212121212,0.4547567224700279],[0.4415518571428573,0.6287878787878788,0.45734124015311983],[0.44096796428571433,0.6363636363636364,0.46004255695890905],[0.4405169642857143,0.6439393939393939,0.46255662960930194],[0.4402037142857145,0.6515151515151515,0.46536569645234604],[0.4400324107142858,0.6590909090909091,0.46867483013959094],[0.4400058392857144,0.6666666666666666,0.47140771387092195],[0.4401259464285716,0.6742424242424242,0.47422481102819963],[0.44039285714285725,0.6818181818181818,0.47670815574110503],[0.4408056964285715,0.6893939393939394,0.47881474987185696],[0.44136142857142874,0.696969696969697,0.48070813616331876],[0.4420558750000001,0.7045454545454546,0.4817666843949986],[0.4428824821428572,0.7121212121212122,0.48209811464029223],[0.4438335535714287,0.7196969696969697,0.4818463283324356],[0.4448990892857145,0.7272727272727273,0.48064954183688613],[0.4460679642857143,0.7348484848484849,0.4786863697176248],[0.44732712500000016,0.7424242424242424,0.47566586290297647],[0.44866258928571434,0.75,0.4719981217502515],[0.4500590714285716,0.7575757575757576,0.4677733974030016],[0.4515007321428573,0.7651515151515151,0.4629151322012751],[0.45297117857142866,0.7727272727272727,0.45723055365767507],[0.45445394642857145,0.7803030303030303,0.45191210350818434],[0.4559329285714287,0.7878787878787878,0.44620169611805666],[0.4573924464285715,0.7954545454545454,0.4406045071694659],[0.45881803571428575,0.803030303030303,0.43540514837789224],[0.4601960535714287,0.8106060606060606,0.4307739493002806],[0.46151485714285717,0.8181818181818182,0.42638476831246525],[0.4627639285714286,0.8257575757575758,0.4229499212544465],[0.46393516071428575,0.8333333333333334,0.42051700571637435],[0.465021767857143,0.8409090909090909,0.41892074105155835],[0.4660195000000001,0.8484848484848485,0.4179535526262162],[0.4669254107142859,0.8560606060606061,0.41840915310354104],[0.4677389107142859,0.8636363636363636,0.41919898544698353],[0.46846055357142863,0.8712121212121212,0.4209609802163757],[0.46909283928571444,0.8787878787878788,0.4235625323533551],[0.469639142857143,0.8863636363636364,0.42603805649904036],[0.4701041785714286,0.8939393939393939,0.4288666447962757],[0.47049325000000014,0.9015151515151515,0.43193519865896024],[0.4708124107142858,0.9090909090909091,0.43419847380884596],[0.47106796428571435,0.9166666666666666,0.43682159992436365],[0.4712664642857144,0.9242424242424242,0.4386393424535758],[0.47141444642857144,0.9318181818181818,0.4397065802043892],[0.47151825,0.9393939393939394,0.4402821559734739],[0.4715841071428572,0.946969696969697,0.4404221770869588],[0.4716177857142858,0.9545454545454546,0.4393881992197253],[0.4716248214285716,0.9621212121212122,0.43858094289222715],[0.47161032142857146,0.9696969696969697,0.43723113096835164],[0.47157912500000004,0.9772727272727273,0.43571439038553644],[0.4715356071428572,0.9848484848484849,0.4344743510594037],[0.471484,0.9924242424242424,0.4335560187062928],[0.47142857142857153,1,0.43315384378970917],[0.5357142857142858,0.7575757575757576,0.4218917625529347],[0.5367273214285716,0.7651515151515151,0.41117331561146453],[0.537728875,0.7727272727272727,0.40600487952246234],[0.5387081785714286,0.7803030303030303,0.4067680140674637],[0.5396545,0.7878787878787878,0.41252613890317774],[0.5405573214285715,0.7954545454545454,0.4216142672539866],[0.5414070178571431,0.803030303030303,0.43316521507423034],[0.5421945357142857,0.8106060606060606,0.4459995898885561],[0.5429120178571428,0.8181818181818182,0.4583483554206874],[0.5435523214285716,0.8257575757575758,0.4704196106719412],[0.5441100178571429,0.8333333333333334,0.48020149225204967],[0.5445805,0.8409090909090909,0.48724305906377513],[0.5449611785714287,0.8484848484848485,0.4917177569054073],[0.5452504642857143,0.8560606060606061,0.49307056521519094],[0.5454488035714287,0.8636363636363636,0.4911280681586956],[0.5455576964285714,0.8712121212121212,0.487347123546363],[0.5455805178571429,0.8787878787878788,0.4814849342280611],[0.5455215357142859,0.8863636363636364,0.47333337123861385],[0.5453864642857145,0.8939393939393939,0.4635514896585054],[0.5451816964285715,0.9015151515151515,0.45380429124528304],[0.5449144285714286,0.9090909090909091,0.4438489638668848],[0.5445921964285715,0.9166666666666666,0.43455272153282964],[0.5442226071428573,0.9242424242424242,0.42525646421684504],[0.543813267857143,0.9318181818181818,0.4182148974051196],[0.5433711964285716,0.9393939393939394,0.41242207442058987],[0.5429031250000002,0.946969696969697,0.408918640089135],[0.5424147500000001,0.9545454545454546,0.4056233197409264],[0.5419112321428572,0.9621212121212122,0.40600487952246234],[0.5413966785714287,0.9696969696969697,0.4080167578946595],[0.5408746071428572,0.9772727272727273,0.40961237833650516],[0.5403473571428572,0.9848484848484849,0.41374019956348745],[0.5398170357142859,0.9924242424242424,0.4167580096308185],[0.5392857142857144,1,0.42102457850727487],[0.5357142857142858,0.7575757575757576,0.4218917625529347],[0.5368219464285714,0.7651515151515151,0.40961237833650516],[0.5379176607142858,0.7727272727272727,0.40447862541438895],[0.5389903035714286,0.7803030303030303,0.4036461245356152],[0.5400287678571429,0.7878787878787878,0.4084330008430816],[0.5410222142857144,0.7954545454545454,0.4174170796932321],[0.5419608214285715,0.803030303030303,0.42865583406571206],[0.5428353571428572,0.8106060606060606,0.4405883416674918],[0.5436379642857144,0.8181818181818182,0.45304117168221114],[0.5443615000000002,0.8257575757575758,0.4651124269334648],[0.5450006785714286,0.8333333333333334,0.4732639899229121],[0.5455510892857144,0.8409090909090909,0.47995868011998766],[0.5460103928571429,0.8484848484848485,0.48516181435780564],[0.5463773035714286,0.8560606060606061,0.48568212178881576],[0.5466525892857144,0.8636363636363636,0.4842252489964441],[0.5468380714285715,0.8712121212121212,0.47923024372380196],[0.5469374464285716,0.8787878787878788,0.47263961800931426],[0.5469552321428572,0.8863636363636364,0.4641758615721032],[0.5468974642857143,0.8939393939393939,0.45415116785993276],[0.5467706785714288,0.9015151515151515,0.4441611573146486],[0.54658225,0.9090909090909091,0.4336161561714681],[0.5463398035714286,0.9166666666666666,0.4235914624592978],[0.5460510000000001,0.9242424242424242,0.4141564425119095],[0.5457234464285716,0.9318181818181818,0.407114875700184],[0.5453641428571429,0.9393939393939394,0.40100987424982015],[0.5449797142857143,0.946969696969697,0.3961883147754677],[0.5445758035714287,0.9545454545454546,0.39355206448967256],[0.5441574821428573,0.9621212121212122,0.392997058909847],[0.5437286785714287,0.9696969696969697,0.3935867476565587],[0.5432928392857145,0.9772727272727273,0.3963964437406434],[0.5428521785714286,0.9848484848484849,0.398512371613499],[0.5424086785714287,0.9924242424242424,0.40180769196170774],[0.5419642857142858,1,0.4054672230170445],[0.6000000000000001,0.30303030303030304,0.44670795049915774],[0.59958825,0.3106060606060606,0.43154689700913107],[0.599189392857143,0.3181818181818182,0.4182340143472133],[0.5988152142857143,0.32575757575757575,0.40757922562436044],[0.598477517857143,0.3333333333333333,0.3978260943670401],[0.5981878392857144,0.3409090909090909,0.38964244008451726],[0.5979564464285715,0.3484848484848485,0.38189712709648854],[0.5977929464285715,0.3560606060606061,0.37851291896031647],[0.5977055535714286,0.36363636363636365,0.3723407085740342],[0.5977017142857143,0.3712121212121212,0.3710006648682189],[0.5977871964285716,0.3787878787878788,0.3664066958855154],[0.5979668928571429,0.38636363636363635,0.36427223536581826],[0.5982439642857144,0.3939393939393939,0.361671327451809],[0.5986206785714286,0.4015151515151515,0.36089509870038927],[0.5990976071428572,0.4090909090909091,0.35982426528648626],[0.5996744285714287,0.4166666666666667,0.3597955748914163],[0.6003492142857144,0.42424242424242425,0.3600667328341688],[0.601119267857143,0.4318181818181818,0.36045800090604685],[0.6019803035714286,0.4393939393939394,0.3622139879216934],[0.6029274285714287,0.44696969696969696,0.3629105727356762],[0.6039542857142858,0.45454545454545453,0.3643287621859744],[0.6050539642857145,0.4621212121212121,0.3660239075857571],[0.6062183571428571,0.4696969696969697,0.3675337115351951],[0.6074388392857144,0.4772727272727273,0.3715969157000694],[0.6087058392857144,0.48484848484848486,0.3747554959773626],[0.6100094464285715,0.49242424242424243,0.37757218862254266],[0.6113391071428573,0.5,0.38188135112468247],[0.6126840178571431,0.5075757575757576,0.3851775554067341],[0.6140331964285716,0.5151515151515151,0.3891177129842928],[0.615375642857143,0.5227272727272727,0.3921532916200588],[0.6167005,0.5303030303030303,0.3965472518433976],[0.6179971964285715,0.5378787878787878,0.3994906316847718],[0.6192557500000001,0.5454545454545454,0.40379183878232555],[0.6204666607142858,0.553030303030303,0.40539100994147226],[0.6216214821428572,0.5606060606060606,0.4090949773998259],[0.6227123750000001,0.5681818181818182,0.41065834174737104],[0.6237329464285715,0.5757575757575758,0.411944210795968],[0.6246775535714287,0.5833333333333334,0.41381007528286406],[0.6255421607142859,0.5909090909090909,0.4152150207074485],[0.6263236071428573,0.5984848484848485,0.414424604068754],[0.6270203750000001,0.6060606060606061,0.41365295978777344],[0.6276317857142858,0.6136363636363636,0.41356420683717593],[0.6281587500000002,0.6212121212121212,0.41292504775912164],[0.6286028750000001,0.6287878787878788,0.41050700927708295],[0.6289671785714287,0.6363636363636364,0.4103661491755437],[0.6292552321428572,0.6439393939393939,0.4078722422023124],[0.6294716071428572,0.6515151515151515,0.4066665114948273],[0.6296212678571429,0.6590909090909091,0.4045257136189345],[0.6297098214285716,0.6666666666666666,0.4027607074817047],[0.629743,0.6742424242424242,0.4000040324462635],[0.6297267857142859,0.6818181818181818,0.3982906390563005],[0.6296670892857144,0.6893939393939394,0.397245739362432],[0.6295696785714288,0.696969696969697,0.3949157346983731],[0.6294400892857144,0.7045454545454546,0.3945708956261408],[0.6292833392857144,0.7121212121212122,0.39439762961100555],[0.6291041607142858,0.7196969696969697,0.3940884025852908],[0.6289065178571429,0.7272727272727273,0.39389816204398626],[0.6286940178571431,0.7348484848484849,0.3956140723981121],[0.6284694107142857,0.7424242424242424,0.395140778262],[0.6282350535714287,0.75,0.3983270751089429],[0.6279925357142859,0.7575757575757576,0.4007763958598619],[0.6277430357142859,0.7651515151515151,0.40256895376551655],[0.6274871607142859,0.7727272727272727,0.40646973883224313],[0.6272251785714286,0.7803030303030303,0.40885433764754747],[0.6269570178571429,0.7878787878787878,0.4126333645728988],[0.6266824285714285,0.7954545454545454,0.4171170365903257],[0.626401017857143,0.803030303030303,0.42136411397644996],[0.6261124285714287,0.8106060606060606,0.4269457816460366],[0.6258163571428573,0.8181818181818182,0.4291422973178903],[0.6255126428571428,0.8257575757575758,0.4337704400818756],[0.6252014107142858,0.8333333333333334,0.4368355780646248],[0.6248829821428573,0.8409090909090909,0.43946358828917276],[0.6245580178571429,0.8484848484848485,0.4405908286677955],[0.624227375,0.8560606060606061,0.4396913885278351],[0.6238923035714287,0.8636363636363636,0.4366136357604128],[0.6235541607142858,0.8712121212121212,0.4321400915273553],[0.6232142857142858,0.8787878787878788,0.4237833659947813],[0.6000000000000001,0.30303030303030304,0.44670795049915774],[0.600065267857143,0.3106060606060606,0.42711847834784933],[0.6001400892857144,0.3181818181818182,0.40791336759890096],[0.6002332500000002,0.32575757575757575,0.392457709446391],[0.6003535535714287,0.3333333333333333,0.3769918336179346],[0.6005095714285714,0.3409090909090909,0.3648569950577112],[0.6007090357142858,0.3484848484848485,0.354157754949912],[0.6009591785714287,0.3560606060606061,0.34353059290513177],[0.6012662142857144,0.36363636363636365,0.3354238258850105],[0.6016357857142858,0.3712121212121212,0.32772560110152743],[0.6020722142857143,0.3787878787878788,0.3215272921939856],[0.6025791607142859,0.38636363636363635,0.3164198775040017],[0.6031588750000001,0.3939393939393939,0.3115807741901573],[0.6038128571428574,0.4015151515151515,0.30873751858390197],[0.6045411250000002,0.4090909090909091,0.3050950219824526],[0.6053429464285714,0.4166666666666667,0.30336333565652074],[0.6062161071428571,0.42424242424242425,0.30336333565652074],[0.6071576785714287,0.4318181818181818,0.30312283074160806],[0.6081633214285715,0.4393939393939394,0.3051226486605252],[0.6092280535714287,0.44696969696969696,0.3058080419731413],[0.6103456250000001,0.45454545454545453,0.3081386608963115],[0.6115092857142859,0.4621212121212121,0.31152152065882477],[0.6127112321428573,0.4696969696969697,0.31570553910351346],[0.6139432678571429,0.4772727272727273,0.31912032535787754],[0.6151965357142858,0.48484848484848486,0.3244828823079353],[0.6164619107142858,0.49242424242424243,0.3285264601451118],[0.6177300000000001,0.5,0.3339118046100006],[0.6189913214285715,0.5075757575757576,0.33964726178632],[0.6202365535714286,0.5151515151515151,0.3444989349390487],[0.6214564642857144,0.5227272727272727,0.35046244704683266],[0.622642375,0.5303030303030303,0.3565709243048499],[0.6237859285714287,0.5378787878787878,0.36152215237937496],[0.6248796250000002,0.5454545454545454,0.3662706899291473],[0.6259165000000001,0.553030303030303,0.3684181847275445],[0.626890642857143,0.5606060606060606,0.3736508633304162],[0.6277968035714286,0.5681818181818182,0.37804435911393924],[0.6286310357142858,0.5757575757575758,0.3804248528805495],[0.6293900357142859,0.5833333333333334,0.38343617577238953],[0.6300718750000001,0.5909090909090909,0.3835432066770264],[0.6306752678571429,0.5984848484848485,0.38504553464362373],[0.63120025,0.6060606060606061,0.38517130794211574],[0.6316474821428572,0.6136363636363636,0.3863138298888697],[0.6320188035714286,0.6212121212121212,0.38743303995325884],[0.6323165357142858,0.6287878787878788,0.3857075411642271],[0.6325439642857144,0.6363636363636364,0.38335049411734773],[0.6327047857142857,0.6439393939393939,0.38241208597865267],[0.6328033035714288,0.6515151515151515,0.38028812779156335],[0.6328441071428572,0.6590909090909091,0.3790064686651673],[0.6328321071428573,0.6666666666666666,0.3771154345366432],[0.6327723035714287,0.6742424242424242,0.3753442558444428],[0.6326697321428572,0.6818181818181818,0.374160159043214],[0.6325293035714287,0.6893939393939394,0.3719236266375578],[0.632355660714286,0.696969696969697,0.3710218493165892],[0.63215325,0.7045454545454546,0.37036736372461493],[0.6319259464285715,0.7121212121212122,0.37022287799612696],[0.6316773035714286,0.7196969696969697,0.36976546470532773],[0.6314101785714287,0.7272727272727273,0.3704940659027386],[0.6311270178571431,0.7348484848484849,0.37196638506446633],[0.6308295357142858,0.7424242424242424,0.37252706879558783],[0.6305190178571429,0.75,0.37593007925333305],[0.6301960892857144,0.7575757575757576,0.3783129551467403],[0.6298610535714286,0.7651515151515151,0.38148155833489583],[0.6295136607142858,0.7727272727272727,0.3852168829717777],[0.6291535000000001,0.7803030303030303,0.38921016647148693],[0.6287798928571431,0.7878787878787878,0.3939136084133425],[0.6283921428571428,0.7954545454545454,0.3989607657827149],[0.6279895714285716,0.803030303030303,0.40461484111777063],[0.627571642857143,0.8106060606060606,0.4093622400408979],[0.6271381785714286,0.8181818181818182,0.41506259455630407],[0.6266892321428572,0.8257575757575758,0.4205039264918855],[0.6262254107142858,0.8333333333333334,0.4254173701401095],[0.6257476071428574,0.8409090909090909,0.4275592017691404],[0.6252573392857143,0.8484848484848485,0.431344416231392],[0.6247563928571429,0.8560606060606061,0.4329515128312656],[0.6242471964285716,0.8636363636363636,0.43160745396833355],[0.6237323035714286,0.8712121212121212,0.4302124415630344],[0.6232142857142858,0.8787878787878788,0.4245121769392055],[0.6785714285714287,0.30303030303030304,0.37172164026349364],[0.6782546071428572,0.3106060606060606,0.37126284863517667],[0.677939267857143,0.3181818181818182,0.37174737921844414],[0.6776271071428572,0.32575757575757575,0.3711017329648988],[0.6773198392857145,0.3333333333333333,0.36782779183014436],[0.6770192142857144,0.3409090909090909,0.36200771671578064],[0.6767271785714287,0.3484848484848485,0.35549197068513594],[0.6764458035714287,0.3560606060606061,0.35103817263521275],[0.6761773035714288,0.36363636363636365,0.3508080202336124],[0.6759238571428573,0.3712121212121212,0.3550821849483458],[0.67568775,0.3787878787878788,0.36200209849220294],[0.6754711607142859,0.38636363636363635,0.36855902984715416],[0.6752760892857145,0.3939393939393939,0.37227797923504835],[0.6751043928571429,0.4015151515151515,0.37258518370027516],[0.6749574642857143,0.4090909090909091,0.37102048596100096],[0.6748364464285715,0.4166666666666667,0.37017349755636164],[0.6747418928571429,0.42424242424242425,0.3720128440279712],[0.6746739821428571,0.4318181818181818,0.3766465001420274],[0.6746321071428573,0.4393939393939394,0.3822449775365586],[0.6746153392857144,0.44696969696969696,0.3861261212936576],[0.6746219464285714,0.45454545454545453,0.3862871620542877],[0.6746498392857143,0.4621212121212121,0.3824669498046298],[0.6746962857142859,0.4696969696969697,0.37616391720960024],[0.6747582142857144,0.4772727272727273,0.3697140017773563],[0.6748320000000002,0.48484848484848486,0.3650453328939642],[0.6749138571428573,0.49242424242424243,0.3628359177807761],[0.6750000000000002,0.5,0.36245503218606945],[0.6785714285714287,0.30303030303030304,0.37172164026349364],[0.678147875,0.3106060606060606,0.37064300126430005],[0.6777273750000001,0.3181818181818182,0.37051405179674546],[0.6773131250000001,0.32575757575757575,0.3693080963603172],[0.6769082321428573,0.3333333333333333,0.36559630833474344],[0.6765159285714287,0.3409090909090909,0.35951583230303724],[0.6761394285714286,0.3484848484848485,0.35291695154537267],[0.675782,0.3560606060606061,0.34849446572818893],[0.6754469107142859,0.36363636363636365,0.3483193119899316],[0.6751373392857144,0.3712121212121212,0.3526056869772405],[0.6748563035714287,0.3787878787878788,0.35947900672022676],[0.6746066964285716,0.38636363636363635,0.36594612140758315],[0.6743909464285717,0.3939393939393939,0.36953442836988465],[0.6742113035714286,0.4015151515151515,0.36963353383379466],[0.6740693035714286,0.4090909090909091,0.3677293755349932],[0.6739661250000001,0.4166666666666667,0.3663989052821543],[0.6739021071428573,0.42424242424242425,0.36768679689123923],[0.6738770892857144,0.4318181818181818,0.37186062762384037],[0.6738899464285716,0.4393939393939394,0.37726789065164673],[0.6739390357142857,0.44696969696969696,0.3813355144857356],[0.6740216964285715,0.45454545454545453,0.3820472160666247],[0.6741347857142859,0.4621212121212121,0.3790189036666858],[0.6742743392857143,0.4696969696969697,0.3735805681170125],[0.6744358928571429,0.4772727272727273,0.3679322608248298],[0.6746142857142858,0.48484848484848486,0.3639437715425737],[0.6748041071428573,0.49242424242424243,0.3623105015117929],[0.6750000000000002,0.5,0.36245503218606945],[0.417857142857143,0.30303030303030304,0.5620708904487605],[0.4171171071428573,0.3106060606060606,0.5594486183032266],[0.4163767678571429,0.3181818181818182,0.5545619323811618],[0.4156359107142859,0.32575757575757575,0.5467129144768542],[0.4148943214285715,0.3333333333333333,0.538776941453494],[0.4141518035714287,0.3409090909090909,0.5348584028002621],[0.41340828571428584,0.3484848484848485,0.5366946629943862],[0.41266371428571436,0.3560606060606061,0.5416801697236997],[0.4119181250000001,0.36363636363636365,0.5443848125178469],[0.41117162500000004,0.3712121212121212,0.5411365204464658],[0.4104243750000001,0.3787878787878788,0.5337677033477884],[0.40967662500000007,0.38636363636363635,0.5279513886977392],[0.40892857142857153,0.3939393939393939,0.5268765401267194],[0.417857142857143,0.30303030303030304,0.5620708904487605],[0.4170901250000001,0.3106060606060606,0.559339325127229],[0.41632483928571445,0.3181818181818182,0.5543640510557916],[0.415562517857143,0.32575757575757575,0.5464420262088335],[0.41480439285714304,0.3333333333333333,0.538441511033013],[0.4140515178571429,0.3409090909090909,0.5344822514952903],[0.41330444642857145,0.3484848484848485,0.5363252985034961],[0.4125634285714287,0.3560606060606061,0.541352065466764],[0.4118281964285715,0.36363636363636365,0.544089548650464],[0.41109823214285723,0.3712121212121212,0.540861721894835],[0.4103724642857144,0.3787878787878788,0.5335451467844651],[0.40964964285714295,0.38636363636363635,0.5278324771229767],[0.40892857142857153,0.3939393939393939,0.5268765401267194],[0.17678571428571438,0.18181818181818182,0.8166818613371095],[0.1776559464285715,0.1893939393939394,0.8218268656883106],[0.17851292857142867,0.19696969696969696,0.8257262274717309],[0.17934389285714292,0.20454545454545456,0.8292370029486605],[0.1801360535714287,0.21212121212121213,0.8311131750030805],[0.180876767857143,0.2196969696969697,0.8317197633663138],[0.18155398214285726,0.22727272727272727,0.8311201416003168],[0.18215600000000012,0.23484848484848486,0.8292633112169335],[0.18267194642857154,0.24242424242424243,0.8262264591171566],[0.18309141071428578,0.25,0.8230035014886282],[0.18340521428571444,0.25757575757575757,0.8186017057161399],[0.1836048035714287,0.26515151515151514,0.8138359689112551],[0.18368316071428584,0.2727272727272727,0.8091861922410133],[0.18363407142857155,0.2803030303030303,0.8039891107027298],[0.18345308928571435,0.2878787878787879,0.7990584378355342],[0.18313671428571437,0.29545454545454547,0.7944361979517878],[0.18268337500000006,0.30303030303030304,0.7902404037104805],[0.18209248214285725,0.3106060606060606,0.7865801085767371],[0.1813653035714287,0.3181818181818182,0.7835801569694183],[0.1805041071428572,0.32575757575757575,0.7817416644677926],[0.1795128214285715,0.3333333333333333,0.7805634405829437],[0.17839617857142867,0.3409090909090909,0.7798459110314633],[0.17716028571428585,0.3484848484848485,0.7808179985477653],[0.17581180357142867,0.3560606060606061,0.7824576358986008],[0.17435825000000013,0.36363636363636365,0.7846657026381301],[0.1728074821428573,0.3712121212121212,0.7876382073505308],[0.1711676964285715,0.3787878787878788,0.7920414563701846],[0.16944708928571442,0.38636363636363635,0.7960940533289443],[0.16765376785714292,0.3939393939393939,0.8011988162173997],[0.1657955892857144,0.4015151515151515,0.8058394089648333],[0.16387991071428576,0.4090909090909091,0.8109135787531672],[0.16191373214285726,0.4166666666666667,0.8154787674492237],[0.15990332142857153,0.42424242424242425,0.8198536706581868],[0.15785451785714294,0.4318181818181818,0.8232877386558696],[0.1557723750000001,0.4393939393939394,0.8262690077970515],[0.15366155357142872,0.44696969696969696,0.8281555773105724],[0.15152605357142862,0.45454545454545453,0.8294127559640995],[0.14936955357142867,0.4621212121212121,0.8286727085725198],[0.14719525000000014,0.4696969696969697,0.8272309675289842],[0.14500610714285722,0.4772727272727273,0.8242219668362228],[0.14280483928571439,0.48484848484848486,0.8202053564722193],[0.14059403571428583,0.49242424242424243,0.815204583156704],[0.13837612500000013,0.5,0.8092198266728317],[0.13615350000000015,0.5075757575757576,0.8027872303511365],[0.13392857142857154,0.5151515151515151,0.7960443133228701],[0.17678571428571438,0.18181818181818182,0.8166818613371095],[0.17604962500000007,0.1893939393939394,0.8188769687075864],[0.17531475000000013,0.19696969696969696,0.8199706345821091],[0.17458126785714298,0.20454545454545456,0.819888353825073],[0.17384935714285724,0.21212121212121213,0.8184513320893424],[0.1731189821428573,0.2196969696969697,0.8163969649649686],[0.17238900000000013,0.22727272727272727,0.8125435677413785],[0.1716577857142858,0.23484848484848486,0.8085735212143865],[0.17092276785714294,0.24242424242424243,0.803093071460775],[0.17018094642857154,0.25,0.797483177835934],[0.1694285357142858,0.25757575757575757,0.7907402458257382],[0.1686614642857144,0.26515151515151514,0.7842512425393232],[0.16787541071428577,0.2727272727272727,0.7774557689022291],[0.16706605357142865,0.2803030303030303,0.771057301416027],[0.16622939285714294,0.2878787878787879,0.7642244328827998],[0.16536171428571436,0.29545454545454547,0.7581182628419318],[0.16446021428571436,0.30303030303030304,0.7529417814567663],[0.1635226071428572,0.3106060606060606,0.7481294957967993],[0.16254789285714294,0.3181818181818182,0.7443130739753151],[0.16153580357142872,0.32575757575757575,0.7419140775257224],[0.16048742857142864,0.3333333333333333,0.7400155823962873],[0.15940455357142866,0.3409090909090909,0.7394287551981178],[0.15829028571428583,0.3484848484848485,0.7395229166252794],[0.157148267857143,0.3560606060606061,0.7411246347124479],[0.15598305357142864,0.36363636363636365,0.7430214518657746],[0.1547996071428572,0.3712121212121212,0.746879014065777],[0.15360325000000005,0.3787878787878788,0.7507512585567289],[0.1523994464285715,0.38636363636363635,0.7555785111643067],[0.15119357142857157,0.3939393939393939,0.7606919336080366],[0.14999082142857156,0.4015151515151515,0.7668502407637052],[0.1487958750000001,0.4090909090909091,0.7729653999622976],[0.1476130357142858,0.4166666666666667,0.778708872470921],[0.14644573214285725,0.42424242424242425,0.7848452910275313],[0.1452969285714287,0.4318181818181818,0.7901821839322863],[0.144168517857143,0.4393939393939394,0.7954807980070656],[0.14306191071428578,0.44696969696969696,0.7994713847594574],[0.14197739285714295,0.45454545454545453,0.8027379248210189],[0.14091478571428584,0.4621212121212121,0.8049247022386712],[0.1398729285714287,0.4696969696969697,0.8063353407964811],[0.13885023214285722,0.4772727272727273,0.8067456059550164],[0.13784435714285723,0.48484848484848486,0.8060858317419145],[0.1368525892857144,0.49242424242424243,0.8042244917977396],[0.13587167857142868,0.5,0.8020695359984312],[0.13489814285714294,0.5075757575757576,0.7992059648957189],[0.13392857142857154,0.5151515151515151,0.7958739987478545],[0.1857142857142858,0.21212121212121213,0.7870993972365384],[0.18808289285714294,0.2196969696969697,0.7966640408383105],[0.19044387500000012,0.22727272727272727,0.8027710648491624],[0.1927901607142858,0.23484848484848486,0.805202302411126],[0.19511473214285724,0.24242424242424243,0.8048431555961826],[0.19741066071428576,0.25,0.8034639041807601],[0.19967171428571442,0.25757575757575757,0.8005103066634394],[0.20189198214285722,0.26515151515151514,0.7961760644112488],[0.20406621428571442,0.2727272727272727,0.7910621026180555],[0.20618944642857154,0.2803030303030303,0.7855747911407145],[0.20825746428571443,0.2878787878787879,0.779848727634217],[0.21026630357142864,0.29545454545454547,0.7733200821622379],[0.21221258928571438,0.30303030303030304,0.7681400051139827],[0.21409314285714295,0.3106060606060606,0.7612207208111664],[0.21590516071428578,0.3181818181818182,0.7558806817012079],[0.2176460357142858,0.32575757575757575,0.7502802866196956],[0.21931325000000013,0.3333333333333333,0.7446366087437409],[0.2209044464285715,0.3409090909090909,0.739504998237549],[0.22241726785714297,0.3484848484848485,0.7363969070628072],[0.22384941071428577,0.3560606060606061,0.7331597166012156],[0.2251985357142858,0.36363636363636365,0.7298342825746307],[0.22646235714285723,0.3712121212121212,0.7284813693913402],[0.22763860714285725,0.3787878787878788,0.7258016115821596],[0.22872514285714293,0.38636363636363635,0.7225492294440139],[0.22971992857142873,0.3939393939393939,0.7236746570091622],[0.23062108928571437,0.4015151515151515,0.7220301205673672],[0.23142712500000015,0.4090909090909091,0.7220487131419269],[0.2321367857142858,0.4166666666666667,0.722025101620971],[0.2327493571428572,0.42424242424242425,0.7207972426035546],[0.23326450000000015,0.4318181818181818,0.721246925218711],[0.23368260714285724,0.4393939393939394,0.7214200414145508],[0.23400451785714296,0.44696969696969696,0.720884377505762],[0.23423194642857154,0.45454545454545453,0.7202935950781937],[0.23436707142857155,0.4621212121212121,0.7202443195119351],[0.2344130000000001,0.4696969696969697,0.7189173400486792],[0.23437325000000006,0.4772727272727273,0.7191419791002086],[0.2342522321428572,0.48484848484848486,0.7170201333651846],[0.23405473214285724,0.49242424242424243,0.7148297902483016],[0.23378619642857157,0.5,0.7127848467576087],[0.23345235714285723,0.5075757575757576,0.7108203712104775],[0.23305941071428576,0.5151515151515151,0.7079466273776072],[0.2326136785714287,0.5227272727272727,0.7052475129154604],[0.23212173214285728,0.5303030303030303,0.7030049577741291],[0.23159021428571439,0.5378787878787878,0.6996309223681149],[0.231025767857143,0.5454545454545454,0.6964487755156547],[0.2304350714285715,0.553030303030303,0.693609639940023],[0.2298247321428572,0.5606060606060606,0.6899577646506815],[0.2292013214285715,0.5681818181818182,0.6866473874632847],[0.22857142857142868,0.5757575757575758,0.6835464127050745],[0.1857142857142858,0.21212121212121213,0.7870993972365384],[0.1872706071428572,0.2196969696969697,0.7930346983709977],[0.1888260892857144,0.22727272727272727,0.7949367591996636],[0.19037969642857158,0.23484848484848486,0.7946470835919991],[0.1919304285714287,0.24242424242424243,0.7931697305019456],[0.19347714285714293,0.25,0.7875916584954487],[0.1950185357142858,0.25757575757575757,0.7830566134416276],[0.19655316071428583,0.26515151515151514,0.7762957480617718],[0.19807937500000006,0.2727272727272727,0.7685302993604408],[0.19959539285714292,0.2803030303030303,0.7610157829969827],[0.20109921428571442,0.2878787878787879,0.7533395067402764],[0.2025887321428572,0.29545454545454547,0.7437438505443555],[0.20406167857142868,0.30303030303030304,0.7367926397496886],[0.20551569642857156,0.3106060606060606,0.7294118371073789],[0.20694825000000014,0.3181818181818182,0.7225937257747489],[0.20835682142857154,0.32575757575757575,0.7149560429685389],[0.2097386964285715,0.3333333333333333,0.7084514884392611],[0.21109117857142862,0.3409090909090909,0.7035289058140173],[0.21241139285714294,0.3484848484848485,0.6986942820971056],[0.21369644642857152,0.3560606060606061,0.6955453352005071],[0.21494335714285728,0.36363636363636365,0.6906925983307809],[0.2161490535714287,0.3712121212121212,0.6888180143608924],[0.217310392857143,0.3787878787878788,0.687195591247099],[0.21842425000000013,0.38636363636363635,0.6853515254676841],[0.2194875000000001,0.3939393939393939,0.6843152403833013],[0.22049703571428583,0.4015151515151515,0.6831643435379342],[0.22145003571428581,0.4090909090909091,0.6837761456126477],[0.2223437500000001,0.4166666666666667,0.6845167173717611],[0.22317598214285722,0.42424242424242425,0.6843656545762049],[0.2239447500000001,0.4318181818181818,0.6857424339732533],[0.22464887500000005,0.4393939393939394,0.6859032350230109],[0.22528753571428584,0.44696969696969696,0.6868755622501854],[0.22586091071428577,0.45454545454545453,0.6883273112226542],[0.22636966071428585,0.4621212121212121,0.6894579075534941],[0.2268154821428572,0.4696969696969697,0.6915616551176333],[0.22720057142857156,0.4772727272727273,0.6907783099496818],[0.22752805357142866,0.48484848484848486,0.6898812519365183],[0.22780150000000013,0.49242424242424243,0.6914844532347115],[0.22802516071428586,0.5,0.6910955373257711],[0.22820355357142869,0.5075757575757576,0.69042367269553],[0.22834155357142863,0.5151515151515151,0.6909187205933349],[0.22844414285714296,0.5227272727272727,0.6906007890665571],[0.22851628571428578,0.5303030303030303,0.6891991546484012],[0.2285629107142858,0.5378787878787878,0.6889707251686981],[0.22858873214285721,0.5454545454545454,0.6868099563807278],[0.22859830357142863,0.553030303030303,0.6860815050026126],[0.2285958571428573,0.5606060606060606,0.685207728907955],[0.2285855178571429,0.5681818181818182,0.6845296467769547],[0.22857142857142868,0.5757575757575758,0.6842625039913189],[0.8258928571428572,0,0.19603351156141843],[0.8275216607142859,0.007575757575757576,0.1987231274802366],[0.829150517857143,0.015151515151515152,0.2010518586802846],[0.8307790714285714,0.022727272727272728,0.2032869078749163],[0.8324070000000001,0.030303030303030304,0.20514426262583332],[0.8340338392857144,0.03787878787878788,0.2067741617224675],[0.835658642857143,0.045454545454545456,0.20785675595105976],[0.8372803035714287,0.05303030303030303,0.20902005783408642],[0.8388971964285715,0.06060606060606061,0.20942007535281615],[0.8405074285714287,0.06818181818181818,0.21000706735221064],[0.8421086607142859,0.07575757575757576,0.2100621559071309],[0.8436983035714286,0.08333333333333333,0.2098080024544068],[0.8452734285714286,0.09090909090909091,0.20958679426474222],[0.8468309821428573,0.09848484848484848,0.20888809699869418],[0.848367767857143,0.10606060606060606,0.20813841622642007],[0.8498806071428572,0.11363636363636363,0.20687239823446418],[0.8513664821428572,0.12121212121212122,0.2056690646357055],[0.8528225892857144,0.12878787878787878,0.20430395616176908],[0.8542465892857145,0.13636363636363635,0.20278155240958762],[0.8556364642857144,0.14393939393939395,0.20097780300256624],[0.856991017857143,0.15151515151515152,0.19909878438153364],[0.8583094642857143,0.1590909090909091,0.1971927383596101],[0.8595918928571429,0.16666666666666666,0.195061603828271],[0.8608389464285715,0.17424242424242425,0.19288483433955167],[0.8620521250000001,0.18181818181818182,0.19053542807673787],[0.8632333214285716,0.1893939393939394,0.188356621045601],[0.8643851607142858,0.19696969696969696,0.1859599318131576],[0.8655105535714287,0.20454545454545456,0.18356635882205855],[0.86661275,0.21212121212121213,0.18102540859007024],[0.8676950357142859,0.2196969696969697,0.17868524617778284],[0.8687606607142859,0.22727272727272727,0.17633723323441627],[0.8698127321428574,0.23484848484848486,0.17376005669679911],[0.8708538214285715,0.24242424242424243,0.17116064697574396],[0.871886142857143,0.25,0.16866617068919007],[0.8729111250000001,0.25757575757575757,0.16583719286178675],[0.873929625,0.26515151515151514,0.16283963836319437],[0.8749414821428572,0.2727272727272727,0.15993834276189936],[0.8759460178571429,0.2803030303030303,0.15724865193343346],[0.8769413928571429,0.2878787878787879,0.15387021184013447],[0.8779253035714286,0.29545454545454547,0.15081299929811204],[0.8788944107142859,0.30303030303030304,0.14733278695744478],[0.8798449642857143,0.3106060606060606,0.14436955605942958],[0.8807724107142857,0.3181818181818182,0.14085118474422284],[0.8816718750000002,0.32575757575757575,0.13762990509180306],[0.8825380357142859,0.3333333333333333,0.1344939475281161],[0.8833653214285715,0.3409090909090909,0.1310735730140334],[0.8841480000000002,0.3484848484848485,0.12800984333266088],[0.884880267857143,0.3560606060606061,0.12509852482050327],[0.8855563392857144,0.36363636363636365,0.12259134385769908],[0.8861705357142858,0.3712121212121212,0.1198146529643919],[0.8867174464285715,0.3787878787878788,0.11755055380838134],[0.8871918214285714,0.38636363636363635,0.11546584827668803],[0.887588892857143,0.3939393939393939,0.11327301815950136],[0.8879041607142858,0.4015151515151515,0.11139704087016548],[0.888133767857143,0.4090909090909091,0.10987135607541468],[0.8882742142857145,0.4166666666666667,0.10862345123627316],[0.8883228392857143,0.42424242424242425,0.10707187766727647],[0.8882773750000001,0.4318181818181818,0.10573797655257282],[0.8881366071428572,0.4393939393939394,0.10457047972927487],[0.88789975,0.44696969696969696,0.1029242353475121],[0.8875671607142858,0.45454545454545453,0.10159806490845136],[0.8871398035714286,0.4621212121212121,0.10025274756343788],[0.8866197500000002,0.4696969696969697,0.09913344760747153],[0.8860097142857144,0.4772727272727273,0.09806144560306436],[0.8853135714285716,0.48484848484848486,0.09685502572682034],[0.8845358392857143,0.49242424242424243,0.09628500825359519],[0.8836820714285715,0.5,0.09631925694452463],[0.8827584285714287,0.5075757575757576,0.09660004826797157],[0.8817720357142858,0.5151515151515151,0.09763672288252238],[0.8807304464285716,0.5227272727272727,0.09954278388637548],[0.8796419821428573,0.5303030303030303,0.10190616828945051],[0.8785153571428573,0.5378787878787878,0.1050502760228075],[0.8773598392857144,0.5454545454545454,0.10803170996521437],[0.8761849107142858,0.553030303030303,0.11065465629757756],[0.8750000000000001,0.5606060606060606,0.11111433185973736],[0.8142857142857144,0,0.18834165409799014],[0.8154280178571429,0.007575757575757576,0.19037975084688316],[0.8165707500000001,0.015151515151515152,0.19220084932831238],[0.8177139821428573,0.022727272727272728,0.19388102778048424],[0.8188578035714288,0.030303030303030304,0.19542505045699252],[0.8200021785714288,0.03787878787878788,0.1963585295408688],[0.82114675,0.045454545454545456,0.19697684875493238],[0.8222910000000002,0.05303030303030303,0.19756190808541613],[0.8234341785714288,0.06060606060606061,0.19748042137064564],[0.8245753928571429,0.06818181818181818,0.19742440393609395],[0.8257136607142858,0.07575757575757576,0.1972251292912765],[0.826848017857143,0.08333333333333333,0.1964833439958702],[0.8279776607142859,0.09090909090909091,0.1955526515508885],[0.8291019107142857,0.09848484848484848,0.19458519345081451],[0.8302205357142858,0.10606060606060606,0.19334597813080645],[0.8313335714285714,0.11363636363636363,0.19194895814694893],[0.8324417142857145,0.12121212121212122,0.19017060311049858],[0.8335460000000001,0.12878787878787878,0.18819929580349684],[0.8346481785714286,0.13636363636363635,0.18640985413918656],[0.8357503392857143,0.14393939393939395,0.18425043372487507],[0.8368551607142857,0.15151515151515152,0.181644566792188],[0.8379656250000002,0.1590909090909091,0.17931340851955443],[0.8390850000000002,0.16666666666666666,0.17710570134633413],[0.8402166607142859,0.17424242424242425,0.17425947931802976],[0.8413639285714287,0.18181818181818182,0.17176756494142728],[0.8425300535714286,0.1893939393939394,0.16903002183000926],[0.8437177857142858,0.19696969696969696,0.16658652904968146],[0.844929625,0.20454545454545456,0.16387411063410273],[0.84616725,0.21212121212121213,0.16131245537548947],[0.847431892857143,0.2196969696969697,0.15874509200172135],[0.8487237500000001,0.22727272727272727,0.15629500717239578],[0.8500424821428572,0.23484848484848486,0.15355572615715107],[0.8513866071428573,0.24242424242424243,0.15143040461447366],[0.8527541250000001,0.25,0.14876591339149478],[0.854141892857143,0.25757575757575757,0.14610955735625641],[0.8555463035714286,0.26515151515151514,0.14360820436404345],[0.8569628214285715,0.2727272727272727,0.14105234711216236],[0.8583864642857144,0.2803030303030303,0.13827932679159255],[0.8598116071428573,0.2878787878787879,0.13562748031714586],[0.8612323035714287,0.29545454545454547,0.1328866561631585],[0.8626421964285714,0.30303030303030304,0.12990926734172756],[0.8640347857142857,0.3106060606060606,0.12725294127034825],[0.8654033750000002,0.3181818181818182,0.12434490380075998],[0.8667412857142859,0.32575757575757575,0.12142555497436872],[0.8680418928571431,0.3333333333333333,0.1184029806534438],[0.8692986607142857,0.3409090909090909,0.11557672953721684],[0.8705053571428572,0.3484848484848485,0.11291442567595092],[0.8716559107142857,0.3560606060606061,0.11047297043804062],[0.8727447321428572,0.36363636363636365,0.1081549063718254],[0.8737665000000002,0.3712121212121212,0.10567586147269817],[0.8747165357142859,0.3787878787878788,0.10382539840936966],[0.8755904464285715,0.38636363636363635,0.10195195306612613],[0.8763846607142858,0.3939393939393939,0.10017560560823417],[0.8770960357142857,0.4015151515151515,0.09879825689786324],[0.8777222678571429,0.4090909090909091,0.09751035030684878],[0.8782615892857144,0.4166666666666667,0.09646624465524589],[0.8787132142857144,0.42424242424242425,0.09516070433316232],[0.8790768750000001,0.4318181818181818,0.09440838674128907],[0.8793533750000002,0.4393939393939394,0.09338720344188306],[0.8795440357142859,0.44696969696969696,0.09234828153790116],[0.8796512678571429,0.45454545454545453,0.09137196911746878],[0.8796779464285714,0.4621212121212121,0.09042514113437199],[0.8796278750000001,0.4696969696969697,0.08947175106613645],[0.8795053392857145,0.4772727272727273,0.08893126297603553],[0.8793152857142859,0.48484848484848486,0.0884904496631671],[0.8790630357142858,0.49242424242424243,0.08856702230504832],[0.8787543928571429,0.5,0.08904573989965402],[0.8783953392857143,0.5075757575757576,0.09009423525661224],[0.8779921071428571,0.5151515151515151,0.09185320367623728],[0.8775510178571431,0.5227272727272727,0.09442109141753936],[0.8770784464285716,0.5303030303030303,0.09774051769037857],[0.8765807321428573,0.5378787878787878,0.10151717747086252],[0.8760642321428572,0.5454545454545454,0.10583702208876468],[0.8755352142857143,0.553030303030303,0.1091734528516323],[0.8750000000000001,0.5606060606060606,0.11111433185973736],[0.5892857142857144,0.5151515151515151,0.3491302388901671],[0.5890518750000001,0.5227272727272727,0.3520359691426061],[0.5888202142857144,0.5303030303030303,0.3562540265312106],[0.5885924642857143,0.5378787878787878,0.36112324352343106],[0.5883703571428572,0.5454545454545454,0.36617275305574143],[0.5881554642857144,0.553030303030303,0.3719194766430752],[0.5879488571428572,0.5606060606060606,0.3767992558956218],[0.5877513392857144,0.5681818181818182,0.38160049987351746],[0.5875631071428573,0.5757575757575758,0.3845184403985319],[0.5873840714285715,0.5833333333333334,0.38796657642805304],[0.5872134464285714,0.5909090909090909,0.39043504408492474],[0.5870501250000001,0.5984848484848485,0.3921844090877143],[0.5868924107142859,0.6060606060606061,0.39244181361914865],[0.5867382857142859,0.6136363636363636,0.39253374273880887],[0.5865852500000002,0.6212121212121212,0.3919488332276204],[0.5864306250000002,0.6287878787878788,0.39066957120995077],[0.5862713928571429,0.6363636363636364,0.38891906758051614],[0.5861045000000001,0.6439393939393939,0.3880258299593854],[0.5859268571428573,0.6515151515151515,0.38607762478773516],[0.5857353928571428,0.6590909090909091,0.38434607329916914],[0.5855273035714288,0.6666666666666666,0.38286534927496907],[0.5853000000000002,0.6742424242424242,0.38153180772657447],[0.5850513214285715,0.6818181818181818,0.38180113787392295],[0.5847794821428571,0.6893939393939394,0.38104760674575694],[0.5844833750000001,0.696969696969697,0.38238890893365357],[0.5841622857142859,0.7045454545454546,0.38420973774035116],[0.5838163392857143,0.7121212121212122,0.3861335673126391],[0.5834461071428573,0.7196969696969697,0.3893983844523035],[0.5830530000000002,0.7272727272727273,0.39221691987481716],[0.5826388214285715,0.7348484848484849,0.3954640733195532],[0.5822061964285716,0.7424242424242424,0.3990407842683904],[0.5817580357142857,0.75,0.40224777116002863],[0.5812979464285715,0.7575757575757576,0.40516981673373725],[0.5808297321428572,0.7651515151515151,0.4069537600299062],[0.5803571428571429,0.7727272727272727,0.4066080370238309],[0.5892857142857144,0.5151515151515151,0.35033794721235156],[0.5887191785714286,0.5227272727272727,0.350205506955214],[0.5881588035714286,0.5303030303030303,0.35047041743334817],[0.5876099285714287,0.5378787878787878,0.35416475151100735],[0.5870778750000001,0.5454545454545454,0.35673352318615237],[0.5865676964285714,0.553030303030303,0.360370955895417],[0.586083517857143,0.5606060606060606,0.36352625513014064],[0.5856289285714286,0.5681818181818182,0.3668463256259501],[0.5852064642857143,0.5757575757575758,0.3688233410481067],[0.5848180535714287,0.5833333333333334,0.37070204504861887],[0.584464392857143,0.5909090909090909,0.37271865771055096],[0.584145625,0.5984848484848485,0.3730529644863163],[0.5838606607142858,0.6060606060606061,0.37277334175337357],[0.5836079464285716,0.6136363636363636,0.3728911746292091],[0.5833849642857143,0.6212121212121212,0.3719220385530266],[0.5831888035714287,0.6287878787878788,0.3709678544425254],[0.5830159107142858,0.6363636363636364,0.36965895816822475],[0.5828625535714286,0.6439393939393939,0.36742717503423294],[0.5827247142857144,0.6515151515151515,0.3672241848708896],[0.5825983571428572,0.6590909090909091,0.3653250155546251],[0.5824795892857144,0.6666666666666666,0.364572563125386],[0.5823646607142857,0.6742424242424242,0.36462327695688035],[0.5822502500000002,0.6818181818181818,0.36465093359881195],[0.5821333214285714,0.6893939393939394,0.36600616898118116],[0.5820114464285716,0.696969696969697,0.36827389376414055],[0.5818826071428571,0.7045454545454546,0.37032710727993984],[0.5817455178571429,0.7121212121212122,0.373630982309916],[0.58159925,0.7196969696969697,0.37785112218672656],[0.5814436607142858,0.7272727272727273,0.3824461998322163],[0.581278910714286,0.7348484848484849,0.3867768763851762],[0.5811058035714287,0.7424242424242424,0.39268529993803997],[0.580925392857143,0.75,0.39729892521230065],[0.5807393392857143,0.7575757575757576,0.40133830810920573],[0.5805493392857143,0.7651515151515151,0.40536198994395245],[0.5803571428571429,0.7727272727272727,0.40684544067932876],[0.37321428571428583,0.2727272727272727,0.6615783195283486],[0.3717142857142859,0.2803030303030303,0.6540817065706911],[0.3702163214285716,0.2878787878787879,0.6474502550982056],[0.36872396428571436,0.29545454545454547,0.641817274319943],[0.36724073214285724,0.30303030303030304,0.6387026510239217],[0.36577051785714293,0.3106060606060606,0.6374750317173778],[0.3643186785714287,0.3181818181818182,0.6376433986415534],[0.36289123214285723,0.32575757575757575,0.6394579200559143],[0.3614952500000001,0.3333333333333333,0.6417751750979342],[0.3601382321428573,0.3409090909090909,0.644569454776522],[0.35882810714285723,0.3484848484848485,0.6473286617580555],[0.35757273214285723,0.3560606060606061,0.6490403022622623],[0.35637928571428584,0.36363636363636365,0.6501393166856309],[0.35525428571428586,0.3712121212121212,0.6504199132439937],[0.35420225000000005,0.3787878787878788,0.6498072721812261],[0.3532264464285715,0.38636363636363635,0.6483154315653071],[0.3523271964285715,0.3939393939393939,0.6458602079341492],[0.3515031250000001,0.4015151515151515,0.6428204043942527],[0.350749517857143,0.4090909090909091,0.6397619034062899],[0.3500599107142858,0.4166666666666667,0.6358709614672714],[0.3494247500000001,0.42424242424242425,0.6325599100930454],[0.34883314285714295,0.4318181818181818,0.628823297010223],[0.3482720892857144,0.4393939393939394,0.6257320455242846],[0.34772785714285726,0.44696969696969696,0.6230523476428222],[0.34718616071428576,0.45454545454545453,0.6209572296700984],[0.346632767857143,0.4621212121212121,0.6194653890541794],[0.34605453571428585,0.4696969696969697,0.6187311546512616],[0.34543916071428576,0.4772727272727273,0.6183102523227524],[0.3447768571428573,0.48484848484848486,0.618941605815516],[0.34405930357142867,0.49242424242424243,0.6196197179103755],[0.3432815000000001,0.5,0.6205223042555394],[0.34244026785714293,0.5075757575757576,0.6220328423195247],[0.3415359285714286,0.5151515151515151,0.6230710600728183],[0.3405705535714287,0.5227272727272727,0.62472190390695],[0.33954930357142865,0.5303030303030303,0.6258536388644348],[0.33847869642857153,0.5378787878787878,0.6272425985701997],[0.3373674285714287,0.5454545454545454,0.6283930459576805],[0.3362250357142858,0.553030303030303,0.6291038935685859],[0.33506205357142865,0.5606060606060606,0.6300906483939079],[0.3338892678571429,0.5681818181818182,0.6309511504989928],[0.3327173392857144,0.5757575757575758,0.6315217073216814],[0.3315566428571429,0.5833333333333334,0.6329059776835],[0.330416517857143,0.5909090909090909,0.6335840897783593],[0.3293056785714287,0.5984848484848485,0.6352068724584619],[0.3282311250000001,0.6060606060606061,0.6370214088547523],[0.3271990535714287,0.6136363636363636,0.6393456754397973],[0.3262136785714287,0.6212121212121212,0.6416606082827385],[0.32527828571428585,0.6287878787878788,0.6440176253657589],[0.32439421428571436,0.6363636363636364,0.6474502550982056],[0.32356189285714293,0.6439393939393939,0.6495453880528591],[0.3227799821428573,0.6515151515151515,0.6509015972606486],[0.3220463035714287,0.6590909090909091,0.651846282827821],[0.3213571964285716,0.6666666666666666,0.6515750349934913],[0.3207083571428572,0.6742424242424242,0.6499101530913802],[0.3200943035714287,0.6818181818181818,0.646533645666992],[0.31950910714285724,0.6893939393939394,0.6413612992943796],[0.31894591071428585,0.696969696969697,0.6350572179642823],[0.31839760714285725,0.7045454545454546,0.6284164327496933],[0.31785714285714295,0.7121212121212122,0.6227998122384886],[0.37321428571428583,0.2727272727272727,0.6615783195283486],[0.3697585892857144,0.2803030303030303,0.6490449766242788],[0.36631776785714293,0.2878787878787879,0.6370564815518065],[0.3629061785714287,0.29545454545454547,0.6277125966818128],[0.35953812500000004,0.30303030303030304,0.6203095159102764],[0.35622778571428576,0.3106060606060606,0.614753692069147],[0.35298858928571436,0.3181818181818182,0.6114636903059253],[0.3498335357142859,0.32575757575757575,0.6093077756631262],[0.34677458928571436,0.3333333333333333,0.608017022505499],[0.34382308928571437,0.3409090909090909,0.6068572263939849],[0.3409888392857144,0.3484848484848485,0.6056413079744122],[0.3382808035714287,0.3560606060606061,0.6040839963264015],[0.33570592857142867,0.36363636363636365,0.602330256600186],[0.33327014285714296,0.3712121212121212,0.5999779138791824],[0.33097705357142865,0.3787878787878788,0.5968305550671151],[0.32882900000000015,0.38636363636363635,0.5933371286645932],[0.32682596428571437,0.3939393939393939,0.5894087618655828],[0.3249666250000001,0.4015151515151515,0.5856487619907479],[0.3232473750000001,0.4090909090909091,0.5816736365896417],[0.3216634821428572,0.4166666666666667,0.5784233968674202],[0.32020830357142865,0.42424242424242425,0.5746961325086312],[0.3188743571428572,0.4318181818181818,0.5717031025527599],[0.31765287500000006,0.4393939393939394,0.5696360307521358],[0.3165346607142858,0.44696969696969696,0.5678776316458332],[0.3155100000000001,0.45454545454545453,0.5671808071209777],[0.3145692142857143,0.4621212121212121,0.5667458817064187],[0.3137029107142858,0.4696969696969697,0.5667224949144062],[0.31290217857142866,0.4772727272727273,0.5678448811478578],[0.31215914285714297,0.48484848484848486,0.5687240956829386],[0.31146669642857155,0.49242424242424243,0.5709127458417834],[0.3108194107142858,0.5,0.5722128477234439],[0.31021276785714297,0.5075757575757576,0.5739806105357091],[0.3096442857142858,0.5151515151515151,0.5760570310603667],[0.30911244642857155,0.5227272727272727,0.5782924548032368],[0.3086177500000001,0.5303030303030303,0.5803595116219313],[0.3081616785714287,0.5378787878787878,0.5821459868641927],[0.30774748214285724,0.5454545454545454,0.5841943462348209],[0.3073791964285715,0.553030303030303,0.5856908612127565],[0.3070621428571429,0.5606060606060606,0.5875989148132384],[0.30680221428571436,0.5681818181818182,0.5894602098116247],[0.3066059821428572,0.5757575757575758,0.5922100680691249],[0.30648021428571437,0.5833333333333334,0.5941555315476694],[0.30643167857142867,0.5909090909090909,0.5973262771517492],[0.30646696428571446,0.5984848484848485,0.6007682705901587],[0.30659187500000007,0.6060606060606061,0.6043037962146893],[0.30681169642857153,0.6136363636363636,0.6084472735580414],[0.30713019642857153,0.6212121212121212,0.6134044944043825],[0.30755028571428583,0.6287878787878788,0.6176882625359514],[0.3080727321428573,0.6363636363636364,0.6220468803875042],[0.3086971964285715,0.6439393939393939,0.6266299575074319],[0.3094207678571429,0.6515151515151515,0.6305583243064424],[0.3102393035714287,0.6590909090909091,0.6334204121981301],[0.3111460000000001,0.6666666666666666,0.6350291568102531],[0.31213275000000007,0.6742424242424242,0.6357961267292169],[0.31318914285714294,0.6818181818181818,0.6347766214059195],[0.3143036607142858,0.6893939393939394,0.6323354358427409],[0.31546262500000005,0.696969696969697,0.6290805067765732],[0.31665185714285726,0.7045454545454546,0.6254233878118924],[0.31785714285714295,0.7121212121212122,0.6227998122384886],[0.35714285714285726,0.4393939393939394,0.5119431220741302],[0.35729383928571434,0.44696969696969696,0.514864703208023],[0.35745851785714294,0.45454545454545453,0.5212191388033056],[0.35764921428571445,0.4621212121212121,0.5291074243449387],[0.35787825000000006,0.4696969696969697,0.5378721677466172],[0.3581575357142858,0.4772727272727273,0.5471481844757926],[0.3584973750000001,0.48484848484848486,0.5561320535789296],[0.3589071785714287,0.49242424242424243,0.5641664129335819],[0.35939446428571437,0.5,0.571616447072298],[0.35996566071428576,0.5075757575757576,0.5771674467321155],[0.3606249107142858,0.5151515151515151,0.5814037371289705],[0.3613751607142858,0.5227272727272727,0.5838870968238055],[0.36221696428571437,0.5303030303030303,0.5850557172918189],[0.36314971428571435,0.5378787878787878,0.5848366065722901],[0.3641706607142858,0.5454545454545454,0.5833758085143789],[0.36527600000000005,0.553030303030303,0.5805272642869957],[0.3664602500000001,0.5606060606060606,0.5768752991060769],[0.36771725000000005,0.5681818181818182,0.572785082522241],[0.3690397857142858,0.5757575757575758,0.5681835776289786],[0.37042030357142863,0.5833333333333334,0.5633629769981167],[0.3718510178571429,0.5909090909090909,0.5585423613853253],[0.3733241607142858,0.5984848484848485,0.5541599821935212],[0.37483241071428586,0.6060606060606061,0.5508732015451506],[0.3763688214285716,0.6136363636363636,0.5478785835047483],[0.37792735714285725,0.6212121212121212,0.5459795640077791],[0.3795025714285715,0.6287878787878788,0.5455413126048623],[0.38109007142857154,0.6363636363636364,0.5457604383063207],[0.3826860535714287,0.6439393939393939,0.5470751475692831],[0.3842879285714286,0.6515151515151515,0.5494124184691691],[0.3858933571428572,0.6590909090909091,0.5529913617255078],[0.3875000000000001,0.6666666666666666,0.5564242161868977],[0.35714285714285726,0.4393939393939394,0.5119431220741302],[0.35666887500000016,0.44696969696969696,0.5126735211030857],[0.3562164821428572,0.45454545454545453,0.516252449377495],[0.3558052321428572,0.4621212121212121,0.5220956266272101],[0.35545469642857147,0.4696969696969697,0.5291074243449387],[0.3551839107142858,0.4772727272727273,0.5364113696887061],[0.3550095000000001,0.48484848484848486,0.5434962192948738],[0.3549469285714287,0.49242424242424243,0.5500697656096855],[0.3550088392857144,0.5,0.5555477433449229],[0.35520642857142865,0.5075757575757576,0.560295307069275],[0.35554755357142864,0.5151515151515151,0.5638012134191042],[0.3560383750000001,0.5227272727272727,0.5656271960095636],[0.3566816785714287,0.5303030303030303,0.5661384693370606],[0.35747851785714296,0.5378787878787878,0.5655541591030538],[0.3584268035714287,0.5454545454545454,0.5639472872321234],[0.35952292857142865,0.553030303030303,0.5615369794257277],[0.36076066071428575,0.5606060606060606,0.5586153982918349],[0.362132642857143,0.5681818181818182,0.5548903812224769],[0.363629642857143,0.5757575757575758,0.5508732015451506],[0.36524173214285727,0.5833333333333334,0.5473673101772512],[0.36695801785714294,0.5909090909090909,0.5437153300144029],[0.36876737500000006,0.5984848484848485,0.5407207119740003],[0.3706585000000001,0.6060606060606061,0.5388216774951018],[0.3726202321428572,0.6136363636363636,0.5371417687176615],[0.3746419285714287,0.6212121212121212,0.5369226579981327],[0.37671325000000017,0.6287878787878788,0.5376530420451587],[0.3788246964285716,0.6363636363636364,0.5394790396175476],[0.380967142857143,0.6439393939393939,0.5425466945644598],[0.38313246428571435,0.6515151515151515,0.5463447485403274],[0.3853127321428572,0.6590909090909091,0.5513844898545772],[0.3875000000000001,0.6666666666666666,0.5564242161868977],[0.21785714285714297,0.6666666666666666,0.6611873960408498],[0.21892910714285727,0.6742424242424242,0.6632981401660843],[0.21999823214285721,0.6818181818181818,0.6656292534929292],[0.22106253571428586,0.6893939393939394,0.6663208942701637],[0.2221201071428573,0.696969696969697,0.6671703247293181],[0.22316919642857147,0.7045454545454546,0.6693526974596855],[0.2242090535714287,0.7121212121212122,0.6710956202327728],[0.22523939285714292,0.7196969696969697,0.6714920271064833],[0.22626092857142868,0.7272727272727273,0.6734682934321629],[0.22727480357142865,0.7348484848484849,0.6746179018315895],[0.22828308928571436,0.7424242424242424,0.6747900292200797],[0.22928821428571444,0.75,0.6751180585673676],[0.23029310714285722,0.7575757575757576,0.6762743339254398],[0.23130085714285725,0.7651515151515151,0.6755181659776747],[0.23231450000000006,0.7727272727272727,0.6739411231284592],[0.2333368571428572,0.7803030303030303,0.6740675855957101],[0.23436998214285723,0.7878787878787878,0.6733665511486538],[0.2354153750000001,0.7954545454545454,0.6716488729268423],[0.23647310714285724,0.803030303030303,0.6690864835536814],[0.2375423571428573,0.8106060606060606,0.6660723440590879],[0.2386203750000001,0.8181818181818182,0.6628877701340421],[0.23970341071428578,0.8257575757575758,0.6594396640683801],[0.24078555357142864,0.8333333333333334,0.6550975862670398],[0.24185996428571435,0.8409090909090909,0.6489094500896561],[0.24291803571428586,0.8484848484848485,0.6435709241545811],[0.24395042857142865,0.8560606060606061,0.6367561388103093],[0.24494694642857157,0.8636363636363636,0.6300414926830858],[0.2458971607142858,0.8712121212121212,0.6207935670717987],[0.24679101785714294,0.8787878787878788,0.6138823879928635],[0.24761894642857152,0.8863636363636364,0.6060984665724092],[0.24837316071428583,0.8939393939393939,0.5971975074673491],[0.24904708928571437,0.9015151515151515,0.5890737359571995],[0.24963717857142873,0.9090909090909091,0.578935464237183],[0.25014167857142866,0.9166666666666666,0.572134312448793],[0.250562767857143,0.9242424242424242,0.5632090226901592],[0.2509045892857144,0.9318181818181818,0.5576887809316882],[0.25117516071428586,0.9393939393939394,0.5523969087252022],[0.2513844285714287,0.946969696969697,0.5500194263264295],[0.25154616071428587,0.9545454545454546,0.5479070042250864],[0.25167501785714297,0.9621212121212122,0.549020461228532],[0.2517857142857144,0.9696969696969697,0.5526351813326132],[0.21785714285714297,0.6666666666666666,0.6611873960408498],[0.21834641071428587,0.6742424242424242,0.6612467993914776],[0.21883864285714297,0.6818181818181818,0.6605035458669763],[0.21933716071428577,0.6893939393939394,0.6603194029709948],[0.219845267857143,0.696969696969697,0.6590367999830375],[0.2203663750000001,0.7045454545454546,0.6580101183154903],[0.22090425000000014,0.7121212121212122,0.6575378279686573],[0.2214627500000001,0.7196969696969697,0.6575592820917592],[0.2220460535714287,0.7272727272727273,0.6566994242096448],[0.22265833928571438,0.7348484848484849,0.6566423580400252],[0.22330385714285725,0.7424242424242424,0.6558755679042159],[0.2239867857142858,0.75,0.6551706531374086],[0.2247109642857144,0.7575757575757576,0.6532185976098663],[0.22547998214285728,0.7651515151515151,0.6520416921348171],[0.2262966071428572,0.7727272727272727,0.6520717758493342],[0.22716307142857153,0.7803030303030303,0.6497607982357916],[0.22808033928571436,0.7878787878787878,0.6482982922379129],[0.22904866071428578,0.7954545454545454,0.6456972494865378],[0.23006653571428584,0.803030303030303,0.6428017069461863],[0.23113162500000015,0.8106060606060606,0.6417386191898556],[0.2322395892857144,0.8181818181818182,0.6377821013452387],[0.23338521428571438,0.8257575757575758,0.6338231264641772],[0.23456139285714295,0.8333333333333334,0.6300487139731242],[0.23576016071428582,0.8409090909090909,0.6256812418012131],[0.2369721607142858,0.8484848484848485,0.6201386020580792],[0.23818744642857154,0.8560606060606061,0.6155153883489126],[0.23939541071428577,0.8636363636363636,0.6096198492554536],[0.24058537500000007,0.8712121212121212,0.6032001973208814],[0.24174707142857152,0.8787878787878788,0.5965840274165272],[0.24287071428571444,0.8863636363636364,0.5888916006397762],[0.24394808928571438,0.8939393939393939,0.5810997987243837],[0.2449720892857144,0.9015151515151515,0.5749997712746272],[0.24593821428571436,0.9090909090909091,0.567799201244689],[0.24684348214285723,0.9166666666666666,0.5610883755094983],[0.24768828571428583,0.9242424242424242,0.55552338272749],[0.2484746964285715,0.9318181818181818,0.5496454024554525],[0.24920803571428587,0.9393939393939394,0.546856426379922],[0.2498953035714287,0.946969696969697,0.5441661662381337],[0.2505466785714287,0.9545454545454546,0.5454802462600553],[0.2511731607142858,0.9621212121212122,0.5469411192276142],[0.2517857142857144,0.9696969696969697,0.5518521058393936],[0.34642857142857153,0.696969696969697,0.5959095259666869],[0.347600642857143,0.7045454545454546,0.5998816549818851],[0.3487703035714287,0.7121212121212122,0.6023739139428669],[0.34993469642857156,0.7196969696969697,0.6036494754239401],[0.3510909464285715,0.7272727272727273,0.6026430343432019],[0.3522360535714286,0.7348484848484849,0.6011116264513665],[0.35336651785714296,0.7424242424242424,0.5989729110636801],[0.3544785892857144,0.75,0.5945255852073182],[0.3555680178571429,0.7575757575757576,0.590906235687009],[0.35663028571428584,0.7651515151515151,0.5860626078304434],[0.35766044642857153,0.7727272727272727,0.5815919401278575],[0.35865333928571436,0.7803030303030303,0.5766226588282364],[0.35960353571428577,0.7878787878787878,0.5730826835706324],[0.36050553571428584,0.7954545454545454,0.5689598213623279],[0.3613538571428572,0.803030303030303,0.5664172980277378],[0.36214310714285725,0.8106060606060606,0.5637353228929853],[0.3628682142857144,0.8181818181818182,0.5629419098683827],[0.3635244285714287,0.8257575757575758,0.5611833909066437],[0.3641076071428572,0.8333333333333334,0.5615961131016238],[0.3646140535714287,0.8409090909090909,0.5620930786864098],[0.3650410357142858,0.8484848484848485,0.5633759813129577],[0.3653863392857144,0.8560606060606061,0.5650777786894565],[0.3656488928571429,0.8636363636363636,0.5669779218311412],[0.3658281964285715,0.8712121212121212,0.5686124353620736],[0.36592496428571436,0.8787878787878788,0.5704640220701177],[0.36594050000000006,0.8863636363636364,0.571537357466254],[0.3658772321428573,0.8939393939393939,0.5722833976296499],[0.36573817857142865,0.9015151515151515,0.5722455982214193],[0.36552732142857147,0.9090909090909091,0.5709952363458332],[0.36524914285714294,0.9166666666666666,0.5687442164143114],[0.36490889285714295,0.9242424242424242,0.5651999862887179],[0.3645122142857144,0.9318181818181818,0.5600628474505256],[0.36406535714285726,0.9393939393939394,0.5538641190489566],[0.36357480357142874,0.946969696969697,0.5473267990397738],[0.3630474642857144,0.9545454545454546,0.5394239360806978],[0.36249037500000014,0.9621212121212122,0.5313761229533183],[0.36191089285714295,0.9696969696969697,0.5237454367082035],[0.36131639285714295,0.9772727272727273,0.5168518613964785],[0.3607142857142858,0.9848484848484849,0.5118116856062719],[0.34642857142857153,0.696969696969697,0.5959095259666869],[0.34669366071428587,0.7045454545454546,0.5982433210589196],[0.3469660357142858,0.7121212121212122,0.5981740146528656],[0.34725164285714294,0.7196969696969697,0.5973332137851264],[0.34755639285714296,0.7272727272727273,0.5952307247030687],[0.34788587500000007,0.7348484848484849,0.591621068491172],[0.34824410714285725,0.7424242424242424,0.5875275109370487],[0.3486343571428572,0.75,0.5830980735045582],[0.3490582500000001,0.7575757575757576,0.5778798824275521],[0.34951655357142863,0.7651515151515151,0.5722083081987931],[0.350008267857143,0.7727272727272727,0.5666169472207937],[0.3505315178571429,0.7803030303030303,0.5619067034829267],[0.3510829285714287,0.7878787878787878,0.5574006184989073],[0.35165837500000013,0.7954545454545454,0.5534590376380423],[0.3522526071428572,0.803030303030303,0.5505178151945219],[0.35285992857142867,0.8106060606060606,0.5474642132975187],[0.3534740714285715,0.8181818181818182,0.5459985461125069],[0.35408857142857153,0.8257575757575758,0.5452979311594778],[0.3546969464285715,0.8333333333333334,0.5450500251713721],[0.35529287500000006,0.8409090909090909,0.5460611406141268],[0.3558704821428572,0.8484848484848485,0.5471432554209739],[0.3564242500000001,0.8560606060606061,0.5492769218984053],[0.3569495714285715,0.8636363636363636,0.551319168641781],[0.3574423392857144,0.8712121212121212,0.5538311438220381],[0.35789953571428584,0.8787878787878788,0.5560411731943372],[0.3583187321428572,0.8863636363636364,0.5579427845651169],[0.3586986785714287,0.8939393939393939,0.5588965641635204],[0.35903873214285725,0.9015151515151515,0.5595136698412911],[0.3593393392857144,0.9090909090909091,0.5590319109149887],[0.3596014821428572,0.9166666666666666,0.5575679067241558],[0.3598271071428572,0.9242424242424242,0.5553431650970482],[0.3600185892857144,0.9318181818181818,0.5509546433141325],[0.3601790892857144,0.9393939393939394,0.546364974145207],[0.36031208928571434,0.946969696969697,0.5402504142237964],[0.3604216071428572,0.9545454545454546,0.5344609771553427],[0.36051187500000004,0.9621212121212122,0.5268963162737127],[0.36058758928571444,0.9696969696969697,0.5205011597939392],[0.3606534642857144,0.9772727272727273,0.5147004263506121],[0.3607142857142858,0.9848484848484849,0.5120414934234928],[0.9071428571428573,0.9393939393939394,0.1758885094627505],[0.9051767500000002,0.946969696969697,0.16677667969940868],[0.903210392857143,0.9545454545454546,0.16917578102250816],[0.9012436607142859,0.9621212121212122,0.17672205907659205],[0.8992764642857144,0.9696969696969697,0.18259305776946377],[0.8973086964285716,0.9772727272727273,0.18399788333861186],[0.8953404642857145,0.9848484848484849,0.18257042007392824],[0.8933718571428572,0.9924242424242424,0.1814171261198346],[0.8914029821428572,1,0.18169396221388287],[0.9071428571428573,0.9393939393939394,0.1758885094627505],[0.9040648035714287,0.946969696969697,0.16489515909614288],[0.9009866785714287,0.9545454545454546,0.16536277508095915],[0.8979084285714286,0.9621212121212122,0.17108392451456736],[0.894830017857143,0.9696969696969697,0.17517385644174197],[0.8917514285714288,0.9772727272727273,0.1748982938117046],[0.8886726785714286,0.9848484848484849,0.1718213051226888],[0.8855938214285716,0.9924242424242424,0.1691347005717083],[0.8825148750000001,1,0.16796590032054035],[0.8553571428571429,0.696969696969697,0.20895791279035267],[0.8519292500000001,0.7045454545454546,0.20260203892983408],[0.8485089821428572,0.7121212121212122,0.20252107658259758],[0.845104392857143,0.7196969696969697,0.20790534234855945],[0.8417235535714287,0.7272727272727273,0.21689262733163153],[0.838374625,0.7348484848484849,0.22689198660094906],[0.8350661785714287,0.7424242424242424,0.23701278939112147],[0.8318070178571428,0.75,0.24648587842147188],[0.8286061607142858,0.7575757575757576,0.2548254196808631],[0.8254727321428572,0.7651515151515151,0.26093839151774245],[0.8224158571428571,0.7727272727272727,0.2665655593073435],[0.8194445714285715,0.7803030303030303,0.27089726961344174],[0.8165674821428572,0.7878787878787878,0.2743383491541493],[0.8137928214285715,0.7954545454545454,0.2787105256519362],[0.8111279285714286,0.803030303030303,0.28219208636626214],[0.8085795357142858,0.8106060606060606,0.2865642778459786],[0.8061529285714287,0.8181818181818182,0.29049116143396453],[0.8038526964285715,0.8257575757575758,0.2946609320636601],[0.8016816071428572,0.8333333333333334,0.2978995907543468],[0.7996416071428573,0.8409090909090909,0.3009358285950126],[0.7977327857142859,0.8484848484848485,0.3038506229148236],[0.7959543214285715,0.8560606060606061,0.30498415570385334],[0.7943036964285716,0.8636363636363636,0.3053889824219656],[0.7927775892857145,0.8712121212121212,0.30542947857751346],[0.7913712142857143,0.8787878787878788,0.3049436745302351],[0.7900791964285715,0.8863636363636364,0.3035267585439479],[0.7888951071428572,0.8939393939393939,0.30239322575491806],[0.7878120892857143,0.9015151515151515,0.3015025949895275],[0.7868227142857144,0.9090909090909091,0.3002476186796429],[0.7859193035714287,0.9166666666666666,0.2995189126087254],[0.7850940000000002,0.9242424242424242,0.2991545670642314],[0.7843388750000001,0.9318181818181818,0.298871183866974],[0.7836460714285716,0.9393939393939394,0.2983853948016251],[0.7830078750000001,0.946969696969697,0.2982234551252225],[0.78241675,0.9545454545454546,0.29854731949609825],[0.7818653571428573,0.9621212121212122,0.298142492777986],[0.7813466607142858,0.9696969696969697,0.298142492777986],[0.7808537500000001,0.9772727272727273,0.29850683832248],[0.7803800535714287,0.9848484848484849,0.29891166504059224],[0.7799190714285715,0.9924242424242424,0.3002880998532612],[0.7794642857142858,1,0.3016240534923118],[0.8553571428571429,0.696969696969697,0.20895791279035267],[0.8511904642857143,0.7045454545454546,0.20049691302817715],[0.8470431785714287,0.7121212121212122,0.19924192173636304],[0.8429334821428571,0.7196969696969697,0.20264252010345235],[0.8388796071428571,0.7272727272727273,0.20980806238212496],[0.834899392857143,0.7348484848484849,0.21867388886241274],[0.8310093392857144,0.7424242424242424,0.22790406088719453],[0.8272251071428574,0.75,0.2359197527576395],[0.8235606607142859,0.7575757575757576,0.24332818207802173],[0.8200290178571429,0.7651515151515151,0.24887438752038624],[0.8166409285714288,0.7727272727272727,0.2533680225209575],[0.8134060178571431,0.7803030303030303,0.25697102675613825],[0.8103314107142857,0.7878787878787878,0.2606954894941033],[0.8074229642857145,0.7954545454545454,0.26344834413751167],[0.8046839821428572,0.803030303030303,0.26668700282819835],[0.8021164821428574,0.8106060606060606,0.2701685635425242],[0.7997200000000001,0.8181818181818182,0.27401446980134403],[0.7974929285714287,0.8257575757575758,0.27741506816843337],[0.7954314642857143,0.8333333333333334,0.28109904973278016],[0.7935308214285715,0.8409090909090909,0.28385190437618846],[0.7917844642857145,0.8484848484848485,0.2865237966723603],[0.790185142857143,0.8560606060606061,0.2883860205503781],[0.7887244107142858,0.8636363636363636,0.28947907216578955],[0.7873933392857145,0.8712121212121212,0.28992439503944967],[0.7861823571428572,0.8787878787878788,0.28992439503944967],[0.78508175,0.8863636363636364,0.2891552077949138],[0.784081625,0.8939393939393939,0.2893171474713165],[0.7831721964285715,0.9015151515151515,0.2883050582031415],[0.7823439107142858,0.9090909090909091,0.2883455393767598],[0.7815875178571431,0.9166666666666666,0.28798119383226584],[0.7808943035714286,0.9242424242424242,0.2876573294613901],[0.7802559285714287,0.9318181818181818,0.2877787729822449],[0.7796647678571429,0.9393939393939394,0.2877787729822449],[0.7791136428571429,0.946969696969697,0.2879407126586475],[0.7785961250000001,0.9545454545454546,0.28790023148502925],[0.7781061071428572,0.9621212121212122,0.28806215617950237],[0.7776382321428572,0.9696969696969697,0.2876573294613901],[0.7771874107142859,0.9772727272727273,0.28814313350866844],[0.7767491428571429,0.9848484848484849,0.28846699787954416],[0.7763190714285716,0.9924242424242424,0.28984341771028355],[0.7758928571428573,1,0.2916246792410648],[0.1312804642857144,0,0.9892909488258219],[0.13102555357142864,0.007575757575757576,0.9860682009443071],[0.1307640892857144,0.015151515151515152,0.9823620461242406],[0.13048985714285724,0.022727272727272728,0.978253042200761],[0.13019671428571442,0.030303030303030304,0.9741440382772815],[0.12987858928571439,0.03787878787878788,0.9709212754138372],[0.1295299107142858,0.045454545454545456,0.9670539899415631],[0.12914530357142867,0.05303030303030303,0.9645563524678762],[0.1287199464285715,0.06060606060606061,0.9617364387078448],[0.12824926785714297,0.06818181818181818,0.9588359671126745],[0.12772933928571442,0.07575757575757576,0.956821751559469],[0.12715653571428578,0.08333333333333333,0.9549686666584709],[0.12652791071428585,0.09090909090909091,0.9527127476359895],[0.12584089285714292,0.09848484848484848,0.9501345523271635],[0.12509362500000012,0.10606060606060606,0.9472340657500637],[0.12428466071428577,0.11363636363636363,0.9444141669719619],[0.12341344642857156,0.12121212121212122,0.9410302734563101],[0.1224798928571429,0.12878787878787878,0.9368407116976916],[0.12148487500000006,0.13636363636363635,0.9321677130366621],[0.12042987500000006,0.14393939393939395,0.9270918802541492],[0.11931748214285724,0.15151515151515152,0.9219354896364976],[0.1181508750000001,0.1590909090909091,0.9162151042812958],[0.11693442857142863,0.16666666666666666,0.9103335882738868],[0.11567316071428582,0.17424242424242425,0.9042909416142701],[0.11437312500000009,0.18181818181818182,0.8990539631976204],[0.11304092857142863,0.1893939393939394,0.8930918743731427],[0.11168417857142866,0.19696969696969696,0.8885800363281797],[0.11031076785714293,0.20454545454545456,0.8835847613808059],[0.10892857142857153,0.21212121212121213,0.8800397372129467],[0.12291700000000014,0,0.9653620356927725],[0.12220030357142865,0.007575757575757576,0.9609307554829485],[0.12148025000000007,0.015151515151515152,0.9560966411516412],[0.12075508928571443,0.022727272727272728,0.9506179592657154],[0.12002300000000007,0.030303030303030304,0.9466700859944434],[0.11928266071428584,0.03787878787878788,0.9422388057846194],[0.11853439285714294,0.045454545454545456,0.9383715053304157],[0.11777941071428585,0.05303030303030303,0.935551606552314],[0.11702060714285725,0.06060606060606061,0.933215114712764],[0.11626169642857158,0.06818181818181818,0.9316037332810418],[0.1155081071428573,0.07575757575757576,0.9297506633619733],[0.1147658750000001,0.08333333333333333,0.9283004125824585],[0.114042142857143,0.09090909090909091,0.9268501767848734],[0.113344392857143,0.09848484848484848,0.9248359612316678],[0.11268028571428579,0.10606060606060606,0.9234662982511511],[0.11205742857142868,0.11363636363636363,0.9208075301252568],[0.1114826071428572,0.12121212121212122,0.9182293198345014],[0.11096201785714298,0.12878787878787878,0.9154094210563996],[0.11050023214285726,0.13636363636363635,0.9109781408465757],[0.11010073214285723,0.14393939393939395,0.9075136894957849],[0.10976473214285727,0.15151515151515152,0.9035658162245128],[0.109492142857143,0.1590909090909091,0.8995373851181017],[0.1092802857142858,0.16666666666666666,0.8950255320912093],[0.10912514285714292,0.17424242424242425,0.8912388044540741],[0.10902033928571443,0.18181818181818182,0.8875326346520781],[0.10895826785714299,0.1893939393939394,0.8843098867705633],[0.10892917857142866,0.19696969696969696,0.8818928221139448],[0.10892271428571436,0.20454545454545456,0.8808454354197726],[0.10892857142857153,0.21212121212121213,0.8800397372129467],[0.0017857142857143871,0.30303030303030304,0.8363676223495744],[0.006183625000000095,0.3106060606060606,0.847452092811647],[0.010569803571428643,0.3181818181818182,0.8564473631631642],[0.014933071428571561,0.32575757575757575,0.8635372466976575],[0.019262196428571545,0.3333333333333333,0.869336047472074],[0.023546089285714392,0.3409090909090909,0.8744349674080086],[0.027774125000000132,0.3484848484848485,0.8777256733219188],[0.031935928571428664,0.3560606060606061,0.8807636490664112],[0.036021482142857254,0.36363636363636365,0.8824740310885366],[0.040020910714285866,0.3712121212121212,0.8841013083475012],[0.04392462500000006,0.3787878787878788,0.8847057393128809],[0.04772310714285725,0.38636363636363635,0.8848605925366109],[0.05140694642857154,0.3939393939393939,0.8847788211651791],[0.05496680357142866,0.4015151515151515,0.8836785033139404],[0.05839344642857155,0.4090909090909091,0.8820200037138136],[0.06167780357142872,0.4166666666666667,0.8802427723220787],[0.06481114285714296,0.42424242424242425,0.8784152166290177],[0.06778503571428576,0.4318181818181818,0.8758559135333422],[0.07059192857142865,0.4393939393939394,0.8728508081422615],[0.07322482142857152,0.44696969696969696,0.8695865303520606],[0.07567817857142864,0.45454545454545453,0.8663522613667293],[0.07794732142857157,0.4621212121212121,0.8632630923689971],[0.08002948214285724,0.4696969696969697,0.8596237869185399],[0.08192300000000015,0.4772727272727273,0.8563746708410339],[0.08362837500000007,0.48484848484848486,0.8529801101915494],[0.08514728571428581,0.49242424242424243,0.8495462519408803],[0.08648353571428587,0.5,0.8463344109040711],[0.08764196428571439,0.5075757575757576,0.842977065367565],[0.08862925000000012,0.5151515151515151,0.8400423750453243],[0.08945292857142866,0.5227272727272727,0.8367525231013978],[0.09012191071428585,0.5303030303030303,0.8332392606241644],[0.09064567857142863,0.5378787878787878,0.8304408309510941],[0.0910346964285715,0.5454545454545454,0.8270880399211683],[0.09129982142857156,0.553030303030303,0.824000279224813],[0.09145253571428578,0.5606060606060606,0.8212856285017328],[0.0915045892857144,0.5681818181818182,0.8180294109896247],[0.09146819642857155,0.5757575757575758,0.814466438470176],[0.09135576785714292,0.5833333333333334,0.8114687191703587],[0.09118005357142869,0.5909090909090909,0.8081803654193863],[0.09095398214285727,0.5984848484848485,0.8044468685779084],[0.09069062500000007,0.6060606060606061,0.8011620805261668],[0.09040312500000007,0.6136363636363636,0.7975937594578721],[0.09010450000000014,0.6212121212121212,0.793820170972944],[0.08980762500000006,0.6287878787878788,0.790423932347351],[0.08952485714285723,0.6363636363636364,0.7867697048950715],[0.08926814285714296,0.6439393939393939,0.7833493303809888],[0.08904839285714294,0.6515151515151515,0.7797060097734146],[0.08887585714285728,0.6590909090909091,0.7762774401438735],[0.08875925000000007,0.6666666666666666,0.7727242508244146],[0.08870650000000008,0.6742424242424242,0.7704184419765635],[0.0887236607142858,0.6818181818181818,0.767273375399716],[0.08881592857142867,0.6893939393939394,0.7644996659103874],[0.08898666071428585,0.696969696969697,0.7616309260419837],[0.08923832142857151,0.7045454545454546,0.7596720986822892],[0.08957183928571441,0.7121212121212122,0.757254210019546],[0.08998746428571443,0.7196969696969697,0.7548904211043733],[0.09048428571428581,0.7272727272727273,0.753200774072732],[0.09106100000000014,0.7348484848484849,0.7508996995146155],[0.09171562500000009,0.7424242424242424,0.7494038287596502],[0.09244603571428586,0.75,0.746910895611839],[0.09324991071428579,0.7575757575757576,0.7451671638145566],[0.09412494642857153,0.7651515151515151,0.7430136163166249],[0.09506896428571443,0.7727272727272727,0.7403879582550149],[0.09607989285714293,0.7803030303030303,0.7375648083982028],[0.09715591071428581,0.7878787878787878,0.7349056956879291],[0.09829533928571438,0.7954545454545454,0.7317046416403888],[0.09949667857142869,0.803030303030303,0.7287478230082169],[0.10075855357142863,0.8106060606060606,0.7249678072755159],[0.10207962500000006,0.8181818181818182,0.721387695428673],[0.10345858928571434,0.8257575757575758,0.7172988122365663],[0.10489401785714299,0.8333333333333334,0.7130248872327055],[0.10638442857142871,0.8409090909090909,0.7088338272811331],[0.10792816071428583,0.8484848484848485,0.7039152448310767],[0.10952333928571442,0.8560606060606061,0.6997996638405288],[0.11116792857142863,0.8636363636363636,0.6954838793255322],[0.11285967857142865,0.8712121212121212,0.6907074903687441],[0.1145961071428572,0.8787878787878788,0.6857237215432573],[0.11637464285714298,0.8863636363636364,0.6813528035275518],[0.11819251785714298,0.8939393939393939,0.6770647655460639],[0.120046892857143,0.9015151515151515,0.6730255624323133],[0.12193485714285726,0.9090909090909091,0.6683296264371575],[0.12385350000000009,0.9166666666666666,0.6644938479627069],[0.125799892857143,0.9242424242424242,0.6605700506522063],[0.12777116071428582,0.9318181818181818,0.6559264165730762],[0.12976448214285727,0.9393939393939394,0.6517693506196308],[0.13177712500000008,0.946969696969697,0.6481107034981369],[0.13380641071428587,0.9545454545454546,0.6430823484503378],[0.13584976785714298,0.9621212121212122,0.6391574274951217],[0.13790473214285726,0.9696969696969697,0.635071375887698],[0.13996885714285726,0.9772727272727273,0.6310055648670836],[0.14203980357142865,0.9848484848484849,0.6271729775436251],[0.14411528571428583,0.9924242424242424,0.6241217727553485],[0.14619300000000013,1,0.6217877978799614],[0.0017857142857143871,0.30303030303030304,0.8363676223495744],[0.0041664464285715444,0.3106060606060606,0.8432658570413866],[0.006551214285714378,0.3181818181818182,0.8484042693435898],[0.008942910714285851,0.32575757575757575,0.852125855551083],[0.011344392857142995,0.3333333333333333,0.854601454606416],[0.013758178571428711,0.3409090909090909,0.8564940918014009],[0.016185392857142995,0.3484848484848485,0.8572401169828671],[0.018626339285714368,0.3560606060606061,0.8577166172519008],[0.02107966071428586,0.36363636363636365,0.8569244776913091],[0.02354298214285728,0.3712121212121212,0.8563346091614428],[0.026011785714285807,0.3787878787878788,0.8550561411860388],[0.028480553571428705,0.38636363636363635,0.8535334228133371],[0.03094157142857148,0.3939393939393939,0.8513770886765109],[0.03338625000000012,0.4015151515151515,0.8491039104711988],[0.03580417857142868,0.4090909090909091,0.8464791063795727],[0.038184410714285785,0.4166666666666667,0.8437827186286021],[0.040515089285714366,0.42424242424242425,0.84110105811437],[0.0427842321428572,0.4318181818181818,0.8378460091927661],[0.044980125000000114,0.4393939393939394,0.8348864039216997],[0.04709153571428583,0.44696969696969696,0.8315691949744325],[0.04910873214285729,0.45454545454545453,0.8284337617782794],[0.05102292857142865,0.4621212121212121,0.8249786591515219],[0.05282783928571441,0.4696969696969697,0.8214714194099637],[0.054518535714285776,0.4772727272727273,0.8184132779883098],[0.056092982142857295,0.48484848484848486,0.8152496937465502],[0.057550642857142974,0.49242424242424243,0.811868002574541],[0.058893821428571566,0.5,0.8088643354486961],[0.060126071428571494,0.5075757575757576,0.8058007705685485],[0.061253232142857224,0.5151515151515151,0.8028092238237018],[0.06228198214285722,0.5227272727272727,0.7996658052591037],[0.06322037500000012,0.5303030303030303,0.7964359409610573],[0.0640768035714287,0.5378787878787878,0.7939085343933735],[0.06486007142857153,0.5454545454545454,0.7907848919757687],[0.06557891071428586,0.553030303030303,0.7880822267963209],[0.06624166071428579,0.5606060606060606,0.7854625165607383],[0.06685628571428584,0.5681818181818182,0.7817811118882726],[0.06742991071428577,0.5757575757575758,0.7792586943031257],[0.0679691785714287,0.5833333333333334,0.776148026236503],[0.06847978571428581,0.5909090909090909,0.7731945335926891],[0.06896700000000006,0.5984848484848485,0.7699219108677343],[0.06943537500000008,0.6060606060606061,0.7668933587569227],[0.06988910714285725,0.6136363636363636,0.763917692857389],[0.07033203571428583,0.6212121212121212,0.7607338230830316],[0.07076783928571442,0.6287878787878788,0.7574134829124904],[0.07120012500000011,0.6363636363636364,0.7544317493314927],[0.07163250000000007,0.6439393939393939,0.7515549342030667],[0.07206867857142864,0.6515151515151515,0.7486324391714719],[0.07251246428571442,0.6590909090909091,0.7456590804890875],[0.07296782142857156,0.6666666666666666,0.7436796979220635],[0.07343873214285727,0.6742424242424242,0.7410155962292526],[0.07392932142857152,0.6818181818181818,0.7382427257279782],[0.07444364285714299,0.6893939393939394,0.7358307998731922],[0.07498566071428578,0.696969696969697,0.7338363904308391],[0.07555925000000008,0.7045454545454546,0.7320096137981141],[0.0761679464285715,0.7121212121212122,0.7295943469730404],[0.07681510714285723,0.7196969696969697,0.7277719600456708],[0.07750358928571442,0.7272727272727273,0.7259396101351566],[0.07823594642857157,0.7348484848484849,0.7239130494720099],[0.07901425000000008,0.7424242424242424,0.7222042105886272],[0.0798401607142858,0.75,0.7204300055466595],[0.0807148392857144,0.7575757575757576,0.7179399189654608],[0.08163914285714295,0.7651515151515151,0.7159833988229156],[0.082613392857143,0.7727272727272727,0.7134342834393277],[0.08363771428571444,0.7803030303030303,0.7112674469698936],[0.08471183928571437,0.7878787878787878,0.7082362130936943],[0.0858353571428572,0.7954545454545454,0.7051486171985639],[0.08700758928571435,0.803030303030303,0.7018045905974194],[0.0882277857142858,0.8106060606060606,0.6984826623423468],[0.0894950714285715,0.8181818181818182,0.6945336204805707],[0.09080850000000008,0.8257575757575758,0.6905359023297174],[0.09216710714285727,0.8333333333333334,0.6863314784969948],[0.09356987500000012,0.8409090909090909,0.6821665320486113],[0.0950157321428573,0.8484848484848485,0.6775851928325103],[0.09650355357142867,0.8560606060606061,0.67305044741728],[0.0980321250000001,0.8636363636363636,0.6679394969919245],[0.09960016071428583,0.8712121212121212,0.6635425703465366],[0.10120616071428584,0.8787878787878788,0.6586803499154115],[0.10284857142857148,0.8863636363636364,0.6544031438689814],[0.10452558928571441,0.8939393939393939,0.6496735884239367],[0.10623528571428581,0.9015151515151515,0.6453452640339147],[0.10797551785714299,0.9090909090909091,0.6410994900756605],[0.10974407142857154,0.9166666666666666,0.6369118160401641],[0.11153848214285722,0.9242424242424242,0.6326652180757851],[0.11335632142857151,0.9318181818181818,0.6281820704258921],[0.11519501785714295,0.9393939393939394,0.6243228002859221],[0.11705200000000013,0.946969696969697,0.6194283387424259],[0.11892475000000015,0.9545454545454546,0.6153136566676506],[0.12081076785714291,0.9621212121212122,0.6106999415018126],[0.12270764285714293,0.9696969696969697,0.6061785300038735],[0.12461307142857153,0.9772727272727273,0.6020475775536172],[0.12652482142857155,0.9848484848484849,0.597909119156661],[0.12844073214285723,0.9924242424242424,0.5944736878033902],[0.13035867857142866,1,0.5923591682319114],[0.8786368571428573,0,0.06170611559707545],[0.8818867857142857,0.007575757575757576,0.06111079364485648],[0.885136875,0.015151515151515152,0.06017383875332684],[0.8883856785714287,0.022727272727272728,0.05866605736437683],[0.891631767857143,0.030303030303030304,0.05658216085687871],[0.8948732500000001,0.03787878787878788,0.05476106237544949],[0.8981064285714287,0.045454545454545456,0.05296965807836939],[0.9013266607142858,0.05303030303030303,0.0513589208696175],[0.9045273571428571,0.06060606060606061,0.04960669431828566],[0.9077009285714286,0.06818181818181818,0.048349665484054026],[0.9108376250000001,0.07575757575757576,0.04726218714643155],[0.9139267321428574,0.08333333333333333,0.04615421352919778],[0.9169557321428572,0.09090909090909091,0.045580944977262325],[0.9199113750000001,0.09848484848484848,0.04485372211736934],[0.9227792678571429,0.10606060606060606,0.04419583562738948],[0.9255447321428575,0.11363636363636363,0.043719949617466905],[0.9281928571428572,0.12121212121212122,0.0432015598734381],[0.9307089642857144,0.12878787878787878,0.04262504024279239],[0.9330793035714285,0.13636363636363635,0.04188356956790642],[0.9352908928571427,0.14393939393939395,0.04138083594024736],[0.9373327321428572,0.15151515151515152,0.04008704145092351],[0.9391950892857145,0.1590909090909091,0.0391465508240223],[0.9408710714285714,0.16666666666666666,0.037966409252192225],[0.942355375,0.17424242424242425,0.036609076399687336],[0.9436459642857142,0.18181818181818182,0.03526858323598591],[0.944742517857143,0.1893939393939394,0.03336572836505448],[0.945647892857143,0.19696969696969696,0.03247933748572381],[0.9463664464285716,0.20454545454545456,0.03149613337770282],[0.9469052499999999,0.21212121212121213,0.02994346612784968],[0.9472723571428572,0.2196969696969697,0.028566791604308073],[0.9474775357142858,0.22727272727272727,0.02753649929174148],[0.9475311071428573,0.23484848484848486,0.02688954961032616],[0.9474438035714285,0.24242424242424243,0.026420615215710336],[0.9472263750000001,0.25,0.02523681805307239],[0.9468889464285716,0.25757575757575757,0.025088212293960757],[0.946441125,0.26515151515151514,0.02538295179380986],[0.9458911785714288,0.2727272727272727,0.02568431330651584],[0.9452466250000002,0.2803030303030303,0.02578953139767835],[0.9445133750000001,0.2878787878787879,0.02602572151688339],[0.9436965892857143,0.29545454545454547,0.026909940016430694],[0.9428000714285714,0.30303030303030304,0.026921610939542696],[0.9418271785714288,0.3106060606060606,0.027043429008636034],[0.9407805535714289,0.3181818181818182,0.027767595554902786],[0.9396627500000002,0.32575757575757575,0.02794231481720343],[0.9384764642857143,0.3333333333333333,0.02849228646870346],[0.9372247321428574,0.3409090909090909,0.02910119703101561],[0.9359115357142859,0.3484848484848485,0.029617339485613365],[0.9345415357142859,0.3560606060606061,0.029744551049341237],[0.9331208571428574,0.36363636363636365,0.030466290523022434],[0.9316565000000001,0.3712121212121212,0.03110585411317433],[0.9301571607142859,0.3787878787878788,0.03228385326908015],[0.9286323571428572,0.38636363636363635,0.033461253147804335],[0.9270932142857142,0.3939393939393939,0.03478128099575351],[0.9255515357142858,0.4015151515151515,0.03688826465667345],[0.9240203392857141,0.4090909090909091,0.03993878027619129],[0.9225130892857144,0.4166666666666667,0.0431970353307169],[0.9210439821428573,0.42424242424242425,0.04642120649553797],[0.9196273571428573,0.4318181818181818,0.050679715093901595],[0.9182777142857143,0.4393939393939394,0.055398933007563295],[0.9170095178571431,0.44696969696969696,0.0610706870194767],[0.9158368214285714,0.45454545454545453,0.06672620061976828],[0.9147733750000002,0.4621212121212121,0.07209430088375604],[0.9138321250000001,0.4696969696969697,0.07825813637142527],[0.9130254107142858,0.4772727272727273,0.08440017315161313],[0.9123643571428572,0.48484848484848486,0.09075809953647873],[0.9118593035714286,0.49242424242424243,0.09651928068581905],[0.9115189285714287,0.5,0.10255045118740766],[0.9113509107142858,0.5075757575757576,0.10789934461772456],[0.9113609642857143,0.5151515151515151,0.11306351085680783],[0.9115536071428572,0.5227272727272727,0.11726785977988276],[0.9119311250000001,0.5303030303030303,0.12107000382251497],[0.9124945535714286,0.5378787878787878,0.12382479113483405],[0.9132425178571429,0.5454545454545454,0.12606652227004067],[0.9141724285714287,0.553030303030303,0.12776671658007857],[0.9152794107142856,0.5606060606060606,0.1283045079228623],[0.9165574464285714,0.5681818181818182,0.1283100662187218],[0.9179985178571428,0.5757575757575758,0.127045022052186],[0.9195936428571428,0.5833333333333334,0.12579531938149963],[0.9213323392857145,0.5909090909090909,0.12422088338802424],[0.9232034464285716,0.5984848484848485,0.12182152737212258],[0.9251947321428572,0.6060606060606061,0.1194895450933643],[0.9272936250000002,0.6136363636363636,0.11687316084613981],[0.929487,0.6212121212121212,0.11414932620025128],[0.9317615892857142,0.6287878787878788,0.1114392000198923],[0.9341039285714288,0.6363636363636364,0.10967266572584936],[0.9365006250000002,0.6439393939393939,0.10817135653046082],[0.9389383214285715,0.6515151515151515,0.10657981117345022],[0.9414037500000002,0.6590909090909091,0.1061600025257975],[0.9438838571428574,0.6666666666666666,0.10604771296389191],[0.9463656607142857,0.6742424242424242,0.10662027736513895],[0.9488364285714287,0.6818181818181818,0.10750641355166743],[0.9512835,0.6893939393939394,0.10900940072316447],[0.9536944821428571,0.696969696969697,0.11126695277596585],[0.9560571964285713,0.7045454545454546,0.11389713538029705],[0.9583597678571428,0.7121212121212122,0.11641348528398002],[0.9605906785714288,0.7196969696969697,0.11935034798600405],[0.9627389642857143,0.7272727272727273,0.12273403175464223],[0.964794142857143,0.7348484848484849,0.12527925183654962],[0.9667466607142858,0.7424242424242424,0.12795830549504175],[0.9685875714285714,0.75,0.1308141908678997],[0.9703092321428572,0.7575757575757576,0.1326396490908252],[0.9719046428571432,0.7651515151515151,0.135002748837239],[0.9733683392857143,0.7727272727272727,0.13628154641509294],[0.9746955714285714,0.7803030303030303,0.13736172855302917],[0.9758830000000002,0.7878787878787878,0.1380890712683585],[0.9769279464285716,0.7954545454545454,0.1384233480802648],[0.9778288750000002,0.803030303030303,0.13855502425899577],[0.9785847321428572,0.8106060606060606,0.13828564916585867],[0.9791950714285714,0.8181818181818182,0.1378272021219211],[0.9796597321428574,0.8257575757575758,0.13688606727204972],[0.9799786785714287,0.8333333333333334,0.13609326850655815],[0.9801518750000001,0.8409090909090909,0.13492780922567774],[0.9801790714285715,0.8484848484848485,0.13364835244292406],[0.9800599285714287,0.8560606060606061,0.13232385997997184],[0.9797937321428574,0.8636363636363636,0.13049270862382095],[0.979379732142857,0.8712121212121212,0.12904223311536311],[0.9788170178571428,0.8787878787878788,0.1268341064481157],[0.9781048035714288,0.8863636363636364,0.12460984424275316],[0.9772427321428572,0.8939393939393939,0.12217748303607393],[0.976230785714286,0.9015151515151515,0.11968219772532485],[0.9750701071428571,0.9090909090909091,0.11668630622091143],[0.9737625178571429,0.9166666666666666,0.11322843193718903],[0.9723116428571428,0.9242424242424242,0.10963014700981355],[0.9707221428571432,0.9318181818181818,0.10577788841286855],[0.9690009285714288,0.9393939393939394,0.10201352879653731],[0.967156125,0.946969696969697,0.09793357483443671],[0.9651983749999999,0.9545454545454546,0.09445303289131958],[0.9631394821428574,0.9621212121212122,0.09116303112809777],[0.9609935178571432,0.9696969696969697,0.08848779786163846],[0.9587756071428573,0.9772727272727273,0.08711396990470954],[0.9565028928571431,0.9848484848484849,0.08616234770415981],[0.9541930535714288,0.9924242424242424,0.08628334176712839],[0.9518637499999999,1,0.08710021649339142],[0.8786368571428573,0,0.06170611559707545],[0.8818867857142857,0.007575757575757576,0.06111079364485648],[0.885136875,0.015151515151515152,0.06017383875332684],[0.8883856785714287,0.022727272727272728,0.05866605736437683],[0.891631767857143,0.030303030303030304,0.05658216085687871],[0.8948732500000001,0.03787878787878788,0.05476106237544949],[0.8981064285714287,0.045454545454545456,0.05296965807836939],[0.9013266607142858,0.05303030303030303,0.0513589208696175],[0.9045273571428571,0.06060606060606061,0.04960669431828566],[0.9077009285714286,0.06818181818181818,0.048349665484054026],[0.9108376250000001,0.07575757575757576,0.04726218714643155],[0.9139267321428574,0.08333333333333333,0.04615421352919778],[0.9169557321428572,0.09090909090909091,0.045580944977262325],[0.9199113750000001,0.09848484848484848,0.04485372211736934],[0.9227792678571429,0.10606060606060606,0.04419583562738948],[0.9255447321428575,0.11363636363636363,0.043719949617466905],[0.9281928571428572,0.12121212121212122,0.0432015598734381],[0.9307089642857144,0.12878787878787878,0.04262504024279239],[0.9330793035714285,0.13636363636363635,0.04188356956790642],[0.9352908928571427,0.14393939393939395,0.04138083594024736],[0.9373327321428572,0.15151515151515152,0.04008704145092351],[0.9391950892857145,0.1590909090909091,0.0391465508240223],[0.9408710714285714,0.16666666666666666,0.037966409252192225],[0.942355375,0.17424242424242425,0.036609076399687336],[0.9436459642857142,0.18181818181818182,0.03526858323598591],[0.944742517857143,0.1893939393939394,0.03336572836505448],[0.945647892857143,0.19696969696969696,0.03247933748572381],[0.9463664464285716,0.20454545454545456,0.03149613337770282],[0.9469052499999999,0.21212121212121213,0.02994346612784968],[0.9472723571428572,0.2196969696969697,0.028566791604308073],[0.9474775357142858,0.22727272727272727,0.02753649929174148],[0.9475311071428573,0.23484848484848486,0.02688954961032616],[0.9474438035714285,0.24242424242424243,0.026420615215710336],[0.9472263750000001,0.25,0.02523681805307239],[0.9468889464285716,0.25757575757575757,0.025088212293960757],[0.946441125,0.26515151515151514,0.02538295179380986],[0.9458911785714288,0.2727272727272727,0.025383446197484706],[0.9452466250000002,0.2803030303030303,0.02578953139767835],[0.9445133750000001,0.2878787878787879,0.02602572151688339],[0.9436965892857143,0.29545454545454547,0.026909940016430694],[0.9428000714285714,0.30303030303030304,0.026921610939542696],[0.9418271785714288,0.3106060606060606,0.027043429008636034],[0.9407805535714289,0.3181818181818182,0.027767595554902786],[0.9396627500000002,0.32575757575757575,0.02794231481720343],[0.9384764642857143,0.3333333333333333,0.02849228646870346],[0.9372247321428574,0.3409090909090909,0.02910119703101561],[0.9359115357142859,0.3484848484848485,0.029617339485613365],[0.9345415357142859,0.3560606060606061,0.029744551049341237],[0.9331208571428574,0.36363636363636365,0.030466290523022434],[0.9316565000000001,0.3712121212121212,0.03110585411317433],[0.9301571607142859,0.3787878787878788,0.03228385326908015],[0.9286323571428572,0.38636363636363635,0.033461253147804335],[0.9270932142857142,0.3939393939393939,0.03478128099575351],[0.9255515357142858,0.4015151515151515,0.03688826465667345],[0.9240203392857141,0.4090909090909091,0.03993878027619129],[0.9225130892857144,0.4166666666666667,0.0431970353307169],[0.9210439821428573,0.42424242424242425,0.04642120649553797],[0.9196273571428573,0.4318181818181818,0.050679715093901595],[0.9182777142857143,0.4393939393939394,0.055398933007563295],[0.9170095178571431,0.44696969696969696,0.0610706870194767],[0.9158368214285714,0.45454545454545453,0.06672620061976828],[0.9147733750000002,0.4621212121212121,0.07209430088375604],[0.9138321250000001,0.4696969696969697,0.07825813637142527],[0.9130254107142858,0.4772727272727273,0.08440017315161313],[0.9123643571428572,0.48484848484848486,0.09075809953647873],[0.9118593035714286,0.49242424242424243,0.09651928068581905],[0.9115189285714287,0.5,0.10255045118740766],[0.9113509107142858,0.5075757575757576,0.10789934461772456],[0.9113609642857143,0.5151515151515151,0.11306351085680783],[0.9115536071428572,0.5227272727272727,0.11726785977988276],[0.9119311250000001,0.5303030303030303,0.12107000382251497],[0.9124945535714286,0.5378787878787878,0.12382479113483405],[0.9132425178571429,0.5454545454545454,0.12606652227004067],[0.9141724285714287,0.553030303030303,0.12776671658007857],[0.9152794107142856,0.5606060606060606,0.1283045079228623],[0.9165574464285714,0.5681818181818182,0.1283100662187218],[0.9179985178571428,0.5757575757575758,0.127045022052186],[0.9195936428571428,0.5833333333333334,0.12579531938149963],[0.9213323392857145,0.5909090909090909,0.12422088338802424],[0.9232034464285716,0.5984848484848485,0.12182152737212258],[0.9251947321428572,0.6060606060606061,0.1194895450933643],[0.9272936250000002,0.6136363636363636,0.11687316084613981],[0.929487,0.6212121212121212,0.11414932620025128],[0.9317615892857142,0.6287878787878788,0.1114392000198923],[0.9341039285714288,0.6363636363636364,0.10967266572584936],[0.9365006250000002,0.6439393939393939,0.10817135653046082],[0.9389383214285715,0.6515151515151515,0.10657981117345022],[0.9414037500000002,0.6590909090909091,0.1061600025257975],[0.9438838571428574,0.6666666666666666,0.10604771296389191],[0.9463656607142857,0.6742424242424242,0.10662027736513895],[0.9488364285714287,0.6818181818181818,0.10750641355166743],[0.9512835,0.6893939393939394,0.10900940072316447],[0.9536944821428571,0.696969696969697,0.11126695277596585],[0.9560571964285713,0.7045454545454546,0.11389713538029705],[0.9583597678571428,0.7121212121212122,0.11641348528398002],[0.9605906785714288,0.7196969696969697,0.11935034798600405],[0.9627389642857143,0.7272727272727273,0.12273403175464223],[0.964794142857143,0.7348484848484849,0.12527925183654962],[0.9667466607142858,0.7424242424242424,0.12795830549504175],[0.9685875714285714,0.75,0.1308141908678997],[0.9703092321428572,0.7575757575757576,0.1326396490908252],[0.9719046428571432,0.7651515151515151,0.135002748837239],[0.9733683392857143,0.7727272727272727,0.13628154641509294],[0.9746955714285714,0.7803030303030303,0.13736172855302917],[0.9758830000000002,0.7878787878787878,0.1380890712683585],[0.9769279464285716,0.7954545454545454,0.1384233480802648],[0.9778288750000002,0.803030303030303,0.13855502425899577],[0.9785847321428572,0.8106060606060606,0.13828564916585867],[0.9791950714285714,0.8181818181818182,0.1378272021219211],[0.9796597321428574,0.8257575757575758,0.13688606727204972],[0.9799786785714287,0.8333333333333334,0.13609326850655815],[0.9801518750000001,0.8409090909090909,0.13492780922567774],[0.9801790714285715,0.8484848484848485,0.13364835244292406],[0.9800599285714287,0.8560606060606061,0.13232385997997184],[0.9797937321428574,0.8636363636363636,0.13049270862382095],[0.979379732142857,0.8712121212121212,0.12904223311536311],[0.9788170178571428,0.8787878787878788,0.1268341064481157],[0.9781048035714288,0.8863636363636364,0.12460984424275316],[0.9772427321428572,0.8939393939393939,0.12217748303607393],[0.976230785714286,0.9015151515151515,0.11968219772532485],[0.9750701071428571,0.9090909090909091,0.11668630622091143],[0.9737625178571429,0.9166666666666666,0.11322843193718903],[0.9723116428571428,0.9242424242424242,0.10963014700981355],[0.9707221428571432,0.9318181818181818,0.10577788841286855],[0.9690009285714288,0.9393939393939394,0.10201352879653731],[0.967156125,0.946969696969697,0.09793357483443671],[0.9651983749999999,0.9545454545454546,0.09445303289131958],[0.9631394821428574,0.9621212121212122,0.09116303112809777],[0.9609935178571432,0.9696969696969697,0.08848779786163846],[0.9587756071428573,0.9772727272727273,0.08711396990470954],[0.9565028928571431,0.9848484848484849,0.08616234770415981],[0.9541930535714288,0.9924242424242424,0.08625884631232979],[0.9518637499999999,1,0.08713752149794712]],\"branch\":[[100001,-1,-1,-1],[100002,100000,-1,-1],[100003,100001,-1,-1],[100004,100002,-1,-1],[100005,100003,-1,-1],[100006,100004,-1,-1],[100007,100005,-1,-1],[100008,100006,-1,-1],[100009,100007,-1,-1],[100010,100008,-1,-1],[100011,100009,-1,-1],[100012,100010,-1,-1],[100013,100011,-1,-1],[100014,100012,-1,-1],[100015,100013,-1,-1],[100016,100014,-1,-1],[100017,100015,-1,-1],[100018,100016,-1,-1],[100019,100017,-1,-1],[100020,100018,-1,-1],[100021,100019,-1,-1],[100022,100020,-1,-1],[100023,100021,-1,-1],[100024,100022,-1,-1],[100025,100023,-1,-1],[100026,100024,-1,-1],[100027,100025,-1,-1],[100028,100026,-1,-1],[100029,100027,-1,-1],[100030,100028,-1,-1],[100031,100029,-1,-1],[100032,100030,-1,-1],[100033,100031,-1,-1],[100034,100032,-1,-1],[100035,100033,-1,-1],[100036,100034,-1,-1],[100037,100035,-1,-1],[100038,100036,-1,-1],[100039,100037,-1,-1],[100040,100038,-1,-1],[100041,100039,-1,-1],[100042,100040,-1,-1],[100043,100041,-1,-1],[100044,100042,-1,-1],[100045,100043,-1,-1],[100046,100044,-1,-1],[100047,100045,-1,-1],[100048,100046,-1,-1],[100049,100047,-1,-1],[100050,100048,-1,-1],[100051,100049,-1,-1],[100052,100050,-1,-1],[100053,100051,-1,-1],[100054,100052,-1,-1],[100055,100053,-1,-1],[100056,100054,-1,-1],[100057,100055,-1,-1],[100058,100056,-1,-1],[100059,100057,-1,-1],[100060,100058,-1,-1],[100061,100059,-1,-1],[100062,100060,-1,-1],[100063,100061,-1,-1],[100064,100062,-1,-1],[100065,100063,-1,-1],[100066,100064,-1,-1],[100067,100065,-1,-1],[100068,100066,-1,-1],[100069,100067,-1,-1],[100070,100068,-1,-1],[100071,100069,-1,-1],[100072,100070,-1,-1],[100073,100071,-1,-1],[100074,100072,-1,-1],[100075,100073,-1,-1],[100076,100074,-1,-1],[100077,100075,-1,-1],[100078,100076,-1,-1],[100079,100077,-1,-1],[100080,100078,-1,-1],[100081,100079,-1,-1],[100082,100080,-1,-1],[100083,100081,-1,-1],[100084,100082,-1,-1],[100085,100083,-1,-1],[100086,100084,-1,-1],[100087,100085,-1,-1],[100088,100086,-1,-1],[100089,100087,-1,-1],[100090,100088,-1,-1],[100091,100089,-1,-1],[100092,100090,-1,-1],[100093,100091,-1,-1],[100094,100092,-1,-1],[100095,100093,-1,-1],[100096,100094,-1,-1],[100097,100095,-1,-1],[100098,100096,-1,-1],[100099,100097,-1,-1],[100100,100098,-1,-1],[100101,100099,-1,-1],[100102,100100,-1,-1],[100103,100101,-1,-1],[100104,100102,-1,-1],[100105,100103,-1,-1],[100106,100104,-1,-1],[100107,100105,-1,-1],[100108,100106,-1,-1],[100109,100107,-1,-1],[100110,100108,-1,-1],[100111,100109,-1,-1],[100112,100110,-1,-1],[100113,100111,-1,-1],[100114,100112,-1,-1],[100115,100113,-1,-1],[100116,100114,-1,-1],[100117,100115,-1,-1],[100118,100116,-1,-1],[100119,100117,-1,-1],[100120,100118,-1,-1],[100121,100119,-1,-1],[100122,100120,-1,-1],[100123,100121,-1,-1],[100124,100122,-1,-1],[100125,100123,-1,-1],[100126,100124,-1,-1],[100127,100125,-1,-1],[100128,100126,-1,-1],[100129,100127,-1,-1],[100130,100128,-1,-1],[100131,100129,-1,-1],[100132,100130,-1,-1],[-1,100131,-1,-1],[100134,-1,-1,-1],[100135,100133,-1,-1],[100136,100134,-1,-1],[100137,100135,-1,-1],[100138,100136,-1,-1],[100139,100137,-1,-1],[100140,100138,-1,-1],[100141,100139,-1,-1],[100142,100140,-1,-1],[100143,100141,-1,-1],[100144,100142,-1,-1],[100145,100143,-1,-1],[100146,100144,-1,-1],[100147,100145,-1,-1],[100148,100146,-1,-1],[100149,100147,-1,-1],[100150,100148,-1,-1],[100151,100149,-1,-1],[100152,100150,-1,-1],[100153,100151,-1,-1],[100154,100152,-1,-1],[100155,100153,-1,-1],[100156,100154,-1,-1],[100157,100155,-1,-1],[100158,100156,-1,-1],[100159,100157,-1,-1],[100160,100158,-1,-1],[100161,100159,-1,-1],[100162,100160,-1,-1],[100163,100161,-1,-1],[100164,100162,-1,-1],[100165,100163,-1,-1],[100166,100164,-1,-1],[100167,100165,-1,-1],[100168,100166,-1,-1],[100169,100167,-1,-1],[100170,100168,-1,-1],[100171,100169,-1,-1],[100172,100170,-1,-1],[100173,100171,-1,-1],[100174,100172,-1,-1],[100175,100173,-1,-1],[100176,100174,-1,-1],[100177,100175,-1,-1],[100178,100176,-1,-1],[100179,100177,-1,-1],[100180,100178,-1,-1],[100181,100179,-1,-1],[100182,100180,-1,-1],[100183,100181,-1,-1],[100184,100182,-1,-1],[100185,100183,-1,-1],[100186,100184,-1,-1],[100187,100185,-1,-1],[100188,100186,-1,-1],[100189,100187,-1,-1],[100190,100188,-1,-1],[100191,100189,-1,-1],[100192,100190,-1,-1],[100193,100191,-1,-1],[100194,100192,-1,-1],[100195,100193,-1,-1],[100196,100194,-1,-1],[100197,100195,-1,-1],[100198,100196,-1,-1],[100199,100197,-1,-1],[100200,100198,-1,-1],[100201,100199,-1,-1],[100202,100200,-1,-1],[100203,100201,-1,-1],[100204,100202,-1,-1],[100205,100203,-1,-1],[100206,100204,-1,-1],[100207,100205,-1,-1],[100208,100206,-1,-1],[100209,100207,-1,-1],[100210,100208,-1,-1],[100211,100209,-1,-1],[100212,100210,-1,-1],[100213,100211,-1,-1],[100214,100212,-1,-1],[100215,100213,-1,-1],[100216,100214,-1,-1],[100217,100215,-1,-1],[100218,100216,-1,-1],[100219,100217,-1,-1],[100220,100218,-1,-1],[100221,100219,-1,-1],[100222,100220,-1,-1],[100223,100221,-1,-1],[100224,100222,-1,-1],[100225,100223,-1,-1],[100226,100224,-1,-1],[100227,100225,-1,-1],[100228,100226,-1,-1],[100229,100227,-1,-1],[100230,100228,-1,-1],[100231,100229,-1,-1],[100232,100230,-1,-1],[100233,100231,-1,-1],[100234,100232,-1,-1],[100235,100233,-1,-1],[100236,100234,-1,-1],[100237,100235,-1,-1],[100238,100236,-1,-1],[100239,100237,-1,-1],[100240,100238,-1,-1],[100241,100239,-1,-1],[100242,100240,-1,-1],[100243,100241,-1,-1],[100244,100242,-1,-1],[100245,100243,-1,-1],[100246,100244,-1,-1],[100247,100245,-1,-1],[100248,100246,-1,-1],[100249,100247,-1,-1],[100250,100248,-1,-1],[100251,100249,-1,-1],[100252,100250,-1,-1],[100253,100251,-1,-1],[100254,100252,-1,-1],[100255,100253,-1,-1],[100256,100254,-1,-1],[100257,100255,-1,-1],[100258,100256,-1,-1],[100259,100257,-1,-1],[100260,100258,-1,-1],[100261,100259,-1,-1],[100262,100260,-1,-1],[100263,100261,-1,-1],[100264,100262,-1,-1],[100265,100263,-1,-1],[-1,100264,-1,-1],[100267,-1,852,-1],[100268,100266,953,-1],[100269,100267,1053,-1],[100270,100268,1154,-1],[100271,100269,1255,-1],[100272,100270,1355,-1],[100273,100271,1456,-1],[100274,100272,1557,-1],[100275,100273,1657,-1],[100276,100274,1758,-1],[100277,100275,1859,-1],[100278,100276,1960,-1],[100279,100277,2060,-1],[100280,100278,2161,-1],[100281,100279,2262,-1],[100282,100280,2363,-1],[100283,100281,2464,-1],[100284,100282,2565,-1],[100285,100283,2666,-1],[100286,100284,2767,-1],[100287,100285,2868,-1],[100288,100286,2969,-1],[100289,100287,3070,-1],[100290,100288,3171,-1],[100291,100289,3272,-1],[100292,100290,3373,-1],[100293,100291,3474,-1],[100294,100292,3575,-1],[100295,100293,3676,-1],[100296,100294,3777,-1],[100297,100295,3878,-1],[100298,100296,3979,-1],[100299,100297,4081,-1],[100300,100298,4182,-1],[-1,100299,4283,-1],[100302,-1,-1,-1],[100303,100301,-1,-1],[100304,100302,-1,100346],[100305,100303,-1,100347],[100306,100304,-1,100348],[100307,100305,-1,100349],[100308,100306,-1,100350],[100309,100307,-1,100351],[100310,100308,-1,100352],[100311,100309,-1,100353],[100312,100310,-1,100354],[100313,100311,-1,100355],[100314,100312,-1,100356],[100315,100313,-1,100357],[100316,100314,-1,100358],[100317,100315,-1,100359],[100318,100316,-1,100360],[100319,100317,-1,100361],[100320,100318,-1,100362],[100321,100319,-1,100363],[100322,100320,-1,100364],[100323,100321,-1,100365],[100324,100322,-1,100366],[100325,100323,-1,100367],[100326,100324,-1,100368],[100327,100325,-1,100369],[100328,100326,-1,100370],[100329,100327,-1,3579],[100330,100328,-1,3680],[100331,100329,-1,3780],[100332,100330,-1,3881],[100333,100331,-1,3982],[100334,100332,-1,4082],[100335,100333,-1,4183],[-1,100334,-1,4284],[100337,-1,44,-1],[100338,100336,145,-1],[100339,100337,246,-1],[100340,100338,347,-1],[100341,100339,448,-1],[100342,100340,549,-1],[100343,100341,650,-1],[100344,100342,751,-1],[100345,100343,852,-1],[100346,100344,953,-1],[100347,100345,100303,-1],[100348,100346,100304,-1],[100349,100347,100305,-1],[100350,100348,100306,-1],[100351,100349,100307,-1],[100352,100350,100308,-1],[100353,100351,100309,-1],[100354,100352,100310,-1],[100355,100353,100311,-1],[100356,100354,100312,-1],[100357,100355,100313,-1],[100358,100356,100314,-1],[100359,100357,100315,-1],[100360,100358,100316,-1],[100361,100359,100317,-1],[100362,100360,100318,-1],[100363,100361,100319,-1],[100364,100362,100320,-1],[100365,100363,100321,-1],[100366,100364,100322,-1],[100367,100365,100323,-1],[100368,100366,100324,-1],[100369,100367,100325,-1],[100370,100368,100326,-1],[-1,100369,100327,-1],[100372,-1,-1,57],[100373,100371,-1,157],[100374,100372,-1,257],[100375,100373,-1,358],[100376,100374,-1,458],[100377,100375,-1,559],[100378,100376,-1,659],[100379,100377,-1,760],[100380,100378,-1,860],[100381,100379,-1,961],[100382,100380,-1,1061],[100383,100381,-1,1162],[100384,100382,-1,1262],[100385,100383,-1,1363],[100386,100384,-1,1463],[100387,100385,-1,1564],[100388,100386,-1,1665],[100389,100387,-1,1765],[100390,100388,-1,1866],[100391,100389,-1,1967],[100392,100390,-1,2067],[100393,100391,-1,2168],[100394,100392,-1,2269],[100395,100393,-1,2369],[100396,100394,-1,2470],[100397,100395,-1,2571],[100398,100396,-1,2672],[100399,100397,-1,2772],[100400,100398,-1,2873],[100401,100399,-1,2974],[100402,100400,-1,3075],[100403,100401,-1,3176],[100404,100402,-1,3276],[100405,100403,-1,3377],[-1,100404,-1,3478],[100407,-1,-1,-1],[100408,100406,-1,-1],[100409,100407,-1,-1],[100410,100408,-1,-1],[100411,100409,10145,-1],[100412,100410,10246,-1],[100413,100411,10347,-1],[100414,100412,10447,-1],[100415,100413,10548,-1],[100416,100414,10649,-1],[100417,100415,10750,-1],[100418,100416,10850,-1],[100419,100417,10951,-1],[100420,100418,11052,-1],[100421,100419,11153,-1],[100422,100420,11254,-1],[100423,100421,11354,-1],[100424,100422,11455,-1],[100425,100423,11556,-1],[100426,100424,11657,-1],[100427,100425,11758,-1],[100428,100426,11859,-1],[100429,100427,11959,-1],[100430,100428,12060,-1],[100431,100429,12161,-1],[100432,100430,12262,-1],[100433,100431,12363,-1],[100434,100432,12463,-1],[100435,100433,12564,-1],[100436,100434,12665,-1],[100437,100435,12766,-1],[100438,100436,12867,-1],[100439,100437,12968,-1],[100440,100438,13068,-1],[100441,100439,13169,-1],[100442,100440,13270,-1],[-1,100441,13371,-1],[100444,-1,-1,-1],[100445,100443,-1,-1],[100446,100444,-1,-1],[100447,100445,-1,-1],[100448,100446,-1,-1],[100449,100447,-1,-1],[100450,100448,-1,-1],[100451,100449,-1,100541],[100452,100450,-1,100542],[100453,100451,-1,100543],[100454,100452,-1,100544],[100455,100453,-1,10853],[100456,100454,-1,10954],[100457,100455,-1,11055],[100458,100456,-1,11155],[100459,100457,-1,11256],[100460,100458,-1,11357],[100461,100459,-1,11458],[100462,100460,-1,11559],[100463,100461,-1,11660],[100464,100462,-1,11761],[100465,100463,-1,11862],[100466,100464,-1,11962],[100467,100465,-1,12063],[100468,100466,-1,12164],[100469,100467,-1,12265],[100470,100468,-1,12366],[100471,100469,-1,12467],[100472,100470,-1,12568],[100473,100471,-1,12668],[100474,100472,-1,12769],[100475,100473,-1,12870],[100476,100474,-1,12971],[100477,100475,-1,13072],[100478,100476,-1,13173],[100479,100477,-1,13273],[-1,100478,-1,13374],[100481,-1,4290,-1],[100482,100480,4391,-1],[100483,100481,4492,-1],[100484,100482,4593,-1],[100485,100483,4694,-1],[100486,100484,4795,-1],[100487,100485,4896,-1],[100488,100486,4997,-1],[100489,100487,5097,-1],[100490,100488,5198,-1],[100491,100489,5299,-1],[100492,100490,5400,-1],[100493,100491,5501,-1],[100494,100492,5602,-1],[100495,100493,5703,-1],[100496,100494,5804,-1],[100497,100495,5905,-1],[100498,100496,6006,-1],[100499,100497,6107,-1],[100500,100498,6208,-1],[100501,100499,6309,-1],[100502,100500,6409,-1],[100503,100501,6510,-1],[100504,100502,6611,-1],[100505,100503,6712,-1],[100506,100504,6813,-1],[100507,100505,6914,-1],[100508,100506,7014,-1],[100509,100507,7115,-1],[100510,100508,7216,-1],[100511,100509,7317,-1],[100512,100510,7418,-1],[100513,100511,7519,-1],[100514,100512,7620,-1],[100515,100513,7720,-1],[100516,100514,7821,-1],[100517,100515,7922,-1],[100518,100516,8023,-1],[100519,100517,8124,-1],[100520,100518,8225,-1],[100521,100519,8326,-1],[100522,100520,8427,-1],[100523,100521,8528,-1],[100524,100522,8629,-1],[100525,100523,8730,-1],[100526,100524,8831,-1],[100527,100525,8932,-1],[100528,100526,9033,-1],[100529,100527,9134,-1],[100530,100528,9235,-1],[100531,100529,9336,-1],[100532,100530,9437,-1],[100533,100531,9538,-1],[100534,100532,9639,-1],[100535,100533,9740,-1],[100536,100534,9841,-1],[100537,100535,9942,-1],[100538,100536,10043,-1],[100539,100537,10145,-1],[100540,100538,10246,-1],[100541,100539,10347,-1],[100542,100540,100450,-1],[100543,100541,100451,-1],[100544,100542,100452,-1],[100545,100543,100453,-1],[100546,100544,10853,-1],[100547,100545,10954,-1],[100548,100546,11055,-1],[100549,100547,11156,-1],[100550,100548,11257,-1],[100551,100549,11358,-1],[100552,100550,11459,-1],[100553,100551,11560,-1],[100554,100552,11661,-1],[100555,100553,11762,-1],[100556,100554,11863,-1],[100557,100555,11965,-1],[100558,100556,12066,-1],[100559,100557,12167,-1],[100560,100558,12268,-1],[100561,100559,12369,-1],[100562,100560,12470,-1],[100563,100561,12571,-1],[100564,100562,12672,-1],[100565,100563,12773,-1],[100566,100564,12874,-1],[100567,100565,12975,-1],[100568,100566,13076,-1],[100569,100567,13177,-1],[100570,100568,13278,-1],[-1,100569,13379,-1],[100572,-1,-1,4291],[100573,100571,-1,4392],[100574,100572,-1,4493],[100575,100573,-1,4594],[100576,100574,-1,4695],[100577,100575,-1,4796],[100578,100576,-1,4897],[100579,100577,-1,4999],[100580,100578,-1,5100],[100581,100579,-1,5201],[100582,100580,-1,5302],[100583,100581,-1,5403],[100584,100582,-1,5504],[100585,100583,-1,5605],[100586,100584,-1,5706],[100587,100585,-1,5807],[100588,100586,-1,5908],[100589,100587,-1,6009],[100590,100588,-1,6110],[100591,100589,-1,6211],[100592,100590,-1,6312],[100593,100591,-1,6413],[100594,100592,-1,6514],[100595,100593,-1,6614],[100596,100594,-1,6715],[100597,100595,-1,6816],[100598,100596,-1,6917],[100599,100597,-1,7018],[100600,100598,-1,7119],[100601,100599,-1,7220],[100602,100600,-1,7321],[100603,100601,-1,7421],[100604,100602,-1,7522],[100605,100603,-1,7623],[100606,100604,-1,7724],[100607,100605,-1,7825],[100608,100606,-1,7926],[100609,100607,-1,8027],[100610,100608,-1,8128],[100611,100609,-1,8229],[100612,100610,-1,8330],[100613,100611,-1,8430],[100614,100612,-1,8531],[100615,100613,-1,8632],[100616,100614,-1,8733],[100617,100615,-1,8834],[100618,100616,-1,8935],[100619,100617,-1,9036],[100620,100618,-1,9137],[100621,100619,-1,9238],[100622,100620,-1,9339],[100623,100621,-1,9440],[100624,100622,-1,9542],[100625,100623,-1,9643],[100626,100624,-1,9744],[100627,100625,-1,9845],[100628,100626,-1,9946],[100629,100627,-1,10047],[100630,100628,-1,10148],[100631,100629,-1,10249],[100632,100630,-1,10350],[100633,100631,-1,10451],[100634,100632,-1,10552],[100635,100633,-1,10653],[100636,100634,-1,10754],[100637,100635,-1,10855],[100638,100636,-1,10956],[100639,100637,-1,11057],[100640,100638,-1,11158],[100641,100639,-1,11259],[100642,100640,-1,11360],[100643,100641,-1,11461],[100644,100642,-1,11562],[100645,100643,-1,11663],[100646,100644,-1,11764],[100647,100645,-1,11865],[100648,100646,-1,11966],[100649,100647,-1,12067],[100650,100648,-1,12168],[100651,100649,-1,12269],[100652,100650,-1,12370],[100653,100651,-1,12471],[100654,100652,-1,12572],[100655,100653,-1,12673],[100656,100654,-1,12774],[100657,100655,-1,12875],[100658,100656,-1,12976],[100659,100657,-1,13077],[100660,100658,-1,13178],[100661,100659,-1,13279],[-1,100660,-1,13380],[100663,-1,-1,10154],[100664,100662,-1,10255],[100665,100663,-1,10356],[100666,100664,-1,10457],[100667,100665,-1,10559],[100668,100666,-1,10660],[100669,100667,-1,10761],[100670,100668,-1,10862],[100671,100669,-1,10963],[100672,100670,-1,11064],[100673,100671,-1,11165],[100674,100672,-1,11266],[100675,100673,-1,11367],[100676,100674,-1,11468],[100677,100675,-1,11569],[100678,100676,-1,11670],[100679,100677,-1,11771],[100680,100678,-1,11872],[100681,100679,-1,11973],[100682,100680,-1,12074],[100683,100681,-1,12175],[100684,100682,-1,12276],[100685,100683,-1,12377],[100686,100684,-1,12478],[100687,100685,-1,12579],[100688,100686,-1,12680],[100689,100687,-1,12781],[100690,100688,-1,12882],[100691,100689,-1,12983],[100692,100690,-1,13084],[100693,100691,-1,13185],[100694,100692,-1,13286],[-1,100693,-1,13387],[100696,-1,10153,-1],[100697,100695,10254,-1],[100698,100696,10355,-1],[100699,100697,10456,-1],[100700,100698,10557,-1],[100701,100699,10659,-1],[100702,100700,10760,-1],[100703,100701,10861,-1],[100704,100702,10962,-1],[100705,100703,11063,-1],[100706,100704,11164,-1],[100707,100705,11265,-1],[100708,100706,11366,-1],[100709,100707,11467,-1],[100710,100708,11568,-1],[100711,100709,11669,-1],[100712,100710,11770,-1],[100713,100711,11871,-1],[100714,100712,11972,-1],[100715,100713,12073,-1],[100716,100714,12174,-1],[100717,100715,12275,-1],[100718,100716,12376,-1],[100719,100717,12477,-1],[100720,100718,12578,-1],[100721,100719,12679,-1],[100722,100720,12780,-1],[100723,100721,12881,-1],[100724,100722,12982,-1],[100725,100723,13083,-1],[100726,100724,13184,-1],[100727,100725,13284,-1],[-1,100726,13385,-1],[100729,-1,-1,4101],[100730,100728,-1,4202],[100731,100729,-1,4303],[100732,100730,-1,4404],[100733,100731,-1,4505],[100734,100732,-1,4606],[100735,100733,-1,4707],[100736,100734,-1,4808],[100737,100735,-1,4909],[100738,100736,-1,5010],[100739,100737,-1,5111],[100740,100738,-1,5212],[100741,100739,-1,5313],[100742,100740,-1,5414],[100743,100741,-1,5515],[100744,100742,-1,5616],[100745,100743,-1,5717],[100746,100744,-1,5818],[100747,100745,-1,5919],[100748,100746,-1,6020],[100749,100747,-1,6122],[100750,100748,-1,6223],[100751,100749,-1,6324],[100752,100750,-1,6425],[100753,100751,-1,6526],[100754,100752,-1,6627],[100755,100753,-1,6728],[100756,100754,-1,6829],[100757,100755,-1,6931],[100758,100756,-1,7032],[100759,100757,-1,7133],[100760,100758,-1,7234],[100761,100759,-1,7335],[100762,100760,-1,7436],[100763,100761,-1,7537],[100764,100762,-1,7638],[100765,100763,-1,7739],[100766,100764,-1,7840],[100767,100765,-1,7942],[100768,100766,-1,8043],[100769,100767,-1,8144],[100770,100768,-1,8245],[100771,100769,-1,8346],[100772,100770,-1,8447],[100773,100771,-1,8548],[100774,100772,-1,8649],[100775,100773,-1,8750],[100776,100774,-1,8851],[100777,100775,-1,8952],[100778,100776,-1,9053],[100779,100777,-1,9154],[100780,100778,-1,9255],[100781,100779,-1,9356],[100782,100780,-1,9457],[100783,100781,-1,9558],[100784,100782,-1,9659],[100785,100783,-1,9760],[100786,100784,-1,9861],[100787,100785,-1,9962],[100788,100786,-1,10063],[100789,100787,-1,10164],[100790,100788,-1,10264],[100791,100789,-1,10365],[100792,100790,-1,10466],[100793,100791,-1,10567],[100794,100792,-1,10668],[100795,100793,-1,10769],[100796,100794,-1,10870],[100797,100795,-1,10971],[100798,100796,-1,11072],[100799,100797,-1,11173],[100800,100798,-1,11274],[100801,100799,-1,11375],[100802,100800,-1,11476],[100803,100801,-1,11577],[100804,100802,-1,11678],[-1,100803,-1,11779],[100806,-1,4100,-1],[100807,100805,4200,-1],[100808,100806,4301,-1],[100809,100807,4402,-1],[100810,100808,4503,-1],[100811,100809,4604,-1],[100812,100810,4705,-1],[100813,100811,4806,-1],[100814,100812,4907,-1],[100815,100813,5008,-1],[100816,100814,5109,-1],[100817,100815,5210,-1],[100818,100816,5311,-1],[100819,100817,5412,-1],[100820,100818,5513,-1],[100821,100819,5614,-1],[100822,100820,5716,-1],[100823,100821,5817,-1],[100824,100822,5918,-1],[100825,100823,6019,-1],[100826,100824,6120,-1],[100827,100825,6221,-1],[100828,100826,6322,-1],[100829,100827,6423,-1],[100830,100828,6524,-1],[100831,100829,6626,-1],[100832,100830,6727,-1],[100833,100831,6828,-1],[100834,100832,6929,-1],[100835,100833,7030,-1],[100836,100834,7131,-1],[100837,100835,7232,-1],[100838,100836,7333,-1],[100839,100837,7435,-1],[100840,100838,7536,-1],[100841,100839,7637,-1],[100842,100840,7738,-1],[100843,100841,7839,-1],[100844,100842,7940,-1],[100845,100843,8041,-1],[100846,100844,8142,-1],[100847,100845,8243,-1],[100848,100846,8344,-1],[100849,100847,8445,-1],[100850,100848,8546,-1],[100851,100849,8647,-1],[100852,100850,8748,-1],[100853,100851,8849,-1],[100854,100852,8950,-1],[100855,100853,9051,-1],[100856,100854,9152,-1],[100857,100855,9253,-1],[100858,100856,9354,-1],[100859,100857,9455,-1],[100860,100858,9556,-1],[100861,100859,9657,-1],[100862,100860,9758,-1],[100863,100861,9859,-1],[100864,100862,9960,-1],[100865,100863,10061,-1],[100866,100864,10162,-1],[100867,100865,10263,-1],[100868,100866,10364,-1],[100869,100867,10465,-1],[100870,100868,10566,-1],[100871,100869,10667,-1],[100872,100870,10768,-1],[100873,100871,10869,-1],[100874,100872,10970,-1],[100875,100873,11071,-1],[100876,100874,11172,-1],[100877,100875,11273,-1],[100878,100876,11374,-1],[100879,100877,11475,-1],[100880,100878,11576,-1],[100881,100879,11677,-1],[-1,100880,11778,-1],[100883,-1,4107,-1],[100884,100882,4208,-1],[100885,100883,4309,-1],[100886,100884,4410,-1],[100887,100885,4511,-1],[100888,100886,4612,-1],[100889,100887,4713,-1],[100890,100888,4814,-1],[100891,100889,4915,-1],[100892,100890,5016,-1],[100893,100891,5117,-1],[100894,100892,5218,-1],[100895,100893,5319,-1],[100896,100894,5420,-1],[100897,100895,5521,-1],[100898,100896,5622,-1],[100899,100897,5723,-1],[100900,100898,5824,-1],[100901,100899,5925,-1],[100902,100900,6026,-1],[100903,100901,6127,-1],[100904,100902,6228,-1],[100905,100903,6329,-1],[100906,100904,6430,-1],[100907,100905,6531,-1],[100908,100906,6632,-1],[-1,100907,6733,-1],[100910,-1,-1,4108],[100911,100909,-1,4209],[100912,100910,-1,4310],[100913,100911,-1,4411],[100914,100912,-1,4512],[100915,100913,-1,4613],[100916,100914,-1,4714],[100917,100915,-1,4815],[100918,100916,-1,4916],[100919,100917,-1,5017],[100920,100918,-1,5118],[100921,100919,-1,5219],[100922,100920,-1,5320],[100923,100921,-1,5421],[100924,100922,-1,5522],[100925,100923,-1,5623],[100926,100924,-1,5724],[100927,100925,-1,5825],[100928,100926,-1,5926],[100929,100927,-1,6027],[100930,100928,-1,6128],[100931,100929,-1,6229],[100932,100930,-1,6330],[100933,100931,-1,6431],[100934,100932,-1,6532],[100935,100933,-1,6633],[-1,100934,-1,6734],[100937,-1,4081,-1],[100938,100936,4182,-1],[100939,100937,4283,-1],[100940,100938,4384,-1],[100941,100939,4485,-1],[100942,100940,4586,-1],[100943,100941,4687,-1],[100944,100942,4788,-1],[100945,100943,4889,-1],[100946,100944,4990,-1],[100947,100945,5091,-1],[100948,100946,5191,-1],[-1,100947,5292,-1],[100950,-1,-1,4082],[100951,100949,-1,4183],[100952,100950,-1,4284],[100953,100951,-1,4385],[100954,100952,-1,4486],[100955,100953,-1,4587],[100956,100954,-1,4688],[100957,100955,-1,4789],[100958,100956,-1,4890],[100959,100957,-1,4991],[100960,100958,-1,5092],[100961,100959,-1,5192],[-1,100960,-1,5293],[100963,-1,2441,-1],[100964,100962,2542,-1],[100965,100963,2643,-1],[100966,100964,2744,-1],[100967,100965,2845,-1],[100968,100966,2946,-1],[100969,100967,3047,-1],[100970,100968,3148,-1],[100971,100969,3249,-1],[100972,100970,3350,-1],[100973,100971,3450,-1],[100974,100972,3551,-1],[100975,100973,3652,-1],[100976,100974,3753,-1],[100977,100975,3854,-1],[100978,100976,3955,-1],[100979,100977,4056,-1],[100980,100978,4157,-1],[100981,100979,4258,-1],[100982,100980,4359,-1],[100983,100981,4460,-1],[100984,100982,4560,-1],[100985,100983,4661,-1],[100986,100984,4762,-1],[100987,100985,4863,-1],[100988,100986,4964,-1],[100989,100987,5065,-1],[100990,100988,5166,-1],[100991,100989,5267,-1],[100992,100990,5367,-1],[100993,100991,5468,-1],[100994,100992,5569,-1],[100995,100993,5670,-1],[100996,100994,5771,-1],[100997,100995,5872,-1],[100998,100996,5973,-1],[100999,100997,6074,-1],[101000,100998,6175,-1],[101001,100999,6275,-1],[101002,101000,6376,-1],[101003,101001,6477,-1],[101004,101002,6578,-1],[101005,101003,6679,-1],[101006,101004,6780,-1],[-1,101005,6881,-1],[101008,-1,-1,2442],[101009,101007,-1,2543],[101010,101008,-1,2644],[101011,101009,-1,2745],[101012,101010,-1,2847],[101013,101011,-1,2948],[101014,101012,-1,3050],[101015,101013,-1,3150],[101016,101014,-1,3251],[101017,101015,-1,3352],[101018,101016,-1,3453],[101019,101017,-1,3554],[101020,101018,-1,3655],[101021,101019,-1,3756],[101022,101020,-1,3857],[101023,101021,-1,3958],[101024,101022,-1,4059],[101025,101023,-1,4160],[101026,101024,-1,4261],[101027,101025,-1,4362],[101028,101026,-1,4462],[101029,101027,-1,4563],[101030,101028,-1,4664],[101031,101029,-1,4765],[101032,101030,-1,4866],[101033,101031,-1,4967],[101034,101032,-1,5068],[101035,101033,-1,5168],[101036,101034,-1,5269],[101037,101035,-1,5370],[101038,101036,-1,5471],[101039,101037,-1,5572],[101040,101038,-1,5672],[101041,101039,-1,5773],[101042,101040,-1,5874],[101043,101041,-1,5975],[101044,101042,-1,6076],[101045,101043,-1,6176],[101046,101044,-1,6277],[101047,101045,-1,6378],[101048,101046,-1,6479],[101049,101047,-1,6580],[101050,101048,-1,6680],[101051,101049,-1,6781],[-1,101050,-1,6882],[101053,-1,2845,-1],[101054,101052,2946,-1],[101055,101053,3047,-1],[101056,101054,3150,-1],[101057,101055,3251,-1],[101058,101056,3352,-1],[101059,101057,3453,-1],[101060,101058,3554,-1],[101061,101059,3655,-1],[101062,101060,3756,-1],[101063,101061,3858,-1],[101064,101062,3959,-1],[101065,101063,4060,-1],[101066,101064,4161,-1],[101067,101065,4262,-1],[101068,101066,4363,-1],[101069,101067,4464,-1],[101070,101068,4566,-1],[101071,101069,4667,-1],[101072,101070,4768,-1],[101073,101071,4869,-1],[101074,101072,4970,-1],[101075,101073,5071,-1],[101076,101074,5172,-1],[101077,101075,5273,-1],[101078,101076,5375,-1],[101079,101077,5476,-1],[101080,101078,5577,-1],[101081,101079,5678,-1],[101082,101080,5779,-1],[101083,101081,5880,-1],[101084,101082,5981,-1],[101085,101083,6082,-1],[101086,101084,6183,-1],[101087,101085,6284,-1],[101088,101086,6385,-1],[101089,101087,6486,-1],[101090,101088,6587,-1],[101091,101089,6688,-1],[101092,101090,6789,-1],[101093,101091,6890,-1],[101094,101092,6991,-1],[101095,101093,7092,-1],[101096,101094,7193,-1],[101097,101095,7294,-1],[101098,101096,7395,-1],[101099,101097,7496,-1],[101100,101098,7597,-1],[-1,101099,7698,-1],[101102,-1,-1,2847],[101103,101101,-1,2948],[101104,101102,-1,3050],[101105,101103,-1,3151],[101106,101104,-1,3252],[101107,101105,-1,3353],[101108,101106,-1,3454],[101109,101107,-1,3556],[101110,101108,-1,3657],[101111,101109,-1,3758],[101112,101110,-1,3859],[101113,101111,-1,3961],[101114,101112,-1,4062],[101115,101113,-1,4163],[101116,101114,-1,4264],[101117,101115,-1,4365],[101118,101116,-1,4466],[101119,101117,-1,4568],[101120,101118,-1,4669],[101121,101119,-1,4770],[101122,101120,-1,4871],[101123,101121,-1,4972],[101124,101122,-1,5073],[101125,101123,-1,5174],[101126,101124,-1,5275],[101127,101125,-1,5377],[101128,101126,-1,5478],[101129,101127,-1,5579],[101130,101128,-1,5680],[101131,101129,-1,5781],[101132,101130,-1,5882],[101133,101131,-1,5983],[101134,101132,-1,6084],[101135,101133,-1,6185],[101136,101134,-1,6286],[101137,101135,-1,6387],[101138,101136,-1,6488],[101139,101137,-1,6589],[101140,101138,-1,6690],[101141,101139,-1,6791],[101142,101140,-1,6892],[101143,101141,-1,6993],[101144,101142,-1,7094],[101145,101143,-1,7195],[101146,101144,-1,7296],[101147,101145,-1,7397],[101148,101146,-1,7497],[101149,101147,-1,7598],[-1,101148,-1,7699],[101151,-1,81,-1],[101152,101150,182,-1],[101153,101151,283,-1],[101154,101152,384,-1],[101155,101153,485,-1],[101156,101154,587,-1],[101157,101155,688,-1],[101158,101156,789,-1],[101159,101157,890,-1],[101160,101158,991,-1],[101161,101159,1092,-1],[101162,101160,1193,-1],[101163,101161,1294,-1],[101164,101162,1395,-1],[101165,101163,1497,-1],[101166,101164,1598,-1],[101167,101165,1699,-1],[101168,101166,1800,-1],[101169,101167,1901,-1],[101170,101168,2002,-1],[101171,101169,2103,-1],[101172,101170,2204,-1],[101173,101171,2305,-1],[101174,101172,2407,-1],[101175,101173,2508,-1],[101176,101174,2609,-1],[101177,101175,2710,-1],[101178,101176,2811,-1],[101179,101177,2912,-1],[101180,101178,3013,-1],[101181,101179,3114,-1],[101182,101180,3216,-1],[101183,101181,3317,-1],[101184,101182,3418,-1],[101185,101183,3519,-1],[101186,101184,3620,-1],[101187,101185,3721,-1],[101188,101186,3822,-1],[101189,101187,3923,-1],[101190,101188,4025,-1],[101191,101189,4126,-1],[101192,101190,4227,-1],[101193,101191,4328,-1],[101194,101192,4429,-1],[101195,101193,4530,-1],[101196,101194,4631,-1],[101197,101195,4733,-1],[101198,101196,4834,-1],[101199,101197,4935,-1],[101200,101198,5036,-1],[101201,101199,5137,-1],[101202,101200,5238,-1],[101203,101201,5339,-1],[101204,101202,5440,-1],[101205,101203,5541,-1],[101206,101204,5642,-1],[101207,101205,5743,-1],[101208,101206,5844,-1],[101209,101207,5945,-1],[101210,101208,6046,-1],[101211,101209,6147,-1],[101212,101210,6248,-1],[101213,101211,6349,-1],[101214,101212,6450,-1],[101215,101213,6551,-1],[101216,101214,6652,-1],[101217,101215,6753,-1],[101218,101216,6854,-1],[101219,101217,6955,-1],[101220,101218,7056,-1],[101221,101219,7157,-1],[101222,101220,7258,-1],[101223,101221,7359,-1],[101224,101222,7460,-1],[-1,101223,-1,-1],[101226,-1,-1,83],[101227,101225,-1,184],[101228,101226,-1,285],[101229,101227,-1,387],[101230,101228,-1,488],[101231,101229,-1,589],[101232,101230,-1,690],[101233,101231,-1,791],[101234,101232,-1,892],[101235,101233,-1,994],[101236,101234,-1,1095],[101237,101235,-1,1196],[101238,101236,-1,1297],[101239,101237,-1,1398],[101240,101238,-1,1499],[101241,101239,-1,1600],[101242,101240,-1,1702],[101243,101241,-1,1803],[101244,101242,-1,1904],[101245,101243,-1,2005],[101246,101244,-1,2106],[101247,101245,-1,2207],[101248,101246,-1,2308],[101249,101247,-1,2410],[101250,101248,-1,2511],[101251,101249,-1,2612],[101252,101250,-1,2713],[101253,101251,-1,2814],[101254,101252,-1,2915],[101255,101253,-1,3016],[101256,101254,-1,3117],[101257,101255,-1,3218],[101258,101256,-1,3320],[101259,101257,-1,3421],[101260,101258,-1,3522],[101261,101259,-1,3623],[101262,101260,-1,3724],[101263,101261,-1,3825],[101264,101262,-1,3926],[101265,101263,-1,4027],[101266,101264,-1,4128],[101267,101265,-1,4229],[101268,101266,-1,4331],[101269,101267,-1,4432],[101270,101268,-1,4533],[101271,101269,-1,4634],[101272,101270,-1,4735],[101273,101271,-1,4836],[101274,101272,-1,4937],[101275,101273,-1,5038],[101276,101274,-1,5139],[101277,101275,-1,5240],[101278,101276,-1,5341],[101279,101277,-1,5442],[101280,101278,-1,5543],[101281,101279,-1,5644],[101282,101280,-1,5745],[101283,101281,-1,5846],[101284,101282,-1,5947],[101285,101283,-1,6048],[101286,101284,-1,6149],[101287,101285,-1,6250],[101288,101286,-1,6351],[101289,101287,-1,6452],[101290,101288,-1,6553],[101291,101289,-1,6654],[101292,101290,-1,6755],[101293,101291,-1,6856],[101294,101292,-1,6957],[101295,101293,-1,7058],[101296,101294,-1,7158],[101297,101295,-1,7259],[101298,101296,-1,7360],[101299,101297,-1,7461],[-1,101298,-1,-1],[101301,-1,6926,-1],[101302,101300,7027,-1],[101303,101301,7128,-1],[101304,101302,7229,-1],[101305,101303,7330,-1],[101306,101304,7431,-1],[101307,101305,7532,-1],[101308,101306,7633,-1],[101309,101307,7734,-1],[101310,101308,7835,-1],[101311,101309,7936,-1],[101312,101310,8037,-1],[101313,101311,8138,-1],[101314,101312,8239,-1],[101315,101313,8340,-1],[101316,101314,8441,-1],[101317,101315,8542,-1],[101318,101316,8643,-1],[101319,101317,8744,-1],[101320,101318,8845,-1],[101321,101319,8946,-1],[101322,101320,9047,-1],[101323,101321,9148,-1],[101324,101322,9249,-1],[101325,101323,9350,-1],[101326,101324,9451,-1],[101327,101325,9552,-1],[101328,101326,9653,-1],[101329,101327,9754,-1],[101330,101328,9855,-1],[101331,101329,9956,-1],[101332,101330,10057,-1],[101333,101331,10158,-1],[101334,101332,10259,-1],[-1,101333,10360,-1],[101336,-1,-1,6927],[101337,101335,-1,7028],[101338,101336,-1,7129],[101339,101337,-1,7230],[101340,101338,-1,7331],[101341,101339,-1,7432],[101342,101340,-1,7533],[101343,101341,-1,7634],[101344,101342,-1,7735],[101345,101343,-1,7836],[101346,101344,-1,7937],[101347,101345,-1,8038],[101348,101346,-1,8139],[101349,101347,-1,8240],[101350,101348,-1,8341],[101351,101349,-1,8442],[101352,101350,-1,8543],[101353,101351,-1,8644],[101354,101352,-1,8745],[101355,101353,-1,8846],[101356,101354,-1,8947],[101357,101355,-1,9048],[101358,101356,-1,9149],[101359,101357,-1,9250],[101360,101358,-1,9351],[101361,101359,-1,9452],[101362,101360,-1,9553],[101363,101361,-1,9654],[101364,101362,-1,9755],[101365,101363,-1,9856],[101366,101364,-1,9957],[101367,101365,-1,10058],[101368,101366,-1,10159],[101369,101367,-1,10260],[-1,101368,-1,10361],[101371,-1,3673,-1],[101372,101370,3773,-1],[101373,101371,3874,-1],[101374,101372,3975,-1],[101375,101373,4075,-1],[101376,101374,4176,-1],[101377,101375,4277,-1],[101378,101376,4377,-1],[101379,101377,4478,-1],[101380,101378,4579,-1],[101381,101379,4680,-1],[101382,101380,4780,-1],[101383,101381,4881,-1],[101384,101382,4982,-1],[101385,101383,5083,-1],[101386,101384,5183,-1],[101387,101385,5284,-1],[101388,101386,5385,-1],[101389,101387,5486,-1],[101390,101388,5587,-1],[101391,101389,5688,-1],[101392,101390,5788,-1],[101393,101391,5889,-1],[101394,101392,5990,-1],[101395,101393,6091,-1],[101396,101394,6192,-1],[101397,101395,6293,-1],[101398,101396,6394,-1],[101399,101397,6495,-1],[101400,101398,6596,-1],[101401,101399,6697,-1],[101402,101400,6798,-1],[101403,101401,6898,-1],[101404,101402,6999,-1],[101405,101403,7100,-1],[101406,101404,7201,-1],[101407,101405,7302,-1],[101408,101406,7403,-1],[101409,101407,7504,-1],[101410,101408,7605,-1],[101411,101409,7706,-1],[101412,101410,7807,-1],[101413,101411,7908,-1],[101414,101412,8009,-1],[101415,101413,8110,-1],[101416,101414,8211,-1],[101417,101415,8312,-1],[101418,101416,8413,-1],[101419,101417,8514,-1],[101420,101418,8615,-1],[101421,101419,8716,-1],[101422,101420,8818,-1],[101423,101421,8919,-1],[101424,101422,9020,-1],[101425,101423,9121,-1],[101426,101424,9222,-1],[101427,101425,9323,-1],[101428,101426,9424,-1],[-1,101427,9525,-1],[101430,-1,-1,3674],[101431,101429,-1,3775],[101432,101430,-1,3876],[101433,101431,-1,3976],[101434,101432,-1,4077],[101435,101433,-1,4178],[101436,101434,-1,4279],[101437,101435,-1,4380],[101438,101436,-1,4481],[101439,101437,-1,4582],[101440,101438,-1,4682],[101441,101439,-1,4783],[101442,101440,-1,4884],[101443,101441,-1,4985],[101444,101442,-1,5086],[101445,101443,-1,5187],[101446,101444,-1,5288],[101447,101445,-1,5389],[101448,101446,-1,5490],[101449,101447,-1,5591],[101450,101448,-1,5691],[101451,101449,-1,5792],[101452,101450,-1,5893],[101453,101451,-1,5994],[101454,101452,-1,6095],[101455,101453,-1,6196],[101456,101454,-1,6297],[101457,101455,-1,6398],[101458,101456,-1,6499],[101459,101457,-1,6600],[101460,101458,-1,6701],[101461,101459,-1,6802],[101462,101460,-1,6903],[101463,101461,-1,7004],[101464,101462,-1,7104],[101465,101463,-1,7205],[101466,101464,-1,7306],[101467,101465,-1,7407],[101468,101466,-1,7508],[101469,101467,-1,7609],[101470,101468,-1,7710],[101471,101469,-1,7811],[101472,101470,-1,7912],[101473,101471,-1,8012],[101474,101472,-1,8113],[101475,101473,-1,8214],[101476,101474,-1,8315],[101477,101475,-1,8416],[101478,101476,-1,8517],[101479,101477,-1,8618],[101480,101478,-1,8719],[101481,101479,-1,8820],[101482,101480,-1,8921],[101483,101481,-1,9022],[101484,101482,-1,9123],[101485,101483,-1,9223],[101486,101484,-1,9324],[101487,101485,-1,9425],[-1,101486,-1,9526],[101489,-1,5893,-1],[101490,101488,5994,-1],[101491,101489,6095,-1],[101492,101490,6196,-1],[101493,101491,6297,-1],[101494,101492,6398,-1],[101495,101493,6499,-1],[101496,101494,6600,-1],[101497,101495,6701,-1],[101498,101496,6802,-1],[101499,101497,6903,-1],[101500,101498,7004,-1],[101501,101499,7105,-1],[101502,101500,7206,-1],[101503,101501,7307,-1],[101504,101502,7408,-1],[101505,101503,7510,-1],[101506,101504,7611,-1],[101507,101505,7712,-1],[101508,101506,7813,-1],[101509,101507,7914,-1],[101510,101508,8015,-1],[101511,101509,8117,-1],[101512,101510,8218,-1],[101513,101511,8319,-1],[101514,101512,8420,-1],[101515,101513,8521,-1],[101516,101514,8623,-1],[101517,101515,8724,-1],[101518,101516,8825,-1],[-1,101517,-1,-1],[101520,-1,-1,5894],[101521,101519,-1,5995],[101522,101520,-1,6096],[101523,101521,-1,6197],[101524,101522,-1,6298],[101525,101523,-1,6399],[101526,101524,-1,6500],[101527,101525,-1,6601],[101528,101526,-1,6702],[101529,101527,-1,6803],[101530,101528,-1,6905],[101531,101529,-1,7006],[101532,101530,-1,7107],[101533,101531,-1,7208],[101534,101532,-1,7309],[101535,101533,-1,7410],[101536,101534,-1,7511],[101537,101535,-1,7612],[101538,101536,-1,7713],[101539,101537,-1,7815],[101540,101538,-1,7916],[101541,101539,-1,8017],[101542,101540,-1,8118],[101543,101541,-1,8219],[101544,101542,-1,8320],[101545,101543,-1,8421],[101546,101544,-1,8523],[101547,101545,-1,8624],[101548,101546,-1,8725],[101549,101547,-1,8826],[-1,101548,-1,-1],[101551,-1,8909,-1],[101552,101550,9010,-1],[101553,101551,9111,-1],[101554,101552,9212,-1],[101555,101553,9313,-1],[101556,101554,9415,-1],[101557,101555,9516,-1],[101558,101556,9617,-1],[101559,101557,9718,-1],[101560,101558,9819,-1],[101561,101559,9920,-1],[101562,101560,10021,-1],[101563,101561,10122,-1],[101564,101562,10223,-1],[101565,101563,10324,-1],[101566,101564,10425,-1],[101567,101565,10526,-1],[101568,101566,10627,-1],[101569,101567,10729,-1],[101570,101568,10830,-1],[101571,101569,10931,-1],[101572,101570,11032,-1],[101573,101571,11133,-1],[101574,101572,11234,-1],[101575,101573,11335,-1],[101576,101574,11436,-1],[101577,101575,11537,-1],[101578,101576,11639,-1],[101579,101577,11740,-1],[101580,101578,11841,-1],[101581,101579,11942,-1],[101582,101580,12043,-1],[101583,101581,12144,-1],[101584,101582,12245,-1],[101585,101583,12346,-1],[101586,101584,12447,-1],[101587,101585,12548,-1],[101588,101586,12649,-1],[101589,101587,12751,-1],[101590,101588,12852,-1],[-1,101589,12953,-1],[101592,-1,-1,8910],[101593,101591,-1,9011],[101594,101592,-1,9112],[101595,101593,-1,9214],[101596,101594,-1,9315],[101597,101595,-1,9416],[101598,101596,-1,9517],[101599,101597,-1,9618],[101600,101598,-1,9719],[101601,101599,-1,9820],[101602,101600,-1,9921],[101603,101601,-1,10022],[101604,101602,-1,10124],[101605,101603,-1,10225],[101606,101604,-1,10326],[101607,101605,-1,10427],[101608,101606,-1,10528],[101609,101607,-1,10629],[101610,101608,-1,10730],[101611,101609,-1,10831],[101612,101610,-1,10932],[101613,101611,-1,11033],[101614,101612,-1,11135],[101615,101613,-1,11236],[101616,101614,-1,11337],[101617,101615,-1,11438],[101618,101616,-1,11539],[101619,101617,-1,11640],[101620,101618,-1,11741],[101621,101619,-1,11842],[101622,101620,-1,11943],[101623,101621,-1,12044],[101624,101622,-1,12145],[101625,101623,-1,12247],[101626,101624,-1,12348],[101627,101625,-1,12449],[101628,101626,-1,12550],[101629,101627,-1,12651],[101630,101628,-1,12752],[101631,101629,-1,12853],[-1,101630,-1,12954],[101633,-1,9326,-1],[101634,101632,9427,-1],[101635,101633,9528,-1],[101636,101634,9629,-1],[101637,101635,9730,-1],[101638,101636,9831,-1],[101639,101637,9932,-1],[101640,101638,10033,-1],[101641,101639,10134,-1],[101642,101640,10235,-1],[101643,101641,10337,-1],[101644,101642,10438,-1],[101645,101643,10539,-1],[101646,101644,10640,-1],[101647,101645,10741,-1],[101648,101646,10842,-1],[101649,101647,10943,-1],[101650,101648,11044,-1],[101651,101649,11145,-1],[101652,101650,11246,-1],[101653,101651,11347,-1],[101654,101652,11448,-1],[101655,101653,11549,-1],[101656,101654,11650,-1],[101657,101655,11751,-1],[101658,101656,11852,-1],[101659,101657,11953,-1],[101660,101658,12054,-1],[101661,101659,12155,-1],[101662,101660,12256,-1],[101663,101661,12357,-1],[101664,101662,12459,-1],[101665,101663,12560,-1],[101666,101664,12661,-1],[101667,101665,12762,-1],[101668,101666,12863,-1],[101669,101667,12964,-1],[101670,101668,13065,-1],[-1,101669,13166,-1],[101672,-1,-1,9327],[101673,101671,-1,9428],[101674,101672,-1,9529],[101675,101673,-1,9630],[101676,101674,-1,9732],[101677,101675,-1,9833],[101678,101676,-1,9934],[101679,101677,-1,10035],[101680,101678,-1,10136],[101681,101679,-1,10237],[101682,101680,-1,10338],[101683,101681,-1,10439],[101684,101682,-1,10540],[101685,101683,-1,10642],[101686,101684,-1,10743],[101687,101685,-1,10844],[101688,101686,-1,10945],[101689,101687,-1,11046],[101690,101688,-1,11147],[101691,101689,-1,11248],[101692,101690,-1,11349],[101693,101691,-1,11450],[101694,101692,-1,11551],[101695,101693,-1,11652],[101696,101694,-1,11753],[101697,101695,-1,11854],[101698,101696,-1,11955],[101699,101697,-1,12056],[101700,101698,-1,12157],[101701,101699,-1,12258],[101702,101700,-1,12359],[101703,101701,-1,12460],[101704,101702,-1,12561],[101705,101703,-1,12662],[101706,101704,-1,12763],[101707,101705,-1,12864],[101708,101706,-1,12965],[101709,101707,-1,13066],[-1,101708,-1,13167],[101711,-1,12614,-1],[101712,101710,12715,-1],[101713,101711,12816,-1],[101714,101712,12916,-1],[101715,101713,13017,-1],[101716,101714,13118,-1],[101717,101715,13218,-1],[101718,101716,13319,-1],[-1,101717,13420,-1],[101720,-1,-1,12615],[101721,101719,-1,12716],[101722,101720,-1,12817],[101723,101721,-1,12918],[101724,101722,-1,13018],[101725,101723,-1,13119],[101726,101724,-1,13220],[101727,101725,-1,13321],[-1,101726,-1,13422],[101729,-1,9377,-1],[101730,101728,9478,-1],[101731,101729,9578,-1],[101732,101730,9679,-1],[101733,101731,9779,-1],[101734,101732,9880,-1],[101735,101733,9981,-1],[101736,101734,10081,-1],[101737,101735,10182,-1],[101738,101736,10283,-1],[101739,101737,10383,-1],[101740,101738,10484,-1],[101741,101739,10585,-1],[101742,101740,10685,-1],[101743,101741,10786,-1],[101744,101742,10887,-1],[101745,101743,10987,-1],[101746,101744,11088,-1],[101747,101745,11189,-1],[101748,101746,11290,-1],[101749,101747,11391,-1],[101750,101748,11492,-1],[101751,101749,11592,-1],[101752,101750,11693,-1],[101753,101751,11794,-1],[101754,101752,11895,-1],[101755,101753,11996,-1],[101756,101754,12097,-1],[101757,101755,12198,-1],[101758,101756,12299,-1],[101759,101757,12400,-1],[101760,101758,12501,-1],[101761,101759,12601,-1],[101762,101760,12702,-1],[101763,101761,12803,-1],[101764,101762,12904,-1],[101765,101763,13005,-1],[101766,101764,13106,-1],[101767,101765,13207,-1],[101768,101766,13308,-1],[-1,101767,13409,-1],[101770,-1,-1,9378],[101771,101769,-1,9479],[101772,101770,-1,9579],[101773,101771,-1,9680],[101774,101772,-1,9781],[101775,101773,-1,9881],[101776,101774,-1,9982],[101777,101775,-1,10083],[101778,101776,-1,10183],[101779,101777,-1,10284],[101780,101778,-1,10385],[101781,101779,-1,10485],[101782,101780,-1,10586],[101783,101781,-1,10687],[101784,101782,-1,10788],[101785,101783,-1,10888],[101786,101784,-1,10989],[101787,101785,-1,11090],[101788,101786,-1,11191],[101789,101787,-1,11291],[101790,101788,-1,11392],[101791,101789,-1,11493],[101792,101790,-1,11594],[101793,101791,-1,11695],[101794,101792,-1,11796],[101795,101793,-1,11897],[101796,101794,-1,11997],[101797,101795,-1,12098],[101798,101796,-1,12199],[101799,101797,-1,12300],[101800,101798,-1,12401],[101801,101799,-1,12502],[101802,101800,-1,12603],[101803,101801,-1,12704],[101804,101802,-1,12805],[101805,101803,-1,12906],[101806,101804,-1,13007],[101807,101805,-1,13108],[101808,101806,-1,13209],[101809,101807,-1,13309],[-1,101808,-1,13410],[101811,-1,12,-1],[101812,101810,113,-1],[101813,101811,214,-1],[101814,101812,315,-1],[101815,101813,416,-1],[101816,101814,516,-1],[101817,101815,617,-1],[101818,101816,718,-1],[101819,101817,819,-1],[101820,101818,920,-1],[101821,101819,1021,-1],[101822,101820,1122,-1],[101823,101821,1223,-1],[101824,101822,1324,-1],[101825,101823,1425,-1],[101826,101824,1526,-1],[101827,101825,1627,-1],[101828,101826,1728,-1],[101829,101827,1829,-1],[101830,101828,1930,-1],[101831,101829,2030,-1],[101832,101830,2131,-1],[101833,101831,2232,-1],[101834,101832,2333,-1],[101835,101833,2434,-1],[101836,101834,2535,-1],[101837,101835,2636,-1],[101838,101836,2737,-1],[-1,101837,2838,-1],[101840,-1,-1,14],[101841,101839,-1,115],[101842,101840,-1,216],[101843,101841,-1,317],[101844,101842,-1,418],[101845,101843,-1,518],[101846,101844,-1,619],[101847,101845,-1,720],[101848,101846,-1,821],[101849,101847,-1,922],[101850,101848,-1,1023],[101851,101849,-1,1124],[101852,101850,-1,1225],[101853,101851,-1,1326],[101854,101852,-1,1427],[101855,101853,-1,1528],[101856,101854,-1,1629],[101857,101855,-1,1730],[101858,101856,-1,1831],[101859,101857,-1,1932],[101860,101858,-1,2032],[101861,101859,-1,2133],[101862,101860,-1,2234],[101863,101861,-1,2335],[101864,101862,-1,2436],[101865,101863,-1,2537],[101866,101864,-1,2638],[101867,101865,-1,2739],[-1,101866,-1,2839],[101869,-1,4040,-1],[101870,101868,4141,-1],[101871,101869,4242,-1],[101872,101870,4343,-1],[101873,101871,4445,-1],[101874,101872,4546,-1],[101875,101873,4647,-1],[101876,101874,4748,-1],[101877,101875,4850,-1],[101878,101876,4951,-1],[101879,101877,5052,-1],[101880,101878,5153,-1],[101881,101879,5255,-1],[101882,101880,5356,-1],[101883,101881,5457,-1],[101884,101882,5558,-1],[101885,101883,5660,-1],[101886,101884,5761,-1],[101887,101885,5862,-1],[101888,101886,5963,-1],[101889,101887,6064,-1],[101890,101888,6166,-1],[101891,101889,6267,-1],[101892,101890,6368,-1],[101893,101891,6469,-1],[101894,101892,6570,-1],[101895,101893,6671,-1],[101896,101894,6773,-1],[101897,101895,6874,-1],[101898,101896,6975,-1],[101899,101897,7076,-1],[101900,101898,7177,-1],[101901,101899,7278,-1],[101902,101900,7379,-1],[101903,101901,7480,-1],[101904,101902,7581,-1],[101905,101903,7682,-1],[101906,101904,7783,-1],[101907,101905,7884,-1],[101908,101906,7985,-1],[101909,101907,8086,-1],[101910,101908,8187,-1],[101911,101909,8289,-1],[101912,101910,8390,-1],[101913,101911,8491,-1],[101914,101912,8592,-1],[101915,101913,8693,-1],[101916,101914,8794,-1],[101917,101915,8895,-1],[101918,101916,8996,-1],[101919,101917,9097,-1],[101920,101918,9198,-1],[101921,101919,9299,-1],[101922,101920,9400,-1],[101923,101921,9501,-1],[101924,101922,9602,-1],[101925,101923,9703,-1],[101926,101924,9804,-1],[101927,101925,9905,-1],[101928,101926,10006,-1],[101929,101927,10108,-1],[101930,101928,10209,-1],[101931,101929,10310,-1],[101932,101930,10411,-1],[101933,101931,10512,-1],[101934,101932,10613,-1],[101935,101933,10714,-1],[101936,101934,10815,-1],[101937,101935,10916,-1],[101938,101936,11018,-1],[101939,101937,11119,-1],[101940,101938,11220,-1],[101941,101939,11321,-1],[101942,101940,11422,-1],[101943,101941,11523,-1],[101944,101942,11624,-1],[101945,101943,11726,-1],[101946,101944,11827,-1],[101947,101945,11928,-1],[101948,101946,12029,-1],[101949,101947,12130,-1],[101950,101948,12231,-1],[101951,101949,12333,-1],[101952,101950,12434,-1],[101953,101951,12535,-1],[101954,101952,12636,-1],[101955,101953,12737,-1],[101956,101954,12839,-1],[101957,101955,12940,-1],[101958,101956,13041,-1],[101959,101957,13142,-1],[101960,101958,13243,-1],[-1,101959,13345,-1],[101962,-1,-1,4041],[101963,101961,-1,4142],[101964,101962,-1,4244],[101965,101963,-1,4345],[101966,101964,-1,4446],[101967,101965,-1,4548],[101968,101966,-1,4649],[101969,101967,-1,4751],[101970,101968,-1,4852],[101971,101969,-1,4954],[101972,101970,-1,5055],[101973,101971,-1,5156],[101974,101972,-1,5258],[101975,101973,-1,5359],[101976,101974,-1,5460],[101977,101975,-1,5562],[101978,101976,-1,5663],[101979,101977,-1,5764],[101980,101978,-1,5866],[101981,101979,-1,5967],[101982,101980,-1,6068],[101983,101981,-1,6169],[101984,101982,-1,6271],[101985,101983,-1,6372],[101986,101984,-1,6473],[101987,101985,-1,6574],[101988,101986,-1,6675],[101989,101987,-1,6776],[101990,101988,-1,6877],[101991,101989,-1,6978],[101992,101990,-1,7080],[101993,101991,-1,7181],[101994,101992,-1,7282],[101995,101993,-1,7383],[101996,101994,-1,7484],[101997,101995,-1,7585],[101998,101996,-1,7686],[101999,101997,-1,7787],[102000,101998,-1,7888],[102001,101999,-1,7989],[102002,102000,-1,8090],[102003,102001,-1,8191],[102004,102002,-1,8292],[102005,102003,-1,8392],[102006,102004,-1,8493],[102007,102005,-1,8594],[102008,102006,-1,8695],[102009,102007,-1,8796],[102010,102008,-1,8897],[102011,102009,-1,8998],[102012,102010,-1,9099],[102013,102011,-1,9200],[102014,102012,-1,9301],[102015,102013,-1,9402],[102016,102014,-1,9503],[102017,102015,-1,9604],[102018,102016,-1,9706],[102019,102017,-1,9807],[102020,102018,-1,9908],[102021,102019,-1,10009],[102022,102020,-1,10110],[102023,102021,-1,10211],[102024,102022,-1,10312],[102025,102023,-1,10413],[102026,102024,-1,10514],[102027,102025,-1,10615],[102028,102026,-1,10716],[102029,102027,-1,10818],[102030,102028,-1,10919],[102031,102029,-1,11020],[102032,102030,-1,11121],[102033,102031,-1,11222],[102034,102032,-1,11323],[102035,102033,-1,11424],[102036,102034,-1,11526],[102037,102035,-1,11627],[102038,102036,-1,11728],[102039,102037,-1,11829],[102040,102038,-1,11930],[102041,102039,-1,12032],[102042,102040,-1,12133],[102043,102041,-1,12234],[102044,102042,-1,12335],[102045,102043,-1,12436],[102046,102044,-1,12537],[102047,102045,-1,12639],[102048,102046,-1,12740],[102049,102047,-1,12841],[102050,102048,-1,12942],[102051,102049,-1,13043],[102052,102050,-1,13145],[102053,102051,-1,13246],[-1,102052,-1,13347],[102055,-1,87,-1],[102056,102054,189,-1],[102057,102055,290,-1],[102058,102056,391,-1],[102059,102057,493,-1],[102060,102058,594,-1],[102061,102059,695,-1],[102062,102060,797,-1],[102063,102061,898,-1],[102064,102062,999,-1],[102065,102063,1101,-1],[102066,102064,1202,-1],[102067,102065,1303,-1],[102068,102066,1404,-1],[102069,102067,1506,-1],[102070,102068,1607,-1],[102071,102069,1708,-1],[102072,102070,1810,-1],[102073,102071,1911,-1],[102074,102072,2012,-1],[102075,102073,2113,-1],[102076,102074,2214,-1],[102077,102075,2316,-1],[102078,102076,2417,-1],[102079,102077,2518,-1],[102080,102078,2619,-1],[102081,102079,2720,-1],[102082,102080,2821,-1],[102083,102081,2922,-1],[102084,102082,3023,-1],[102085,102083,3124,-1],[102086,102084,3225,-1],[102087,102085,3326,-1],[102088,102086,3427,-1],[102089,102087,3528,-1],[102090,102088,3629,-1],[102091,102089,3730,-1],[102092,102090,3831,-1],[102093,102091,3932,-1],[102094,102092,4033,-1],[102095,102093,4134,-1],[102096,102094,4235,-1],[102097,102095,4336,-1],[102098,102096,4436,-1],[102099,102097,4537,-1],[102100,102098,4638,-1],[102101,102099,4739,-1],[102102,102100,4840,-1],[102103,102101,4941,-1],[102104,102102,5042,-1],[102105,102103,5143,-1],[102106,102104,5243,-1],[102107,102105,5344,-1],[102108,102106,5445,-1],[102109,102107,5546,-1],[102110,102108,5647,-1],[102111,102109,5748,-1],[102112,102110,5848,-1],[102113,102111,5949,-1],[102114,102112,6050,-1],[102115,102113,6151,-1],[102116,102114,6252,-1],[102117,102115,6353,-1],[102118,102116,6454,-1],[102119,102117,6555,-1],[102120,102118,6656,-1],[102121,102119,6757,-1],[102122,102120,6858,-1],[102123,102121,6959,-1],[102124,102122,7060,-1],[102125,102123,7161,-1],[102126,102124,7262,-1],[102127,102125,7363,-1],[102128,102126,7464,-1],[102129,102127,7565,-1],[102130,102128,7666,-1],[102131,102129,7767,-1],[102132,102130,7868,-1],[102133,102131,7970,-1],[102134,102132,8071,-1],[102135,102133,8172,-1],[102136,102134,8273,-1],[102137,102135,8374,-1],[102138,102136,8476,-1],[102139,102137,8577,-1],[102140,102138,8678,-1],[102141,102139,8779,-1],[102142,102140,8881,-1],[102143,102141,8982,-1],[102144,102142,9083,-1],[102145,102143,9184,-1],[102146,102144,9286,-1],[102147,102145,9387,-1],[102148,102146,9488,-1],[102149,102147,9589,-1],[102150,102148,9691,-1],[102151,102149,9792,-1],[102152,102150,9893,-1],[102153,102151,9994,-1],[102154,102152,10095,-1],[102155,102153,10197,-1],[102156,102154,10298,-1],[102157,102155,10399,-1],[102158,102156,10500,-1],[102159,102157,10601,-1],[102160,102158,10702,-1],[102161,102159,10803,-1],[102162,102160,10904,-1],[102163,102161,11005,-1],[102164,102162,11106,-1],[102165,102163,11207,-1],[102166,102164,11309,-1],[102167,102165,11410,-1],[102168,102166,11511,-1],[102169,102167,11611,-1],[102170,102168,11712,-1],[102171,102169,11813,-1],[102172,102170,11914,-1],[102173,102171,12015,-1],[102174,102172,12116,-1],[102175,102173,12217,-1],[102176,102174,12318,-1],[102177,102175,12419,-1],[102178,102176,12520,-1],[102179,102177,12620,-1],[102180,102178,12721,-1],[102181,102179,12822,-1],[102182,102180,12923,-1],[102183,102181,13024,-1],[102184,102182,13124,-1],[102185,102183,13225,-1],[102186,102184,13326,-1],[-1,102185,13427,-1],[102188,-1,-1,-1],[102189,102187,-1,-1],[102190,102188,-1,-1],[102191,102189,-1,-1],[102192,102190,-1,-1],[102193,102191,-1,-1],[102194,102192,-1,-1],[102195,102193,-1,-1],[102196,102194,-1,-1],[102197,102195,-1,-1],[102198,102196,-1,-1],[102199,102197,-1,-1],[102200,102198,-1,-1],[102201,102199,-1,-1],[102202,102200,-1,-1],[102203,102201,-1,-1],[102204,102202,-1,-1],[102205,102203,-1,-1],[102206,102204,-1,-1],[102207,102205,-1,-1],[102208,102206,-1,-1],[102209,102207,-1,-1],[102210,102208,-1,-1],[102211,102209,-1,-1],[102212,102210,-1,-1],[102213,102211,-1,-1],[102214,102212,-1,-1],[102215,102213,-1,-1],[102216,102214,-1,-1],[102217,102215,-1,-1],[102218,102216,-1,-1],[102219,102217,-1,-1],[102220,102218,-1,-1],[102221,102219,-1,-1],[102222,102220,-1,-1],[102223,102221,-1,-1],[102224,102222,-1,-1],[102225,102223,-1,-1],[102226,102224,-1,-1],[102227,102225,-1,-1],[102228,102226,-1,-1],[102229,102227,-1,-1],[102230,102228,-1,-1],[102231,102229,-1,-1],[102232,102230,-1,-1],[102233,102231,-1,-1],[102234,102232,-1,-1],[102235,102233,-1,-1],[102236,102234,-1,-1],[102237,102235,-1,-1],[102238,102236,-1,-1],[102239,102237,-1,-1],[102240,102238,-1,-1],[102241,102239,-1,-1],[102242,102240,-1,-1],[102243,102241,-1,-1],[102244,102242,-1,-1],[102245,102243,-1,-1],[102246,102244,-1,-1],[102247,102245,-1,-1],[102248,102246,-1,-1],[102249,102247,-1,-1],[102250,102248,-1,-1],[102251,102249,-1,-1],[102252,102250,-1,-1],[102253,102251,-1,-1],[102254,102252,-1,-1],[102255,102253,-1,-1],[102256,102254,-1,-1],[102257,102255,-1,-1],[102258,102256,-1,-1],[102259,102257,-1,-1],[102260,102258,-1,-1],[102261,102259,-1,-1],[102262,102260,-1,-1],[102263,102261,-1,-1],[102264,102262,-1,-1],[102265,102263,-1,-1],[102266,102264,-1,-1],[102267,102265,-1,-1],[102268,102266,-1,-1],[102269,102267,-1,-1],[102270,102268,-1,-1],[102271,102269,-1,-1],[102272,102270,-1,-1],[102273,102271,-1,-1],[102274,102272,-1,-1],[102275,102273,-1,-1],[102276,102274,-1,-1],[102277,102275,-1,-1],[102278,102276,-1,-1],[102279,102277,-1,-1],[102280,102278,-1,-1],[102281,102279,-1,-1],[102282,102280,-1,-1],[102283,102281,-1,-1],[102284,102282,-1,-1],[102285,102283,-1,-1],[102286,102284,-1,-1],[102287,102285,-1,-1],[102288,102286,-1,-1],[102289,102287,-1,-1],[102290,102288,-1,-1],[102291,102289,-1,-1],[102292,102290,-1,-1],[102293,102291,-1,-1],[102294,102292,-1,-1],[102295,102293,-1,-1],[102296,102294,-1,-1],[102297,102295,-1,-1],[102298,102296,-1,-1],[102299,102297,-1,-1],[102300,102298,-1,-1],[102301,102299,-1,-1],[102302,102300,-1,-1],[102303,102301,-1,-1],[102304,102302,-1,-1],[102305,102303,-1,-1],[102306,102304,-1,-1],[102307,102305,-1,-1],[102308,102306,-1,-1],[102309,102307,-1,-1],[102310,102308,-1,-1],[102311,102309,-1,-1],[102312,102310,-1,-1],[102313,102311,-1,-1],[102314,102312,-1,-1],[102315,102313,-1,-1],[102316,102314,-1,-1],[102317,102315,-1,-1],[102318,102316,-1,-1],[102319,102317,-1,-1],[-1,102318,-1,-1]]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/layerData/layerData.json\n// module id = 9trC\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1e34adcd\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1e34adcd\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1e34adcd\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin: 0;\n}\nbody {\n  margin: 0;\n  overflow: hidden;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","<template>\n  <div class=\"tree\">\n    <div ref=\"description\" id=\"description\" style=\"display: none;top: 0; left: 0;cursor: default\">\n      <span ref=\"d_text\">x: 0, y: 0, z: 0</span>\n    </div>\n    <div ref=\"container\"></div>\n  </div>\n</template>\n\n<script>\n\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport { GUI } from 'dat.gui'\nexport default {\n  name: 'Tree',\n  data () {\n    return {\n      \n      scene: null,\n      group: null,\n      camera: null,\n      pointLight: null,\n      ambient: null,\n      renderer: null,\n      controls: null,\n        \n      width: 0,\n      height: 0,\n\n      options: {\n        nodesNumber: 10,\n        edgesNumber: 10,\n        nodesDistance: 3,\n        nodesRadius: 10,\n        imgSize: 100,\n        randomSize: 50,\n        color: 0xff00ff,\n        background: true,\n        isLightFollowCamera: false,\n      },\n  \n      divisions: 20,\n\n      data: {\n        nodes: [],\n        edges: []\n      }, \n    }\n  },\n  methods: {\n    init() {\n      \n      this.initThree();\n      this.initScene();\n      this.initCamera();\n      this.initLight();\n      this.initObject();\n      this.initGUI();\n      this.render();\n      this.addListener();\n    },\n    initThree() {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      // 防锯齿\n      var devicePixelRatio = window.devicePixelRatio;\n      this.renderer = new THREE.WebGLRenderer({\n              antialias: true,\n          });\n      this.renderer.setPixelRatio(devicePixelRatio);\n      this.renderer.setSize(this.width, this.height);\n      this.renderer.setClearColor(0x000000, 1);\n      this.$refs.container.appendChild(this.renderer.domElement);\n    },\n    initScene() {\n      this.scene = new THREE.Scene();\n    },\n    initCamera() {\n      // this.camera = new OrthographicCamera(this.width / - 2, this.width / 2, this.height / 2,   this.height / - 2, 0, 10000);\n  \n      this.camera = new THREE.PerspectiveCamera( 45, this.width/this.height, 1, 10000);\n      this.camera.position.set(300, 300, 300);\n      this.camera.up.x = 0; \n      this.camera.up.y = 1; \n      this.camera.up.z = 0; \n      this.camera.lookAt({\n        x: 0,\n        y: 0,\n        z: 0\n      });\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true; \n      this.controls.dampingFactor = 0.05;\n      this.controls.screenSpacePanning = false;\n      this.controls.maxPolarAngle = Math.PI / 2;\n  \n    },    \n    initLight() {\n      this.pointLight = new THREE.PointLight(0xffffff);\n      this.pointLight.position.set(4000, 2000, 3000);\n      this.ambient = new THREE.AmbientLight(0x444444);\n      this.scene.add(this.pointLight);\n      this.scene.add(this.ambient);\n    },\n   \n    initObject() {\n      this.group = new THREE.Group();\n  \n      while(this.data.edges.length < this.options.edgesNumber) {\n        let source = Math.floor((Math.random()*this.options.nodesNumber));\n        let target = Math.floor((Math.random()*this.options.nodesNumber));\n        if (source != target) {\n          this.data.edges.push([source, target]);\n        }\n      }\n      this.drawLine(this.drawNodes(this.data.nodes), this.data.edges);\n      \n      this.initAxis();\n      \n      this.scene.add(this.group);\n      console.log(this.scene);\n      \n    },\n    initGUI() {\n        var gui = new GUI();\n        var folderGeometry = gui.addFolder( 'Geometry' );\n        var _this = this;\n        folderGeometry.add(this.options, 'nodesNumber', 1, 1000000).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'edgesNumber', 1, 5000).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'nodesDistance', 1, 20).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'nodesRadius', 1, 10).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'imgSize', 100, 500).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'randomSize', 50, 200).onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'color').onChange(function(){\n          _this.group.children[0].material.color.set(_this.options.color)\n        });\n\n        folderGeometry.add(this.options, 'background').onChange(this.onBgChange);\n\n        folderGeometry.add(this.options, 'isLightFollowCamera').onChange(function() {\n            \n        });\n\n        folderGeometry.open();\n\n    },\n    onBgChange(e) {\n      var bgcolor;\n      if (this.options.background) {\n          bgcolor = 0x000000;\n      } else {\n          bgcolor = 0xf0f0f0;\n      }\n      this.renderer.setClearColor(bgcolor, 1);\n      this.group.children.forEach(function(e) {\n        if (e.name == 'edges') {\n          e.children.forEach(function(g){\n            g.material.color.set(0xffffff - bgcolor);\n          })\n        } else if(e.name == 'Axis') {\n          e.children.forEach(function(g){\n            g.children.forEach(function(m){\n              m.material.color.set(0xffffff - bgcolor);\n            })\n          })\n        }\n      })\n    },\n    randomizeMatrix(matrix) {\n      let position = new THREE.Vector3();\n      let rotation = new THREE.Euler();\n      let quaternion = new THREE.Quaternion();\n      let scale = new THREE.Vector3();\n  \n  \n      position.x = Math.floor(Math.random() * this.options.randomSize - this.options.randomSize/2) * this.options.nodesDistance;\n      position.y = Math.floor(Math.random() * this.options.randomSize - this.options.randomSize/2) * this.options.nodesDistance;\n      position.z = Math.floor(Math.random() * this.options.randomSize - this.options.randomSize/2) * this.options.nodesDistance;\n      this.data.nodes.push([position.x, position.y, position.z]);\n  \n      rotation.x = 0;\n      rotation.y = 0;\n      rotation.z = 0;\n  \n      quaternion.setFromEuler(rotation);\n  \n      scale.x = scale.y = scale.z = 1;\n  \n      matrix.compose(position, quaternion, scale);\n  \n    },\n    drawNodes(nodesData) {\n      var geometry = new THREE.SphereGeometry(this.options.nodesRadius, this.options.nodesRadius, this.options.nodesRadius); \n      var material = new THREE.MeshLambertMaterial({\n        color: this.options.color\n      });\n      var mesh = new THREE.InstancedMesh(geometry, material, this.options.nodesNumber);\n      mesh.name = 'nodes';\n      for (let i = 0; i < this.options.nodesNumber; i++) {\n        let matrix = new THREE.Matrix4();\n        this.randomizeMatrix(matrix);\n        mesh.setMatrixAt(i, matrix);\n      }\n      this.group.add(mesh);\n      let nodes = [];\n      nodesData.forEach(function(arr) {\n        let node = new THREE.Vector3(arr[0], arr[1], arr[2]);\n        nodes.push(node);\n      })\n      return nodes;\n    },\n    drawLine(nodes, edges) {\n      let material = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n      });\n      var group = new THREE.Group();\n      group.name = 'edges';\n      this.data.edges.forEach(function(edge) {\n        let geometry = new THREE.Geometry(); \n      geometry.vertices = [nodes[edge[0]], nodes[edge[1]]];\n        let line = new THREE.Line(geometry, material);\n        group.add(line);\n      })\n      this.group.add(group);\n    },\n    render() {\n      this.renderer.clear();\n      this.renderer.render(this.scene, this.camera);\n      this.lightFollowCamera();\n      this.controls.update();\n      this.axisUpdate();\n      requestAnimationFrame(this.render);\n    },\n    initAxis() {\n      //中心定位坐标轴\n      let axisHelper = new THREE.AxesHelper(this.options.imgSize);\n      this.group.add(axisHelper);\n      \n      var groupAxis = new THREE.Group();\n      groupAxis.name = 'Axis';\n      var groupxz = new THREE.Group();\n      groupxz.name = 'planeXZ';\n      var groupxy = new THREE.Group();\n      groupxy.name = 'planeXY';\n      var groupyz = new THREE.Group();\n      groupyz.name = 'planeYZ';\n      var groupTextX = new THREE.Group();\n      groupTextX .name = 'textX';\n      var groupTextY = new THREE.Group();\n      groupTextY .name = 'textY';\n      var groupTextZ = new THREE.Group();\n      groupTextZ .name = 'textZ';\n      var strX = new THREE.Group();\n      strX .name = 'strX';\n      var strY = new THREE.Group();\n      strY.name = 'strY';\n      var strZ = new THREE.Group();\n      strZ.name = 'strZ';\n      var material = new THREE.LineBasicMaterial({\n            color: 0xffffff,\n        });\n      //x-z面\n      var geometryXZ = new THREE.Geometry();\n      geometryXZ.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXZ.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n          var linex = new THREE.Line(geometryXZ, material);\n          linex.position.z = i * this.divisions - this.options.imgSize;\n          var liney = new THREE.Line(geometryXZ, material);\n          liney.position.x = i * this.divisions - this.options.imgSize;\n          liney.rotation.y = Math.PI * 3/ 2;\n          groupxz.add(linex);\n          groupxz.add(liney);\n      }\n      groupAxis.add(groupxz);\n    \n      //x-y面\n    \n      var geometryXY = new THREE.Geometry();\n      geometryXY.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXY.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n        var linex = new THREE.Line(geometryXY, material);\n        linex.position.y = i * this.divisions - this.options.imgSize;\n        var liney = new THREE.Line(geometryXY, material);\n        liney.position.x = i * this.divisions - this.options.imgSize;\n        liney.rotation.z = Math.PI * 3/ 2;\n        groupxy.add(linex);\n         groupxy.add(liney);\n      }\n      groupAxis.add(groupxy);\n        //y-z面\n    \n      var geometryYZ = new THREE.Geometry();\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, -this.options.imgSize));\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, this.options.imgSize));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n          var linex = new THREE.Line(geometryYZ, material);\n          linex.position.y = i * this.divisions - this.options.imgSize;\n          groupyz.add(linex);\n          var liney = new THREE.Line(geometryYZ, material);\n          liney.position.z = i * this.divisions - this.options.imgSize;\n          liney.rotation.x = Math.PI * 3/ 2;\n          groupyz.add(liney);\n      }\n      groupAxis.add(groupyz);\n    \n      // 网格坐标数字刻度\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n        var textx = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18, \n            fontface: \"Georgia\", \n        });\n      \n        var texty = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18,\n            fontface: \"Georgia\", \n        });\n        var textz = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18, \n            fontface: \"Georgia\", \n        });\n        textx.center = new THREE.Vector2(0.1, 1);\n        textx.position.set(i * this.divisions - this.options.imgSize, 0, 0);\n\n        texty.center = new THREE.Vector2(0, 1);\n        texty.position.set(0, 0, i * this.divisions - this.options.imgSize);\n\n        textz.center = new THREE.Vector2(0.1, 0.9);\n        textz.position.set(0, i * this.divisions - this.options.imgSize, 0);\n            \n        groupTextX.add(textx);\n        groupTextY.add(texty);\n        groupTextZ.add(textz);      \n      }\n    \n      groupAxis.add(groupTextX);\n      groupAxis.add(groupTextY);\n      groupAxis.add(groupTextZ);\n    \n      // xyz标识\n      var str = this.makeTextSprite('X', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 30);\n      strX.add(str);\n        \n      var str = this.makeTextSprite('Y', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strY.add(str);\n      \n      \n      var str = this.makeTextSprite('Z', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strZ.add(str);\n        \n      groupAxis.add(strX);\n      groupAxis.add(strY);\n      groupAxis.add(strZ);\n    \n      // 动态定位轴\n      var coverx = new THREE.Group();\n      coverx.name = 'coverX';\n      var coverLine = new THREE.Geometry();\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n      \n      var line = new THREE.Line(coverLine, material);\n      coverx.add(line);\n      \n      var covery = new THREE.Group();\n      covery.name = 'coverY';\n      covery.add(line.clone());\n      var coverz = new THREE.Group();\n      coverz.name = 'coverZ';\n      coverz.add(line.clone());\n      groupAxis.add(coverx);\n      groupAxis.add(covery);\n      groupAxis.add(coverz);\n      this.group.add(groupAxis);\n      \n    },\n    makeTextSprite(message, parameters) {\n      if ( parameters === undefined ) parameters = {};\n      \n      var fontface = parameters.hasOwnProperty(\"fontface\") ? \n          parameters[\"fontface\"] : \"Arial\";\n      \n      var fontsize = parameters.hasOwnProperty(\"fontsize\") ? \n          parameters[\"fontsize\"] : 18;\n\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      context.font = \"Bold \" + fontsize + \"px \" + fontface;\n      \n      var metrics = context.measureText(message);\n   \n      context.fillStyle = \"rgba(255, 255, 255, 1.0)\";\n      context.fillText(message, 0, fontsize);\n      \n      var texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n    \n      var spriteMaterial = new THREE.SpriteMaterial({ \n              map: texture, \n              sizeAttenuation: true\n          });\n      var sprite = new THREE.Sprite(spriteMaterial);\n      sprite.scale.set(100, 50, 1.0);\n      return sprite;  \n    },\n    lightFollowCamera() {\n        if (this.options.isLightFollowCamera) {\n            this.pointLight.position.copy(this.camera.position);\n        } else {\n            this.pointLight.position.set(4000, 2000, 3000);\n        }\n    },\n    updateScene() {\n      let meshs = [];\n\n      this.group.traverse(function(obj) {\n        if (obj.type === 'Mesh' || obj.type === 'Line') {\n          meshs.push(obj);\n        }\n      })\n      for (let i = 0; i < meshs.length; i++) {\n        let mesh = meshs[i];\n        meshs[i].geometry.dispose();\n        meshs[i].material.dispose();\n      }\n      this.scene.remove(this.group);\n\n      this.data = {\n        nodes: [],\n        edges: []\n      };\n      this.initObject();\n    },\n    axisUpdate() {\n      let planeXZ, planeXY, planeYZ, \n      textX, textY, textZ,\n      strX, strY, strZ,\n      coverX, coverY, coverZ;\n      \n      this.group.children.forEach(function(e){\n        if(e.name == 'Axis') {\n          for(let i = 0; i < e.children.length; i++){\n            if(e.children[i].name == 'planeXZ') {\n              planeXZ = e.children[i];\n            } else if(e.children[i].name == 'planeXY') {\n              planeXY = e.children[i];\n            } else if(e.children[i].name == 'planeYZ') {\n              planeYZ = e.children[i];\n            } else if(e.children[i].name == 'textX') {\n              textX = e.children[i];\n            } else if(e.children[i].name == 'textY') {\n              textY = e.children[i];\n            } else if(e.children[i].name == 'textZ') {\n              textZ = e.children[i];\n            } else if(e.children[i].name == 'strX') {\n              strX = e.children[i];\n            } else if(e.children[i].name == 'strY') {\n              strY = e.children[i];\n            } else if(e.children[i].name == 'strZ') {\n              strZ = e.children[i];\n            } else if(e.children[i].name == 'coverX') {\n              coverX = e.children[i];\n            } else if(e.children[i].name == 'coverY') {\n              coverY = e.children[i];\n            } else if(e.children[i].name == 'coverZ') {\n              coverZ = e.children[i];\n            }\n          }\n        }\n      })\n      \n      if(this.camera.rotation._z > 0 && this.camera.rotation._z < Math.PI/2){\n        planeXY.position.z = -this.options.imgSize;\n        planeYZ.position.x = -this.options.imgSize;\n        planeXZ.position.y = -this.options.imgSize;\n  \n        textX.position.z = this.options.imgSize + 3;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = this.options.imgSize + 10;\n        strX.position.y = -this.options.imgSize;\n        \n        \n        textY.position.x = this.options.imgSize + 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = this.options.imgSize + 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = this.options.imgSize;\n        textZ.position.x = -this.options.imgSize;\n        strY.position.z = this.options.imgSize + 30;\n        strY.position.x = -this.options.imgSize;\n        \n      } else if(this.camera.rotation._z > Math.PI/2 && this.camera.rotation._z < Math.PI){\n        planeXY.position.z = this.options.imgSize;\n        planeYZ.position.x = -this.options.imgSize;\n        \n        textX.position.z = -this.options.imgSize - 5;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = -this.options.imgSize - 60;\n        strX.position.y = -this.options.imgSize;\n      \n        textY.position.x = this.options.imgSize + 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = this.options.imgSize + 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = -this.options.imgSize - 10;\n        strY.position.z = -this.options.imgSize - 30;\n        strY.position.x = -this.options.imgSize;\n        \n      } else if(this.camera.rotation._z > -Math.PI && this.camera.rotation._z < -Math.PI/2){\n        planeXY.position.z = this.options.imgSize;\n        planeYZ.position.x = this.options.imgSize;\n        \n        textX.position.z = -this.options.imgSize - 5;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = -this.options.imgSize - 60;\n        strX.position.y = -this.options.imgSize;\n        \n        textY.position.x = - this.options.imgSize - 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = -this.options.imgSize - 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = this.options.imgSize;\n        textZ.position.x = -this.options.imgSize - 10;\n        strY.position.z = this.options.imgSize;\n        strY.position.x = -this.options.imgSize - 30;\n  \n        \n        \n      } else if(this.camera.rotation._z > -Math.PI/2 && this.camera.rotation._z < 0){\n        planeXY.position.z = -this.options.imgSize;\n        textX.position.z = this.options.imgSize + 3;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = this.options.imgSize + 10;\n        strX.position.y = -this.options.imgSize;\n        \n        planeYZ.position.x = this.options.imgSize;\n        textY.position.x = -this.options.imgSize - 5;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = -this.options.imgSize - 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = -this.options.imgSize;\n        textZ.position.x = -this.options.imgSize;\n        strY.position.z = -this.options.imgSize;\n        strY.position.x = -this.options.imgSize - 30;\n      }\n    },\n    getSelectObj(mouse, raycaster, e) {\n      mouse.x =  e.clientX / this.renderer.domElement.clientWidth*2-1;\n      mouse.y =  -(e.clientY / this.renderer.domElement.clientHeight*2)+1;\n      raycaster.setFromCamera(mouse, this.camera);//以camera为z坐标，确定所点击物体的3D空间位置\n      let intersects = raycaster.intersectObjects(this.scene.children, true);//确定所点击位置上的物体数量集合\n      return intersects;//返回连线经过的物体集合\n    },\n    addListener() {\n      document.addEventListener('mousemove', this.onDocumentMouseMove, false);\n      window.addEventListener( 'resize', this.onWindowResize, false );\n    },\n    onWindowResize(e) {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight );\n    },\n    onDocumentMouseMove(e) {\n      let raycaster = new THREE.Raycaster();\n      let mouse = new THREE.Vector2();\n      let intersectsObjArr = this.getSelectObj(mouse, raycaster, e);\n      let description = this.$refs.description;\n      let descriptionText = this.$refs.d_text;\n      let startx = 0;\n      let starty = 0;\n      let startz = 0;\n      if(intersectsObjArr.length > 0 && intersectsObjArr[0].object.geometry.type == \"SphereGeometry\"){\n      // 所选目标坐标\n      startx = this.data.nodes[intersectsObjArr[0].instanceId][0];\n      starty = this.data.nodes[intersectsObjArr[0].instanceId][1];\n      startz = this.data.nodes[intersectsObjArr[0].instanceId][2];\n\n        description.style.top = e.pageY+\"px\";\n        description.style.left = e.pageX + 10 +\"px\";\n        description.style.cursor = \"pointer\";\n        description.style.display = \"block\";\n        descriptionText.innerHTML = `x: ${startx}, y: ${starty}, z: ${startz}( id: ${intersectsObjArr[0].instanceId})`;\n      } else {\n        description.style.display = \"none\";\n        description.style.cursor = \"default\";\n      }\n  \n    },\n  },\n  mounted() {\n    this.init();\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  #description {\n    position: absolute;\n    padding: 5px;\n    background: rgba(255, 255, 255, 0.7);\n    border-radius: 4px;\n    font: 14px/21px \"Microsoft YaHei\";\n    white-space: nowrap;\n    z-index: 9999;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Tree.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tree\"},[_c('div',{ref:\"description\",staticStyle:{\"display\":\"none\",\"top\":\"0\",\"left\":\"0\",\"cursor\":\"default\"},attrs:{\"id\":\"description\"}},[_c('span',{ref:\"d_text\"},[_vm._v(\"x: 0, y: 0, z: 0\")])]),_vm._v(\" \"),_c('div',{ref:\"container\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ae814b78\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Tree.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ae814b78\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Tree.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Tree.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Tree.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ae814b78\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Tree.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ae814b78\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Tree.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"Mountain\">\n    \n    <div ref=\"container\"></div>\n  </div>\n</template>\n\n<script>\n\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport { GUI } from 'dat.gui'\nimport { Lut } from 'three/examples/jsm/math/Lut.js';\nvar scene = null;\nvar controls = null;\nexport default {\n  name: 'Mountain',\n  data () {\n    return {\n      \n      group: null,\n      camera: null,\n      pointLight: null,\n      ambient: null,\n      renderer: null,\n        \n      width: 0,\n      height: 0,\n\n      options: {\n        level: 0.2,\n        limit: 10000,\n        nodesNumber: 10,\n        edgesNumber: 10,\n        nodesDistance: 3,\n        nodesRadius: 10,\n        imgSize: 250,\n        randomSize: 50,\n        color: 0xff00ff,\n        background: true,\n        isLightFollowCamera: false,\n      },\n  \n      divisions: 50,\n\n     \n    }\n  },\n  methods: {\n    init() {\n      \n      this.initThree();\n      this.initScene();\n      this.initCamera();\n      this.initLight();\n      this.initObject();\n      this.initGUI();\n      this.render();\n      this.addListener();\n    },\n    initThree() {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      // 防锯齿\n      var devicePixelRatio = window.devicePixelRatio;\n      this.renderer = new THREE.WebGLRenderer({\n              antialias: true,\n          });\n      this.renderer.setPixelRatio(devicePixelRatio);\n      this.renderer.setSize(this.width, this.height);\n      this.renderer.setClearColor(0x000000, 1);\n      this.$refs.container.appendChild(this.renderer.domElement);\n    },\n    initScene() {\n      scene = new THREE.Scene();\n    },\n    initGUI() {\n        var gui = new GUI();\n        var folderGeometry = gui.addFolder('Geometry');\n        folderGeometry.add(this.options, 'level', 0, 10).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'limit', 100, 50000).onChange(this.updateScene);\n        folderGeometry.open();\n        \n    },\n    updateScene() {\n      let meshs = [];\n\n      this.group.traverse(function(obj) {\n        if (obj.type === 'Mesh') {\n          meshs.push(obj);\n        }\n      })\n      for (let i = 0; i < meshs.length; i++) {\n        let mesh = meshs[i];\n        meshs[i].geometry.dispose();\n        meshs[i].material.dispose();\n      }\n      scene.remove(this.group);\n\n      \n      this.initObject();\n    },\n    initCamera() {\n      // this.camera = new OrthographicCamera(this.width / - 2, this.width / 2, this.height / 2,   this.height / - 2, 0, 10000);\n  \n      this.camera = new THREE.PerspectiveCamera( 45, this.width/this.height, 1, 10000);\n      this.camera.position.set(300, 300, 300);\n      this.camera.up.x = 0; \n      this.camera.up.y = 1; \n      this.camera.up.z = 0; \n      this.camera.lookAt({\n        x: 0,\n        y: 0,\n        z: 0\n      });\n      controls = new OrbitControls(this.camera, this.renderer.domElement);\n      controls.enableDamping = true; \n      controls.dampingFactor = 0.05;\n      controls.screenSpacePanning = false;\n  \n    },    \n    initLight() {\n      this.pointLight = new THREE.PointLight(0xffffff);\n\n      this.pointLight.position.set(0, 2000, 0);\n      this.ambient = new THREE.AmbientLight(0x444444);\n      scene.add(this.pointLight);\n      scene.add(this.ambient);\n    },\n    loadFile(name) { // name为文件所在位置\n      let xhr = new XMLHttpRequest();\n      var okStatus = document.location.protocol === \"file:\" ? 0 : 200;\n      xhr.open('GET', name, false);\n      xhr.overrideMimeType(\"text/html;charset=utf-8\");\n      xhr.send(null);\n      return xhr.status === okStatus ? xhr.responseText : null;\n    },\n\n   \n    getNumIslands(grid) {\n        var m = grid.length; //500\n        var n = grid[0].length; //631\n        var res = 0;\n        var a = JSON.parse(JSON.stringify(grid)); \n        var b = [];\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n\n              if(a[i][j][2] != 0) {\n                var count = 0;\n                var group = [];\n                res++;\n                a[i][j][2] = 0;\n                b.push([i, j]);\n                group.push([i, j]);\n\n                while(b.length > 0) {\n                  var row = b[0][0];\n                  var col = b[0][1];\n                  b.shift();\n                  count++;\n                  if(row - 1 >= 0 && a[row - 1][col][2] != 0) {\n                    b.push([row - 1, col]);\n                    group.push([row - 1, col]);\n                    a[row - 1][col][2] = 0;\n                  }\n                  if(row + 1 < m && a[row + 1][col][2] != 0) {\n                    b.push([row + 1, col]);\n                    group.push([row + 1, col]);\n                    a[row + 1][col][2] = 0;\n\n                  }\n                  if(col - 1 >= 0 && a[row][col - 1][2] != 0) {\n                    b.push([row, col - 1]);\n                    group.push([row, col - 1]);\n                    a[row][col - 1][2] = 0;\n                  }\n                  if(col + 1 < n-1 && a[row][col + 1][2] != 0) {\n                    b.push([row, col + 1]);\n                    group.push([row, col + 1]);\n                    a[row][col + 1][2] = 0;\n                  }\n                }\n                if(count < this.options.limit) {\n                  for(let k = 0; k < group.length; k++) {\n                    grid[group[k][0]][group[k][1]][2] = 0;\n                  }\n                }\n              }\n            }\n        }\n\n        return res;\n    },\n    initObject() {\n      \n\n      var v = [];\n      var vertices = [];\n      let data = this.loadFile('./static/Thickness.txt').replace(/\\s+/ig,\" \").split(\" \");\n      data.forEach(e => {\n        v.push(parseFloat(e));\n      })\n      for(let i = 0; i < data.length; i += 3) {\n        vertices.push([v[i], v[i + 1], v[i + 2]]);\n      }\n      for(let i = 0; i < vertices.length; i++) {\n        vertices[i][0] = vertices[i][0] - 750;\n        vertices[i][1] = vertices[i][1] - 1750;\n        vertices[i][2] = vertices[i][2] * 10;\n      }\n      var trace = [];\n      var col = [];\n\n      for(let i = 0, j = 0; i < vertices.length; i++) {\n        if(vertices[i][0] == j) {\n          col.push(vertices[i]);\n          continue;\n        }\n        trace.push(col);\n        col = []\n        j++;\n      }\n      var m = trace.length; //500\n      var n = trace[0].length; //631\n      for(let i = 0; i < m; i++) {\n        for(let j = 0; j < n; j++) {\n          if(i == 0 || j == 0 || i == m - 1 || j == n - 1|| trace[i][j][2] <= this.options.level) {\n            trace[i][j][2] = 0;\n          }\n        }\n      }\n      \n      this.getNumIslands(trace);\n\n      var vBuff = [];\n      var vBuff2 = [];\n      var colors = [];\n\n      for(let i = 0; i < trace.length - 1; i++) {\n        var trace1 = trace[i];\n        var trace2 = trace[i + 1];\n        for(let j = 0; j < trace1.length - 1; j++) {\n          var p1 = trace1[j];\n          var p2 = trace2[j];\n          var p3 = trace1[j + 1];\n          var p4 = trace2[j + 1];\n          if(i !=0 && j != 0 && i != m - 1 && j != n - 1 && trace[i][j][2] <= this.options.level) {\n            continue;\n          }\n          vBuff.push(\n            p1[0], p1[1], p1[2], \n            p3[0], p3[1], p3[2], \n            p4[0], p4[1], p4[2], \n            p1[0], p1[1], p1[2], \n            p2[0], p2[1], p2[2], \n            p4[0], p4[1], p4[2]);\n          vBuff2.push(\n            p1[0], p1[1], - p1[2], \n            p3[0], p3[1], - p3[2], \n            p4[0], p4[1], - p4[2], \n            p1[0], p1[1], - p1[2], \n            p2[0], p2[1], - p2[2], \n            p4[0], p4[1], - p4[2]);\n          colors.push(\n            1, 1 ,p1[2], \n            1, 1 ,p3[2], \n            1, 1 ,p4[2], \n            1, 1 ,p1[2], \n            1, 1 ,p2[2], \n            1, 1 ,p4[2]);\n        }\n      }\n      \n      this.group = new THREE.Group();\n      \n\n      var geometry = new THREE.BufferGeometry();\n      var vertices = new Float32Array(vBuff);\n      var attribue = new THREE.BufferAttribute(vertices, 3); \n      var color = new Float32Array(colors);\n\n      geometry.attributes.color = new THREE.BufferAttribute(color, 3);\n\n      geometry.attributes.position = attribue;\n      geometry.computeVertexNormals();\n      var material = new THREE.MeshLambertMaterial({\n        side: THREE.DoubleSide,\n        vertexColors: THREE.VertexColors,\n      });\n      var mesh = new THREE.Mesh(geometry, material); \n      mesh.rotation.x = Math.PI / 2;\n\n      this.group.add(mesh);\n\n\n      var geometry2 = new THREE.BufferGeometry();\n      var vertices2 = new Float32Array(vBuff2);\n\n      \n      geometry2.attributes.color = new THREE.BufferAttribute(color, 3);\n\n      var attribue = new THREE.BufferAttribute(vertices2, 3); \n      geometry2.attributes.position = attribue;\n\n\n\n      // var attrib = geometry2.getAttribute('position');\n     \n      // var positions = attrib.array;\n      // var vertices = [];\n      // for(var i = 0, n = positions.length; i <n; i += 3){\n      //     var x = positions[i];\n      //     var y = positions[i + 1];\n      //     var z = positions[i + 2];\n      //     vertices.push(new THREE.Vector3(x, y, z));\n      // }\n      // var faces = [];\n      // for(var i = 0, n = vertices.length; i <n; i += 3){\n      //   let face = new THREE.Face3(i, i + 1, i + 2);\n      //     let color1 = new THREE.Color(0xFF0000);\n      //     face.vertexColors.push(color1, color1,color1);\n      //     faces.push(face);\n\n      // }\n      // var colorOther = [];\n      // for(var i = 0, n = vertices.length; i <n; i ++){\n      //     colorOther.push(new THREE.Color(0xff0000));\n      // }\n      // console.log(vertices)\n      // var geometry3 = new THREE.Geometry();\n      // geometry3.vertices = vertices;\n      // geometry3.faces = faces;\n\n      // geometry3.colors = colorOther;\n      // geometry3.computeFaceNormals();              \n      // geometry3.mergeVertices()\n      // geometry3.computeVertexNormals();\n\n\n\n\n\n\n\n      // geometry2.mergeVertices();\n\n      geometry2.computeFaceNormals();\n      geometry2.computeVertexNormals();\n      material.shading = THREE.SmoothShading;\n      \n      var mesh2 = new THREE.Mesh(geometry2, material); \n      mesh2.rotation.x = Math.PI / 2;\n\n      \n\n      this.group.add(mesh2);\n      console.log(mesh2)\n      \n      this.initAxis();\n      \n      scene.add(this.group);\n\n\n\n\n      var lut = new Lut();\n      var params = {\n         colorMap: 'rainbow',\n      };\n\n      lut.setColorMap( params.colorMap );\n\n      lut.setMax(50);\n      lut.setMin(0);\n      geometry = mesh.geometry;\n      geometry2 = mesh2.geometry;\n      colors = geometry.attributes.color;\n\n      for ( var i = 0; i < color.length/3; i ++ ) {\n        var colorValue = color[i*3 + 2];\n        var newcolor = lut.getColor(colorValue);\n        colors.setXYZ( i, newcolor.r, newcolor.g, newcolor.b );\n      }\n    },\n   \n    render() {\n      this.renderer.clear();\n      this.renderer.render(scene, this.camera);\n      controls.update();\n      // this.axisUpdate();\n      requestAnimationFrame(this.render);\n    },\n    initAxis() {\n      //中心定位坐标轴\n      let axisHelper = new THREE.AxesHelper(this.options.imgSize);\n      this.group.add(axisHelper);\n      return;\n      var groupAxis = new THREE.Group();\n      groupAxis.name = 'Axis';\n      var groupxz = new THREE.Group();\n      groupxz.name = 'planeXZ';\n      var groupxy = new THREE.Group();\n      groupxy.name = 'planeXY';\n      var groupyz = new THREE.Group();\n      groupyz.name = 'planeYZ';\n      var groupTextX = new THREE.Group();\n      groupTextX .name = 'textX';\n      var groupTextY = new THREE.Group();\n      groupTextY .name = 'textY';\n      var groupTextZ = new THREE.Group();\n      groupTextZ .name = 'textZ';\n      var strX = new THREE.Group();\n      strX .name = 'strX';\n      var strY = new THREE.Group();\n      strY.name = 'strY';\n      var strZ = new THREE.Group();\n      strZ.name = 'strZ';\n      var material = new THREE.LineBasicMaterial({\n            color: 0xffffff,\n        });\n      //x-z面\n      var geometryXZ = new THREE.Geometry();\n      geometryXZ.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXZ.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n          var linex = new THREE.Line(geometryXZ, material);\n          linex.position.z = i * this.divisions - this.options.imgSize;\n          var liney = new THREE.Line(geometryXZ, material);\n          liney.position.x = i * this.divisions - this.options.imgSize;\n          liney.rotation.y = Math.PI * 3/ 2;\n          groupxz.add(linex);\n          groupxz.add(liney);\n      }\n      groupAxis.add(groupxz);\n    \n      //x-y面\n    \n      var geometryXY = new THREE.Geometry();\n      geometryXY.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXY.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n        var linex = new THREE.Line(geometryXY, material);\n        linex.position.y = i * this.divisions - this.options.imgSize;\n        var liney = new THREE.Line(geometryXY, material);\n        liney.position.x = i * this.divisions - this.options.imgSize;\n        liney.rotation.z = Math.PI * 3/ 2;\n        groupxy.add(linex);\n         groupxy.add(liney);\n      }\n      groupAxis.add(groupxy);\n        //y-z面\n    \n      var geometryYZ = new THREE.Geometry();\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, -this.options.imgSize));\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, this.options.imgSize));\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n          var linex = new THREE.Line(geometryYZ, material);\n          linex.position.y = i * this.divisions - this.options.imgSize;\n          groupyz.add(linex);\n          var liney = new THREE.Line(geometryYZ, material);\n          liney.position.z = i * this.divisions - this.options.imgSize;\n          liney.rotation.x = Math.PI * 3/ 2;\n          groupyz.add(liney);\n      }\n      groupAxis.add(groupyz);\n    \n      // 网格坐标数字刻度\n      for(let i = 0; i <= this.options.imgSize * 2 / this.divisions; i++) {\n        var textx = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18, \n            fontface: \"Georgia\", \n        });\n      \n        var texty = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18,\n            fontface: \"Georgia\", \n        });\n        var textz = this.makeTextSprite(Math.ceil(i * this.divisions - this.options.imgSize), { \n            fontsize: 18, \n            fontface: \"Georgia\", \n        });\n        textx.center = new THREE.Vector2(0.1, 1);\n        textx.position.set(i * this.divisions - this.options.imgSize, 0, 0);\n\n        texty.center = new THREE.Vector2(0, 1);\n        texty.position.set(0, 0, i * this.divisions - this.options.imgSize);\n\n        textz.center = new THREE.Vector2(0.1, 0.9);\n        textz.position.set(0, i * this.divisions - this.options.imgSize, 0);\n            \n        groupTextX.add(textx);\n        groupTextY.add(texty);\n        groupTextZ.add(textz);      \n      }\n    \n      groupAxis.add(groupTextX);\n      groupAxis.add(groupTextY);\n      groupAxis.add(groupTextZ);\n    \n      // xyz标识\n      var str = this.makeTextSprite('X', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 30);\n      strX.add(str);\n        \n      var str = this.makeTextSprite('Y', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strY.add(str);\n      \n      \n      var str = this.makeTextSprite('Z', { \n        fontsize: 36,\n        fontface: \"Georgia\", \n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strZ.add(str);\n        \n      groupAxis.add(strX);\n      groupAxis.add(strY);\n      groupAxis.add(strZ);\n    \n      // 动态定位轴\n      var coverx = new THREE.Group();\n      coverx.name = 'coverX';\n      var coverLine = new THREE.Geometry();\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n      \n      var line = new THREE.Line(coverLine, material);\n      coverx.add(line);\n      \n      var covery = new THREE.Group();\n      covery.name = 'coverY';\n      covery.add(line.clone());\n      var coverz = new THREE.Group();\n      coverz.name = 'coverZ';\n      coverz.add(line.clone());\n      groupAxis.add(coverx);\n      groupAxis.add(covery);\n      groupAxis.add(coverz);\n      this.group.add(groupAxis);\n      \n    },\n    makeTextSprite(message, parameters) {\n      if ( parameters === undefined ) parameters = {};\n      \n      var fontface = parameters.hasOwnProperty(\"fontface\") ? \n          parameters[\"fontface\"] : \"Arial\";\n      \n      var fontsize = parameters.hasOwnProperty(\"fontsize\") ? \n          parameters[\"fontsize\"] : 18;\n\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      context.font = \"Bold \" + fontsize + \"px \" + fontface;\n      \n      var metrics = context.measureText(message);\n   \n      context.fillStyle = \"rgba(255, 255, 255, 1.0)\";\n      context.fillText(message, 0, fontsize);\n      \n      var texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n    \n      var spriteMaterial = new THREE.SpriteMaterial({ \n              map: texture, \n              sizeAttenuation: true\n          });\n      var sprite = new THREE.Sprite(spriteMaterial);\n      sprite.scale.set(100, 50, 1.0);\n      return sprite;  \n    },\n    axisUpdate() {\n      let planeXZ, planeXY, planeYZ, \n      textX, textY, textZ,\n      strX, strY, strZ,\n      coverX, coverY, coverZ;\n      \n      this.group.children.forEach(function(e){\n        if(e.name == 'Axis') {\n          for(let i = 0; i < e.children.length; i++){\n            if(e.children[i].name == 'planeXZ') {\n              planeXZ = e.children[i];\n            } else if(e.children[i].name == 'planeXY') {\n              planeXY = e.children[i];\n            } else if(e.children[i].name == 'planeYZ') {\n              planeYZ = e.children[i];\n            } else if(e.children[i].name == 'textX') {\n              textX = e.children[i];\n            } else if(e.children[i].name == 'textY') {\n              textY = e.children[i];\n            } else if(e.children[i].name == 'textZ') {\n              textZ = e.children[i];\n            } else if(e.children[i].name == 'strX') {\n              strX = e.children[i];\n            } else if(e.children[i].name == 'strY') {\n              strY = e.children[i];\n            } else if(e.children[i].name == 'strZ') {\n              strZ = e.children[i];\n            } else if(e.children[i].name == 'coverX') {\n              coverX = e.children[i];\n            } else if(e.children[i].name == 'coverY') {\n              coverY = e.children[i];\n            } else if(e.children[i].name == 'coverZ') {\n              coverZ = e.children[i];\n            }\n          }\n        }\n      })\n      \n      if(this.camera.rotation._z > 0 && this.camera.rotation._z < Math.PI/2){\n        planeXY.position.z = -this.options.imgSize;\n        planeYZ.position.x = -this.options.imgSize;\n        planeXZ.position.y = -this.options.imgSize;\n  \n        textX.position.z = this.options.imgSize + 3;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = this.options.imgSize + 10;\n        strX.position.y = -this.options.imgSize;\n        \n        \n        textY.position.x = this.options.imgSize + 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = this.options.imgSize + 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = this.options.imgSize;\n        textZ.position.x = -this.options.imgSize;\n        strY.position.z = this.options.imgSize + 30;\n        strY.position.x = -this.options.imgSize;\n        \n      } else if(this.camera.rotation._z > Math.PI/2 && this.camera.rotation._z < Math.PI){\n        planeXY.position.z = this.options.imgSize;\n        planeYZ.position.x = -this.options.imgSize;\n        \n        textX.position.z = -this.options.imgSize - 5;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = -this.options.imgSize - 60;\n        strX.position.y = -this.options.imgSize;\n      \n        textY.position.x = this.options.imgSize + 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = this.options.imgSize + 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = -this.options.imgSize - 10;\n        strY.position.z = -this.options.imgSize - 30;\n        strY.position.x = -this.options.imgSize;\n        \n      } else if(this.camera.rotation._z > -Math.PI && this.camera.rotation._z < -Math.PI/2){\n        planeXY.position.z = this.options.imgSize;\n        planeYZ.position.x = this.options.imgSize;\n        \n        textX.position.z = -this.options.imgSize - 5;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = -this.options.imgSize - 60;\n        strX.position.y = -this.options.imgSize;\n        \n        textY.position.x = - this.options.imgSize - 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = -this.options.imgSize - 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = this.options.imgSize;\n        textZ.position.x = -this.options.imgSize - 10;\n        strY.position.z = this.options.imgSize;\n        strY.position.x = -this.options.imgSize - 30;\n  \n        \n        \n      } else if(this.camera.rotation._z > -Math.PI/2 && this.camera.rotation._z < 0){\n        planeXY.position.z = -this.options.imgSize;\n        textX.position.z = this.options.imgSize + 3;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = this.options.imgSize + 10;\n        strX.position.y = -this.options.imgSize;\n        \n        planeYZ.position.x = this.options.imgSize;\n        textY.position.x = -this.options.imgSize - 5;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = -this.options.imgSize - 30;\n        strZ.position.y = -this.options.imgSize;\n        \n        textZ.position.z = -this.options.imgSize;\n        textZ.position.x = -this.options.imgSize;\n        strY.position.z = -this.options.imgSize;\n        strY.position.x = -this.options.imgSize - 30;\n      }\n    },\n    addListener() {\n      window.addEventListener( 'resize', this.onWindowResize, false );\n    },\n    onWindowResize(e) {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight );\n    },\n  },\n  mounted() {\n    this.init();\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  #description {\n    position: absolute;\n    padding: 5px;\n    background: rgba(255, 255, 255, 0.7);\n    border-radius: 4px;\n    font: 14px/21px \"Microsoft YaHei\";\n    white-space: nowrap;\n    z-index: 9999;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Mountain.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"Mountain\"},[_c('div',{ref:\"container\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d88a312c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Mountain.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d88a312c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Mountain.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Mountain.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Mountain.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d88a312c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Mountain.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-d88a312c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Mountain.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"Seismic\">\n    <div ref=\"container\"></div>\n  </div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\n\nimport { GUI } from \"dat.gui\";\nexport default {\n  name: \"Tree\",\n  data() {\n    return {\n      scene: null,\n      group: null,\n      camera: null,\n      pointLight: null,\n      ambient: null,\n      renderer: null,\n      controls: null,\n      orbitControls: null,\n      transformControls: null,\n      stats: null,\n      width: 0,\n      height: 0,\n\n      options: {\n        nodesNumber: 10,\n        edgesNumber: 10,\n        nodesDistance: 3,\n        nodesRadius: 10,\n        imgSize: 100,\n        randomSize: 50,\n        color: 0xff00ff,\n        background: true,\n        isLightFollowCamera: false,\n      },\n\n      divisions: 200,\n\n      data: {\n        nodes: [],\n        edges: [],\n      },\n    };\n  },\n  methods: {\n    init() {\n      this.initThree();\n      this.initScene();\n      this.initCamera();\n      this.initControls();\n      this.initLight();\n      this.initObject();\n      // this.initGUI();\n      this.render();\n      this.addListener();\n    },\n    // 画布初始化\n    initThree() {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      // 防锯齿\n      var devicePixelRatio = window.devicePixelRatio;\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n      });\n      this.renderer.setPixelRatio(devicePixelRatio);\n      this.renderer.setSize(this.width, this.height);\n      this.renderer.setClearColor(0x000000, 1);\n      this.$refs.container.appendChild(this.renderer.domElement);\n\n      this.stats = new Stats();\n      this.$refs.container.appendChild(this.stats.dom);\n    },\n    // 场景初始化\n    initScene() {\n      this.scene = new THREE.Scene();\n    },\n    // 相机控制器配置\n    initControls() {\n      this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.orbitControls.enableDamping = true;\n      this.orbitControls.dampingFactor = 1;\n      this.orbitControls.screenSpacePanning = false;\n      this.orbitControls.maxPolarAngle = Math.PI / 2;\n      this.orbitControls.update();\n      // var orbitControls_self = this.orbitControls;\n      // this.transformControls.addEventListener(\"dragging-changed\", function (event) {\n      //   orbitControls_self.enabled = !event.value;\n      // });\n    },\n    // 相机初始化\n    initCamera() {\n      // 正交相机\n      // this.camera = new OrthographicCamera(this.width / - 2, this.width / 2, this.height / 2,   this.height / - 2, 0, 10000);\n\n      // 透视相机\n      this.camera = new THREE.PerspectiveCamera(\n        45,\n        this.width / this.height,\n        1,\n        10000\n      );\n      this.camera.position.set(300, 300, 300);\n      this.camera.up.x = 0;\n      this.camera.up.y = 1;\n      this.camera.up.z = 0;\n      this.camera.lookAt({\n        x: 0,\n        y: 0,\n        z: 0,\n      });\n\n    },\n    // 光线初始化\n    initLight() {\n      // 点光源\n      this.pointLight = new THREE.PointLight(0xffffff);\n      this.pointLight.position.set(4000, 2000, 3000);\n      // 环境光\n      this.ambient = new THREE.AmbientLight(0x444444);\n      this.scene.add(this.pointLight);\n      this.scene.add(this.ambient);\n    },\n  \n    createCube(x, y, z) {\n      var cubeG = new THREE.BoxGeometry(x, y, z);\n      var path = \"../../../static/textures/\";\n      var format = \".png\";\n      var urls = [\n        path + \"02\" + format, // 右前\n        path + \"02\" + format, // 右后\n        path + \"03\" + format, // 上\n        path + \"03\" + format, // 下\n        path + \"01\" + format, // 左前\n        path + \"01\" + format, // 左后\n      ]; //加载6张图\n      var maps = [];\n      for (var i = 0; i < urls.length; i++) {\n        var texture = new THREE.TextureLoader().load(urls[i]);\n        switch (i) {\n          case 2:\n          // texture.rotation = Math.PI / 2;\n          // texture.center.set(50, 50);\n        }\n        maps.push(\n          new THREE.MeshPhongMaterial({\n            map: texture,\n          })\n        );\n      }\n\n      return new THREE.Mesh(cubeG, maps);\n    },\n    initObject() {\n      var path = \"../../../static/textures/\";\n      var format = \".png\";\n      var urls = [\n        path + \"02\" + format, // 右前\n        path + \"02\" + format, // 右后\n        path + \"03\" + format, // 上\n        path + \"03\" + format, // 下\n        path + \"01\" + format, // 左前\n        path + \"01\" + format, // 左后\n      ]; //加载6张图\n      this.group = new THREE.Group();\n      // var cube = this.createCube(100, 100, 100);\n\n      // this.group.add(cube);\n\n      // 截面\n      var groupImgPlane = new THREE.Group();\n      groupImgPlane.name = \"ImgPlane\";\n\n      // x视角截面\n      var groupImgPlaneX = new THREE.Group();\n      groupImgPlaneX.name = \"ImgPlaneX\";\n      var xViewPlaneG = new THREE.PlaneGeometry(this.options.imgSize * 2, this.options.imgSize * 2);\n      var xViewPlaneT = new THREE.TextureLoader().load(urls[0]);\n      var xViewPlaneM = new THREE.MeshPhongMaterial({\n        side: THREE.DoubleSide,\n        map: xViewPlaneT,\n      });\n      var xViewPlane = new THREE.Mesh(xViewPlaneG, xViewPlaneM);\n\n      // this.transformControls.attach(xViewPlane);\n\t\t\t// this.scene.add(this.transformControls);\n      \n      groupImgPlane.add(xViewPlane);\n\n      // y视角截面\n      var groupImgPlaneY = new THREE.Group();\n      groupImgPlaneY.name = \"ImgPlaneY\";\n      var yViewPlaneG = new THREE.PlaneGeometry(this.options.imgSize * 2, this.options.imgSize * 2);\n      var yViewPlaneT = new THREE.TextureLoader().load(urls[2]);\n      var yViewPlaneM = new THREE.MeshPhongMaterial({\n        side: THREE.DoubleSide,\n        map: yViewPlaneT,\n      });\n      var yViewPlane = new THREE.Mesh(yViewPlaneG, yViewPlaneM);\n      yViewPlane.rotateX(Math.PI/2)\n\n      groupImgPlane.add(yViewPlane);\n      \n      // z视角截面\n      var groupImgPlaneZ = new THREE.Group();\n      groupImgPlaneZ.name = \"ImgPlaneZ\";\n      var zViewPlaneG = new THREE.PlaneGeometry(this.options.imgSize * 2, this.options.imgSize * 2);\n      var zViewPlaneT = new THREE.TextureLoader().load(urls[4]);\n      var zViewPlaneM = new THREE.MeshPhongMaterial({\n        side: THREE.DoubleSide,\n        map: zViewPlaneT,\n      });\n      var zViewPlane = new THREE.Mesh(zViewPlaneG, zViewPlaneM);\n      zViewPlane.rotateY(Math.PI/2)\n      groupImgPlane.add(zViewPlane);\n\n\n      this.group.add(groupImgPlane);\n      \n\n      this.initAxis();\n      this.scene.add(this.group);\n    },\n    // GUI初始化\n    initGUI() {\n      var gui = new GUI();\n      var folderGeometry = gui.addFolder(\"Geometry\");\n      var _this = this;\n      folderGeometry\n        .add(this.options, \"nodesNumber\", 1, 1000000)\n        .onChange(this.updateScene);\n      folderGeometry\n        .add(this.options, \"edgesNumber\", 1, 5000)\n        .onChange(this.updateScene);\n      folderGeometry\n        .add(this.options, \"nodesDistance\", 1, 20)\n        .onChange(this.updateScene);\n      folderGeometry\n        .add(this.options, \"nodesRadius\", 1, 10)\n        .onChange(this.updateScene);\n      folderGeometry\n        .add(this.options, \"imgSize\", 100, 500)\n        .onChange(this.updateScene);\n      folderGeometry\n        .add(this.options, \"randomSize\", 50, 200)\n        .onChange(this.updateScene);\n      folderGeometry.addColor(this.options, \"color\").onChange(function () {\n        _this.group.children[0].material.color.set(_this.options.color);\n      });\n\n      folderGeometry.add(this.options, \"background\").onChange(this.onBgChange);\n\n      folderGeometry\n        .add(this.options, \"isLightFollowCamera\")\n        .onChange(function () {});\n\n      folderGeometry.open();\n    },\n    // 背景颜色切换\n    onBgChange(e) {\n      var bgcolor;\n      if (this.options.background) {\n        bgcolor = 0x000000;\n      } else {\n        bgcolor = 0xf0f0f0;\n      }\n      this.renderer.setClearColor(bgcolor, 1);\n      this.group.children.forEach(function (e) {\n        if (e.name == \"edges\") {\n          e.children.forEach(function (g) {\n            g.material.color.set(0xffffff - bgcolor);\n          });\n        } else if (e.name == \"Axis\") {\n          e.children.forEach(function (g) {\n            g.children.forEach(function (m) {\n              m.material.color.set(0xffffff - bgcolor);\n            });\n          });\n        }\n      });\n    },\n    // 随机矩阵生成\n    randomizeMatrix(matrix) {\n      let position = new THREE.Vector3();\n      let rotation = new THREE.Euler();\n      let quaternion = new THREE.Quaternion();\n      let scale = new THREE.Vector3();\n\n      position.x =\n        Math.floor(\n          Math.random() * this.options.randomSize - this.options.randomSize / 2\n        ) * this.options.nodesDistance;\n      position.y =\n        Math.floor(\n          Math.random() * this.options.randomSize - this.options.randomSize / 2\n        ) * this.options.nodesDistance;\n      position.z =\n        Math.floor(\n          Math.random() * this.options.randomSize - this.options.randomSize / 2\n        ) * this.options.nodesDistance;\n      this.data.nodes.push([position.x, position.y, position.z]);\n\n      rotation.x = 0;\n      rotation.y = 0;\n      rotation.z = 0;\n\n      quaternion.setFromEuler(rotation);\n\n      scale.x = scale.y = scale.z = 1;\n\n      matrix.compose(position, quaternion, scale);\n    },\n    // 渲染器\n    render() {\n      // this.renderer.clear();\n      this.renderer.render(this.scene, this.camera);\n      // 光照跟随相机\n      this.lightFollowCamera();\n      this.stats.update();\n      // 坐标轴视图更新\n      this.axisUpdate();\n\n      requestAnimationFrame(this.render);\n    },\n\n    // 坐标轴初始化\n    initAxis() {\n      //中心定位坐标轴\n      let axisHelper = new THREE.AxesHelper(this.options.imgSize);\n      this.group.add(axisHelper);\n\n      var groupAxis = new THREE.Group();\n      groupAxis.name = \"Axis\";\n      var groupxz = new THREE.Group();\n      groupxz.name = \"planeXZ\";\n      var groupxy = new THREE.Group();\n      groupxy.name = \"planeXY\";\n      var groupyz = new THREE.Group();\n      groupyz.name = \"planeYZ\";\n      var groupTextX = new THREE.Group();\n      groupTextX.name = \"textX\";\n      var groupTextY = new THREE.Group();\n      groupTextY.name = \"textY\";\n      var groupTextZ = new THREE.Group();\n      groupTextZ.name = \"textZ\";\n      var strX = new THREE.Group();\n      strX.name = \"strX\";\n      var strY = new THREE.Group();\n      strY.name = \"strY\";\n      var strZ = new THREE.Group();\n      strZ.name = \"strZ\";\n      var material = new THREE.LineBasicMaterial({\n        color: 'red',\n        \n      });\n      //x-z面\n      var geometryXZ = new THREE.Geometry();\n      geometryXZ.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXZ.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for (let i = 0; i <= (this.options.imgSize * 2) / this.divisions; i++) {\n        var linex = new THREE.Line(geometryXZ, material);\n        linex.position.z = i * this.divisions - this.options.imgSize;\n        var liney = new THREE.Line(geometryXZ, material);\n        liney.position.x = i * this.divisions - this.options.imgSize;\n        liney.rotation.y = (Math.PI * 3) / 2;\n        groupxz.add(linex);\n        groupxz.add(liney);\n      }\n      groupAxis.add(groupxz);\n\n      \n\n      //x-y面\n\n      var geometryXY = new THREE.Geometry();\n      geometryXY.vertices.push(new THREE.Vector3(-this.options.imgSize, 0, 0));\n      geometryXY.vertices.push(new THREE.Vector3(this.options.imgSize, 0, 0));\n      for (let i = 0; i <= (this.options.imgSize * 2) / this.divisions; i++) {\n        var linex = new THREE.Line(geometryXY, material);\n        linex.position.y = i * this.divisions - this.options.imgSize;\n        var liney = new THREE.Line(geometryXY, material);\n        liney.position.x = i * this.divisions - this.options.imgSize;\n        liney.rotation.z = (Math.PI * 3) / 2;\n        groupxy.add(linex);\n        groupxy.add(liney);\n      }\n      groupAxis.add(groupxy);\n      //y-z面\n\n      var geometryYZ = new THREE.Geometry();\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, -this.options.imgSize));\n      geometryYZ.vertices.push(new THREE.Vector3(0, 0, this.options.imgSize));\n      for (let i = 0; i <= (this.options.imgSize * 2) / this.divisions; i++) {\n        var linex = new THREE.Line(geometryYZ, material);\n        linex.position.y = i * this.divisions - this.options.imgSize;\n        groupyz.add(linex);\n        var liney = new THREE.Line(geometryYZ, material);\n        liney.position.z = i * this.divisions - this.options.imgSize;\n        liney.rotation.x = (Math.PI * 3) / 2;\n        groupyz.add(liney);\n      }\n      groupAxis.add(groupyz);\n\n      //x-z-up面\n      \n      var groupxz_up = groupxz.clone();\n      groupxz_up.name = \"planeXZ_up\";\n      groupAxis.add(groupxz_up);\n      //x-y-up面\n      \n      var groupxy_up = groupxy.clone();\n      groupxy_up.name = \"planeXY_up\";\n      groupAxis.add(groupxy_up);\n      //y-z-up面\n      \n      var groupyz_up = groupyz.clone();\n      groupyz_up.name = \"planeYZ_up\";\n      groupAxis.add(groupyz_up);\n\n\n      // 网格坐标数字刻度\n      for (let i = 0; i <= (this.options.imgSize * 2) / this.divisions; i++) {\n        var textx = this.makeTextSprite(\n          Math.ceil(i * this.divisions - this.options.imgSize),\n          {\n            fontsize: 18,\n            fontface: \"Georgia\",\n          }\n        );\n\n        var texty = this.makeTextSprite(\n          Math.ceil(i * this.divisions - this.options.imgSize),\n          {\n            fontsize: 18,\n            fontface: \"Georgia\",\n          }\n        );\n        var textz = this.makeTextSprite(\n          Math.ceil(i * this.divisions - this.options.imgSize),\n          {\n            fontsize: 18,\n            fontface: \"Georgia\",\n          }\n        );\n        textx.center = new THREE.Vector2(0.1, 1);\n        textx.position.set(i * this.divisions - this.options.imgSize, 0, 0);\n\n        texty.center = new THREE.Vector2(0, 1);\n        texty.position.set(0, 0, i * this.divisions - this.options.imgSize);\n\n        textz.center = new THREE.Vector2(0.1, 0.9);\n        textz.position.set(0, i * this.divisions - this.options.imgSize, 0);\n\n        groupTextX.add(textx);\n        groupTextY.add(texty);\n        groupTextZ.add(textz);\n      }\n\n      groupAxis.add(groupTextX);\n      groupAxis.add(groupTextY);\n      groupAxis.add(groupTextZ);\n\n\n      // xyz标识\n      var str = this.makeTextSprite(\"X\", {\n        fontsize: 36,\n        fontface: \"Georgia\",\n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 30);\n      strX.add(str);\n\n      var str = this.makeTextSprite(\"Y\", {\n        fontsize: 36,\n        fontface: \"Georgia\",\n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strY.add(str);\n\n      var str = this.makeTextSprite(\"Z\", {\n        fontsize: 36,\n        fontface: \"Georgia\",\n      });\n      str.center = new THREE.Vector2(0, 1);\n      str.position.set(0, 0, 0);\n      strZ.add(str);\n\n      groupAxis.add(strX);\n      groupAxis.add(strY);\n      groupAxis.add(strZ);\n\n      // 动态定位轴\n      var coverx = new THREE.Group();\n      coverx.name = \"coverX\";\n      var coverLine = new THREE.Geometry();\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n      coverLine.vertices.push(new THREE.Vector3(0, 0, 0));\n\n      var line = new THREE.Line(coverLine, material);\n      coverx.add(line);\n\n      var covery = new THREE.Group();\n      covery.name = \"coverY\";\n      covery.add(line.clone());\n      var coverz = new THREE.Group();\n      coverz.name = \"coverZ\";\n      coverz.add(line.clone());\n      groupAxis.add(coverx);\n      groupAxis.add(covery);\n      groupAxis.add(coverz);\n      this.group.add(groupAxis);\n    },\n    // 字体生成\n    makeTextSprite(message, parameters) {\n      if (parameters === undefined) parameters = {};\n\n      var fontface = parameters.hasOwnProperty(\"fontface\")\n        ? parameters[\"fontface\"]\n        : \"Arial\";\n\n      var fontsize = parameters.hasOwnProperty(\"fontsize\")\n        ? parameters[\"fontsize\"]\n        : 18;\n\n      var canvas = document.createElement(\"canvas\");\n      var context = canvas.getContext(\"2d\");\n      context.font = \"Bold \" + fontsize + \"px \" + fontface;\n\n      var metrics = context.measureText(message);\n\n      context.fillStyle = \"rgba(255, 255, 255, 1.0)\";\n      context.fillText(message, 0, fontsize);\n\n      var texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n\n      var spriteMaterial = new THREE.SpriteMaterial({\n        map: texture,\n        sizeAttenuation: true,\n      });\n      var sprite = new THREE.Sprite(spriteMaterial);\n      sprite.scale.set(100, 50, 1.0);\n      return sprite;\n    },\n    // 光照跟随相机\n    lightFollowCamera() {\n      if (this.options.isLightFollowCamera) {\n        this.pointLight.position.copy(this.camera.position);\n      } else {\n        this.pointLight.position.set(4000, 2000, 3000);\n      }\n    },\n    // 场景更新\n    updateScene() {\n      let meshs = [];\n\n      this.group.traverse(function (obj) {\n        if (obj.type === \"Mesh\" || obj.type === \"Line\") {\n          meshs.push(obj);\n        }\n      });\n      for (let i = 0; i < meshs.length; i++) {\n        let mesh = meshs[i];\n        meshs[i].geometry.dispose();\n        meshs[i].material.dispose();\n      }\n      this.scene.remove(this.group);\n\n      this.data = {\n        nodes: [],\n        edges: [],\n      };\n      this.initObject();\n    },\n    // 坐标轴更新\n    axisUpdate() {\n      let planeXZ,\n        planeXY,\n        planeYZ,\n        planeXZ_up,\n        planeXY_up,\n        planeYZ_up,\n        textX,\n        textY,\n        textZ,\n        strX,\n        strY,\n        strZ,\n        coverX,\n        coverY,\n        coverZ;\n\n      this.group.children.forEach(function (e) {\n        if (e.name == \"Axis\") {\n          for (let i = 0; i < e.children.length; i++) {\n            if (e.children[i].name == \"planeXZ\") {\n              planeXZ = e.children[i];\n            } else if (e.children[i].name == \"planeXZ_up\") {\n              planeXZ_up = e.children[i];\n            } else if (e.children[i].name == \"planeXY_up\") {\n              planeXY_up = e.children[i];\n            }else if (e.children[i].name == \"planeYZ_up\") {\n              planeYZ_up = e.children[i];\n            }else if (e.children[i].name == \"planeXY\") {\n              planeXY = e.children[i];\n            } else if (e.children[i].name == \"planeYZ\") {\n              planeYZ = e.children[i];\n            } else if (e.children[i].name == \"textX\") {\n              textX = e.children[i];\n            } else if (e.children[i].name == \"textY\") {\n              textY = e.children[i];\n            } else if (e.children[i].name == \"textZ\") {\n              textZ = e.children[i];\n            } else if (e.children[i].name == \"strX\") {\n              strX = e.children[i];\n            } else if (e.children[i].name == \"strY\") {\n              strY = e.children[i];\n            } else if (e.children[i].name == \"strZ\") {\n              strZ = e.children[i];\n            } else if (e.children[i].name == \"coverX\") {\n              coverX = e.children[i];\n            } else if (e.children[i].name == \"coverY\") {\n              coverY = e.children[i];\n            } else if (e.children[i].name == \"coverZ\") {\n              coverZ = e.children[i];\n            }\n          }\n        }\n      });\n\n      if (\n        this.camera.rotation._z > 0 &&\n        this.camera.rotation._z < Math.PI / 2\n      ) {\n        planeXY.position.z = -this.options.imgSize;\n        planeXY_up.position.z = this.options.imgSize;\n        planeYZ.position.x = -this.options.imgSize;\n        planeYZ_up.position.x = this.options.imgSize;\n        planeXZ.position.y = -this.options.imgSize;\n        planeXZ_up.position.y = this.options.imgSize;\n\n        textX.position.z = this.options.imgSize + 3;\n        textX.position.y = -this.options.imgSize;\n        strX.position.z = this.options.imgSize + 10;\n        strX.position.y = -this.options.imgSize;\n\n        textY.position.x = this.options.imgSize + 3;\n        textY.position.y = -this.options.imgSize;\n        strZ.position.x = this.options.imgSize + 30;\n        strZ.position.y = -this.options.imgSize;\n\n        textZ.position.z = this.options.imgSize;\n        textZ.position.x = -this.options.imgSize;\n        strY.position.z = this.options.imgSize + 30;\n        strY.position.x = -this.options.imgSize;\n      } \n      // else if (\n      //   this.camera.rotation._z > Math.PI / 2 &&\n      //   this.camera.rotation._z < Math.PI\n      // ) {\n      //   planeXY.position.z = this.options.imgSize;\n      //   planeYZ.position.x = -this.options.imgSize;\n\n      //   textX.position.z = -this.options.imgSize - 5;\n      //   textX.position.y = -this.options.imgSize;\n      //   strX.position.z = -this.options.imgSize - 60;\n      //   strX.position.y = -this.options.imgSize;\n\n      //   textY.position.x = this.options.imgSize + 3;\n      //   textY.position.y = -this.options.imgSize;\n      //   strZ.position.x = this.options.imgSize + 30;\n      //   strZ.position.y = -this.options.imgSize;\n\n      //   textZ.position.z = -this.options.imgSize - 10;\n      //   strY.position.z = -this.options.imgSize - 30;\n      //   strY.position.x = -this.options.imgSize;\n      // } else if (\n      //   this.camera.rotation._z > -Math.PI &&\n      //   this.camera.rotation._z < -Math.PI / 2\n      // ) {\n      //   planeXY.position.z = this.options.imgSize;\n      //   planeYZ.position.x = this.options.imgSize;\n\n      //   textX.position.z = -this.options.imgSize - 5;\n      //   textX.position.y = -this.options.imgSize;\n      //   strX.position.z = -this.options.imgSize - 60;\n      //   strX.position.y = -this.options.imgSize;\n\n      //   textY.position.x = -this.options.imgSize - 3;\n      //   textY.position.y = -this.options.imgSize;\n      //   strZ.position.x = -this.options.imgSize - 30;\n      //   strZ.position.y = -this.options.imgSize;\n\n      //   textZ.position.z = this.options.imgSize;\n      //   textZ.position.x = -this.options.imgSize - 10;\n      //   strY.position.z = this.options.imgSize;\n      //   strY.position.x = -this.options.imgSize - 30;\n      // } else if (\n      //   this.camera.rotation._z > -Math.PI / 2 &&\n      //   this.camera.rotation._z < 0\n      // ) {\n      //   planeXY.position.z = -this.options.imgSize;\n      //   textX.position.z = this.options.imgSize + 3;\n      //   textX.position.y = -this.options.imgSize;\n      //   strX.position.z = this.options.imgSize + 10;\n      //   strX.position.y = -this.options.imgSize;\n\n      //   planeYZ.position.x = this.options.imgSize;\n      //   textY.position.x = -this.options.imgSize - 5;\n      //   textY.position.y = -this.options.imgSize;\n      //   strZ.position.x = -this.options.imgSize - 30;\n      //   strZ.position.y = -this.options.imgSize;\n\n      //   textZ.position.z = -this.options.imgSize;\n      //   textZ.position.x = -this.options.imgSize;\n      //   strY.position.z = -this.options.imgSize;\n      //   strY.position.x = -this.options.imgSize - 30;\n      // }\n    },\n    // 获取鼠标选择对象\n    getSelectObj(mouse, raycaster, e) {\n      mouse.x = (e.clientX / this.renderer.domElement.clientWidth) * 2 - 1;\n      mouse.y = -((e.clientY / this.renderer.domElement.clientHeight) * 2) + 1;\n      raycaster.setFromCamera(mouse, this.camera); //以camera为z坐标，确定所点击物体的3D空间位置\n      let intersects = raycaster.intersectObjects(this.scene.children, true); //确定所点击位置上的物体数量集合\n      return intersects; //返回连线经过的物体集合\n    },\n    // 增加事件\n    addListener() {\n      document.addEventListener(\"mousemove\", this.onDocumentMouseMove, false);\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    },\n\n    \n    // 窗口大小变换事件\n    onWindowResize(e) {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    // 鼠标移动事件\n    onDocumentMouseMove(e) {\n      let raycaster = new THREE.Raycaster();\n      let mouse = new THREE.Vector2();\n      let intersectsObjArr = this.getSelectObj(mouse, raycaster, e);\n      // let description = this.$refs.description;\n      // let descriptionText = this.$refs.d_text;\n      // let startx = 0;\n      // let starty = 0;\n      // let startz = 0;\n      // if(intersectsObjArr.length > 0 && intersectsObjArr[0].object.geometry.type == \"SphereGeometry\"){\n      // // 所选目标坐标\n      // startx = this.data.nodes[intersectsObjArr[0].instanceId][0];\n      // starty = this.data.nodes[intersectsObjArr[0].instanceId][1];\n      // startz = this.data.nodes[intersectsObjArr[0].instanceId][2];\n\n      //   description.style.top = e.pageY+\"px\";\n      //   description.style.left = e.pageX + 10 +\"px\";\n      //   description.style.cursor = \"pointer\";\n      //   description.style.display = \"block\";\n      //   descriptionText.innerHTML = `x: ${startx}, y: ${starty}, z: ${startz}( id: ${intersectsObjArr[0].instanceId})`;\n      // } else {\n      //   description.style.display = \"none\";\n      //   description.style.cursor = \"default\";\n      // }\n    },\n  },\n  mounted() {\n    this.init();\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Seismic.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"Seismic\"},[_c('div',{ref:\"container\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-38c415ca\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Seismic.vue\n// module id = null\n// module chunks = ","/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '134';\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst FlatShading = 1;\nconst SmoothShading = 2;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst CubeUVRefractionMapping = 307;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedShort565Type = 1019;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst RGBEFormat = RGBAFormat;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBIntegerFormat = 1032;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\nconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\nconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\nconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\nconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\nconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\nconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\nconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\nconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\nconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\nconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\nconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\nconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\nconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst GammaEncoding = 3007;\nconst RGBEEncoding = 3002;\nconst LogLuvEncoding = 3003;\nconst RGBM7Encoding = 3004;\nconst RGBM16Encoding = 3005;\nconst RGBDEncoding = 3006;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nlet _seed = 1234567;\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n//\n\nconst _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nconst hasRandomUUID = typeof crypto !== 'undefined' && 'randomUUID' in crypto;\n\nfunction generateUUID() {\n\n\tif ( hasRandomUUID ) {\n\n\t\treturn crypto.randomUUID().toUpperCase();\n\n\t}\n\n\t// TODO Remove this code when crypto.randomUUID() is available everywhere\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toUpperCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidian modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s % 2147483647;\n\n\t// Park-Miller algorithm\n\n\t_seed = _seed * 16807 % 2147483647;\n\n\treturn ( _seed - 1 ) / 2147483646;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nvar MathUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n});\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nVector2.prototype.isVector2 = true;\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tscale( sx, sy ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tconst te = this.elements;\n\n\t\tconst a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tconst a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nMatrix3.prototype.isMatrix3 = true;\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tlet max = array[ 0 ];\n\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\n/**\n  * cyrb53 hash for string from: https://stackoverflow.com/a/52171480\n  *\n  * Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc\n  *\n  * It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination\n  * of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's\n  * faster than either would be in JavaScript and significantly simpler to implement. Keep in\n  * mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.\n  *\n  * @param {string} str\n  * @param {number} seed, default 0\n  * @returns number\n  */\nfunction hashString( str, seed = 0 ) {\n\n\tlet h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n\n\tfor ( let i = 0, ch; i < str.length; i ++ ) {\n\n\t\tch = str.charCodeAt( i );\n\n\t\th1 = Math.imul( h1 ^ ch, 2654435761 );\n\n\t\th2 = Math.imul( h2 ^ ch, 1597334677 );\n\n\t}\n\n\th1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 ) ^ Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\n\n\th2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 ) ^ Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\n\n\treturn 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\n\n}\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tconst image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tlet url;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\turl = [];\n\n\t\t\t\t\tfor ( let i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t// check cube texture with data textures\n\n\t\t\t\t\t\tif ( image[ i ].isDataTexture ) {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ].image ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// process single image\n\n\t\t\t\t\turl = serializeImage( image );\n\n\t\t\t\t}\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: url\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype.isTexture = true;\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.prototype.slice.call( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nVector4.prototype.isVector4 = true;\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tsetTexture( texture ) {\n\n\t\ttexture.image = {\n\t\t\twidth: this.width,\n\t\t\theight: this.height,\n\t\t\tdepth: this.depth\n\t\t};\n\n\t\tthis.texture = texture;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.image = { ...this.texture.image }; // See #20328.\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width, height, count ) {\n\n\t\tsuper( width, height );\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.set( 0, 0, this.width, this.height );\n\t\tthis.scissor.set( 0, 0, this.width, this.height );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\nclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy.call( this, source );\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\tthis.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box$3 );\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$3.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$3, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$3 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nMatrix4.prototype.isMatrix4 = true;\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\ttoVector3( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nEuler.prototype.isEuler = true;\n\nEuler.DefaultOrder = 'XYZ';\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast() {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype.isObject3D = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.format = RGBAFormat;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.format !== RGBAFormat ) data.format = this.format;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.format = source.format;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tconst l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopyGammaToLinear( color, gammaFactor = 2.0 ) {\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToGamma( color, gammaFactor = 2.0 ) {\n\n\t\tconst safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t}\n\n\tconvertGammaToLinear( gammaFactor ) {\n\n\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToGamma( gammaFactor ) {\n\n\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex() {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t}\n\n\tgetHexString() {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle() {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\tif ( attribute.normalized === true ) {\n\n\t\t\t// assuming Uint8Array\n\n\t\t\tthis.r /= 255;\n\t\t\tthis.g /= 255;\n\t\t\tthis.b /= 255;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n}\n\nColor.NAMES = _colorKeywords;\n\nColor.prototype.isColor = true;\nColor.prototype.r = 1;\nColor.prototype.g = 1;\nColor.prototype.b = 1;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n * }\n */\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tcopyColorsArray( colors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tlet color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector2sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector3sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector4sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n}\n\nBufferAttribute.prototype.isBufferAttribute = true;\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = attributes.tangent.array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tmerge( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tconst attribute1 = attributes[ key ];\n\t\t\tconst attributeArray1 = attribute1.array;\n\n\t\t\tconst attribute2 = geometry.attributes[ key ];\n\t\t\tconst attributeArray2 = attribute2.array;\n\n\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\tconst length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\tfor ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t return new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\t// geometry generator parameters\n\n\t\tif ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nBufferGeometry.prototype.isBufferGeometry = true;\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n}\n\nMesh.prototype.isMesh = true;\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA$1.fromBufferAttribute( position, a );\n\t_vB$1.fromBufferAttribute( position, b );\n\t_vC$1.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA$1.add( _morphA );\n\t\t_vB$1.add( _morphB );\n\t\t_vC$1.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA$1 );\n\t\tobject.boneTransform( b, _vB$1 );\n\t\tobject.boneTransform( c, _vC$1 );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>\n * }\n */\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nCamera.prototype.isCamera = true;\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\nconst fov = 90, aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nCubeTexture.prototype.isCubeTexture = true;\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tsuper( size, size, options );\n\n\t\toptions = options || {};\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture = new CubeTexture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.texture._needsFlipEnvMap = false;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nPlane.prototype.isPlane = true;\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type = 5126;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$g,\n\tbackground_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\t\tuv2Transform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // standard, physical\n\t\trefractionRatio: { value: 0.98 },\n\t\tmaxMipLevel: { value: 0 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.envmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenRoughness: { value: 0 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 0 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularColor: { value: new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = 0;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( geometry, index );\n\n\t\t\tif ( updateBuffers ) saveCache( geometry, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( geometry, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in geometryAttributes ) {\n\n\t\t\tconst cachedAttribute = cachedAttributes[ key ];\n\t\t\tconst geometryAttribute = geometryAttributes[ key ];\n\n\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( geometry, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tconst data = {};\n\t\t\tdata.attribute = attribute;\n\n\t\t\tif ( attribute.data ) {\n\n\t\t\t\tdata.data = attribute.data;\n\n\t\t\t}\n\n\t\t\tcache[ key ] = data;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatilibity\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\t/* eslint-disable no-undef */\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t/* eslint-enable no-undef */\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nOrthographicCamera.prototype.isOrthographicCamera = true;\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\nconst LOD_MIN = 4;\nconst LOD_MAX = 8;\nconst SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\nconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst ENCODINGS = {\n\t[ LinearEncoding ]: 0,\n\t[ sRGBEncoding ]: 1,\n\t[ RGBEEncoding ]: 2,\n\t[ RGBM7Encoding ]: 3,\n\t[ RGBM16Encoding ]: 4,\n\t[ RGBDEncoding ]: 5,\n\t[ GammaEncoding ]: 6\n};\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular ) {\n\n\t\treturn this._fromTexture( equirectangular );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap ) {\n\n\t\treturn this._fromTexture( cubemap );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapShader === null ) {\n\n\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectShader === null ) {\n\n\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._blurMaterial.dispose();\n\n\t\tif ( this._cubemapShader !== null ) this._cubemapShader.dispose();\n\t\tif ( this._equirectShader !== null ) this._equirectShader.dispose();\n\n\t\tfor ( let i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t// private interface\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._pingPongRenderTarget.dispose();\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets( texture );\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets( texture ) { // warning: null texture is valid\n\n\t\tconst params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: UnsignedByteType,\n\t\t\tformat: RGBEFormat,\n\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst outputEncoding = renderer.outputEncoding;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputEncoding = LinearEncoding;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputEncoding = outputEncoding;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_setEncoding( uniform, texture ) {\n\n\t\tif ( this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding ) {\n\n\t\t\tuniform.value = ENCODINGS[ LinearEncoding ];\n\n\t\t} else {\n\n\t\t\tuniform.value = ENCODINGS[ texture.encoding ];\n\n\t\t}\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\tconst mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tif ( ! isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\n\t\tthis._setEncoding( uniforms[ 'inputEncoding' ], texture );\n\t\tthis._setEncoding( uniforms[ 'outputEncoding' ], cubeUVRenderTarget.texture );\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = _sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\n\t\tthis._setEncoding( blurUniforms[ 'inputEncoding' ], targetIn.texture );\n\t\tthis._setEncoding( blurUniforms[ 'outputEncoding' ], targetIn.texture );\n\n\t\tconst outputSize = _sizeLods[ lodOut ];\n\t\tconst x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tconst y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\nfunction _isLDR( texture ) {\n\n\tif ( texture === undefined || texture.type !== UnsignedByteType ) return false;\n\n\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n}\n\nfunction _createPlanes() {\n\n\tconst _lodPlanes = [];\n\tconst _sizeLods = [];\n\tconst _sigmas = [];\n\n\tlet lod = LOD_MAX;\n\n\tfor ( let i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\t_sizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t} else if ( i == 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\t_sigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 1 );\n\t\tconst min = - texelSize / 2;\n\t\tconst max = 1 + texelSize / 2;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t_lodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { _lodPlanes, _sizeLods, _sigmas };\n\n}\n\nfunction _createRenderTarget( params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( maxSamples ) {\n\n\tconst weights = new Float32Array( maxSamples );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: { 'n': maxSamples },\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectShader() {\n\n\tconst texelSize = new Vector2( 1, 1 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'texelSize': { value: texelSize },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCubemapShader() {\n\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction _getEncodings() {\n\n\treturn /* glsl */`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nclass DataTexture2DArray extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction denormalize( morph, attribute ) {\n\n\tlet denominator = 1;\n\tconst array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n\n\tif ( array instanceof Int8Array ) denominator = 127;\n\telse if ( array instanceof Int16Array ) denominator = 32767;\n\telse if ( array instanceof Int32Array ) denominator = 2147483647;\n\telse console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );\n\n\tmorph.divideScalar( denominator );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector3();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst numberOfMorphTargets = geometry.morphAttributes.position.length;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== numberOfMorphTargets ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\n\t\t\t\tconst numberOfVertices = geometry.attributes.position.count;\n\t\t\t\tconst numberOfVertexData = ( hasMorphNormals === true ) ? 2 : 1; // (v,n) vs. (v)\n\n\t\t\t\tlet width = numberOfVertices * numberOfVertexData;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * numberOfMorphTargets );\n\n\t\t\t\tconst texture = new DataTexture2DArray( buffer, width, height, numberOfMorphTargets );\n\t\t\t\ttexture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n\t\t\t\ttexture.type = FloatType;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = numberOfVertexData * 4;\n\n\t\t\t\tfor ( let i = 0; i < numberOfMorphTargets; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\tif ( morphTarget.normalized === true ) denormalize( morph, morphTarget );\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tif ( morphNormal.normalized === true ) denormalize( morph, morphNormal );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: numberOfMorphTargets,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\nclass DataTexture3D extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture3D.prototype.isDataTexture3D = true;\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = new Texture();\nconst emptyTexture2dArray = new DataTexture2DArray();\nconst emptyTexture3d = new DataTexture3D();\nconst emptyCubeTexture = new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\tconst cache = this.cache;\n\n\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\tthis.cache = new Float32Array( data.length );\n\n\t}\n\n\tcopyArray( cache, data );\n\n};\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\tconst seq = this.seq;\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program ) {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n\tconst n = gl.getProgramParameter( program, 35718 );\n\n\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\tconst u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tconst v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tconst r = [];\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction addLineNumbers( string ) {\n\n\tconst lines = string.split( '\\n' );\n\n\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tcase LogLuvEncoding:\n\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers( gl.getShaderSource( shader ) );\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string\n\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n}\n\nfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\treturn loopReplacer( match, start, end, snippet );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\tconst gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.format === RGBFormat ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.specularColorMap ? getTexelDecodingFunction( 'specularColorMapTexelToLinear', parameters.specularColorMapEncoding ) : '',\n\t\t\tparameters.sheenColorMap ? getTexelDecodingFunction( 'sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding ) : '',\n\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\tconst vertexTextures = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tconst parameterNames = [\n\t\t'precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor',\n\t\t'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV',\n\t\t'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap',\n\t\t'objectSpaceNormalMap', 'tangentSpaceNormalMap',\n\t\t'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap',\n\t\t'displacementMap', 'specularMap', , 'roughnessMap', 'metalnessMap', 'gradientMap',\n\t\t'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2',\n\t\t'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning',\n\t\t'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha',\n\t\t'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights',\n\t\t'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows',\n\t\t'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights',\n\t\t'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format',\n\t\t'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding',\n\t\t'transmission', 'transmissionMap', 'thicknessMap',\n\t\t'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'\n\t];\n\n\tfunction getMaxBones( object ) {\n\n\t\tconst skeleton = object.skeleton;\n\t\tconst bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( map && map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map && map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t} else {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t}\n\n\t\tif ( isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding ) {\n\n\t\t\tencoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet vertexShader, fragmentShader;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularColorMap: !! material.specularColorMap,\n\t\t\tspecularColorMapEncoding: getTextureEncodingFromMap( material.specularColorMap ),\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\t\t\tsheenColorMap: !! material.sheenColorMap,\n\t\t\tsheenColorMapEncoding: getTextureEncodingFromMap( material.sheenColorMap ),\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || material.sheenRoughnessMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: !! object.geometry && !! object.geometry.morphAttributes.position,\n\t\t\tmorphNormals: !! object.geometry && !! object.geometry.morphAttributes.normal,\n\t\t\tmorphTargetsCount: ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tformat: material.format,\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( hashString( parameters.fragmentShader ) );\n\t\t\tarray.push( hashString( parameters.vertexShader ) );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tfor ( let i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList( properties ) {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tconst defaultProgram = { id: - 1 };\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.program = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists( properties ) {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tlet list;\n\n\t\tif ( lists.has( scene ) === false ) {\n\n\t\t\tlist = new WebGLRenderList( properties );\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= lists.get( scene ).length ) {\n\n\t\t\t\tlist = new WebGLRenderList( properties );\n\t\t\t\tlists.get( scene ).push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = lists.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, physicallyCorrectLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( physicallyCorrectLights ) {\n\n\t\tlights.setup( lightsArray, physicallyCorrectLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tlet renderState;\n\n\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStates.get( scene ).length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStates.get( scene ).push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStates.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n/**\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t}\n\n\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||\n\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t( material.alphaMap && material.alphaTest > 0 ) ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tlet enabledCapabilities = {};\n\n\tlet xrFramebuffer = null;\n\tlet currentBoundFramebuffers = {};\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindXRFramebuffer( framebuffer ) {\n\n\t\tif ( framebuffer !== xrFramebuffer ) {\n\n\t\t\tgl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\txrFramebuffer = framebuffer;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( framebuffer === null && xrFramebuffer !== null ) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\txrFramebuffer = null;\n\t\tcurrentBoundFramebuffers = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tbindXRFramebuffer: bindXRFramebuffer,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height, depth = 1 ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\ttextureProperties.__maxMipLevel = Math.log2( Math.max( width, height, depth ) );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 6407 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34837;\n\t\t\tif ( glType === 5131 ) internalFormat = 34843;\n\t\t\tif ( glType === 5121 ) internalFormat = 32849;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding ) ? 35907 : 32856;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = 35866;\n\t\tif ( texture.isDataTexture3D ) textureType = 32879;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\tconst image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format );\n\n\t\tlet glType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tlet mipmap;\n\t\tconst mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = 6402;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// validation checks for WebGL 1\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\tconst cubeImage = [];\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t} else {\n\n\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst image = cubeImage[ 0 ],\n\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\tlet mipmaps;\n\n\t\tif ( isCompressed ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else {\n\n\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t// We assume images for cube map have the same size.\n\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t} else {\n\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// Use the first texture for MRT so far\n\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\n\n\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\tif ( isWebGL2 && texture.format === RGBFormat && ( texture.type === FloatType || texture.type === HalfFloatType ) ) {\n\n\t\t\ttexture.format = RGBAFormat;\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( isMultisample ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067, texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, attachment, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( isRenderTarget3D ) {\n\n\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\tglTextureType = isTexture3D ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = 16384;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tlet warnedTexture2D = false;\n\tlet warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\n\t\tsetTextureCube( texture, slot );\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\t\tif ( p === UnsignedShort565Type ) return 33635;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBFormat ) return 6407;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBIntegerFormat ) return 36248;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nArrayCamera.prototype.isArrayCamera = true;\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nGroup.prototype.isGroup = true;\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\thand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\t\tconst state = renderer.state;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glFramebuffer = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet isMultisample = false;\n\t\tlet glMultisampledFramebuffer = null;\n\t\tlet glColorRenderbuffer = null;\n\t\tlet glDepthRenderbuffer = null;\n\t\tlet xrFrame = null;\n\t\tlet depthStyle = null;\n\t\tlet clearStyle = null;\n\n\t\tconst controllers = [];\n\t\tconst inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\tstate.bindXRFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() );\n\n\t\t\tif ( glFramebuffer ) gl.deleteFramebuffer( glFramebuffer );\n\t\t\tif ( glMultisampledFramebuffer ) gl.deleteFramebuffer( glMultisampledFramebuffer );\n\t\t\tif ( glColorRenderbuffer ) gl.deleteRenderbuffer( glColorRenderbuffer );\n\t\t\tif ( glDepthRenderbuffer ) gl.deleteRenderbuffer( glDepthRenderbuffer );\n\t\t\tglFramebuffer = null;\n\t\t\tglMultisampledFramebuffer = null;\n\t\t\tglColorRenderbuffer = null;\n\t\t\tglDepthRenderbuffer = null;\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( session.renderState.layers === undefined ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t} else if ( gl instanceof WebGLRenderingContext ) {\n\n\t\t\t\t\t// Use old style webgl layer because we can't use MSAA\n\t\t\t\t\t// WebGL2 support.\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glBaseLayer ] } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tisMultisample = attributes.antialias;\n\t\t\t\t\tlet depthFormat = null;\n\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tclearStyle = 256;\n\n\t\t\t\t\t\tif ( attributes.stencil ) clearStyle |= 1024;\n\n\t\t\t\t\t\tdepthStyle = attributes.stencil ? 33306 : 36096;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? 35056 : 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: attributes.alpha ? 32856 : 32849,\n\t\t\t\t\t\tdepthFormat: depthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tglFramebuffer = gl.createFramebuffer();\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\t\tglMultisampledFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\tglColorRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\tgl.bindRenderbuffer( 36161, glColorRenderbuffer );\n\t\t\t\t\t\tgl.renderbufferStorageMultisample(\n\t\t\t\t\t\t\t36161,\n\t\t\t\t\t\t\t4,\n\t\t\t\t\t\t\t32856,\n\t\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\t\tglProjLayer.textureHeight );\n\t\t\t\t\t\tstate.bindFramebuffer( 36160, glMultisampledFramebuffer );\n\t\t\t\t\t\tgl.framebufferRenderbuffer( 36160, 36064, 36161, glColorRenderbuffer );\n\t\t\t\t\t\tgl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( depthFormat !== null ) {\n\n\t\t\t\t\t\t\tglDepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\tgl.bindRenderbuffer( 36161, glDepthRenderbuffer );\n\t\t\t\t\t\t\tgl.renderbufferStorageMultisample( 36161, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight );\n\t\t\t\t\t\t\tgl.framebufferRenderbuffer( 36160, depthStyle, 36161, glDepthRenderbuffer );\n\t\t\t\t\t\t\tgl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.position.copy( cameraVR.position );\n\t\t\tcamera.quaternion.copy( cameraVR.quaternion );\n\t\t\tcamera.scale.copy( cameraVR.scale );\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\treturn glProjLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\treturn glBaseLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( foveation ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\tstate.bindXRFramebuffer( glBaseLayer.framebuffer );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\n\t\t\t\t\t\tstate.bindXRFramebuffer( glFramebuffer );\n\n\t\t\t\t\t\tif ( glSubImage.depthStencilTexture !== undefined ) {\n\n\t\t\t\t\t\t\tgl.framebufferTexture2D( 36160, depthStyle, 3553, glSubImage.depthStencilTexture, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.framebufferTexture2D( 36160, 36064, 3553, glSubImage.colorTexture, 0 );\n\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst camera = cameras[ i ];\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tstate.bindXRFramebuffer( glMultisampledFramebuffer );\n\n\t\t\t\t\tif ( clearStyle !== null ) gl.clear( clearStyle );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst controller = controllers[ i ];\n\t\t\t\tconst inputSource = inputSources[ i ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst width = glProjLayer.textureWidth;\n\t\t\t\tconst height = glProjLayer.textureHeight;\n\n\t\t\t\tstate.bindFramebuffer( 36008, glMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( 36009, glFramebuffer );\n\t\t\t\t// Invalidate the depth here to avoid flush of the depth data to main memory.\n\t\t\t\tgl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\tgl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, 16384, 9728 );\n\t\t\t\t// Invalidate the MSAA buffer because it's not needed anymore.\n\t\t\t\tgl.invalidateFramebuffer( 36008, [ 36064 ] );\n\t\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\t\tstate.bindFramebuffer( 36009, null );\n\n\t\t\t\tstate.bindFramebuffer( 36160, glMultisampledFramebuffer );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t} else {\n\n\t\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tconst maxMipLevel = properties.get( envMap ).__maxMipLevel;\n\n\t\t\tif ( maxMipLevel !== undefined ) {\n\n\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. specular intensity map\n\t\t// 14. specular tint map\n\t\t// 15. transmission map\n\t\t// 16. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t//\n\n\tconst _currentDrawBuffers = [];\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\t_currentDrawBuffers[ 0 ] = 1029;\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( properties );\n\t\trenderLists = new WebGLRenderLists( properties );\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= 16384;\n\t\tif ( depth === undefined || depth ) bits |= 256;\n\t\tif ( stencil === undefined || stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tgetProgram( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\tconst needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n\t\t\tconst renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n\n\t\t\t_transmissionRenderTarget = new renderTargetType( 1024, 1024, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t} );\n\n\t\t}\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\n\t}\n\n\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\tconst morphTargetsCount = !! geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( !! geometry && ( geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined ) ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isDataTexture3D || texture.isDataTexture2DArray ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== textures.length || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t_currentDrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\t_currentDrawBuffers[ 0 ] = 36064;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\t\t_currentDrawBuffers[ 0 ] = 1029;\n\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t_gl.drawBuffers( _currentDrawBuffers );\n\n\t\t\t\t} else {\n\n\t\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( _currentDrawBuffers );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\tlet glFormat = utils.convert( texture.format );\n\n\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t// Not needed in Chrome 93+\n\n\t\t\tif ( glFormat === 6407 ) glFormat = 32849;\n\t\t\tif ( glFormat === 6408 ) glFormat = 32856;\n\n\t\t}\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isDataTexture3D ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataTexture2DArray ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isDataTexture3D ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nWebGLRenderer.prototype.isWebGLRenderer = true;\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nFog.prototype.isFog = true;\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nScene.prototype.isScene = true;\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interlaved attribtue\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  map: new THREE.Texture( <Image> ),\n *  alphaMap: new THREE.Texture( <Image> ),\n *  rotation: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSprite.prototype.isSprite = true;\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.x = skinWeight.getX( i );\n\t\t\tvector.y = skinWeight.getY( i );\n\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nSkinnedMesh.prototype.isSkinnedMesh = true;\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nBone.prototype.isBone = true;\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture.prototype.isDataTexture = true;\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tif ( typeof normalized === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nInstancedMesh.prototype.isInstancedMesh = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nLine.prototype.isLine = true;\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [];\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineSegments.prototype.isLineSegments = true;\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nLineLoop.prototype.isLineLoop = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n *\n * }\n */\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nPoints.prototype.isPoints = true;\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nVideoTexture.prototype.isVideoTexture = true;\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nCanvasTexture.prototype.isCanvasTexture = true;\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\n}\n\nDepthTexture.prototype.isDepthTexture = true;\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = new Vector3();\nconst _v1$1 = new Vector3();\nconst _normal = new Vector3();\nconst _triangle = new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = new Vector3();\nconst px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n/**\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineCurve.prototype.isLineCurve = true;\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve3';\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nSplineCurve.prototype.isSplineCurve = true;\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.2)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tlet p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\tif ( outerNode ) {\n\n\t\tconst b = splitPolygon( outerNode, hole );\n\n\t\t// filter collinear points around the cuts\n\t\tfilterPoints( outerNode, outerNode.next );\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode;\n\tconst hx = hole.x;\n\tconst hy = hole.y;\n\tlet qx = - Infinity, m;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tlet depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, - 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tconst normals = this.attributes.normal.array;\n\t\t\tconst n1 = new Vector3();\n\t\t\tconst n2 = new Vector3();\n\t\t\tconst n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tconst base = segments * points.length * 3;\n\n\t\t\tfor ( let i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1, hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\n/**\n * parameters = {\n *  color: <THREE.Color>\n * }\n */\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t}\n\n}\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n/**\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  ior: <float>,\n *  reflectivity: <float>,\n *\n *  sheen: <float>,\n *  sheenColor: <Color>,\n *  sheenColorMap: new THREE.Texture( <Image> ),\n *  sheenRoughness: <float>,\n *  sheenRoughnessMap: new THREE.Texture( <Image> ),\n *\n *  transmission: <float>,\n *  transmissionMap: new THREE.Texture( <Image> ),\n *\n *  thickness: <float>,\n *  thicknessMap: new THREE.Texture( <Image> ),\n *  attenuationDistance: <float>,\n *  attenuationColor: <Color>,\n *\n *  specularIntensity: <float>,\n *  specularIntensityMap: new THREE.Texture( <Image> ),\n *  specularColor: <Color>,\n *  specularColorMap: new THREE.Texture( <Image> )\n * }\n */\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0.01;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = 0.0;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._sheen = 0.0;\n\t\tthis._clearcoat = 0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.MultiplyOperation,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *\n *  map: new THREE.Texture( <Image> ),\n *  gradientMap: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n * }\n */\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n/**\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n * }\n */\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  matcap: new THREE.Texture( <Image> ),\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nvar Materials = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tMeshMatcapMaterial: MeshMatcapMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\nconst AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tconst n = times.length;\n\t\tconst result = new Array( n );\n\t\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tconst nValues = values.length;\n\t\tconst result = new values.constructor( nValues );\n\n\t\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tconst srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tlet i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tlet value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t},\n\n\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\t\tconst clip = sourceClip.clone();\n\n\t\tclip.name = name;\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tconst track = clip.tracks[ i ];\n\t\t\tconst valueSize = track.getValueSize();\n\n\t\t\tconst times = [];\n\t\t\tconst values = [];\n\n\t\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( times.length === 0 ) continue;\n\n\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\tlet minStartTime = Infinity;\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// shift all tracks such that clip begins at t=0\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t}\n\n\t\tclip.resetDuration();\n\n\t\treturn clip;\n\n\t},\n\n\tmakeClipAdditive: function ( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\t\tif ( fps <= 0 ) fps = 30;\n\n\t\tconst numTracks = referenceClip.tracks.length;\n\t\tconst referenceTime = referenceFrame / fps;\n\n\t\t// Make each track's values relative to the values at the reference frame\n\t\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t// Skip this track if it's non-numeric\n\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t} );\n\n\t\t\tif ( targetTrack === undefined ) continue;\n\n\t\t\tlet referenceOffset = 0;\n\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t\t}\n\n\t\t\tlet targetOffset = 0;\n\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t\t}\n\n\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\tlet referenceValue;\n\n\t\t\t// Find the value to subtract out of the track\n\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else {\n\n\t\t\t\t// Interpolate to the reference value\n\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t\t}\n\n\t\t\t// Conjugate the quaternion\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t}\n\n\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\tconst numTimes = targetTrack.times.length;\n\t\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\treturn targetClip;\n\n\t}\n\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n// ALIAS DEFINITIONS\n\nInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\nInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = AnimationUtils.arraySlice( this.times ),\n\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = AnimationUtils.arraySlice( this.times, 0 );\n\t\tconst values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\treturn new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow Error( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}` );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( stream => {\n\n\t\t\t\tconst response = new Response( stream );\n\n\t\t\t\tswitch ( this.responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, this.mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLight.prototype.isLight = true;\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nHemisphereLight.prototype.isHemisphereLight = true;\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLightShadow.prototype.isSpotLightShadow = true;\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLight.prototype.isSpotLight = true;\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nPointLightShadow.prototype.isPointLightShadow = true;\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointLight.prototype.isPointLight = true;\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n}\n\nDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nDirectionalLight.prototype.isDirectionalLight = true;\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nAmbientLight.prototype.isAmbientLight = true;\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\nRectAreaLight.prototype.isRectAreaLight = true;\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLightProbe.prototype.isLightProbe = true;\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.format !== undefined ) material.format = json.format;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON( this );\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ] instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: The legacy Geometry type is no longer supported.' );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor ( let j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tconst material = data.materials[ j ];\n\n\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\n\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\timages[ image.uuid ] = deserializedImage;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\n\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\timages[ image.uuid ] = deserializedImage;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tlet texture;\n\t\t\t\tconst image = images[ data.image ];\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture( image );\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture( image.data, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/* DEPRECATED */\n\n\tsetTexturePath( value ) {\n\n\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\treturn this.setResourcePath( value );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\nlet _context;\n\nconst AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\t_context = value;\n\n\t}\n\n};\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( ! matches ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array( 1 );\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera && camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera && camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox2.prototype.isBox2 = true;\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkeletonHelper';\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( let i = 0; i <= radials; i ++ ) {\n\n\t\t\tconst v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( let i = 0; i <= circles; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / circles * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tconst toChange = [];\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nconst _floatView = new Float32Array( 1 );\nconst _int32View = new Int32Array( _floatView.buffer );\n\nclass DataUtils {\n\n\t// Converts float32 to float16 (stored as uint16 value).\n\n\tstatic toHalfFloat( val ) {\n\n\t\tif ( val > 65504 ) {\n\n\t\t\tconsole.warn( 'THREE.DataUtils.toHalfFloat(): value exceeds 65504.' );\n\n\t\t\tval = 65504; // maximum representable value in float16\n\n\t\t}\n\n\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t* by James Tursa?s half-precision code. */\n\n\t\t_floatView[ 0 ] = val;\n\t\tconst x = _int32View[ 0 ];\n\n\t\tlet bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\tlet m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\tconst e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t* half, return signed zero. */\n\t\tif ( e < 103 ) return bits;\n\n\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\tif ( e > 142 ) {\n\n\t\t\tbits |= 0x7c00;\n\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\treturn bits;\n\n\t\t}\n\n\t\t/* If exponent underflows but not too much, return a denormal */\n\t\tif ( e < 113 ) {\n\n\t\t\tm |= 0x0800;\n\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t* to 1, which is OK. */\n\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\treturn bits;\n\n\t\t}\n\n\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t* the exponent, which is OK. */\n\t\tbits += m & 1;\n\t\treturn bits;\n\n\t}\n\n}\n\nconst LineStrip = 0;\nconst LinePieces = 1;\nconst NoColors = 0;\nconst FaceColors = 1;\nconst VertexColors = 2;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials = [] ) {\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nPath.prototype.fromPoints = function ( points ) {\n\n\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\treturn this.setFromPoints( points );\n\n};\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nLoader.prototype.extractUrlBase = function ( url ) {\n\n\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\treturn LoaderUtils.extractUrlBase( url );\n\n};\n\nLoader.Handlers = {\n\n\tadd: function ( /* regex, loader */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t},\n\n\tget: function ( /* file */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t}\n\n};\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\n//\n\nBox2.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox2.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox2.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox2.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nBox3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox3.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox3.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox3.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\nBox3.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nSphere.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\n//\n\nFrustum.prototype.setFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\treturn this.setFromProjectionMatrix( m );\n\n};\n\n//\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\n//\n\nMatrix3.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix3.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\treturn vector.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\treturn attribute.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nMatrix4.prototype.extractPosition = function ( m ) {\n\n\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\treturn this.copyPosition( m );\n\n};\n\nMatrix4.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix4.prototype.getPosition = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n};\n\nMatrix4.prototype.setRotationFromQuaternion = function ( q ) {\n\n\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\treturn this.makeRotationFromQuaternion( q );\n\n};\n\nMatrix4.prototype.multiplyToArray = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n};\n\nMatrix4.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector4 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateAxis = function ( v ) {\n\n\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\tv.transformDirection( this );\n\n};\n\nMatrix4.prototype.crossVector = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.translate = function () {\n\n\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateX = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateY = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateZ = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateByAxis = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n};\n\nMatrix4.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\treturn attribute.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {\n\n\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n};\n\nMatrix4.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\n//\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nQuaternion.prototype.inverse = function ( ) {\n\n\tconsole.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );\n\treturn this.invert();\n\n};\n\n//\n\nRay.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nRay.prototype.isIntersectionPlane = function ( plane ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\treturn this.intersectsPlane( plane );\n\n};\n\nRay.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\n//\n\nTriangle.prototype.area = function () {\n\n\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\treturn this.getArea();\n\n};\n\nTriangle.prototype.barycoordFromPoint = function ( point, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn this.getBarycoord( point, target );\n\n};\n\nTriangle.prototype.midpoint = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\treturn this.getMidpoint( target );\n\n};\n\nTriangle.prototypenormal = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn this.getNormal( target );\n\n};\n\nTriangle.prototype.plane = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\treturn this.getPlane( target );\n\n};\n\nTriangle.barycoordFromPoint = function ( point, a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n};\n\nTriangle.normal = function ( a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn Triangle.getNormal( a, b, c, target );\n\n};\n\n//\n\nShape.prototype.extractAllPoints = function ( divisions ) {\n\n\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\treturn this.extractPoints( divisions );\n\n};\n\nShape.prototype.extrude = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\treturn new ExtrudeGeometry( this, options );\n\n};\n\nShape.prototype.makeGeometry = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\treturn new ShapeGeometry( this, options );\n\n};\n\n//\n\nVector2.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector2.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector2.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector3.prototype.setEulerFromRotationMatrix = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n};\n\nVector3.prototype.setEulerFromQuaternion = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n};\n\nVector3.prototype.getPositionFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\treturn this.setFromMatrixPosition( m );\n\n};\n\nVector3.prototype.getScaleFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\treturn this.setFromMatrixScale( m );\n\n};\n\nVector3.prototype.getColumnFromMatrix = function ( index, matrix ) {\n\n\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\treturn this.setFromMatrixColumn( matrix, index );\n\n};\n\nVector3.prototype.applyProjection = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\treturn this.applyMatrix4( m );\n\n};\n\nVector3.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector3.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector3.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector4.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector4.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nObject3D.prototype.getChildByName = function ( name ) {\n\n\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\treturn this.getObjectByName( name );\n\n};\n\nObject3D.prototype.renderDepth = function () {\n\n\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n};\n\nObject3D.prototype.translate = function ( distance, axis ) {\n\n\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\treturn this.translateOnAxis( axis, distance );\n\n};\n\nObject3D.prototype.getWorldRotation = function () {\n\n\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n};\n\nObject3D.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nMesh.prototype.setDrawMode = function () {\n\n\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n};\n\nObject.defineProperties( Mesh.prototype, {\n\n\tdrawMode: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\treturn TrianglesDrawMode;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t}\n\t}\n\n} );\n\nSkinnedMesh.prototype.initBones = function () {\n\n\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n};\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +\n\t\t\t'Use .setFocalLength and .filmGauge for a photographic setup.' );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tdynamic: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t}\n\t}\n\n} );\n\nBufferAttribute.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nBufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n},\n\nBufferAttribute.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nBufferGeometry.prototype.addIndex = function ( index ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\tthis.setIndex( index );\n\n};\n\nBufferGeometry.prototype.addAttribute = function ( name, attribute ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t}\n\n\tif ( name === 'index' ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\tthis.setIndex( attribute );\n\n\t\treturn this;\n\n\t}\n\n\treturn this.setAttribute( name, attribute );\n\n};\n\nBufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {\n\n\tif ( indexOffset !== undefined ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t}\n\n\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\tthis.addGroup( start, count );\n\n};\n\nBufferGeometry.prototype.clearDrawCalls = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\tthis.clearGroups();\n\n};\n\nBufferGeometry.prototype.computeOffsets = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n};\n\nBufferGeometry.prototype.removeAttribute = function ( name ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\treturn this.deleteAttribute( name );\n\n};\n\nBufferGeometry.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\nInterleavedBuffer.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nInterleavedBuffer.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nExtrudeGeometry.prototype.getArrays = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .getArrays() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShapeList = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShapeList() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShape = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShape() has been removed.' );\n\n};\n\n//\n\nScene.prototype.dispose = function () {\n\n\tconsole.error( 'THREE.Scene: .dispose() has been removed.' );\n\n};\n\n//\n\nUniform.prototype.onUpdate = function () {\n\n\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\treturn this;\n\n};\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\n\toverdraw: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t}\n\t},\n\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t},\n\n\tstencilMask: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\treturn this.stencilFuncMask;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\tthis.stencilFuncMask = value;\n\n\t\t}\n\t},\n\n\tvertexTangents: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nWebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\tthis.setRenderTarget( renderTarget );\n\tthis.clear( color, depth, stencil );\n\n};\n\nWebGLRenderer.prototype.animate = function ( callback ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\tthis.setAnimationLoop( callback );\n\n};\n\nWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\treturn this.getRenderTarget();\n\n};\n\nWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\treturn this.capabilities.getMaxAnisotropy();\n\n};\n\nWebGLRenderer.prototype.getPrecision = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\treturn this.capabilities.precision;\n\n};\n\nWebGLRenderer.prototype.resetGLState = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\treturn this.state.reset();\n\n};\n\nWebGLRenderer.prototype.supportsFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_float' );\n\n};\n\nWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_half_float' );\n\n};\n\nWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n};\n\nWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n};\n\nWebGLRenderer.prototype.supportsVertexTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\treturn this.capabilities.vertexTextures;\n\n};\n\nWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n};\n\nWebGLRenderer.prototype.enableScissorTest = function ( boolean ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\tthis.setScissorTest( boolean );\n\n};\n\nWebGLRenderer.prototype.initMaterial = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPrePlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPostPlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.updateShadowMap = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setFaceCulling = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.allocTextureUnit = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture2D = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTextureCube = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\treturn this.getActiveMipmapLevel();\n\n};\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\tcontext: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\treturn this.getContext();\n\n\t\t}\n\t},\n\tvr: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\treturn this.xr;\n\n\t\t}\n\t},\n\tgammaInput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t}\n\t},\n\tgammaOutput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t}\n\t},\n\ttoneMappingWhitePoint: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\treturn 1.0;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\treturn new WebGLCubeRenderTarget( width, options );\n\n}\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tconst scope = this;\n\tconst audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\nCubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );\n\treturn this.renderTarget.clear( renderer, color, depth, stencil );\n\n};\n\nImageUtils.crossOrigin = undefined;\n\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\tconst loader = new TextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( url, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\tconst loader = new CubeTextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( urls, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadCompressedTexture = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nImageUtils.loadCompressedTextureCube = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n}\n\n//\n\nfunction JSONLoader() {\n\n\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n}\n\n//\n\nconst SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n}\n\n//\n\nfunction ParametricGeometry() {\n\n\tconsole.error( 'THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js' );\n\treturn new BufferGeometry();\n\n}\n\nfunction TextGeometry() {\n\n\tconsole.error( 'THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js' );\n\treturn new BufferGeometry();\n\n}\n\nfunction FontLoader() {\n\n\tconsole.error( 'THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction Font() {\n\n\tconsole.error( 'THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction ImmediateRenderObject() {\n\n\tconsole.error( 'THREE.ImmediateRenderObject has been removed.' );\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t/* eslint-disable no-undef */\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\t/* eslint-enable no-undef */\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, AxisHelper, BackSide, BasicDepthPacking, BasicShadowMap, BinaryTextureLoader, Bone, BooleanKeyframeTrack, BoundingBoxHelper, Box2, Box3, Box3Helper, BoxGeometry as BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasRenderer, CanvasTexture, CatmullRomCurve3, CineonToneMapping, CircleGeometry as CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, CompressedTexture, CompressedTextureLoader, ConeGeometry as ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubeUVRefractionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry as CylinderBufferGeometry, CylinderGeometry, Cylindrical, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry as DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicBufferAttribute, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EdgesHelper, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry as ExtrudeBufferGeometry, ExtrudeGeometry, FaceColors, FileLoader, FlatShading, Float16BufferAttribute, Float32Attribute, Float32BufferAttribute, Float64Attribute, Float64BufferAttribute, FloatType, Fog, FogExp2, Font, FontLoader, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GammaEncoding, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronGeometry as IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16Attribute, Int16BufferAttribute, Int32Attribute, Int32BufferAttribute, Int8Attribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, JSONLoader, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry as LatheBufferGeometry, LatheGeometry, Layers, LensFlare, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LinePieces, LineSegments, LineStrip, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LogLuvEncoding, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils as Math, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshFaceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiMaterial, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColors, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry as OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, ParametricGeometry, Particle, ParticleBasicMaterial, ParticleSystem, ParticleSystemMaterial, Path, PerspectiveCamera, Plane, PlaneGeometry as PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointCloud, PointCloudMaterial, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry as PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDEncoding, RGBEEncoding, RGBEFormat, RGBFormat, RGBIntegerFormat, RGBM16Encoding, RGBM7Encoding, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry as RingBufferGeometry, RingGeometry, SRGB8_ALPHA8_ASTC_10x10_Format, SRGB8_ALPHA8_ASTC_10x5_Format, SRGB8_ALPHA8_ASTC_10x6_Format, SRGB8_ALPHA8_ASTC_10x8_Format, SRGB8_ALPHA8_ASTC_12x10_Format, SRGB8_ALPHA8_ASTC_12x12_Format, SRGB8_ALPHA8_ASTC_4x4_Format, SRGB8_ALPHA8_ASTC_5x4_Format, SRGB8_ALPHA8_ASTC_5x5_Format, SRGB8_ALPHA8_ASTC_6x5_Format, SRGB8_ALPHA8_ASTC_6x6_Format, SRGB8_ALPHA8_ASTC_8x5_Format, SRGB8_ALPHA8_ASTC_8x6_Format, SRGB8_ALPHA8_ASTC_8x8_Format, Scene, SceneUtils, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry as ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, SmoothShading, Sphere, SphereGeometry as SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry as TetrahedronBufferGeometry, TetrahedronGeometry, TextGeometry, Texture, TextureLoader, TorusGeometry as TorusBufferGeometry, TorusGeometry, TorusKnotGeometry as TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry as TubeBufferGeometry, TubeGeometry, UVMapping, Uint16Attribute, Uint16BufferAttribute, Uint32Attribute, Uint32BufferAttribute, Uint8Attribute, Uint8BufferAttribute, Uint8ClampedAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, Vertex, VertexColors, VideoTexture, WebGL1Renderer, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderTargetCube, WebGLRenderer, WebGLUtils, WireframeGeometry, WireframeHelper, WrapAroundEnding, XHRLoader, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, sRGBEncoding };\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/three.module.js","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-38c415ca\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Seismic.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Seismic.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Seismic.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-38c415ca\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Seismic.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-38c415ca\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Seismic.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"Intersection\">\n    <div id=\"aside\">\n      <fieldset style=\"width: 350px;\">\n        <legend>数据导入</legend>\n        <label for=\"layer_input\" style=\"display: block;\">\n          <span>层位数据：</span>\n          <input id=\"layer_input\" type=\"file\">\n        </label>\n        <label for=\"fault_input\" style=\"display: block;\">\n          <span>断层数据：</span>\n          <input id=\"fault_input\" type=\"file\">\n        </label>\n        <button style=\"float:right\" @click=\"onBtnLoadData\">确定</button>\n      </fieldset>\n      <fieldset style=\"width: 350px;\">\n        <legend>交线估计</legend>\n        <button @click=\"getCrossLines\">交线求取</button>\n        <p style=\"display: inline;\">状态：<span id=\"stage\">无</span></p>\n        <button @click=\"showCrossLines\">交线显示</button>\n      </fieldset>\n      <div ref=\"description\" id=\"description\">\n        坐标：(<span ref=\"d_text\">x: 0, y: 0, z: 0</span>)\n      </div>\n    </div>\n    <div ref=\"state\" id=\"state\"></div>\n    <div ref=\"container\" id=\"container\" style=\"width: 80%; height: 100%;\"></div>\n  </div>\n</template>\n\n<script>\n  import * as THREE from \"./three.module.js\";\n  import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n  import Stats from \"three/examples/jsm/libs/stats.module.js\";\n  import * as layerData from \"./layerData/layerData.json\"\n  import { Lut } from 'three/examples/jsm/math/Lut.js';\n  import { GUI } from 'dat.gui'\n\n  export default {\n    name: \"Intersection\",\n    data() {\n      return {\n        layerFile: null,\n        faultFile: null,\n        layerData: [],\n        faultData: [],\n        line1Data: [],\n        line2Data: [],\n        layerName: '',\n        faultName: '',\n        line1Name: '',\n        line2Name: '',\n        layerMesh: null,\n        faultMesh: null,\n        line1Mesh: null,\n        line2Mesh: null,\n\n        scene: null,\n        group: null,\n        camera: null,\n        gui: null,\n        pointLight: null,\n        ambient: null,\n        renderer: null,\n        controls: null,\n        orbitControls: null,\n        stats: null,\n        width: 0,\n        height: 0,\n\n        options: {\n          nodesRadius: 1,\n          imgSize: 100,\n          layerColor: 0xff0000,\n          faultColor: 0x0000ff,\n          line1Color: 0x00ff00,\n          line2Color: 0xff00ff,\n          edgesColor: 0xff00ff,\n          background: true,\n          isLightFollowCamera: false,\n          layer: true,\n          fault: true,\n          crossLine1: true,\n          crossLine2: true,\n          view: {\n            lookView: 'default',\n            cameraType: 'Orthographic', // 'Perspective'\n\n          },\n          frontView: false,\n          verticalView: false,\n          sideView: false,\n          mode: {\n            mode: 'point'\n          }\n        },\n        minX: 0,\n        minY: 0,\n        minZ: 0,\n        maxX: 0,\n        maxY: 0,\n        maxZ: 0,\n        mouse: null,\n        raycaster: null,\n        activeNode: null\n      };\n    },\n    methods: {\n      quit() {\n        pywebview.api.quit()\n      },\n      async showCrossLines() {\n        this.line1Name = `${this.layerName}-${this.faultName}-L1`\n        this.line2Name = `${this.layerName}-${this.faultName}-L2`\n\n        let data1 = await this.loadFile(`./output/${this.line1Name}.txt`);\n        data1 = data1.replace(/\\s+/ig, \" \").trim().split(\" \");\n        let data2 = await this.loadFile(`./output/${this.line2Name}.txt`);\n        data2 = data2.replace(/\\s+/ig, \" \").trim().split(\" \");\n        if (!data1[0] || !data2[0]) {\n          alert('未生成交线！')\n        }\n        this.line1Data = []\n        this.line2Data = []\n        for (let i = 0; i < data1.length; i += 3) {\n          data1[i] = Number(data1[i]);\n          data1[i + 1] = Number(data1[i + 1]);\n          data1[i + 2] = -Number(data1[i + 2]);\n          if (data1[i] > this.maxX) {\n            this.maxX = data1[i]\n          }\n          if (data1[i + 1] > this.maxY) {\n            this.maxY = data1[i + 1]\n          }\n          if (data1[i + 2] > this.maxZ) {\n            this.maxZ = data1[i + 2]\n          }\n\n          if (data1[i] < this.minX) {\n            this.minX = data1[i]\n          }\n          if (data1[i + 1] < this.minY) {\n            this.minY = data1[i + 1]\n          }\n          if (data1[i + 2] < this.minZ) {\n            this.minZ = data1[i + 2]\n          }\n          let node = new THREE.Vector3(data1[i], data1[i + 1], data1[i + 2]);\n          this.line1Data.push(node);\n        }\n        for (let i = 0; i < data2.length; i += 3) {\n          data2[i] = Number(data2[i]);\n          data2[i + 1] = Number(data2[i + 1]);\n          data2[i + 2] = -Number(data2[i + 2]);\n          if (data2[i] > this.maxX) {\n            this.maxX = data2[i]\n          }\n          if (data2[i + 1] > this.maxY) {\n            this.maxY = data2[i + 1]\n          }\n          if (data2[i + 2] > this.maxZ) {\n            this.maxZ = data2[i + 2]\n          }\n\n          if (data2[i] < this.minX) {\n            this.minX = data2[i]\n          }\n          if (data2[i + 1] < this.minY) {\n            this.minY = data2[i + 1]\n          }\n          if (data2[i + 2] < this.minZ) {\n            this.minZ = data2[i + 2]\n          }\n          let node = new THREE.Vector3(data2[i], data2[i + 1], data2[i + 2]);\n          this.line2Data.push(node);\n        }\n        this.updateScene()\n      },\n      getCrossLines() {\n\n        pywebview.api.getCrossLines(this.layerFile, this.faultFile, this.layerName, this.faultName)\n      },\n      init() {\n        this.initThree();\n        this.initScene();\n        this.initCamera();\n        this.initControls();\n        this.initLight();\n        this.initGUI();\n        this.render();\n        this.addListener();\n      },\n      // 画布初始化\n      initThree() {\n        this.width = document.querySelector('#container').clientWidth;\n        this.height = window.innerHeight;\n        console.log(this.width, this.height, document.querySelector('#container'))\n        // 防锯齿\n        var devicePixelRatio = window.devicePixelRatio;\n        this.renderer = new THREE.WebGLRenderer({\n          antialias: true,\n        });\n        this.renderer.setPixelRatio(devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.setClearColor(0x000000, 1);\n        this.$refs.container.appendChild(this.renderer.domElement);\n\n        this.stats = new Stats();\n        this.stats.dom.style.position = 'relative'\n        this.$refs.state.appendChild(this.stats.dom);\n\n        this.mouse = new THREE.Vector2(1, 1);\n        this.raycaster = new THREE.Raycaster();\n      },\n      // 场景初始化\n      initScene() {\n        this.scene = new THREE.Scene();\n      },\n      // 相机控制器配置\n      initControls() {\n        this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.orbitControls.enableDamping = true;\n        this.orbitControls.dampingFactor = 1;\n        this.orbitControls.screenSpacePanning = false;\n        this.orbitControls.update();\n      },\n      // 相机初始化\n      initCamera() {\n        // 正交相机\n        this.camera = new THREE.OrthographicCamera(this.width / - 15, this.width / 15, this.height / 15, this.height / - 15, 1, 1000);\n\n        // 透视相机\n        this.camera = new THREE.PerspectiveCamera(\n          45,\n          this.width / this.height,\n          1,\n          10000\n        );\n        this.camera.position.set(200, 200, 200);\n        this.camera.up.x = 0;\n        this.camera.up.y = 0;\n        this.camera.up.z = 1;\n        this.camera.lookAt({\n          x: 0,\n          y: 0,\n          z: 0,\n        });\n\n      },\n      // 光线初始化\n      initLight() {\n        this.pointLight = new THREE.PointLight(0xffffff);\n        this.pointLight.position.set(4000, 2000, 3000);\n        this.ambient = new THREE.AmbientLight(0x444444);\n        this.scene.add(this.pointLight);\n        this.scene.add(this.ambient);\n      },\n      initObject() {\n        this.group = new THREE.Group();\n        if (this.layerData && this.options.layer) {\n          // this.drawNodes(this.layerData, this.options.layerColor, this.layerName);\n        }\n        if (this.faultData && this.options.fault) {\n          this.drawNodes(this.faultData, this.options.faultColor, this.faultName);\n          this.drawLine(this.faultData);\n\n\n\n        }\n        if (this.line1Data && this.options.crossLine1) {\n          this.drawNodes(this.line1Data, this.options.line1Color, this.line1Name);\n        }\n        if (this.line2Data && this.options.crossLine2) {\n          this.drawNodes(this.line2Data, this.options.line2Color, this.line2Name);\n        }\n\n\n\n\n\n\n        this.scene.add(this.group);\n        this.initAxis();\n      },\n      drawNodes(nodesData, color, name) {\n        let r = this.options.nodesRadius * 0.1;\n        if (name == this.line1Name || name == this.line2Name) {\n          r = r * 2\n        }\n\n        // var geometry = new THREE.PointsMaterial( { size: 1, vertexColors: true } ); \n        var geometry = new THREE.SphereGeometry(r, 10, 10);\n        var material = new THREE.MeshPhongMaterial();\n        var mesh = new THREE.InstancedMesh(geometry, material, nodesData.length);\n\n        mesh.name = name;\n        for (let i = 0; i < nodesData.length; i++) {\n          let matrix = new THREE.Matrix4();\n          let position = new THREE.Vector3();\n          let rotation = new THREE.Euler();\n          let quaternion = new THREE.Quaternion();\n          let scale = new THREE.Vector3();\n          position.x = this.normalize(nodesData[i].x, this.minX, this.maxX) * this.options.imgSize;\n          position.y = this.normalize(nodesData[i].y, this.minY, this.maxY) * this.options.imgSize;\n          position.z = this.normalize(nodesData[i].z, this.minZ, this.maxZ) * this.options.imgSize;\n          rotation.x = 0;\n          rotation.y = 0;\n          rotation.z = 0;\n\n          quaternion.setFromEuler(rotation);\n\n          scale.x = scale.y = scale.z = 1;\n\n          matrix.compose(position, quaternion, scale);\n          mesh.setMatrixAt(i, matrix);\n          mesh.setColorAt(i, new THREE.Color(color));\n        }\n        this.group.add(mesh);\n        if (name == this.layerName) {\n          this.layerMesh = mesh\n        }\n        else if (name == this.faultName) {\n          this.faultMesh = mesh\n        }\n        else if (name == this.line1Name) {\n          this.line1Mesh = mesh\n        }\n        else if (name == this.line2Name) {\n          this.line2Mesh = mesh\n        }\n\n      },\n      drawLine(nodes) {\n        var geometry = new THREE.BufferGeometry();\n        var vBuff = [];\n        var colors = [];\n\n        for (let i = 0; i < nodes.length; i++) {\n          vBuff.push(this.normalize(nodes[i].x, this.minX, this.maxX) * this.options.imgSize,\n            this.normalize(nodes[i].y, this.minY, this.maxY) * this.options.imgSize,\n            this.normalize(nodes[i].z, this.minZ, this.maxZ) * this.options.imgSize\n          );\n          colors.push(\n            1, 1, 0\n          )\n        }\n        var vertices = new Float32Array(vBuff);\n        var attribue = new THREE.BufferAttribute(vertices, 3);\n\n        var color = new Float32Array(colors);\n        geometry.attributes.color = new THREE.BufferAttribute(color, 3);\n        geometry.attributes.position = attribue;\n        geometry.computeVertexNormals();\n        // geometry.computeFaceNormals();\n\n        const material = new THREE.MeshLambertMaterial({\n          side: THREE.DoubleSide,\n          vertexColors: THREE.VertexColors,\n        });\n        const wireframe = new THREE.WireframeGeometry(geometry);\n\n        const line = new THREE.LineSegments(wireframe);\n        line.material.depthTest = false;\n        line.material.opacity = 0.25;\n        line.material.transparent = true;\n        const mesh = new THREE.Mesh(geometry, material);\n        let group = new THREE.Group();\n        group.name = 'edge'\n        if(this.options.mode.mode == 'wirefame') {\n          group.add(line);\n          this.group.add(line);\n        } else if(this.options.mode.mode == 'mesh') {\n          group.add(line);\n          this.group.add(mesh);\n        }\n\n      },\n      initGUI() {\n        this.gui = new GUI();\n        var folderGeometry = this.gui.addFolder('Geometry');\n        var _this = this;\n        folderGeometry.add(this.options, 'nodesRadius', 1, 10).onChange(this.updateScene);\n        folderGeometry.add(this.options, 'imgSize', 100, 500).onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'layerColor').onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'faultColor').onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'line1Color').onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'line2Color').onChange(this.updateScene);\n        folderGeometry.addColor(this.options, 'edgesColor').onChange(this.updateScene);\n\n        folderGeometry.add(this.options, 'background').onChange(this.onBgChange);\n\n        folderGeometry.add(this.options, 'isLightFollowCamera').onChange(function () {\n\n        });\n        folderGeometry.add(this.options, 'layer').onChange(this.updateScene);\n        folderGeometry.add(this.options, 'fault').onChange(this.updateScene);\n        folderGeometry.add(this.options, 'crossLine1').onChange(this.updateScene);\n        folderGeometry.add(this.options, 'crossLine2').onChange(this.updateScene);\n\n        var viewFolder = this.gui.addFolder('View');\n\n        viewFolder.add(this.options.view, 'lookView').options(['default', 'frontView', 'verticalView', 'sideView']).onChange(this.updateCamera);;\n        viewFolder.add(this.options.view, 'cameraType').options(['Perspective', 'Orthographic']).onChange(this.updateCamera);;\n\n        var modeFolder = this.gui.addFolder('Mode');\n\n        modeFolder.add(this.options.mode, 'mode').options(['default', 'wirefame', 'mesh', 'point']).onChange(this.updateScene);\n\n        modeFolder.open();\n        folderGeometry.open();\n        viewFolder.open();\n\n      },\n      updateCamera() {\n        if (this.options.view.cameraType == 'Perspective') {\n          this.camera = new THREE.PerspectiveCamera(\n            45,\n            this.width / this.height,\n            1,\n            10000\n          );\n          this.initControls()\n\n        }\n        else if (this.options.view.cameraType == 'Orthographic') {\n          this.camera = new THREE.OrthographicCamera(this.width / - 15, this.width / 15, this.height / 15, this.height / - 15, 1, 1000);\n          this.initControls()\n\n        }\n        if (this.options.view.lookView == 'frontView') {\n          this.camera.position.set(200, 0, 0)\n          this.camera.lookAt({\n            x: 0,\n            y: 0,\n            z: 0,\n          });\n          this.options.verticalView = false;\n          this.options.sideView = false;\n        }\n        else if (this.options.view.lookView == 'verticalView') {\n          this.camera.position.set(0, 0, 200)\n          this.camera.lookAt({\n            x: 0,\n            y: 0,\n            z: 0,\n          });\n          this.options.sideView = false;\n          this.options.frontView = false;\n\n        }\n        else if (this.options.view.lookView == 'sideView') {\n          this.camera.position.set(0, 200, 0)\n          this.camera.lookAt({\n            x: 0,\n            y: 0,\n            z: 0,\n          });\n          this.options.verticalView = false;\n          this.options.frontView = false;\n        }\n        else if (this.options.view.lookView == 'default') {\n          this.camera.position.set(200, 200, 200)\n          this.camera.lookAt({\n            x: 0,\n            y: 0,\n            z: 0,\n          });\n          this.options.verticalView = false;\n          this.options.frontView = false;\n        }\n        this.camera.up.x = 0;\n        this.camera.up.y = 0;\n        this.camera.up.z = 1;\n        this.orbitControls.update();\n\n      },\n      onBgChange(e) {\n        var bgcolor;\n        if (this.options.background) {\n          bgcolor = 0x000000;\n        } else {\n          bgcolor = 0xf0f0f0;\n        }\n        this.renderer.setClearColor(bgcolor, 1);\n      },\n      // 渲染器\n      render() {\n        this.renderer.clear();\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n        const intersection = this.raycaster.intersectObjects(this.scene.children, true);\n\n        if (intersection.length > 0 && intersection[0].object.geometry.type == \"SphereGeometry\") {\n          let description = this.$refs.description;\n          let descriptionText = this.$refs.d_text;\n          let color = new THREE.Color()\n          let startx = 0;\n          let starty = 0;\n          let startz = 0;\n          let data;\n          let mesh;\n          const instanceId = intersection[0].instanceId;\n\n          if (intersection[0].object.name == this.layerName) {\n            data = this.layerData;\n            mesh = this.layerMesh;\n          } else if (intersection[0].object.name == this.faultName) {\n            data = this.faultData;\n            mesh = this.faultMesh;\n          } else if (intersection[0].object.name == this.line1Name) {\n            data = this.line1Data;\n            mesh = this.line1Mesh;\n          } else if (intersection[0].object.name == this.line2Name) {\n            data = this.line2Data;\n            mesh = this.line2Mesh;\n          } else {\n            return\n          }\n\n          if (this.activeNode) {\n            this.activeNode.parent.setColorAt(this.activeNode.id, this.activeNode.color);\n          }\n          this.activeNode = {\n            id: instanceId,\n            color: new THREE.Color(),\n            parent: mesh\n          }\n          mesh.getColorAt(instanceId, this.activeNode.color);\n          console.log(this.activeNode)\n          startx = data[instanceId].x;\n          starty = data[instanceId].y;\n          startz = data[instanceId].z;\n          mesh.instanceColor.needsUpdate = true;\n          mesh.setColorAt(instanceId, new THREE.Color(0xffffff));\n          mesh.instanceColor.needsUpdate = true;\n\n          descriptionText.innerHTML = `[${intersection[0].object.name}], x: ${startx}, y: ${starty}, z: ${startz}`;\n\n\n        }\n\n\n        this.renderer.render(this.scene, this.camera);\n        this.lightFollowCamera();\n\n        this.stats.update();\n        requestAnimationFrame(this.render);\n      },\n      lightFollowCamera() {\n        if (this.options.isLightFollowCamera) {\n          this.pointLight.position.copy(this.camera.position);\n        } else {\n          this.pointLight.position.set(4000, 2000, 3000);\n        }\n      },\n      getSelectObj(mouse, raycaster, e) {\n        mouse.x = (e.clientX - document.querySelector('#container').offsetLeft) / (this.renderer.domElement.clientWidth) * 2 - 1;\n        mouse.y = -(e.clientY / this.renderer.domElement.clientHeight * 2) + 1;\n        raycaster.setFromCamera(mouse, this.camera);//以camera为z坐标，确定所点击物体的3D空间位置\n        let intersects = raycaster.intersectObjects(this.scene.children, true);//确定所点击位置上的物体数量集合\n        return intersects;//返回连线经过的物体集合\n      },\n      updateScene() {\n        if (this.group) {\n          let meshs = [];\n          this.group.traverse(function (obj) {\n            if (obj.type === 'Mesh') {\n              meshs.push(obj);\n            }\n          })\n          for (let i = 0; i < meshs.length; i++) {\n            let mesh = meshs[i];\n            meshs[i].geometry.dispose();\n            meshs[i].material.dispose();\n          }\n          this.scene.remove(this.group);\n        }\n\n        this.initObject();\n      },\n      // 坐标轴初始化\n      initAxis() {\n        //中心定位坐标轴\n        let axisHelper = new THREE.AxesHelper(this.options.imgSize);\n        this.group.add(axisHelper);\n      },\n      // 窗口大小变换事件\n      onWindowResize(e) {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n      },\n      onDocumentMouseMove(e) {\n        if (!this.group) return\n\n        this.mouse.x = (e.clientX - document.querySelector('#container').offsetLeft) / (this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = -(e.clientY / this.renderer.domElement.clientHeight * 2) + 1;\n\n\n      },\n      onBtnLoadData(e) {\n        this.layerFile = this.getObjectURL(document.querySelector('#layer_input').files[0]);\n        this.faultFile = this.getObjectURL(document.querySelector('#fault_input').files[0]);\n        this.layerName = document.querySelector('#layer_input').files[0].name.split(\".\")[0];\n        this.faultName = document.querySelector('#fault_input').files[0].name.split(\".\")[0];\n        this.layerData = []\n        this.faultData = []\n        const ldata = this.loadFile(this.layerFile).replace(/\\s+/ig, \" \").trim().split(\" \");\n        const fdata = this.loadFile(this.faultFile).replace(/\\s+/ig, \" \").trim().split(\" \");\n        let minX = 99999;\n        let minY = 99999;\n        let minZ = 99999;\n        let maxX = -99999;\n        let maxY = -99999;\n        let maxZ = -99999;\n        for (let i = 0; i < ldata.length; i += 3) {\n          ldata[i] = Number(ldata[i]);\n          ldata[i + 1] = Number(ldata[i + 1]);\n          ldata[i + 2] = Number(ldata[i + 2]);\n          if (ldata[i] > maxX) {\n            maxX = ldata[i]\n          }\n          if (ldata[i + 1] > maxY) {\n            maxY = ldata[i + 1]\n          }\n          if (ldata[i + 2] > maxZ) {\n            maxZ = ldata[i + 2]\n          }\n\n          if (ldata[i] < minX) {\n            minX = ldata[i]\n          }\n          if (ldata[i + 1] < minY) {\n            minY = ldata[i + 1]\n          }\n          if (ldata[i + 2] < minZ) {\n            minZ = ldata[i + 2]\n          }\n          let node = new THREE.Vector3(ldata[i], ldata[i + 1], ldata[i + 2]);\n          this.layerData.push(node);\n        }\n        for (let i = 0; i < fdata.length; i += 3) {\n          fdata[i] = Number(fdata[i]);\n          fdata[i + 1] = Number(fdata[i + 1]);\n          fdata[i + 2] = Number(fdata[i + 2]);\n          if (fdata[i] > maxX) {\n            maxX = fdata[i]\n          }\n          if (fdata[i + 1] > maxY) {\n            maxY = fdata[i + 1]\n          }\n          if (fdata[i + 2] > maxZ) {\n            maxZ = fdata[i + 2]\n          }\n\n          if (fdata[i] < minX) {\n            minX = fdata[i]\n          }\n          if (fdata[i + 1] < minY) {\n            minY = fdata[i + 1]\n          }\n          if (fdata[i + 2] < minZ) {\n            minZ = fdata[i + 2]\n          }\n          let node = new THREE.Vector3(fdata[i], fdata[i + 1], fdata[i + 2]);\n          this.faultData.push(node);\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.minZ = minZ;\n        this.maxX = maxX;\n        this.maxY = maxY;\n        this.maxZ = maxZ;\n\n        this.updateScene();\n\n      },\n      normalize(x, min, max) {\n        return (x - min) / (max - min)\n      },\n\n\n      loadFile(name) { // name为文件所在位置\n        let xhr = new XMLHttpRequest();\n        var okStatus = document.location.protocol === \"file:\" ? 0 : 200;\n        xhr.open('GET', name, false);\n        xhr.overrideMimeType(\"text/html;charset=utf-8\");\n        xhr.send(null);\n        return xhr.status === okStatus ? xhr.responseText : null;\n      },\n      getObjectURL(file) {\n        var url = null;\n        if (window.createObjcectURL != undefined) {\n          url = window.createOjcectURL(file);\n        } else if (window.URL != undefined) {\n          url = window.URL.createObjectURL(file);\n        } else if (window.webkitURL != undefined) {\n          url = window.webkitURL.createObjectURL(file);\n        }\n        return url;\n      },\n      addListener() {\n        window.addEventListener(\"resize\", this.onWindowResize, false);\n        document.addEventListener('mousemove', this.onDocumentMouseMove, false);\n\n\n      },\n    },\n    mounted() {\n      this.init();\n    },\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  .Intersection {\n    overflow: hidden;\n  }\n\n  #aside {\n    float: left;\n    width: 20%;\n  }\n\n  #container {\n    float: left;\n\n  }\n\n  #state {\n    position: absolute;\n    left: 20%;\n  }\n\n  #description {\n    margin: 10px;\n  }\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/Intersection.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"Intersection\"},[_c('div',{attrs:{\"id\":\"aside\"}},[_c('fieldset',{staticStyle:{\"width\":\"350px\"}},[_c('legend',[_vm._v(\"数据导入\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('button',{staticStyle:{\"float\":\"right\"},on:{\"click\":_vm.onBtnLoadData}},[_vm._v(\"确定\")])]),_vm._v(\" \"),_c('fieldset',{staticStyle:{\"width\":\"350px\"}},[_c('legend',[_vm._v(\"交线估计\")]),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.getCrossLines}},[_vm._v(\"交线求取\")]),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.showCrossLines}},[_vm._v(\"交线显示\")])]),_vm._v(\" \"),_c('div',{ref:\"description\",attrs:{\"id\":\"description\"}},[_vm._v(\"\\n      坐标：(\"),_c('span',{ref:\"d_text\"},[_vm._v(\"x: 0, y: 0, z: 0\")]),_vm._v(\")\\n    \")])]),_vm._v(\" \"),_c('div',{ref:\"state\",attrs:{\"id\":\"state\"}}),_vm._v(\" \"),_c('div',{ref:\"container\",staticStyle:{\"width\":\"80%\",\"height\":\"100%\"},attrs:{\"id\":\"container\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticStyle:{\"display\":\"block\"},attrs:{\"for\":\"layer_input\"}},[_c('span',[_vm._v(\"层位数据：\")]),_vm._v(\" \"),_c('input',{attrs:{\"id\":\"layer_input\",\"type\":\"file\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticStyle:{\"display\":\"block\"},attrs:{\"for\":\"fault_input\"}},[_c('span',[_vm._v(\"断层数据：\")]),_vm._v(\" \"),_c('input',{attrs:{\"id\":\"fault_input\",\"type\":\"file\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',{staticStyle:{\"display\":\"inline\"}},[_vm._v(\"状态：\"),_c('span',{attrs:{\"id\":\"stage\"}},[_vm._v(\"无\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5f1f6faf\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Intersection.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5f1f6faf\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Intersection.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Intersection.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Intersection.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5f1f6faf\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Intersection.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5f1f6faf\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Intersection.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"Layer\">\n    <div ref=\"container\"></div>\n  </div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\nimport * as layerData from \"./layerData/layerData.json\"\nimport { Lut } from 'three/examples/jsm/math/Lut.js';\nexport default {\n  name: \"Layer\",\n  data() {\n    return {\n      layerData: [layerData],\n      scene: null,\n      group: null,\n      camera: null,\n      pointLight: null,\n      ambient: null,\n      renderer: null,\n      controls: null,\n      orbitControls: null,\n      stats: null,\n      width: 0,\n      height: 0,\n\n      options: {\n        imgSize: 100,\n      },\n    };\n  },\n  methods: {\n    init() {\n      this.group = new THREE.Group();\n      this.initThree();\n      this.initScene();\n      this.initCamera();\n      this.initControls();\n      this.initLight();\n      this.initObject();\n      this.render();\n      this.addListener();\n    },\n    // 画布初始化\n    initThree() {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      // 防锯齿\n      var devicePixelRatio = window.devicePixelRatio;\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n      });\n      this.renderer.setPixelRatio(devicePixelRatio);\n      this.renderer.setSize(this.width, this.height);\n      this.renderer.setClearColor(0x000000, 1);\n      this.$refs.container.appendChild(this.renderer.domElement);\n\n      this.stats = new Stats();\n      this.$refs.container.appendChild(this.stats.dom);\n    },\n    // 场景初始化\n    initScene() {\n      this.scene = new THREE.Scene();\n    },\n    // 相机控制器配置\n    initControls() {\n      this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.orbitControls.enableDamping = true;\n      this.orbitControls.dampingFactor = 1;\n      this.orbitControls.screenSpacePanning = false;\n      this.orbitControls.maxPolarAngle = Math.PI / 2;\n      this.orbitControls.update();\n    },\n    // 相机初始化\n    initCamera() {\n      // 正交相机\n      // this.camera = new OrthographicCamera(this.width / - 2, this.width / 2, this.height / 2,   this.height / - 2, 0, 10000);\n\n      // 透视相机\n      this.camera = new THREE.PerspectiveCamera(\n        45,\n        this.width / this.height,\n        1,\n        10000\n      );\n      \n      this.camera.position.set(300, 300, 300);\n      this.camera.up.x = 0;\n      this.camera.up.y = 1;\n      this.camera.up.z = 0;\n      this.camera.lookAt({\n        x: 0,\n        y: 0,\n        z: 0,\n      });\n\n    },\n    // 光线初始化\n    initLight() {\n      this.pointLight = new THREE.PointLight(0xffffff);\n      this.pointLight.position.set(4000, 2000, 3000);\n      this.ambient = new THREE.AmbientLight(0x444444);\n      this.scene.add(this.pointLight);\n      this.scene.add(this.ambient);\n    },\n    initObject() {\n      for(let j = 0; j <  this.layerData.length; j ++) {\n        var faces = this.layerData[j].faces;\n        var vBuff = []\n        var gridPosition = this.layerData[j].grid.positions;\n        var crossPosition = this.layerData[j].crossPoint.positions;\n        var colors = [];\n\n        for(let i = 0; i < faces.length; i ++){\n          var face = faces[i]\n          for(let j = 0; j < 3;j ++) {\n            if(face[j] < 100000) {\n              vBuff.push(gridPosition[face[j]][0] * this.options.imgSize)\n              vBuff.push(gridPosition[face[j]][2] * this.options.imgSize)\n              vBuff.push(gridPosition[face[j]][1] * this.options.imgSize)\n              colors.push(\n                1, 1 , gridPosition[face[j]][2]\n              )\n            } else {\n              vBuff.push(crossPosition[face[j] - 100000][0] * this.options.imgSize)\n              vBuff.push(crossPosition[face[j] - 100000][2] * this.options.imgSize)\n              vBuff.push(crossPosition[face[j] - 100000][1] * this.options.imgSize)\n              colors.push(\n                1, 1, crossPosition[face[j] - 100000][2],  \n              )\n            }\n          }\n        }\n\n        var geometry = new THREE.BufferGeometry();\n        var vertices = new Float32Array(vBuff);\n        var attribue = new THREE.BufferAttribute(vertices, 3);\n        var color = new Float32Array(colors);\n        geometry.attributes.color = new THREE.BufferAttribute(color, 3);\n        geometry.attributes.position = attribue;\n        geometry.computeVertexNormals();\n        geometry.computeFaceNormals();\n\n        var material = new THREE.MeshLambertMaterial({\n          side: THREE.DoubleSide,\n          vertexColors: THREE.VertexColors,\n        });\n        var mesh = new THREE.Mesh(geometry, material); \n        this.group.add(mesh);\n\n\n        \n        var lut = new Lut();\n        var params = {\n           colorMap: 'rainbow',\n        };\n\n        lut.setColorMap( params.colorMap );\n\n        lut.setMax(1);\n        lut.setMin(0);\n        geometry = mesh.geometry;\n        colors = geometry.attributes.color;\n\n        for ( var i = 0; i < color.length/3; i ++ ) {\n          var colorValue = color[i*3 + 2];\n          var newcolor = lut.getColor(colorValue);\n          colors.setXYZ( i, newcolor.r, newcolor.g, newcolor.b );\n        }\n      }\n      this.scene.add(this.group);\n      this.initAxis();\n    },\n    // 渲染器\n    render() {\n      this.renderer.clear();\n      this.renderer.render(this.scene, this.camera);\n      this.stats.update();\n      requestAnimationFrame(this.render);\n    },\n    // 坐标轴初始化\n    initAxis() {\n      //中心定位坐标轴\n      let axisHelper = new THREE.AxesHelper(this.options.imgSize);\n      this.group.add(axisHelper);\n    },\n    // 窗口大小变换事件\n    onWindowResize(e) {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    addListener() {\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    },\n  },\n  mounted() {\n    this.init();\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Layer.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"Layer\"},[_c('div',{ref:\"container\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1876963c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Layer.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1876963c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Layer.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Layer.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Layer.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1876963c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Layer.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1876963c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Layer.vue\n// module id = null\n// module chunks = ","import Vue from 'vue'\nimport Router from 'vue-router'\nimport Tree from '@/components/Tree'\nimport Mountain from '@/components/Mountain'\nimport Seismic from '@/components/Seismic'\nimport Intersection from '@/components/Intersection'\nimport Layer from '@/components/Layer'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/Mountain',\n      name: 'Mountain',\n      component: Mountain\n    },\n    {\n      path: '/Tree',\n      name: 'Tree',\n      component: Tree\n    },\n    {\n      path: '/Seismic',\n      name: 'Seismic',\n      component: Seismic\n    },\n    {\n      path: '/Layer',\n      name: 'Layer',\n      component: Layer\n    },\n    {\n      path: '/',\n      name: 'Intersection',\n      component: Intersection\n    },\n  ]\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/router/index.js","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>'\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}